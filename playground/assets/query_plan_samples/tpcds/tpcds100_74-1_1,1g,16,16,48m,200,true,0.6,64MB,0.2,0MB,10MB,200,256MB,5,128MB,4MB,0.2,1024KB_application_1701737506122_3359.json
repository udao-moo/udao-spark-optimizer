{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 587931290,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#897, ws_ship_date_sk#898, ws_item_sk#899, ws_bill_customer_sk#900, ws_bill_cdemo_sk#901, ws_bill_hdemo_sk#902, ws_bill_addr_sk#903, ws_ship_customer_sk#904, ws_ship_cdemo_sk#905, ws_ship_hdemo_sk#906, ws_ship_addr_sk#907, ws_web_page_sk#908, ws_web_site_sk#909, ws_ship_mode_sk#910, ws_warehouse_sk#911, ws_promo_sk#912, ws_order_number#913L, ws_quantity#914, ws_wholesale_cost#915, ws_list_price#916, ws_sales_price#917, ws_ext_discount_amt#918, ws_ext_sales_price#919, ws_ext_wholesale_cost#920, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "34" : {
          "sign" : -10408602,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 154000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#655, c_customer_id#656, c_first_name#663, c_last_name#664] "
        },
        "12" : {
          "sign" : 2139874957,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, d_year#59] "
        },
        "51" : {
          "sign" : -215056942,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#879, c_customer_id#880, c_current_cdemo_sk#881, c_current_hdemo_sk#882, c_current_addr_sk#883, c_first_shipto_date_sk#884, c_first_sales_date_sk#885, c_salutation#886, c_first_name#887, c_last_name#888, c_preferred_cust_flag#889, c_birth_day#890, c_birth_month#891, c_birth_year#892, c_birth_country#893, c_login#894, c_email_address#895, c_last_review_date#896], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -702998801,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12101933844,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#4) AND (year_total#4 > 0.00)) "
        },
        "19" : {
          "sign" : 52891486,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#53, d_date_id#54, d_date#55, d_month_seq#56, d_week_seq#57, d_quarter_seq#58, d_year#59, d_dow#60, d_moy#61, d_dom#62, d_qoy#63, d_fy_year#64, d_fy_quarter_seq#65, d_fy_week_seq#66, d_day_name#67, d_quarter_name#68, d_holiday#69, d_weekend#70, d_following_holiday#71, d_first_dom#72, d_last_dom#73, d_same_day_ly#74, d_same_day_lq#75, d_current_day#76, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 289834124,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 22278560031,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#656, c_first_name#663, c_last_name#664, d_year#702], [c_customer_id#656 AS customer_id#169, c_first_name#663 AS customer_first_name#170, c_last_name#664 AS customer_last_name#171, max(ss_net_paid#692) AS year_total#173] "
        },
        "62" : {
          "sign" : 1972281472,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1086, d_date_id#1087, d_date#1088, d_month_seq#1089, d_week_seq#1090, d_quarter_seq#1091, d_year#1092, d_dow#1093, d_moy#1094, d_dom#1095, d_qoy#1096, d_fy_year#1097, d_fy_quarter_seq#1098, d_fy_week_seq#1099, d_day_name#1100, d_quarter_name#1101, d_holiday#1102, d_weekend#1103, d_following_holiday#1104, d_first_dom#1105, d_last_dom#1106, d_same_day_ly#1107, d_same_day_lq#1108, d_current_day#1109, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 1211874929,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7967477019321981,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#0 = customer_id#181) AND (CASE WHEN (year_total#10 > 0.00) THEN (year_total#185 / year_total#10) END > CASE WHEN (year_total#4 > 0.00) THEN (year_total#173 / year_total#4) END)) "
        },
        "40" : {
          "sign" : -1455292247,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6727803768,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#879 = ws_bill_customer_sk#900) "
        },
        "15" : {
          "sign" : 680321603,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#1138 [ss_sold_date_sk#52]) "
        },
        "11" : {
          "sign" : -128111929,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 25579087443,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
        },
        "9" : {
          "sign" : 1111431821,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 12101933844,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#0, max(ss_net_paid#49) AS year_total#4] "
        },
        "44" : {
          "sign" : 1616555108,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#900) AND isnotnull(ws_sold_date_sk#930)) AND dynamicpruning#1140 [ws_sold_date_sk#930]) "
        },
        "33" : {
          "sign" : 1755371002,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#696, d_date_id#697, d_date#698, d_month_seq#699, d_week_seq#700, d_quarter_seq#701, d_year#702, d_dow#703, d_moy#704, d_dom#705, d_qoy#706, d_fy_year#707, d_fy_quarter_seq#708, d_fy_week_seq#709, d_day_name#710, d_quarter_name#711, d_holiday#712, d_weekend#713, d_following_holiday#714, d_first_dom#715, d_last_dom#716, d_same_day_ly#717, d_same_day_lq#718, d_current_day#719, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 140424530,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#12, c_customer_id#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16, c_first_shipto_date_sk#17, c_first_sales_date_sk#18, c_salutation#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_day#23, c_birth_month#24, c_birth_year#25, c_birth_country#26, c_login#27, c_email_address#28, c_last_review_date#29], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "56" : {
          "sign" : 1212022231,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#1085 = d_date_sk#1086) "
        },
        "55" : {
          "sign" : 2116981952,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1667894520,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1055, ws_net_paid#1080, d_year#1092] "
        },
        "26" : {
          "sign" : 1831399094,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#675, ss_net_paid#692, d_year#702] "
        },
        "50" : {
          "sign" : 1848627263,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#879) AND isnotnull(c_customer_id#880)) "
        },
        "37" : {
          "sign" : 1264275208,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#10) AND (year_total#10 > 0.00)) "
        },
        "61" : {
          "sign" : -1515769410,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1092) AND ((d_year#1092 = 2002) AND d_year#1092 IN (2001,2002))) AND isnotnull(d_date_sk#1086)) "
        },
        "13" : {
          "sign" : -1784422808,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#52 = d_date_sk#53) "
        },
        "46" : {
          "sign" : 730571553,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#931, d_year#937] "
        },
        "24" : {
          "sign" : 1385196501,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 23378735835,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#656, c_first_name#663, c_last_name#664, ss_net_paid#692, d_year#702] "
        },
        "35" : {
          "sign" : 1978901492,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#655) AND isnotnull(c_customer_id#656)) "
        },
        "16" : {
          "sign" : 507063040,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38L, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 46974734,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 171019087530250,
          "rowCount" : 1368152700242,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_id#0, year_total#4, customer_id#169, customer_first_name#170, customer_last_name#171, year_total#173, year_total#10] "
        },
        "10" : {
          "sign" : -1428839386,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 23378735835,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
        },
        "59" : {
          "sign" : -1740815758,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#1052, ws_ship_date_sk#1053, ws_item_sk#1054, ws_bill_customer_sk#1055, ws_bill_cdemo_sk#1056, ws_bill_hdemo_sk#1057, ws_bill_addr_sk#1058, ws_ship_customer_sk#1059, ws_ship_cdemo_sk#1060, ws_ship_hdemo_sk#1061, ws_ship_addr_sk#1062, ws_web_page_sk#1063, ws_web_site_sk#1064, ws_ship_mode_sk#1065, ws_warehouse_sk#1066, ws_promo_sk#1067, ws_order_number#1068L, ws_quantity#1069, ws_wholesale_cost#1070, ws_list_price#1071, ws_sales_price#1072, ws_ext_discount_amt#1073, ws_ext_sales_price#1074, ws_ext_wholesale_cost#1075, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "48" : {
          "sign" : -413645386,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#931, d_date_id#932, d_date#933, d_month_seq#934, d_week_seq#935, d_quarter_seq#936, d_year#937, d_dow#938, d_moy#939, d_dom#940, d_qoy#941, d_fy_year#942, d_fy_quarter_seq#943, d_fy_week_seq#944, d_day_name#945, d_quarter_name#946, d_holiday#947, d_weekend#948, d_following_holiday#949, d_first_dom#950, d_last_dom#951, d_same_day_ly#952, d_same_day_lq#953, d_current_day#954, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : -1158006206,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13)) "
        },
        "54" : {
          "sign" : -1105161955,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6727803768,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1034 = ws_bill_customer_sk#1055) "
        },
        "43" : {
          "sign" : 769731131,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727174424,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#900, ws_net_paid#925, ws_sold_date_sk#930] "
        },
        "65" : {
          "sign" : -1020525740,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#1034, c_customer_id#1035, c_current_cdemo_sk#1036, c_current_hdemo_sk#1037, c_current_addr_sk#1038, c_first_shipto_date_sk#1039, c_first_sales_date_sk#1040, c_salutation#1041, c_first_name#1042, c_last_name#1043, c_preferred_cust_flag#1044, c_birth_day#1045, c_birth_month#1046, c_birth_year#1047, c_birth_country#1048, c_login#1049, c_email_address#1050, c_last_review_date#1051], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "57" : {
          "sign" : -2110992752,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727174424,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1055, ws_net_paid#1080, ws_sold_date_sk#1085] "
        },
        "32" : {
          "sign" : 1187730655,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#702) AND ((d_year#702 = 2002) AND d_year#702 IN (2001,2002))) AND isnotnull(d_date_sk#696)) "
        },
        "49" : {
          "sign" : 696733362,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 154000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#879, c_customer_id#880, c_first_name#887, c_last_name#888] "
        },
        "6" : {
          "sign" : 1974154455,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 209327363137026,
          "rowCount" : 1368152700242,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (customer_id#0 = customer_id#6) "
        },
        "36" : {
          "sign" : 766957084,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#655, c_customer_id#656, c_current_cdemo_sk#657, c_current_hdemo_sk#658, c_current_addr_sk#659, c_first_shipto_date_sk#660, c_first_sales_date_sk#661, c_salutation#662, c_first_name#663, c_last_name#664, c_preferred_cust_flag#665, c_birth_day#666, c_birth_month#667, c_birth_year#668, c_birth_country#669, c_login#670, c_email_address#671, c_last_review_date#672], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 1248169686,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 3612582747891333,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -52033066,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6149067960,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#880, c_first_name#887, c_last_name#888, ws_net_paid#925, d_year#937] "
        },
        "17" : {
          "sign" : 1101785547,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#53, d_year#59] "
        },
        "25" : {
          "sign" : -1490082858,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 25579087443,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#655 = ss_customer_sk#675) "
        },
        "60" : {
          "sign" : 1954391718,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#1086, d_year#1092] "
        },
        "14" : {
          "sign" : -242302240,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6304057272,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52] "
        },
        "47" : {
          "sign" : -445778908,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#937) AND ((d_year#937 = 2001) AND d_year#937 IN (2001,2002))) AND isnotnull(d_date_sk#931)) "
        },
        "31" : {
          "sign" : 1918429942,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#696, d_year#702] "
        },
        "58" : {
          "sign" : 1904290068,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#1055) AND isnotnull(ws_sold_date_sk#1085)) AND dynamicpruning#1141 [ws_sold_date_sk#1085]) "
        },
        "64" : {
          "sign" : 607525954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#1034) AND isnotnull(c_customer_id#1035)) "
        },
        "53" : {
          "sign" : 548285197,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6149067960,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#1035, c_first_name#1042, c_last_name#1043, ws_net_paid#1080, d_year#1092] "
        },
        "42" : {
          "sign" : 695747481,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#930 = d_date_sk#931) "
        },
        "0" : {
          "sign" : -1788686749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 6800,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 800936878,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 154000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] "
        },
        "27" : {
          "sign" : -1049921915,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#695 = d_date_sk#696) "
        },
        "2" : {
          "sign" : 2122359161,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 3612582747891333,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [customer_first_name#170 ASC NULLS FIRST, customer_id#169 ASC NULLS FIRST, customer_last_name#171 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -1484298448,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#880, c_first_name#887, c_last_name#888, d_year#937], [c_customer_id#880 AS customer_id#6, max(ws_net_paid#925) AS year_total#10] "
        },
        "18" : {
          "sign" : -1793290454,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53)) "
        },
        "30" : {
          "sign" : 353399735,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#673, ss_item_sk#674, ss_customer_sk#675, ss_cdemo_sk#676, ss_hdemo_sk#677, ss_addr_sk#678, ss_store_sk#679, ss_promo_sk#680, ss_ticket_number#681L, ss_quantity#682, ss_wholesale_cost#683, ss_list_price#684, ss_sales_price#685, ss_ext_discount_amt#686, ss_ext_sales_price#687, ss_ext_wholesale_cost#688, ss_ext_list_price#689, ss_ext_tax#690, ss_coupon_amt#691, ss_net_paid#692, ss_net_paid_inc_tax#693, ss_net_profit#694, ss_sold_date_sk#695], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 1129619774,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4425476736447,
          "rowCount" : 37824587491,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (customer_id#169 = customer_id#0) "
        },
        "29" : {
          "sign" : 701492881,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#675) AND isnotnull(ss_sold_date_sk#695)) AND dynamicpruning#1139 [ss_sold_date_sk#695]) "
        },
        "41" : {
          "sign" : -78798390,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1667894520,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#900, ws_net_paid#925, d_year#937] "
        },
        "63" : {
          "sign" : -1672106318,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 154000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#1034, c_customer_id#1035, c_first_name#1042, c_last_name#1043] "
        },
        "3" : {
          "sign" : 309161664,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3612582747891333,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_id#169, customer_first_name#170, customer_last_name#171] "
        },
        "52" : {
          "sign" : -2025323370,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1035, c_first_name#1042, c_last_name#1043, d_year#1092], [c_customer_id#1035 AS customer_id#181, max(ws_net_paid#1080) AS year_total#185] "
        },
        "28" : {
          "sign" : -243186126,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6304057272,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#675, ss_net_paid#692, ss_sold_date_sk#695] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Filter",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Join",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Aggregate",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "LogicalRelation",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "LogicalRelation",
        "toId" : 47,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Filter",
        "toId" : 46,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 44,
        "fromName" : "Filter",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Join",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Join",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "LogicalRelation",
        "toId" : 58,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 62,
        "fromName" : "LogicalRelation",
        "toId" : 61,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "Filter",
        "toId" : 60,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Project",
        "toId" : 58,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 58,
        "fromName" : "Filter",
        "toId" : 57,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Join",
        "toId" : 55,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "Project",
        "toId" : 54,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 65,
        "fromName" : "LogicalRelation",
        "toId" : 64,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "Filter",
        "toId" : 63,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "Project",
        "toId" : 54,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Join",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 52,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#170 ASC NULLS FIRST, customer_id#169 ASC NULLS FIRST, customer_last_name#171 ASC NULLS FIRST], true\n      +- Project [customer_id#169, customer_first_name#170, customer_last_name#171]\n         +- Join Inner, ((customer_id#0 = customer_id#181) AND (CASE WHEN (year_total#10 > 0.00) THEN (year_total#185 / year_total#10) END > CASE WHEN (year_total#4 > 0.00) THEN (year_total#173 / year_total#4) END))\n            :- Project [customer_id#0, year_total#4, customer_id#169, customer_first_name#170, customer_last_name#171, year_total#173, year_total#10]\n            :  +- Join Inner, (customer_id#0 = customer_id#6)\n            :     :- Join Inner, (customer_id#169 = customer_id#0)\n            :     :  :- Filter (isnotnull(year_total#4) AND (year_total#4 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#0, max(ss_net_paid#49) AS year_total#4]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n            :     :  :           :     :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#1138 [ss_sold_date_sk#52])\n            :     :  :           :     :     :  +- Project [d_date_sk#53, d_year#59]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n            :     :  :           :     +- Project [d_date_sk#53, d_year#59]\n            :     :  :           :        +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n            :     :  :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n            :     :  :           +- Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21]\n            :     :  :              +- Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n            :     :  :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_current_cdemo_sk#14,c_current_hdemo_sk#15,c_current_addr_sk#16,c_first_shipto_date_sk#17,c_first_sales_date_sk#18,c_salutation#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet\n            :     :  +- Aggregate [c_customer_id#656, c_first_name#663, c_last_name#664, d_year#702], [c_customer_id#656 AS customer_id#169, c_first_name#663 AS customer_first_name#170, c_last_name#664 AS customer_last_name#171, max(ss_net_paid#692) AS year_total#173]\n            :     :     +- Project [c_customer_id#656, c_first_name#663, c_last_name#664, ss_net_paid#692, d_year#702]\n            :     :        +- Join Inner, (c_customer_sk#655 = ss_customer_sk#675)\n            :     :           :- Project [ss_customer_sk#675, ss_net_paid#692, d_year#702]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#695 = d_date_sk#696)\n            :     :           :     :- Project [ss_customer_sk#675, ss_net_paid#692, ss_sold_date_sk#695]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#675) AND isnotnull(ss_sold_date_sk#695)) AND dynamicpruning#1139 [ss_sold_date_sk#695])\n            :     :           :     :     :  +- Project [d_date_sk#696, d_year#702]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#702) AND ((d_year#702 = 2002) AND d_year#702 IN (2001,2002))) AND isnotnull(d_date_sk#696))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#696,d_date_id#697,d_date#698,d_month_seq#699,d_week_seq#700,d_quarter_seq#701,d_year#702,d_dow#703,d_moy#704,d_dom#705,d_qoy#706,d_fy_year#707,d_fy_quarter_seq#708,d_fy_week_seq#709,d_day_name#710,d_quarter_name#711,d_holiday#712,d_weekend#713,d_following_holiday#714,d_first_dom#715,d_last_dom#716,d_same_day_ly#717,d_same_day_lq#718,d_current_day#719,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#673,ss_item_sk#674,ss_customer_sk#675,ss_cdemo_sk#676,ss_hdemo_sk#677,ss_addr_sk#678,ss_store_sk#679,ss_promo_sk#680,ss_ticket_number#681L,ss_quantity#682,ss_wholesale_cost#683,ss_list_price#684,ss_sales_price#685,ss_ext_discount_amt#686,ss_ext_sales_price#687,ss_ext_wholesale_cost#688,ss_ext_list_price#689,ss_ext_tax#690,ss_coupon_amt#691,ss_net_paid#692,ss_net_paid_inc_tax#693,ss_net_profit#694,ss_sold_date_sk#695] parquet\n            :     :           :     +- Project [d_date_sk#696, d_year#702]\n            :     :           :        +- Filter ((isnotnull(d_year#702) AND ((d_year#702 = 2002) AND d_year#702 IN (2001,2002))) AND isnotnull(d_date_sk#696))\n            :     :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#696,d_date_id#697,d_date#698,d_month_seq#699,d_week_seq#700,d_quarter_seq#701,d_year#702,d_dow#703,d_moy#704,d_dom#705,d_qoy#706,d_fy_year#707,d_fy_quarter_seq#708,d_fy_week_seq#709,d_day_name#710,d_quarter_name#711,d_holiday#712,d_weekend#713,d_following_holiday#714,d_first_dom#715,d_last_dom#716,d_same_day_ly#717,d_same_day_lq#718,d_current_day#719,... 4 more fields] parquet\n            :     :           +- Project [c_customer_sk#655, c_customer_id#656, c_first_name#663, c_last_name#664]\n            :     :              +- Filter (isnotnull(c_customer_sk#655) AND isnotnull(c_customer_id#656))\n            :     :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#655,c_customer_id#656,c_current_cdemo_sk#657,c_current_hdemo_sk#658,c_current_addr_sk#659,c_first_shipto_date_sk#660,c_first_sales_date_sk#661,c_salutation#662,c_first_name#663,c_last_name#664,c_preferred_cust_flag#665,c_birth_day#666,c_birth_month#667,c_birth_year#668,c_birth_country#669,c_login#670,c_email_address#671,c_last_review_date#672] parquet\n            :     +- Filter (isnotnull(year_total#10) AND (year_total#10 > 0.00))\n            :        +- Aggregate [c_customer_id#880, c_first_name#887, c_last_name#888, d_year#937], [c_customer_id#880 AS customer_id#6, max(ws_net_paid#925) AS year_total#10]\n            :           +- Project [c_customer_id#880, c_first_name#887, c_last_name#888, ws_net_paid#925, d_year#937]\n            :              +- Join Inner, (c_customer_sk#879 = ws_bill_customer_sk#900)\n            :                 :- Project [ws_bill_customer_sk#900, ws_net_paid#925, d_year#937]\n            :                 :  +- Join Inner, (ws_sold_date_sk#930 = d_date_sk#931)\n            :                 :     :- Project [ws_bill_customer_sk#900, ws_net_paid#925, ws_sold_date_sk#930]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#900) AND isnotnull(ws_sold_date_sk#930)) AND dynamicpruning#1140 [ws_sold_date_sk#930])\n            :                 :     :     :  +- Project [d_date_sk#931, d_year#937]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#937) AND ((d_year#937 = 2001) AND d_year#937 IN (2001,2002))) AND isnotnull(d_date_sk#931))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#931,d_date_id#932,d_date#933,d_month_seq#934,d_week_seq#935,d_quarter_seq#936,d_year#937,d_dow#938,d_moy#939,d_dom#940,d_qoy#941,d_fy_year#942,d_fy_quarter_seq#943,d_fy_week_seq#944,d_day_name#945,d_quarter_name#946,d_holiday#947,d_weekend#948,d_following_holiday#949,d_first_dom#950,d_last_dom#951,d_same_day_ly#952,d_same_day_lq#953,d_current_day#954,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#897,ws_ship_date_sk#898,ws_item_sk#899,ws_bill_customer_sk#900,ws_bill_cdemo_sk#901,ws_bill_hdemo_sk#902,ws_bill_addr_sk#903,ws_ship_customer_sk#904,ws_ship_cdemo_sk#905,ws_ship_hdemo_sk#906,ws_ship_addr_sk#907,ws_web_page_sk#908,ws_web_site_sk#909,ws_ship_mode_sk#910,ws_warehouse_sk#911,ws_promo_sk#912,ws_order_number#913L,ws_quantity#914,ws_wholesale_cost#915,ws_list_price#916,ws_sales_price#917,ws_ext_discount_amt#918,ws_ext_sales_price#919,ws_ext_wholesale_cost#920,... 10 more fields] parquet\n            :                 :     +- Project [d_date_sk#931, d_year#937]\n            :                 :        +- Filter ((isnotnull(d_year#937) AND ((d_year#937 = 2001) AND d_year#937 IN (2001,2002))) AND isnotnull(d_date_sk#931))\n            :                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#931,d_date_id#932,d_date#933,d_month_seq#934,d_week_seq#935,d_quarter_seq#936,d_year#937,d_dow#938,d_moy#939,d_dom#940,d_qoy#941,d_fy_year#942,d_fy_quarter_seq#943,d_fy_week_seq#944,d_day_name#945,d_quarter_name#946,d_holiday#947,d_weekend#948,d_following_holiday#949,d_first_dom#950,d_last_dom#951,d_same_day_ly#952,d_same_day_lq#953,d_current_day#954,... 4 more fields] parquet\n            :                 +- Project [c_customer_sk#879, c_customer_id#880, c_first_name#887, c_last_name#888]\n            :                    +- Filter (isnotnull(c_customer_sk#879) AND isnotnull(c_customer_id#880))\n            :                       +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#879,c_customer_id#880,c_current_cdemo_sk#881,c_current_hdemo_sk#882,c_current_addr_sk#883,c_first_shipto_date_sk#884,c_first_sales_date_sk#885,c_salutation#886,c_first_name#887,c_last_name#888,c_preferred_cust_flag#889,c_birth_day#890,c_birth_month#891,c_birth_year#892,c_birth_country#893,c_login#894,c_email_address#895,c_last_review_date#896] parquet\n            +- Aggregate [c_customer_id#1035, c_first_name#1042, c_last_name#1043, d_year#1092], [c_customer_id#1035 AS customer_id#181, max(ws_net_paid#1080) AS year_total#185]\n               +- Project [c_customer_id#1035, c_first_name#1042, c_last_name#1043, ws_net_paid#1080, d_year#1092]\n                  +- Join Inner, (c_customer_sk#1034 = ws_bill_customer_sk#1055)\n                     :- Project [ws_bill_customer_sk#1055, ws_net_paid#1080, d_year#1092]\n                     :  +- Join Inner, (ws_sold_date_sk#1085 = d_date_sk#1086)\n                     :     :- Project [ws_bill_customer_sk#1055, ws_net_paid#1080, ws_sold_date_sk#1085]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1055) AND isnotnull(ws_sold_date_sk#1085)) AND dynamicpruning#1141 [ws_sold_date_sk#1085])\n                     :     :     :  +- Project [d_date_sk#1086, d_year#1092]\n                     :     :     :     +- Filter ((isnotnull(d_year#1092) AND ((d_year#1092 = 2002) AND d_year#1092 IN (2001,2002))) AND isnotnull(d_date_sk#1086))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1086,d_date_id#1087,d_date#1088,d_month_seq#1089,d_week_seq#1090,d_quarter_seq#1091,d_year#1092,d_dow#1093,d_moy#1094,d_dom#1095,d_qoy#1096,d_fy_year#1097,d_fy_quarter_seq#1098,d_fy_week_seq#1099,d_day_name#1100,d_quarter_name#1101,d_holiday#1102,d_weekend#1103,d_following_holiday#1104,d_first_dom#1105,d_last_dom#1106,d_same_day_ly#1107,d_same_day_lq#1108,d_current_day#1109,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1052,ws_ship_date_sk#1053,ws_item_sk#1054,ws_bill_customer_sk#1055,ws_bill_cdemo_sk#1056,ws_bill_hdemo_sk#1057,ws_bill_addr_sk#1058,ws_ship_customer_sk#1059,ws_ship_cdemo_sk#1060,ws_ship_hdemo_sk#1061,ws_ship_addr_sk#1062,ws_web_page_sk#1063,ws_web_site_sk#1064,ws_ship_mode_sk#1065,ws_warehouse_sk#1066,ws_promo_sk#1067,ws_order_number#1068L,ws_quantity#1069,ws_wholesale_cost#1070,ws_list_price#1071,ws_sales_price#1072,ws_ext_discount_amt#1073,ws_ext_sales_price#1074,ws_ext_wholesale_cost#1075,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#1086, d_year#1092]\n                     :        +- Filter ((isnotnull(d_year#1092) AND ((d_year#1092 = 2002) AND d_year#1092 IN (2001,2002))) AND isnotnull(d_date_sk#1086))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1086,d_date_id#1087,d_date#1088,d_month_seq#1089,d_week_seq#1090,d_quarter_seq#1091,d_year#1092,d_dow#1093,d_moy#1094,d_dom#1095,d_qoy#1096,d_fy_year#1097,d_fy_quarter_seq#1098,d_fy_week_seq#1099,d_day_name#1100,d_quarter_name#1101,d_holiday#1102,d_weekend#1103,d_following_holiday#1104,d_first_dom#1105,d_last_dom#1106,d_same_day_ly#1107,d_same_day_lq#1108,d_current_day#1109,... 4 more fields] parquet\n                     +- Project [c_customer_sk#1034, c_customer_id#1035, c_first_name#1042, c_last_name#1043]\n                        +- Filter (isnotnull(c_customer_sk#1034) AND isnotnull(c_customer_id#1035))\n                           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1034,c_customer_id#1035,c_current_cdemo_sk#1036,c_current_hdemo_sk#1037,c_current_addr_sk#1038,c_first_shipto_date_sk#1039,c_first_sales_date_sk#1040,c_salutation#1041,c_first_name#1042,c_last_name#1043,c_preferred_cust_flag#1044,c_birth_day#1045,c_birth_month#1046,c_birth_year#1047,c_birth_country#1048,c_login#1049,c_email_address#1050,c_last_review_date#1051] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 115630855112,
      "inputRowCount" : 702350150
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 598192789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2538225334740513691839696,
            "rowCount" : 16270675222695600588716,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "5" : {
            "sign" : -334280523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 53979200864612049597480,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "6" : {
            "sign" : 468111327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62975734342047391197060,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -1678675216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1106405915143300840032688,
            "rowCount" : 16270675222695600588716,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 365219835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1554133093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1106405915143300840032688,
            "rowCount" : 16270675222695600588716,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -454245653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56036895687431568,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1060257709,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1106405915143300840032688,
            "rowCount" : 16270675222695600588716,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15452400276,
        "inputRowCount" : 350104077
      },
      "PD" : {
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 29628.0,
        "FinishedTasksDistributionInMs" : [ 5159.0, 5969.0, 6063.0, 6110.0, 6327.0 ]
      },
      "StartTimeInMs" : 1702227330742,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10555,
        "IOBytes" : {
          "Total" : 1065252207,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 933250466,
            "SW" : 132001741
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -984807247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 1003745201,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 177200956899939654252000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2532804384000000,
            "rowCount" : 28781868000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "11" : {
            "sign" : 107831977,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "13" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1036147248000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "16" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 460509888,
            "rowCount" : 14390934,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          },
          "5" : {
            "sign" : -1009895907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 171019087530250,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 1730600615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)]) "
          },
          "6" : {
            "sign" : 2075524735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 209327363137026,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -375949800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 86069036208542117779542857142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "14" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302549440000000,
            "rowCount" : 28781868000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "0" : {
            "sign" : 717008151,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2016280767,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 86069036208542117779542857142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -637070951,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4425476736447,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : -1396181765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 86069036208542117779542857142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)])\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)])\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 38168578555,
        "inputRowCount" : 638820812
      },
      "PD" : {
        "4" : [ 659719, 639379, 636197, 666002, 647758, 654126, 649852, 627434, 644352, 660104, 664529, 626248, 660345, 645980, 630804, 669076, 655148, 665207, 646188, 652455, 647949, 658215, 647419, 665268, 644890, 652820, 636593, 636117, 649477, 640588, 641531, 649124, 664582, 642275, 643614, 646294, 648666, 634050, 642807, 627515, 656970, 641179, 622444, 652223, 648349, 634298, 659921, 643707, 644027, 653559, 664693, 655099, 634868, 644786, 651060, 649246, 650927, 624909, 645420, 644294, 636693, 665619, 636029, 657451, 622767, 657384, 648955, 646721, 650700, 668633, 656377, 640767, 633698, 656752, 665619, 657291, 638507, 663526, 665660, 654666, 649112, 661633, 658819, 647064, 647493, 640671, 647284, 665517, 641220, 678677, 647345, 665632, 642248, 650964, 647247, 651783, 645419, 636742, 644190, 656319, 628834, 651408, 642574, 641881, 650964, 655662, 648178, 663825, 625838, 625478, 638558, 649877, 659432, 633584, 662698, 645007, 626289, 648955, 644507, 646765, 649947, 656309, 674740, 649450, 642951, 676595, 646863, 642574, 642412, 644585, 665769, 662460, 628470, 637913, 634800, 645240, 641316, 670871, 654992, 662550, 641509, 650927, 639397, 641693, 638203, 635808, 666266, 669896, 667648, 650542, 664476, 658645, 680946, 666771, 652975, 657511, 647468, 661516, 650255, 631321, 642711, 654814, 645954, 662269, 655878, 678057, 658645, 658791, 639649, 645445, 646602, 639413, 666497, 650909, 639451, 645226, 623760, 649139, 650752, 654974, 655597, 642181, 639825, 638247, 669396, 641450, 649150, 651263, 645910, 663040, 643535, 652543, 631745, 646225, 658807, 666087, 639066, 629797, 658557, 633321 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227321867,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19430,
        "IOBytes" : {
          "Total" : 2059454575,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 305170650
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : -1813005875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "23" : {
            "sign" : -579675237,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14 "
          },
          "4" : {
            "sign" : 1540609303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16393121744982423173720998390338123403636363636359087560400000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 487305482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "22" : {
            "sign" : -1628627244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          },
          "26" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : -627937326,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1744491860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "5" : {
            "sign" : 116641059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3276210725240671129435091293090909090909090909090,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : 921844447,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "6" : {
            "sign" : 934079473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3861248354747933831119929024000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 336817734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -495402731,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "14" : {
            "sign" : 554114013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40362168920000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "0" : {
            "sign" : -1774663555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 269311567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          },
          "27" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "2" : {
            "sign" : 1247068583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : 325408571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 771681164175764510400000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "29" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : 895410345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "28" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14\n            :                 +- LogicalQueryStage Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16659848512,
        "inputRowCount" : 678072380
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 10463.0,
        "FinishedTasksDistributionInMs" : [ 970.0, 990.0, 4057.0, 4446.0, 4446.0 ]
      },
      "StartTimeInMs" : 1702227314440,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26857,
        "IOBytes" : {
          "Total" : 3911122317,
          "Details" : {
            "IR" : 666474811,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 1490363581
          }
        }
      }
    },
    "15" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -381039319,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 553857110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 60065307180816280038751232268,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1807941996,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], ShuffleQueryStage 24 "
          },
          "9" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "5" : {
            "sign" : -842523850,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 53979200864612049597480,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "6" : {
            "sign" : -587843802,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62975734342047391197060,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 269639755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -635368516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 623848102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1507409820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56036895687431568,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : -603118482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], ShuffleQueryStage 24\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12305442492,
        "inputRowCount" : 278664330
      },
      "PD" : {
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ],
        "12" : [ 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227333662,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7635,
        "IOBytes" : {
          "Total" : 199544073,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 176149574,
            "SW" : 23394499
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 598192789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 198038490307983047723,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "5" : {
            "sign" : -334280523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4250826431780743875,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "6" : {
            "sign" : 468111327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4930958660865662895,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -1678675216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 365219835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1554133093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -454245653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4425476736447,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1060257709,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 37599503259,
        "inputRowCount" : 623328939
      },
      "PD" : {
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 24657.0,
        "FinishedTasksDistributionInMs" : [ 188.0, 5969.0, 6063.0, 6110.0, 6327.0 ]
      },
      "StartTimeInMs" : 1702227328850,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12447,
        "IOBytes" : {
          "Total" : 1194806835,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 998237366,
            "SW" : 196569469
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -984807247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 72161088,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 1090704795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 198038490307983047723,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : 107831977,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 32366196,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "13" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "5" : {
            "sign" : -1009895907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4250826431780743875,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 1730600615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)]) "
          },
          "6" : {
            "sign" : 2075524735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4930958660865662895,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -1322266510,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -18158219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -795748149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -637070951,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4425476736447,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : -1721180753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89793849642750077539,
            "rowCount" : 1230052734832192843,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)])\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)])\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 37635701907,
        "inputRowCount" : 623328939
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 3755.0,
        "FinishedTasksDistributionInMs" : [ 3755.0, 3755.0, 3755.0, 3755.0, 3755.0 ]
      },
      "StartTimeInMs" : 1702227326931,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14366,
        "IOBytes" : {
          "Total" : 1836781963,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1563607099,
            "SW" : 273174864
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 65401128,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 598192789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31811044367135756607503726016,
            "rowCount" : 214939488967133490591241392,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 145814488,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "5" : {
            "sign" : -334280523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 332769770683606305504,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "6" : {
            "sign" : 468111327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 392192944019964574344,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -1678675216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 14615885249765077360204414656,
            "rowCount" : 214939488967133490591241392,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 365219835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1554133093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 14615885249765077360204414656,
            "rowCount" : 214939488967133490591241392,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -454245653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 343692476204688,
            "rowCount" : 3304735348122,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1060257709,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14615885249765077360204414656,
            "rowCount" : 214939488967133490591241392,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3496280920,
        "inputRowCount" : 76876824
      },
      "PD" : {
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227332191,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9106,
        "IOBytes" : {
          "Total" : 464994591,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 397898087,
            "SW" : 67096504
          }
        }
      }
    },
    "16" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -381039319,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 72667920,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 553857110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 375293171792624291760710520,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1807941996,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], ShuffleQueryStage 24 "
          },
          "9" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "5" : {
            "sign" : -842523850,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 332769770683606305504,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "6" : {
            "sign" : -587843802,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 392192944019964574344,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 269639755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 182285254870703227426630824,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -635368516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 623848102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 182285254870703227426630824,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1507409820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 343692476204688,
            "rowCount" : 3304735348122,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : -603118482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 182285254870703227426630824,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], ShuffleQueryStage 24\n"
      },
      "IM" : {
        "inputSizeInBytes" : 276176568,
        "inputRowCount" : 5437077
      },
      "PD" : {
        "11" : [ 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395 ],
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ],
        "12" : [ 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227334118,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7179,
        "IOBytes" : {
          "Total" : 111244337,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 111244337,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : -1813005875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1030719960000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "23" : {
            "sign" : -579675237,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 458097760,
            "rowCount" : 14315555,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14 "
          },
          "4" : {
            "sign" : 1540609303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3376855787671635536904492120211010094545454545451361292280000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 487305482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "22" : {
            "sign" : -1628627244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2519537680000000,
            "rowCount" : 28631110000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          },
          "26" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : -627937326,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1744491860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "5" : {
            "sign" : 116641059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 674873969782300848957860980363636363636363636363,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : 921844447,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2290488800000000,
            "rowCount" : 28631110000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "6" : {
            "sign" : 934079473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 795387178671997429128907584000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 336817734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1640187096869080117925039029816776331636363636362089770536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -495402731,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "14" : {
            "sign" : 554114013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40362168920000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "0" : {
            "sign" : -1774663555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 269311567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1030719960000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          },
          "27" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "2" : {
            "sign" : 1247068583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1640187096869080117925039029816776331636363636362089770536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : 325408571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 771681164175764510400000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "29" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : 895410345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1640187096869080117925039029816776331636363636362089770536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "28" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14\n            :                 +- LogicalQueryStage Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15450051752,
        "inputRowCount" : 622892330
      },
      "PD" : {
        "2" : [ 674752, 648619, 653602, 641241, 635746, 663514, 648879, 653094, 653907, 654406, 663015, 647003, 658320, 664613, 642494, 663726, 654704, 668561, 668178, 653184, 648234, 657534, 660843, 658320, 644775, 669243, 645469, 663439, 662286, 651255, 646303, 662901, 646308, 653654, 661568, 652309, 644507, 637462, 652022, 639088, 635773, 656274, 631513, 655176, 655817, 643887, 651083, 647390, 649889, 646209, 658293, 681155, 649168, 668233, 657712, 642720, 647284, 622778, 627565, 654122, 663394, 644284, 650659, 659010, 647843, 663487, 652538, 642919, 645232, 657300, 654529, 656450, 655639, 655140, 667992, 658766, 662925, 668514, 663682, 652617, 654261, 677891, 677085, 638020, 645301, 641247, 644065, 651079, 654058, 673511, 659118, 657273, 678767, 653387, 625777, 667123, 658633, 644660, 659954, 653125, 632029, 659612, 664582, 654097, 650550, 654480, 656780, 657394, 624893, 640441, 651302, 642873, 664709, 634568, 646506, 649246, 637955, 633473, 636582, 657069, 639365, 642321, 668813, 646935, 675325, 673113, 657826, 658711, 634654, 656020, 657057, 664246, 651186, 653531, 663378, 643856, 649520, 649647, 659159, 660089, 649613, 645877, 654308, 667322, 648197, 646080, 675999, 631368, 664965, 652770, 680545, 665143, 681778, 656909, 656770, 672645, 649889, 654600, 675182, 644890, 648592, 640240, 648822, 656042, 650896, 667020, 645793, 656108, 663060, 648554, 642976, 653879, 659227, 668774, 649938, 648717, 637970, 634501, 662032, 650522, 669427, 656606, 660198, 640862, 665309, 652243, 656287, 627583, 649940, 674308, 661338, 651388, 675002, 638626, 654105, 663596, 649224, 643444, 675131, 632727 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 29,
        "FinishedTasksTotalTimeInMs" : 89657.0,
        "FinishedTasksDistributionInMs" : [ 690.0, 781.0, 1455.0, 5966.0, 8725.0 ]
      },
      "StartTimeInMs" : 1702227318828,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22469,
        "IOBytes" : {
          "Total" : 3715336235,
          "Details" : {
            "IR" : 595385469,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 1365666841
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "8" : {
            "sign" : 2089794442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "4" : {
            "sign" : 1033811189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 102117785249493754572,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "9" : {
            "sign" : -2108168868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)]) "
          },
          "5" : {
            "sign" : 2023652973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2171689158715006080,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 1730600615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 146009760,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)]) "
          },
          "6" : {
            "sign" : 1192014091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2678416629081840832,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 1773686302,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 44512880749779328916,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1548805809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -458369883,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 44512880749779328916,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -637070951,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56036895687431568,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 2004490625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44512880749779328916,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146], HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)])\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 18614037492,
        "inputRowCount" : 421546992
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 12032.0,
        "FinishedTasksDistributionInMs" : [ 5969.0, 5969.0, 6063.0, 6063.0, 6063.0 ]
      },
      "StartTimeInMs" : 1702227328164,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13133,
        "IOBytes" : {
          "Total" : 1238421116,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1030233152,
            "SW" : 208187964
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : 107831977,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "23" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "4" : {
            "sign" : 709727877,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2109188130217556022918274544718107443200000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 487305482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8593129120000000,
            "rowCount" : 107414114000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "22" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          },
          "16" : {
            "sign" : -1744491860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9452442032000000,
            "rowCount" : 107414114000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "5" : {
            "sign" : 814333247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 421527081983888689979083038720000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "6" : {
            "sign" : -237752301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 496799775195297384618205009920000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 603364598,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1024462806105670068274590493148795043840000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -495402731,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1718625824,
            "rowCount" : 53707057,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "14" : {
            "sign" : 554114013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8163472664000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "0" : {
            "sign" : -72622613,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -984807247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)]) "
          },
          "2" : {
            "sign" : 1233082325,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1024462806105670068274590493148795043840000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : 325408571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156076798091764927680000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1977086681,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1024462806105670068274590493148795043840000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)])\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13376124872,
        "inputRowCount" : 467085223
      },
      "PD" : {
        "3" : [ 2436322, 2452990, 2427558, 2433813, 2419628, 2488090, 2444678, 2412457, 2468089, 2441047, 2486659, 2448075, 2472859, 2466540, 2425578, 2411213, 2487132, 2510655, 2439836, 2455171, 2404925, 2440145, 2520225, 2425337, 2443659, 2417725, 2420261, 2494020, 2467719, 2401012, 2427558, 2462759, 2468782, 2433890, 2475604, 2478703, 2439571, 2404647, 2382592, 2428691, 2424988, 2442078, 2412600, 2450816, 2458521, 2406076, 2476220, 2419199, 2474659, 2480029, 2480991, 2449251, 2421505, 2465266, 2480224, 2412600, 2459807, 2396706, 2407111, 2463557, 2444384, 2489873, 2435214, 2452603, 2411393, 2514469, 2449106, 2441743, 2439836, 2462637, 2460231, 2430372, 2408720, 2452179, 2465844, 2493949, 2478628, 2452798, 2459894, 2466109, 2482822, 2449033, 2501052, 2398304, 2414476, 2444369, 2422905, 2450818, 2491883, 2490555, 2440749, 2478418, 2457901, 2437090, 2490937, 2459322, 2412867, 2394833, 2418814, 2435718, 2430444, 2466407, 2446969, 2435146, 2427116, 2497799, 2441888, 2513816, 2383820, 2416046, 2424751, 2461962, 2487970, 2413635, 2447761, 2434848, 2388657, 2410431, 2468517, 2410768, 2444645, 2460807, 2476176, 2462759, 2480797, 2464233, 2427289, 2449252, 2476147, 2407685, 2486629, 2465151, 2466672, 2462787, 2406120, 2395111, 2443575, 2499602, 2459395, 2460608, 2446316, 2397618, 2439836, 2464635, 2467172, 2470685, 2542115, 2461962, 2465697, 2454374, 2465123, 2457462, 2510510, 2467796, 2457607, 2470565, 2449370, 2454431, 2524697, 2409633, 2411354, 2417665, 2458746, 2442802, 2487633, 2475101, 2427820, 2470830, 2474394, 2414904, 2477771, 2535368, 2521181, 2478762, 2471720, 2424543, 2482967, 2400291, 2439981, 2447878, 2416308, 2443228, 2366431, 2432473, 2510302, 2464088, 2526098, 2488529, 2416690, 2467098, 2495353, 2440339, 2454021, 2410481, 2491970, 2489875, 2453063, 2446321, 2478197, 2430509 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 32,
        "FinishedTasksTotalTimeInMs" : 102725.0,
        "FinishedTasksDistributionInMs" : [ 690.0, 769.0, 1455.0, 6188.0, 11615.0 ]
      },
      "StartTimeInMs" : 1702227320854,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20443,
        "IOBytes" : {
          "Total" : 2985386441,
          "Details" : {
            "IR" : 332829536,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 898272980
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1280407819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966)) "
          },
          "34" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "12" : {
            "sign" : -1413005813,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2300980904280,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, d_year#59] "
          },
          "51" : {
            "sign" : -244559346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "8" : {
            "sign" : -278356410,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10520431125,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : 52891486,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#53, d_date_id#54, d_date#55, d_month_seq#56, d_week_seq#57, d_quarter_seq#58, d_year#59, d_dow#60, d_moy#61, d_dom#62, d_qoy#63, d_fy_year#64, d_fy_quarter_seq#65, d_fy_week_seq#66, d_day_name#67, d_quarter_name#68, d_holiday#69, d_weekend#70, d_following_holiday#71, d_first_dom#72, d_last_dom#73, d_same_day_ly#74, d_same_day_lq#75, d_current_day#76, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1313741164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "4" : {
            "sign" : -185794050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1751578461684655181585886369250962432384,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "40" : {
            "sign" : -2106033894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 840558219680,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#1965 = d_date_sk#1966) "
          },
          "15" : {
            "sign" : 846247961,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52]) "
          },
          "11" : {
            "sign" : 2001065718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : 15105414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 10520431125,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "44" : {
            "sign" : 1355652847,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1966, d_year#1972] "
          },
          "33" : {
            "sign" : -75594211,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1731, d_year#1737], BroadcastQueryStage 2 "
          },
          "22" : {
            "sign" : 335451025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "56" : {
            "sign" : -1968597988,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2087, ws_ship_date_sk#2088, ws_item_sk#2089, ws_bill_customer_sk#2090, ws_bill_cdemo_sk#2091, ws_bill_hdemo_sk#2092, ws_bill_addr_sk#2093, ws_ship_customer_sk#2094, ws_ship_cdemo_sk#2095, ws_ship_hdemo_sk#2096, ws_ship_addr_sk#2097, ws_web_page_sk#2098, ws_web_site_sk#2099, ws_ship_mode_sk#2100, ws_warehouse_sk#2101, ws_promo_sk#2102, ws_order_number#2103L, ws_quantity#2104, ws_wholesale_cost#2105, ws_list_price#2106, ws_sales_price#2107, ws_ext_discount_amt#2108, ws_ext_sales_price#2109, ws_ext_wholesale_cost#2110, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "55" : {
            "sign" : -1575053379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120]) "
          },
          "26" : {
            "sign" : 2101099602,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#1730 = d_date_sk#1731) "
          },
          "50" : {
            "sign" : -867261518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "37" : {
            "sign" : 1934847524,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "61" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "13" : {
            "sign" : 482220338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3067974539040,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#52 = d_date_sk#53) "
          },
          "46" : {
            "sign" : 1114275808,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1966, d_date_id#1967, d_date#1968, d_month_seq#1969, d_week_seq#1970, d_quarter_seq#1971, d_year#1972, d_dow#1973, d_moy#1974, d_dom#1975, d_qoy#1976, d_fy_year#1977, d_fy_quarter_seq#1978, d_fy_week_seq#1979, d_day_name#1980, d_quarter_name#1981, d_holiday#1982, d_weekend#1983, d_following_holiday#1984, d_first_dom#1985, d_last_dom#1986, d_same_day_ly#1987, d_same_day_lq#1988, d_current_day#1989, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1693615838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "35" : {
            "sign" : 2096894518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2767080582,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "16" : {
            "sign" : 507063040,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38L, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 657164246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 550283578125153526352103454636,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 740092291,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "59" : {
            "sign" : 1742799390,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#2121, d_date_id#2122, d_date#2123, d_month_seq#2124, d_week_seq#2125, d_quarter_seq#2126, d_year#2127, d_dow#2128, d_moy#2129, d_dom#2130, d_qoy#2131, d_fy_year#2132, d_fy_quarter_seq#2133, d_fy_week_seq#2134, d_day_name#2135, d_quarter_name#2136, d_holiday#2137, d_weekend#2138, d_following_holiday#2139, d_first_dom#2140, d_last_dom#2141, d_same_day_ly#2142, d_same_day_lq#2143, d_current_day#2144, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "48" : {
            "sign" : -627937326,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8 "
          },
          "21" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "54" : {
            "sign" : -1414391754,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120] "
          },
          "43" : {
            "sign" : -1286290446,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#1932, ws_ship_date_sk#1933, ws_item_sk#1934, ws_bill_customer_sk#1935, ws_bill_cdemo_sk#1936, ws_bill_hdemo_sk#1937, ws_bill_addr_sk#1938, ws_ship_customer_sk#1939, ws_ship_cdemo_sk#1940, ws_ship_hdemo_sk#1941, ws_ship_addr_sk#1942, ws_web_page_sk#1943, ws_web_site_sk#1944, ws_ship_mode_sk#1945, ws_warehouse_sk#1946, ws_promo_sk#1947, ws_order_number#1948L, ws_quantity#1949, ws_wholesale_cost#1950, ws_list_price#1951, ws_sales_price#1952, ws_ext_discount_amt#1953, ws_ext_sales_price#1954, ws_ext_wholesale_cost#1955, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "57" : {
            "sign" : 363945484,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#2121, d_year#2127] "
          },
          "32" : {
            "sign" : -1532514990,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1731, d_date_id#1732, d_date#1733, d_month_seq#1734, d_week_seq#1735, d_quarter_seq#1736, d_year#1737, d_dow#1738, d_moy#1739, d_dom#1740, d_qoy#1741, d_fy_year#1742, d_fy_quarter_seq#1743, d_fy_week_seq#1744, d_day_name#1745, d_quarter_name#1746, d_holiday#1747, d_weekend#1748, d_following_holiday#1749, d_first_dom#1750, d_last_dom#1751, d_same_day_ly#1752, d_same_day_lq#1753, d_current_day#1754, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "49" : {
            "sign" : -160645790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "6" : {
            "sign" : -101251018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 648548502790359513200693357250,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "36" : {
            "sign" : -337683742,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2767080582,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          },
          "1" : {
            "sign" : -2016522941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 850766681389689659627430522207610324300,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 598581598,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 630418664760,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972] "
          },
          "17" : {
            "sign" : 1101785547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#53, d_year#59] "
          },
          "25" : {
            "sign" : -1412762727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] "
          },
          "60" : {
            "sign" : -1198486362,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#2121, d_year#2127], BroadcastQueryStage 10 "
          },
          "14" : {
            "sign" : -1528657994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52] "
          },
          "47" : {
            "sign" : -993708636,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1966, d_year#1972], BroadcastQueryStage 6 "
          },
          "31" : {
            "sign" : 1042142537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731)) "
          },
          "58" : {
            "sign" : 1502238409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121)) "
          },
          "53" : {
            "sign" : 1886661043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2120 = d_date_sk#2121) "
          },
          "42" : {
            "sign" : 1795610686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965]) "
          },
          "0" : {
            "sign" : 962660824,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1389694303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#53, d_year#59], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 1800636684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730] "
          },
          "2" : {
            "sign" : -1569738514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 850766681389689659627430522207610324300,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1177779715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          },
          "18" : {
            "sign" : -1793290454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53)) "
          },
          "30" : {
            "sign" : 477583540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1731, d_year#1737] "
          },
          "7" : {
            "sign" : 689250449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 234380056370313364875,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "29" : {
            "sign" : -643887020,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#1708, ss_item_sk#1709, ss_customer_sk#1710, ss_cdemo_sk#1711, ss_hdemo_sk#1712, ss_addr_sk#1713, ss_store_sk#1714, ss_promo_sk#1715, ss_ticket_number#1716L, ss_quantity#1717, ss_wholesale_cost#1718, ss_list_price#1719, ss_sales_price#1720, ss_ext_discount_amt#1721, ss_ext_sales_price#1722, ss_ext_wholesale_cost#1723, ss_ext_list_price#1724, ss_ext_tax#1725, ss_coupon_amt#1726, ss_net_paid#1727, ss_net_paid_inc_tax#1728, ss_net_profit#1729, ss_sold_date_sk#1730], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : 1651515803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965] "
          },
          "3" : {
            "sign" : -54179712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 850766681389689659627430522207610324300,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "52" : {
            "sign" : -1634146500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] "
          },
          "28" : {
            "sign" : 1314556937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730]) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalRelation",
          "toId" : 42,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalRelation",
          "toId" : 45,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Filter",
          "toId" : 44,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 42,
          "fromName" : "Filter",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "LogicalQueryStage",
          "toId" : 40,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Join",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalQueryStage",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Join",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "LogicalRelation",
          "toId" : 55,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "LogicalRelation",
          "toId" : 58,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Filter",
          "toId" : 57,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "Project",
          "toId" : 55,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 55,
          "fromName" : "Filter",
          "toId" : 54,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "Project",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "LogicalQueryStage",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Join",
          "toId" : 52,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Project",
          "toId" : 51,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "LogicalQueryStage",
          "toId" : 51,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Join",
          "toId" : 50,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Project",
          "toId" : 49,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n            :     :  :           :     :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52])\n            :     :  :           :     :     :  +- Project [d_date_sk#53, d_year#59]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n            :     :  :           :     +- LogicalQueryStage Project [d_date_sk#53, d_year#59], BroadcastQueryStage 0\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#1730 = d_date_sk#1731)\n            :     :           :     :- Project [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730])\n            :     :           :     :     :  +- Project [d_date_sk#1731, d_year#1737]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1708,ss_item_sk#1709,ss_customer_sk#1710,ss_cdemo_sk#1711,ss_hdemo_sk#1712,ss_addr_sk#1713,ss_store_sk#1714,ss_promo_sk#1715,ss_ticket_number#1716L,ss_quantity#1717,ss_wholesale_cost#1718,ss_list_price#1719,ss_sales_price#1720,ss_ext_discount_amt#1721,ss_ext_sales_price#1722,ss_ext_wholesale_cost#1723,ss_ext_list_price#1724,ss_ext_tax#1725,ss_coupon_amt#1726,ss_net_paid#1727,ss_net_paid_inc_tax#1728,ss_net_profit#1729,ss_sold_date_sk#1730] parquet\n            :     :           :     +- LogicalQueryStage Project [d_date_sk#1731, d_year#1737], BroadcastQueryStage 2\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n            :                 :  +- Join Inner, (ws_sold_date_sk#1965 = d_date_sk#1966)\n            :                 :     :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965])\n            :                 :     :     :  +- Project [d_date_sk#1966, d_year#1972]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1932,ws_ship_date_sk#1933,ws_item_sk#1934,ws_bill_customer_sk#1935,ws_bill_cdemo_sk#1936,ws_bill_hdemo_sk#1937,ws_bill_addr_sk#1938,ws_ship_customer_sk#1939,ws_ship_cdemo_sk#1940,ws_ship_hdemo_sk#1941,ws_ship_addr_sk#1942,ws_web_page_sk#1943,ws_web_site_sk#1944,ws_ship_mode_sk#1945,ws_warehouse_sk#1946,ws_promo_sk#1947,ws_order_number#1948L,ws_quantity#1949,ws_wholesale_cost#1950,ws_list_price#1951,ws_sales_price#1952,ws_ext_discount_amt#1953,ws_ext_sales_price#1954,ws_ext_wholesale_cost#1955,... 10 more fields] parquet\n            :                 :     +- LogicalQueryStage Project [d_date_sk#1966, d_year#1972], BroadcastQueryStage 6\n            :                 +- LogicalQueryStage Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n                     :  +- Join Inner, (ws_sold_date_sk#2120 = d_date_sk#2121)\n                     :     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120])\n                     :     :     :  +- Project [d_date_sk#2121, d_year#2127]\n                     :     :     :     +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2087,ws_ship_date_sk#2088,ws_item_sk#2089,ws_bill_customer_sk#2090,ws_bill_cdemo_sk#2091,ws_bill_hdemo_sk#2092,ws_bill_addr_sk#2093,ws_ship_customer_sk#2094,ws_ship_cdemo_sk#2095,ws_ship_hdemo_sk#2096,ws_ship_addr_sk#2097,ws_web_page_sk#2098,ws_web_site_sk#2099,ws_ship_mode_sk#2100,ws_warehouse_sk#2101,ws_promo_sk#2102,ws_order_number#2103L,ws_quantity#2104,ws_wholesale_cost#2105,ws_list_price#2106,ws_sales_price#2107,ws_ext_discount_amt#2108,ws_ext_sales_price#2109,ws_ext_wholesale_cost#2110,... 10 more fields] parquet\n                     :     +- LogicalQueryStage Project [d_date_sk#2121, d_year#2127], BroadcastQueryStage 10\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 114177096320,
        "inputRowCount" : 702059836
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12177.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1223.0, 1529.0, 2004.0 ]
      },
      "StartTimeInMs" : 1702227308683,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 32614,
        "IOBytes" : {
          "Total" : 4001925754,
          "Details" : {
            "IR" : 691298162,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 1556343667
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -381039319,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 314573536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 60065307180816280038751232268,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "11" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 72413000,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          },
          "9" : {
            "sign" : 475088413,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22 "
          },
          "5" : {
            "sign" : -842523850,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 53979200864612049597480,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : -1964007711,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21 "
          },
          "6" : {
            "sign" : -587843802,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62975734342047391197060,
            "rowCount" : 449826673871767079979,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -933580149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -2057313734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1247780208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1507409820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56036895687431568,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1145719240,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27597573569564236774561376988,
            "rowCount" : 405846670140650540802373191,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], ShuffleQueryStage 22\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)), ShuffleQueryStage 21\n            +- LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12341766332,
        "inputRowCount" : 278664330
      },
      "PD" : {
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227332723,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8574,
        "IOBytes" : {
          "Total" : 243246078,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 208187964,
            "SW" : 35058114
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "34" : {
            "sign" : -867261518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : 1800636684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730] "
          },
          "23" : {
            "sign" : 1042142537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731)) "
          },
          "4" : {
            "sign" : -183963661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2008668853300795681736529915846513970176,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "40" : {
            "sign" : -1968597988,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2087, ws_ship_date_sk#2088, ws_item_sk#2089, ws_bill_customer_sk#2090, ws_bill_cdemo_sk#2091, ws_bill_hdemo_sk#2092, ws_bill_addr_sk#2093, ws_ship_customer_sk#2094, ws_ship_cdemo_sk#2095, ws_ship_hdemo_sk#2096, ws_ship_addr_sk#2097, ws_web_page_sk#2098, ws_web_site_sk#2099, ws_ship_mode_sk#2100, ws_warehouse_sk#2101, ws_promo_sk#2102, ws_order_number#2103L, ws_quantity#2104, ws_wholesale_cost#2105, ws_list_price#2106, ws_sales_price#2107, ws_ext_discount_amt#2108, ws_ext_sales_price#2109, ws_ext_wholesale_cost#2110, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "15" : {
            "sign" : 1313741164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "44" : {
            "sign" : -1198486362,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#2121, d_year#2127], BroadcastQueryStage 10 "
          },
          "33" : {
            "sign" : -160645790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2767080582,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "22" : {
            "sign" : 477583540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1731, d_year#1737] "
          },
          "26" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "37" : {
            "sign" : 1886661043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 840558219680,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2120 = d_date_sk#2121) "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : -1532514990,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1731, d_date_id#1732, d_date#1733, d_month_seq#1734, d_week_seq#1735, d_quarter_seq#1736, d_year#1737, d_dow#1738, d_moy#1739, d_dom#1740, d_qoy#1741, d_fy_year#1742, d_fy_quarter_seq#1743, d_fy_week_seq#1744, d_day_name#1745, d_quarter_name#1746, d_holiday#1747, d_weekend#1748, d_following_holiday#1749, d_first_dom#1750, d_last_dom#1751, d_same_day_ly#1752, d_same_day_lq#1753, d_current_day#1754, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : -244559346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "16" : {
            "sign" : -1693615838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "5" : {
            "sign" : -1311760139,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 725916283886811534040294138368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : -643887020,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#1708, ss_item_sk#1709, ss_customer_sk#1710, ss_cdemo_sk#1711, ss_hdemo_sk#1712, ss_addr_sk#1713, ss_store_sk#1714, ss_promo_sk#1715, ss_ticket_number#1716L, ss_quantity#1717, ss_wholesale_cost#1718, ss_list_price#1719, ss_sales_price#1720, ss_ext_discount_amt#1721, ss_ext_sales_price#1722, ss_ext_wholesale_cost#1723, ss_ext_list_price#1724, ss_ext_tax#1725, ss_coupon_amt#1726, ss_net_paid#1727, ss_net_paid_inc_tax#1728, ss_net_profit#1729, ss_sold_date_sk#1730], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "43" : {
            "sign" : 1742799390,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#2121, d_date_id#2122, d_date#2123, d_month_seq#2124, d_week_seq#2125, d_quarter_seq#2126, d_year#2127, d_dow#2128, d_moy#2129, d_dom#2130, d_qoy#2131, d_fy_year#2132, d_fy_quarter_seq#2133, d_fy_week_seq#2134, d_day_name#2135, d_quarter_name#2136, d_holiday#2137, d_weekend#2138, d_following_holiday#2139, d_first_dom#2140, d_last_dom#2141, d_same_day_ly#2142, d_same_day_lq#2143, d_current_day#2144, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : -627937326,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : 1377519187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 855544191723742165118918091648,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "36" : {
            "sign" : -1634146500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 630418664760,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] "
          },
          "1" : {
            "sign" : 1841855148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 975639157317529331129171673411163928371,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1575053379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120]) "
          },
          "17" : {
            "sign" : -1412762727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2300980904280,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] "
          },
          "25" : {
            "sign" : -75594211,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1731, d_year#1737], BroadcastQueryStage 2 "
          },
          "14" : {
            "sign" : 335451025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22209799043,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "31" : {
            "sign" : -579675237,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14 "
          },
          "42" : {
            "sign" : 1502238409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121)) "
          },
          "0" : {
            "sign" : 892880973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1314556937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730]) "
          },
          "27" : {
            "sign" : -1813005875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "2" : {
            "sign" : 218737251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 975639157317529331129171673411163928371,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1414391754,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120] "
          },
          "18" : {
            "sign" : 2101099602,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3067974539040,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#1730 = d_date_sk#1731) "
          },
          "30" : {
            "sign" : -1628627244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          },
          "7" : {
            "sign" : -126386213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 268781518706920511292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "29" : {
            "sign" : 921844447,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "41" : {
            "sign" : 363945484,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#2121, d_year#2127] "
          },
          "3" : {
            "sign" : 1541488937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 975639157317529331129171673411163928371,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "28" : {
            "sign" : 269311567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Aggregate",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalRelation",
          "toId" : 39,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalRelation",
          "toId" : 42,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Filter",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 39,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 39,
          "fromName" : "Filter",
          "toId" : 38,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Project",
          "toId" : 37,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalQueryStage",
          "toId" : 37,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Join",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Join",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#1730 = d_date_sk#1731)\n            :     :           :     :- Project [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730])\n            :     :           :     :     :  +- Project [d_date_sk#1731, d_year#1737]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1708,ss_item_sk#1709,ss_customer_sk#1710,ss_cdemo_sk#1711,ss_hdemo_sk#1712,ss_addr_sk#1713,ss_store_sk#1714,ss_promo_sk#1715,ss_ticket_number#1716L,ss_quantity#1717,ss_wholesale_cost#1718,ss_list_price#1719,ss_sales_price#1720,ss_ext_discount_amt#1721,ss_ext_sales_price#1722,ss_ext_wholesale_cost#1723,ss_ext_list_price#1724,ss_ext_tax#1725,ss_coupon_amt#1726,ss_net_paid#1727,ss_net_paid_inc_tax#1728,ss_net_profit#1729,ss_sold_date_sk#1730] parquet\n            :     :           :     +- LogicalQueryStage Project [d_date_sk#1731, d_year#1737], BroadcastQueryStage 2\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14\n            :                 +- LogicalQueryStage Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n                     :  +- Join Inner, (ws_sold_date_sk#2120 = d_date_sk#2121)\n                     :     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120])\n                     :     :     :  +- Project [d_date_sk#2121, d_year#2127]\n                     :     :     :     +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2087,ws_ship_date_sk#2088,ws_item_sk#2089,ws_bill_customer_sk#2090,ws_bill_cdemo_sk#2091,ws_bill_hdemo_sk#2092,ws_bill_addr_sk#2093,ws_ship_customer_sk#2094,ws_ship_cdemo_sk#2095,ws_ship_hdemo_sk#2096,ws_ship_addr_sk#2097,ws_web_page_sk#2098,ws_web_site_sk#2099,ws_ship_mode_sk#2100,ws_warehouse_sk#2101,ws_promo_sk#2102,ws_order_number#2103L,ws_quantity#2104,ws_wholesale_cost#2105,ws_list_price#2106,ws_sales_price#2107,ws_ext_discount_amt#2108,ws_ext_sales_price#2109,ws_ext_wholesale_cost#2110,... 10 more fields] parquet\n                     :     +- LogicalQueryStage Project [d_date_sk#2121, d_year#2127], BroadcastQueryStage 10\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 65438459000,
        "inputRowCount" : 690065897
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14367.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1316.0, 1638.0, 2190.0 ]
      },
      "StartTimeInMs" : 1702227309052,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 32245,
        "IOBytes" : {
          "Total" : 4001832192,
          "Details" : {
            "IR" : 691204600,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 1556343667
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1709217184,
            "rowCount" : 53413037,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3845738664000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "4" : {
            "sign" : 1292830927,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1157827491112712919442410144086385500160000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 107831977,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9400694512000000,
            "rowCount" : 106826074000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3845738664000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -984807247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)]) "
          },
          "5" : {
            "sign" : -1990275395,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 231395026729610559034314740736000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8546085920000000,
            "rowCount" : 106826074000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "6" : {
            "sign" : 2080645085,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272715567217041016004728087296000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : -1743276360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 562373352826174846586313498556244385792000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "14" : {
            "sign" : 1730600615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)]) "
          },
          "0" : {
            "sign" : -1034238155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          },
          "2" : {
            "sign" : 646432799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 562373352826174846586313498556244385792000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "7" : {
            "sign" : -93451975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 85677519689461738584000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : -1996410469,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 562373352826174846586313498556244385792000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)])\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152], HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)])\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29127774375,
        "inputRowCount" : 474294569
      },
      "PD" : {
        "1" : [ 2488960, 2475451, 2446936, 2447998, 2465078, 2445737, 2451734, 2425723, 2473503, 2464929, 2509328, 2490138, 2496472, 2487225, 2445360, 2456084, 2467751, 2498834, 2462637, 2413710, 2449207, 2495823, 2459810, 2478698, 2504634, 2482897, 2463025, 2489299, 2468903, 2454166, 2413586, 2441372, 2501540, 2448973, 2476603, 2464310, 2469091, 2408598, 2432944, 2442963, 2435364, 2477017, 2417990, 2470183, 2492885, 2436898, 2504899, 2437461, 2463555, 2479014, 2475500, 2458521, 2428191, 2478749, 2430903, 2427052, 2421947, 2437041, 2438536, 2425578, 2450507, 2496813, 2412235, 2472488, 2407830, 2520921, 2484650, 2443141, 2440412, 2499973, 2464133, 2409562, 2471161, 2481932, 2486626, 2473330, 2481638, 2496885, 2501226, 2444263, 2453402, 2494020, 2491103, 2424044, 2448563, 2454862, 2420543, 2453255, 2475098, 2507143, 2455804, 2455630, 2506717, 2471099, 2443704, 2488104, 2409296, 2432031, 2454599, 2386033, 2399450, 2471511, 2433742, 2416773, 2431908, 2501773, 2502034, 2520225, 2424955, 2446744, 2422424, 2459777, 2469503, 2501696, 2483838, 2445905, 2413752, 2416191, 2459749, 2456012, 2423432, 2434996, 2508978, 2465846, 2477476, 2503676, 2473503, 2420038, 2439763, 2410552, 2481932, 2449757, 2480447, 2458257, 2420735, 2429032, 2467383, 2474468, 2463529, 2484605, 2430875, 2433016, 2484838, 2474257, 2417857, 2462522, 2544214, 2450805, 2454054, 2469119, 2504047, 2434446, 2490703, 2488090, 2488191, 2479308, 2406486, 2482730, 2497993, 2429047, 2430566, 2417588, 2472859, 2434654, 2459512, 2477195, 2457076, 2488030, 2469989, 2401020, 2444484, 2482009, 2466066, 2485297, 2464233, 2433013, 2479471, 2416526, 2467718, 2455365, 2458863, 2435214, 2445325, 2447230, 2529003, 2466036, 2544256, 2499132, 2424957, 2468206, 2488297, 2453707, 2442387, 2399513, 2489419, 2502996, 2446245, 2455591, 2460929, 2459514 ],
        "0" : [ 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 12336.0,
        "FinishedTasksDistributionInMs" : [ 661.0, 724.0, 748.0, 807.0, 1099.0 ]
      },
      "StartTimeInMs" : 1702227321726,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19571,
        "IOBytes" : {
          "Total" : 2254590876,
          "Details" : {
            "IR" : 71406264,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 428900687
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1150357949,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13 "
          },
          "8" : {
            "sign" : -850765208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "19" : {
            "sign" : -1813005875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "23" : {
            "sign" : -579675237,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14 "
          },
          "4" : {
            "sign" : 1540609303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16393121744982423173720998390338123403636363636359087560400000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "15" : {
            "sign" : 487305482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "11" : {
            "sign" : 263497100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          },
          "9" : {
            "sign" : -467316100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "22" : {
            "sign" : -1628627244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          },
          "26" : {
            "sign" : 1198537296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "13" : {
            "sign" : 913222201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : -627937326,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1744491860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46735142960000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          },
          "5" : {
            "sign" : 116641059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3276210725240671129435091293090909090909090909090,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "10" : {
            "sign" : 2053235659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42486493600000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "21" : {
            "sign" : 921844447,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11119296800000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "6" : {
            "sign" : 934079473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3861248354747933831119929024000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 336817734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -495402731,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : -480975960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "14" : {
            "sign" : 554114013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40362168920000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "0" : {
            "sign" : -1774663555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 269311567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          },
          "27" : {
            "sign" : 1892831188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12231226480000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          },
          "2" : {
            "sign" : 1247068583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1567018496,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : 325408571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 771681164175764510400000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "29" : {
            "sign" : -1595365868,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : 895410345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7962373418991462684378770646735659938909090909088699672194285714,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "28" : {
            "sign" : 1417654734,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#32, ss_net_paid#49, d_year#59], ShuffleQueryStage 13\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737], ShuffleQueryStage 15\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972], ShuffleQueryStage 14\n            :                 +- LogicalQueryStage Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127], ShuffleQueryStage 16\n                     +- LogicalQueryStage Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16659848512,
        "inputRowCount" : 678072380
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 10463.0,
        "FinishedTasksDistributionInMs" : [ 970.0, 990.0, 4057.0, 4446.0, 4446.0 ]
      },
      "StartTimeInMs" : 1702227314403,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26894,
        "IOBytes" : {
          "Total" : 3911122317,
          "Details" : {
            "IR" : 666474811,
            "IW" : 0,
            "SR" : 1754283925,
            "SW" : 1490363581
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1730600615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 146009760,
                "rowCount" : 1819089
              },
              "compileTime" : {
                "sizeInBytes" : 22278560031,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208], HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1034212856,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 146009760,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180] Keys [4]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737] Functions [1]: [max(ss_net_paid#1727)] Aggregate Attributes [1]: [max(ss_net_paid#1727)#1200] Results [4]: [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727)#1200 AS year_total#1208] "
          },
          "1" : {
            "sign" : -2132204382,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180] Arguments: 18 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)], output=[customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208])\n+- ShuffleQueryStage 18\n   +- Exchange hashpartitioning(c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, 200), ENSURE_REQUIREMENTS, [plan_id=2251]\n      +- *(18) HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[partial_max(ss_net_paid#1727)], output=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180])\n         +- *(18) Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            +- *(18) SortMergeJoin [ss_customer_sk#1710], [c_customer_sk#1690], Inner\n               :- *(16) Sort [ss_customer_sk#1710 ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 15\n               :        +- Exchange hashpartitioning(ss_customer_sk#1710, 200), ENSURE_REQUIREMENTS, [plan_id=1497]\n               :           +- *(11) Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n               :              +- *(11) BroadcastHashJoin [ss_sold_date_sk#1730], [d_date_sk#1731], Inner, BuildRight, false\n               :                 :- *(11) Filter isnotnull(ss_customer_sk#1710)\n               :                 :  +- *(11) ColumnarToRow\n               :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1710,ss_net_paid#1727,ss_sold_date_sk#1730] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1710)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1730), dynamicpruningexpression(ss_sold_date_sk#1730 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n               :                 :           +- SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n               :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#1731, d_year#1737], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1468]\n                                                      +- Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n               :                 +- BroadcastQueryStage 2\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n               :                       +- *(3) Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n               :                          +- *(3) ColumnarToRow\n               :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n               +- *(17) Sort [c_customer_sk#1690 ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 4\n                        +- ReusedExchange [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 146009760,
        "inputRowCount" : 1819089
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 346813, 335375, 346813, 338949, 336729, 339307, 342881, 342881, 338949, 331801, 338949, 338949, 343239, 342881, 338949, 342881, 338949, 346813, 332159, 340661, 343239, 342881, 342881, 339307, 342881, 337087, 336729, 345322, 342881, 339307, 342881, 338949, 339307, 353186, 335375, 338949, 338949, 341019, 338949, 342881, 335375, 341390, 338949, 342881, 336729, 340661, 342881, 340661, 342881, 344593, 345322, 342881, 342881, 340661, 341019, 335375, 339665, 338949, 338949, 339307, 342881, 331801, 346813, 342881, 338949, 339307, 333155, 346813, 346813, 342881, 336729, 340661, 342881, 347171, 346813, 345680, 341019, 342881, 350745, 342881, 335375, 342881, 346813, 338949, 338949, 338949, 346813, 346813, 350745, 342881, 336729, 342881, 342881, 342881, 346813, 336729, 340661, 338949, 343239, 342881, 338949, 342881, 339307, 335375, 342881, 340661, 338949, 335375, 335375, 338949, 346813, 343239, 346813, 338949, 343239, 335733, 338949, 335375, 344593, 337816, 331801, 338949, 339307, 342881, 346813, 346813, 346813, 344593, 338949, 344593, 339307, 340661, 338949, 339307, 346813, 337445, 342881, 340661, 339307, 340661, 337087, 338949, 339307, 342881, 342881, 338949, 333155, 342881, 350745, 342881, 342881, 335375, 336729, 342881, 335375, 338949, 336729, 335375, 342881, 338949, 340661, 346813, 343239, 342881, 336729, 335375, 342881, 339307, 338949, 336729, 346813, 342881, 333155, 343239, 338949, 333155, 335375, 338949, 339307, 342881, 346813, 339307, 342881, 341748, 342881, 339307, 342881, 335733, 346813, 338949, 342881, 335733, 344593, 338949, 346813, 346813, 342881, 342881, 342881, 333155 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 12032.0,
        "FinishedTasksDistributionInMs" : [ 5969.0, 5969.0, 6063.0, 6063.0, 6063.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 2515,
        "TotalTasksDurationInMs" : 2694,
        "IOBytes" : {
          "Total" : 129554628,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 64986900,
            "SW" : 64567728
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1753725266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22278560031,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 22278560031,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208] "
          },
          "1" : {
            "sign" : 1570783011,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23378735835,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 23378735835,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] "
          },
          "2" : {
            "sign" : -259015327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25579087443,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 25579087443,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1690 = ss_customer_sk#1710) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n+- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n   +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n      :- Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n      :  +- Join Inner, (ss_sold_date_sk#1730 = d_date_sk#1731)\n      :     :- Project [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730]\n      :     :  +- Filter ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730])\n      :     :     :  +- Project [d_date_sk#1731, d_year#1737]\n      :     :     :     +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1708,ss_item_sk#1709,ss_customer_sk#1710,ss_cdemo_sk#1711,ss_hdemo_sk#1712,ss_addr_sk#1713,ss_store_sk#1714,ss_promo_sk#1715,ss_ticket_number#1716L,ss_quantity#1717,ss_wholesale_cost#1718,ss_list_price#1719,ss_sales_price#1720,ss_ext_discount_amt#1721,ss_ext_sales_price#1722,ss_ext_wholesale_cost#1723,ss_ext_list_price#1724,ss_ext_tax#1725,ss_coupon_amt#1726,ss_net_paid#1727,ss_net_paid_inc_tax#1728,ss_net_profit#1729,ss_sold_date_sk#1730] parquet\n      :     +- Project [d_date_sk#1731, d_year#1737]\n      :        +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n      +- Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699]\n         +- Filter (isnotnull(c_customer_sk#1690) AND isnotnull(c_customer_id#1691))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1690,c_customer_id#1691,c_current_cdemo_sk#1692,c_current_hdemo_sk#1693,c_current_addr_sk#1694,c_first_shipto_date_sk#1695,c_first_sales_date_sk#1696,c_salutation#1697,c_first_name#1698,c_last_name#1699,c_preferred_cust_flag#1700,c_birth_day#1701,c_birth_month#1702,c_birth_year#1703,c_birth_country#1704,c_login#1705,c_email_address#1706,c_last_review_date#1707] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 2128804554,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1718625824,
            "rowCount" : 53707057,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] Arguments: 15 "
          },
          "5" : {
            "sign" : -1901865216,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699] Arguments: [c_customer_sk#1690 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1530570268,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699] Arguments: 4 "
          },
          "1" : {
            "sign" : 1760485935,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] Input [7]: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737, c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699] "
          },
          "0" : {
            "sign" : 1654404354,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 22278560031,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737] Keys [4]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737] Functions [1]: [partial_max(ss_net_paid#1727)] Aggregate Attributes [1]: [max#2179] Results [5]: [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180] "
          },
          "2" : {
            "sign" : 1246716871,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#1710] Right keys [1]: [c_customer_sk#1690] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1727488106,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] Arguments: [ss_customer_sk#1710 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[partial_max(ss_net_paid#1727)], output=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180])\n+- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n   +- SortMergeJoin [ss_customer_sk#1710], [c_customer_sk#1690], Inner\n      :- Sort [ss_customer_sk#1710 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 15\n      :     +- Exchange hashpartitioning(ss_customer_sk#1710, 200), ENSURE_REQUIREMENTS, [plan_id=1497]\n      :        +- *(11) Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n      :           +- *(11) BroadcastHashJoin [ss_sold_date_sk#1730], [d_date_sk#1731], Inner, BuildRight, false\n      :              :- *(11) Filter isnotnull(ss_customer_sk#1710)\n      :              :  +- *(11) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1710,ss_net_paid#1727,ss_sold_date_sk#1730] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1710)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1730), dynamicpruningexpression(ss_sold_date_sk#1730 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n      :              :           +- SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n      :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#1731, d_year#1737], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1468]\n                                          +- Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :              +- BroadcastQueryStage 2\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      :                    +- *(3) Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n      :                       +- *(3) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      +- Sort [c_customer_sk#1690 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- ReusedExchange [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1863153672,
        "inputRowCount" : 55707057
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 2436322, 2452990, 2427558, 2433813, 2419628, 2488090, 2444678, 2412457, 2468089, 2441047, 2486659, 2448075, 2472859, 2466540, 2425578, 2411213, 2487132, 2510655, 2439836, 2455171, 2404925, 2440145, 2520225, 2425337, 2443659, 2417725, 2420261, 2494020, 2467719, 2401012, 2427558, 2462759, 2468782, 2433890, 2475604, 2478703, 2439571, 2404647, 2382592, 2428691, 2424988, 2442078, 2412600, 2450816, 2458521, 2406076, 2476220, 2419199, 2474659, 2480029, 2480991, 2449251, 2421505, 2465266, 2480224, 2412600, 2459807, 2396706, 2407111, 2463557, 2444384, 2489873, 2435214, 2452603, 2411393, 2514469, 2449106, 2441743, 2439836, 2462637, 2460231, 2430372, 2408720, 2452179, 2465844, 2493949, 2478628, 2452798, 2459894, 2466109, 2482822, 2449033, 2501052, 2398304, 2414476, 2444369, 2422905, 2450818, 2491883, 2490555, 2440749, 2478418, 2457901, 2437090, 2490937, 2459322, 2412867, 2394833, 2418814, 2435718, 2430444, 2466407, 2446969, 2435146, 2427116, 2497799, 2441888, 2513816, 2383820, 2416046, 2424751, 2461962, 2487970, 2413635, 2447761, 2434848, 2388657, 2410431, 2468517, 2410768, 2444645, 2460807, 2476176, 2462759, 2480797, 2464233, 2427289, 2449252, 2476147, 2407685, 2486629, 2465151, 2466672, 2462787, 2406120, 2395111, 2443575, 2499602, 2459395, 2460608, 2446316, 2397618, 2439836, 2464635, 2467172, 2470685, 2542115, 2461962, 2465697, 2454374, 2465123, 2457462, 2510510, 2467796, 2457607, 2470565, 2449370, 2454431, 2524697, 2409633, 2411354, 2417665, 2458746, 2442802, 2487633, 2475101, 2427820, 2470830, 2474394, 2414904, 2477771, 2535368, 2521181, 2478762, 2471720, 2424543, 2482967, 2400291, 2439981, 2447878, 2416308, 2443228, 2366431, 2432473, 2510302, 2464088, 2526098, 2488529, 2416690, 2467098, 2495353, 2440339, 2454021, 2410481, 2491970, 2489875, 2453063, 2446321, 2478197, 2430509 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 32,
        "FinishedTasksTotalTimeInMs" : 102725.0,
        "FinishedTasksDistributionInMs" : [ 690.0, 769.0, 1455.0, 6188.0, 11615.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 7169,
        "TotalTasksDurationInMs" : 54778,
        "IOBytes" : {
          "Total" : 598360847,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 533373947,
            "SW" : 64986900
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1286290446,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#1932, ws_ship_date_sk#1933, ws_item_sk#1934, ws_bill_customer_sk#1935, ws_bill_cdemo_sk#1936, ws_bill_hdemo_sk#1937, ws_bill_addr_sk#1938, ws_ship_customer_sk#1939, ws_ship_cdemo_sk#1940, ws_ship_hdemo_sk#1941, ws_ship_addr_sk#1942, ws_web_page_sk#1943, ws_web_site_sk#1944, ws_ship_mode_sk#1945, ws_warehouse_sk#1946, ws_promo_sk#1947, ws_order_number#1948L, ws_quantity#1949, ws_wholesale_cost#1950, ws_list_price#1951, ws_sales_price#1952, ws_ext_discount_amt#1953, ws_ext_sales_price#1954, ws_ext_wholesale_cost#1955, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1087444151,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#1965 = d_date_sk#1966) "
          },
          "0" : {
            "sign" : -1326455575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972] "
          },
          "2" : {
            "sign" : 1651515803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727174424,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 1727174424,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965] "
          },
          "3" : {
            "sign" : 1795610686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n+- Join Inner, (ws_sold_date_sk#1965 = d_date_sk#1966)\n   :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965]\n   :  +- Filter ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965])\n   :     :  +- Project [d_date_sk#1966, d_year#1972]\n   :     :     +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1932,ws_ship_date_sk#1933,ws_item_sk#1934,ws_bill_customer_sk#1935,ws_bill_cdemo_sk#1936,ws_bill_hdemo_sk#1937,ws_bill_addr_sk#1938,ws_ship_customer_sk#1939,ws_ship_cdemo_sk#1940,ws_ship_hdemo_sk#1941,ws_ship_addr_sk#1942,ws_web_page_sk#1943,ws_web_site_sk#1944,ws_ship_mode_sk#1945,ws_warehouse_sk#1946,ws_promo_sk#1947,ws_order_number#1948L,ws_quantity#1949,ws_wholesale_cost#1950,ws_list_price#1951,ws_sales_price#1952,ws_ext_discount_amt#1953,ws_ext_sales_price#1954,ws_ext_wholesale_cost#1955,... 10 more fields] parquet\n   +- Project [d_date_sk#1966, d_year#1972]\n      +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1623104076,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#1966, d_year#1972] Arguments: 6 "
          },
          "1" : {
            "sign" : -480645576,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#1965] Right keys [1]: [d_date_sk#1966] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1017934138,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972] Input [5]: [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965, d_date_sk#1966, d_year#1972] "
          },
          "2" : {
            "sign" : -1967630003,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965] Condition : isnotnull(ws_bill_customer_sk#1935) "
          },
          "3" : {
            "sign" : -730983099,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#1965), dynamicpruningexpression(ws_sold_date_sk#1965 IN dynamicpruning#2173)] PushedFilters: [IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n+- BroadcastHashJoin [ws_sold_date_sk#1965], [d_date_sk#1966], Inner, BuildRight, false\n   :- Filter isnotnull(ws_bill_customer_sk#1935)\n   :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#1935,ws_net_paid#1960,ws_sold_date_sk#1965] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#1935)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#1965), dynamicpruningexpression(ws_sold_date_sk#1965 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n   +- BroadcastQueryStage 6\n      +- ReusedExchange [d_date_sk#1966, d_year#1972], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1728225920,
        "inputRowCount" : 71965966
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12177.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1223.0, 1529.0, 2004.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 9821,
        "TotalTasksDurationInMs" : 16938,
        "IOBytes" : {
          "Total" : 195786082,
          "Details" : {
            "IR" : 71089342,
            "IW" : 0,
            "SR" : 0,
            "SW" : 124696740
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 182830119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7967477019321981,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 7967477019321981,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)) "
          },
          "5" : {
            "sign" : 872625663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 171019087530250,
                "rowCount" : 1368152700242
              },
              "compileTime" : {
                "sizeInBytes" : 171019087530250,
                "rowCount" : 1368152700242
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] "
          },
          "6" : {
            "sign" : 585102249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 209327363137026,
                "rowCount" : 1368152700242
              },
              "compileTime" : {
                "sizeInBytes" : 209327363137026,
                "rowCount" : 1368152700242
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1142 = customer_id#1148) "
          },
          "1" : {
            "sign" : 771250216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1765219969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6800,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 6800,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 781609111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 202265039,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4425476736447,
                "rowCount" : 37824587491
              },
              "compileTime" : {
                "sizeInBytes" : 4425476736447,
                "rowCount" : 37824587491
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1204 = customer_id#1142) "
          },
          "3" : {
            "sign" : 1849387941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 3612582747891333,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], true\n      +- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n         +- Join Inner, ((customer_id#1142 = customer_id#1216) AND (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END))\n            :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n            :  +- Join Inner, (customer_id#1142 = customer_id#1148)\n            :     :- Join Inner, (customer_id#1204 = customer_id#1142)\n            :     :  :- Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n            :     :  :     +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n            :     :  :        +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n            :     :  :           :- Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n            :     :  :           :     :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52])\n            :     :  :           :     :     :  +- Project [d_date_sk#53, d_year#59]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n            :     :  :           :     +- Project [d_date_sk#53, d_year#59]\n            :     :  :           :        +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n            :     :  :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n            :     :  :           +- Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21]\n            :     :  :              +- Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n            :     :  :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_current_cdemo_sk#14,c_current_hdemo_sk#15,c_current_addr_sk#16,c_first_shipto_date_sk#17,c_first_sales_date_sk#18,c_salutation#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet\n            :     :  +- Aggregate [c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], [c_customer_id#1691 AS customer_id#1204, c_first_name#1698 AS customer_first_name#1205, c_last_name#1699 AS customer_last_name#1206, max(ss_net_paid#1727) AS year_total#1208]\n            :     :     +- Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n            :     :        +- Join Inner, (c_customer_sk#1690 = ss_customer_sk#1710)\n            :     :           :- Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#1730 = d_date_sk#1731)\n            :     :           :     :- Project [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730])\n            :     :           :     :     :  +- Project [d_date_sk#1731, d_year#1737]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1708,ss_item_sk#1709,ss_customer_sk#1710,ss_cdemo_sk#1711,ss_hdemo_sk#1712,ss_addr_sk#1713,ss_store_sk#1714,ss_promo_sk#1715,ss_ticket_number#1716L,ss_quantity#1717,ss_wholesale_cost#1718,ss_list_price#1719,ss_sales_price#1720,ss_ext_discount_amt#1721,ss_ext_sales_price#1722,ss_ext_wholesale_cost#1723,ss_ext_list_price#1724,ss_ext_tax#1725,ss_coupon_amt#1726,ss_net_paid#1727,ss_net_paid_inc_tax#1728,ss_net_profit#1729,ss_sold_date_sk#1730] parquet\n            :     :           :     +- Project [d_date_sk#1731, d_year#1737]\n            :     :           :        +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n            :     :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n            :     :           +- Project [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699]\n            :     :              +- Filter (isnotnull(c_customer_sk#1690) AND isnotnull(c_customer_id#1691))\n            :     :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1690,c_customer_id#1691,c_current_cdemo_sk#1692,c_current_hdemo_sk#1693,c_current_addr_sk#1694,c_first_shipto_date_sk#1695,c_first_sales_date_sk#1696,c_salutation#1697,c_first_name#1698,c_last_name#1699,c_preferred_cust_flag#1700,c_birth_day#1701,c_birth_month#1702,c_birth_year#1703,c_birth_country#1704,c_login#1705,c_email_address#1706,c_last_review_date#1707] parquet\n            :     +- Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n            :        +- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n            :           +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n            :              +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n            :                 :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n            :                 :  +- Join Inner, (ws_sold_date_sk#1965 = d_date_sk#1966)\n            :                 :     :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965])\n            :                 :     :     :  +- Project [d_date_sk#1966, d_year#1972]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1932,ws_ship_date_sk#1933,ws_item_sk#1934,ws_bill_customer_sk#1935,ws_bill_cdemo_sk#1936,ws_bill_hdemo_sk#1937,ws_bill_addr_sk#1938,ws_ship_customer_sk#1939,ws_ship_cdemo_sk#1940,ws_ship_hdemo_sk#1941,ws_ship_addr_sk#1942,ws_web_page_sk#1943,ws_web_site_sk#1944,ws_ship_mode_sk#1945,ws_warehouse_sk#1946,ws_promo_sk#1947,ws_order_number#1948L,ws_quantity#1949,ws_wholesale_cost#1950,ws_list_price#1951,ws_sales_price#1952,ws_ext_discount_amt#1953,ws_ext_sales_price#1954,ws_ext_wholesale_cost#1955,... 10 more fields] parquet\n            :                 :     +- Project [d_date_sk#1966, d_year#1972]\n            :                 :        +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n            :                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n            :                 +- Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923]\n            :                    +- Filter (isnotnull(c_customer_sk#1914) AND isnotnull(c_customer_id#1915))\n            :                       +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1914,c_customer_id#1915,c_current_cdemo_sk#1916,c_current_hdemo_sk#1917,c_current_addr_sk#1918,c_first_shipto_date_sk#1919,c_first_sales_date_sk#1920,c_salutation#1921,c_first_name#1922,c_last_name#1923,c_preferred_cust_flag#1924,c_birth_day#1925,c_birth_month#1926,c_birth_year#1927,c_birth_country#1928,c_login#1929,c_email_address#1930,c_last_review_date#1931] parquet\n            +- Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n               +- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                  +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n                     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n                     :  +- Join Inner, (ws_sold_date_sk#2120 = d_date_sk#2121)\n                     :     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120])\n                     :     :     :  +- Project [d_date_sk#2121, d_year#2127]\n                     :     :     :     +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2087,ws_ship_date_sk#2088,ws_item_sk#2089,ws_bill_customer_sk#2090,ws_bill_cdemo_sk#2091,ws_bill_hdemo_sk#2092,ws_bill_addr_sk#2093,ws_ship_customer_sk#2094,ws_ship_cdemo_sk#2095,ws_ship_hdemo_sk#2096,ws_ship_addr_sk#2097,ws_web_page_sk#2098,ws_web_site_sk#2099,ws_ship_mode_sk#2100,ws_warehouse_sk#2101,ws_promo_sk#2102,ws_order_number#2103L,ws_quantity#2104,ws_wholesale_cost#2105,ws_list_price#2106,ws_sales_price#2107,ws_ext_discount_amt#2108,ws_ext_sales_price#2109,ws_ext_wholesale_cost#2110,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#2121, d_year#2127]\n                     :        +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n                     +- Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078]\n                        +- Filter (isnotnull(c_customer_sk#2069) AND isnotnull(c_customer_id#2070))\n                           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2069,c_customer_id#2070,c_current_cdemo_sk#2071,c_current_hdemo_sk#2072,c_current_addr_sk#2073,c_first_shipto_date_sk#2074,c_first_sales_date_sk#2075,c_salutation#2076,c_first_name#2077,c_last_name#2078,c_preferred_cust_flag#2079,c_birth_day#2080,c_birth_month#2081,c_birth_year#2082,c_birth_country#2083,c_login#2084,c_email_address#2085,c_last_review_date#2086] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1501881722,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1216, year_total#1220] Arguments: [customer_id#1216 ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 541999335,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208] Arguments: [customer_id#1204 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -567827562,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 209327363137026,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1142] Right keys [1]: [customer_id#1148] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1601883534,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1148, year_total#1152] Arguments: 21 "
          },
          "9" : {
            "sign" : 616621259,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 131457048,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208] Arguments: 22 "
          },
          "13" : {
            "sign" : 1027782267,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1216, year_total#1220] Arguments: 24 "
          },
          "5" : {
            "sign" : 167703868,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 4425476736447,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1142] Right keys [1]: [customer_id#1204] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : 1996961291,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1148, year_total#1152] Arguments: [customer_id#1148 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 648067691,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1142, year_total#1146] Arguments: [customer_id#1142 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -1790038354,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3612582747891333,
            "rowCount" : 49487434902621,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] Input [9]: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152, customer_id#1216, year_total#1220] "
          },
          "0" : {
            "sign" : 763820517,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 6800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [3]: [customer_id#1204, customer_first_name#1205, customer_last_name#1206] Arguments: 100, [customer_first_name#1205 ASC NULLS FIRST, customer_id#1204 ASC NULLS FIRST, customer_last_name#1206 ASC NULLS FIRST], [customer_id#1204, customer_first_name#1205, customer_last_name#1206] "
          },
          "2" : {
            "sign" : 248606172,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 7967477019321981,
            "rowCount" : 49487434902621,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1142] Right keys [1]: [customer_id#1216] Join type: Inner Join condition: (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END) "
          },
          "7" : {
            "sign" : -1105228514,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 72667920,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1142, year_total#1146] Arguments: 23 "
          },
          "3" : {
            "sign" : 1348797538,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 171019087530250,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152] Input [8]: [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, customer_id#1148, year_total#1152] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[customer_first_name#1205 ASC NULLS FIRST,customer_id#1204 ASC NULLS FIRST,customer_last_name#1206 ASC NULLS FIRST], output=[customer_id#1204,customer_first_name#1205,customer_last_name#1206])\n+- Project [customer_id#1204, customer_first_name#1205, customer_last_name#1206]\n   +- SortMergeJoin [customer_id#1142], [customer_id#1216], Inner, (CASE WHEN (year_total#1152 > 0.00) THEN (year_total#1220 / year_total#1152) END > CASE WHEN (year_total#1146 > 0.00) THEN (year_total#1208 / year_total#1146) END)\n      :- Project [customer_id#1142, year_total#1146, customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208, year_total#1152]\n      :  +- SortMergeJoin [customer_id#1142], [customer_id#1148], Inner\n      :     :- SortMergeJoin [customer_id#1142], [customer_id#1204], Inner\n      :     :  :- Sort [customer_id#1142 ASC NULLS FIRST], false, 0\n      :     :  :  +- ShuffleQueryStage 23\n      :     :  :     +- Exchange hashpartitioning(customer_id#1142, 200), ENSURE_REQUIREMENTS, [plan_id=2852]\n      :     :  :        +- *(27) Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n      :     :  :           +- *(27) HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)], output=[customer_id#1142, year_total#1146])\n      :     :  :              +- AQEShuffleRead coalesced\n      :     :  :                 +- ShuffleQueryStage 19\n      :     :  :                    +- Exchange hashpartitioning(c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, 200), ENSURE_REQUIREMENTS, [plan_id=2404]\n      :     :  :                       +- *(21) HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[partial_max(ss_net_paid#49)], output=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178])\n      :     :  :                          +- *(21) Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n      :     :  :                             +- *(21) SortMergeJoin [ss_customer_sk#32], [c_customer_sk#12], Inner\n      :     :  :                                :- *(19) Sort [ss_customer_sk#32 ASC NULLS FIRST], false, 0\n      :     :  :                                :  +- AQEShuffleRead coalesced\n      :     :  :                                :     +- ShuffleQueryStage 13\n      :     :  :                                :        +- Exchange hashpartitioning(ss_customer_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1075]\n      :     :  :                                :           +- *(9) Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n      :     :  :                                :              +- *(9) BroadcastHashJoin [ss_sold_date_sk#52], [d_date_sk#53], Inner, BuildRight, false\n      :     :  :                                :                 :- *(9) Filter isnotnull(ss_customer_sk#32)\n      :     :  :                                :                 :  +- *(9) ColumnarToRow\n      :     :  :                                :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#32,ss_net_paid#49,ss_sold_date_sk#52] Batched: true, DataFilters: [isnotnull(ss_customer_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#52), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#2173)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n      :     :  :                                :                 :           +- SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n      :     :  :                                :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#53, d_year#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1046]\n                                                                                       +- Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :  :                                :                 +- BroadcastQueryStage 0\n      :     :  :                                :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :     :  :                                :                       +- *(1) Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n      :     :  :                                :                          +- *(1) ColumnarToRow\n      :     :  :                                :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :  :                                +- *(20) Sort [c_customer_sk#12 ASC NULLS FIRST], false, 0\n      :     :  :                                   +- AQEShuffleRead coalesced\n      :     :  :                                      +- ShuffleQueryStage 1\n      :     :  :                                         +- Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      :     :  :                                            +- *(2) Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n      :     :  :                                               +- *(2) ColumnarToRow\n      :     :  :                                                  +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_first_name#20,c_last_name#21] Batched: true, DataFilters: [isnotnull(c_customer_sk#12), isnotnull(c_customer_id#13)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>\n      :     :  +- Sort [customer_id#1204 ASC NULLS FIRST], false, 0\n      :     :     +- ShuffleQueryStage 22\n      :     :        +- Exchange hashpartitioning(customer_id#1204, 200), ENSURE_REQUIREMENTS, [plan_id=2696]\n      :     :           +- *(26) HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[max(ss_net_paid#1727)], output=[customer_id#1204, customer_first_name#1205, customer_last_name#1206, year_total#1208])\n      :     :              +- AQEShuffleRead coalesced\n      :     :                 +- ShuffleQueryStage 18\n      :     :                    +- Exchange hashpartitioning(c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, 200), ENSURE_REQUIREMENTS, [plan_id=2251]\n      :     :                       +- *(18) HashAggregate(keys=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737], functions=[partial_max(ss_net_paid#1727)], output=[c_customer_id#1691, c_first_name#1698, c_last_name#1699, d_year#1737, max#2180])\n      :     :                          +- *(18) Project [c_customer_id#1691, c_first_name#1698, c_last_name#1699, ss_net_paid#1727, d_year#1737]\n      :     :                             +- *(18) SortMergeJoin [ss_customer_sk#1710], [c_customer_sk#1690], Inner\n      :     :                                :- *(16) Sort [ss_customer_sk#1710 ASC NULLS FIRST], false, 0\n      :     :                                :  +- AQEShuffleRead coalesced\n      :     :                                :     +- ShuffleQueryStage 15\n      :     :                                :        +- Exchange hashpartitioning(ss_customer_sk#1710, 200), ENSURE_REQUIREMENTS, [plan_id=1497]\n      :     :                                :           +- *(11) Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n      :     :                                :              +- *(11) BroadcastHashJoin [ss_sold_date_sk#1730], [d_date_sk#1731], Inner, BuildRight, false\n      :     :                                :                 :- *(11) Filter isnotnull(ss_customer_sk#1710)\n      :     :                                :                 :  +- *(11) ColumnarToRow\n      :     :                                :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1710,ss_net_paid#1727,ss_sold_date_sk#1730] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1710)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1730), dynamicpruningexpression(ss_sold_date_sk#1730 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n      :     :                                :                 :           +- SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n      :     :                                :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#1731, d_year#1737], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1468]\n                                                                                    +- Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :                                :                 +- BroadcastQueryStage 2\n      :     :                                :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      :     :                                :                       +- *(3) Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n      :     :                                :                          +- *(3) ColumnarToRow\n      :     :                                :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :                                +- *(17) Sort [c_customer_sk#1690 ASC NULLS FIRST], false, 0\n      :     :                                   +- AQEShuffleRead coalesced\n      :     :                                      +- ShuffleQueryStage 4\n      :     :                                         +- ReusedExchange [c_customer_sk#1690, c_customer_id#1691, c_first_name#1698, c_last_name#1699], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      :     +- Sort [customer_id#1148 ASC NULLS FIRST], false, 0\n      :        +- ShuffleQueryStage 21\n      :           +- Exchange hashpartitioning(customer_id#1148, 200), ENSURE_REQUIREMENTS, [plan_id=2624]\n      :              +- *(25) Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n      :                 +- *(25) HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)], output=[customer_id#1148, year_total#1152])\n      :                    +- AQEShuffleRead coalesced\n      :                       +- ShuffleQueryStage 17\n      :                          +- Exchange hashpartitioning(c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, 200), ENSURE_REQUIREMENTS, [plan_id=2082]\n      :                             +- *(15) HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[partial_max(ws_net_paid#1960)], output=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182])\n      :                                +- *(15) Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n      :                                   +- *(15) SortMergeJoin [ws_bill_customer_sk#1935], [c_customer_sk#1914], Inner\n      :                                      :- *(13) Sort [ws_bill_customer_sk#1935 ASC NULLS FIRST], false, 0\n      :                                      :  +- AQEShuffleRead coalesced\n      :                                      :     +- ShuffleQueryStage 14\n      :                                      :        +- Exchange hashpartitioning(ws_bill_customer_sk#1935, 200), ENSURE_REQUIREMENTS, [plan_id=1179]\n      :                                      :           +- *(10) Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n      :                                      :              +- *(10) BroadcastHashJoin [ws_sold_date_sk#1965], [d_date_sk#1966], Inner, BuildRight, false\n      :                                      :                 :- *(10) Filter isnotnull(ws_bill_customer_sk#1935)\n      :                                      :                 :  +- *(10) ColumnarToRow\n      :                                      :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#1935,ws_net_paid#1960,ws_sold_date_sk#1965] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#1935)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#1965), dynamicpruningexpression(ws_sold_date_sk#1965 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n      :                                      :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n      :                                      :                 +- BroadcastQueryStage 6\n      :                                      :                    +- ReusedExchange [d_date_sk#1966, d_year#1972], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :                                      +- *(14) Sort [c_customer_sk#1914 ASC NULLS FIRST], false, 0\n      :                                         +- AQEShuffleRead coalesced\n      :                                            +- ShuffleQueryStage 8\n      :                                               +- ReusedExchange [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      +- Sort [customer_id#1216 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 24\n            +- Exchange hashpartitioning(customer_id#1216, 200), ENSURE_REQUIREMENTS, [plan_id=2916]\n               +- *(28) HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)], output=[customer_id#1216, year_total#1220])\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 20\n                        +- Exchange hashpartitioning(c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, 200), ENSURE_REQUIREMENTS, [plan_id=2538]\n                           +- *(24) HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[partial_max(ws_net_paid#2115)], output=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184])\n                              +- *(24) Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n                                 +- *(24) SortMergeJoin [ws_bill_customer_sk#2090], [c_customer_sk#2069], Inner\n                                    :- *(22) Sort [ws_bill_customer_sk#2090 ASC NULLS FIRST], false, 0\n                                    :  +- AQEShuffleRead coalesced\n                                    :     +- ShuffleQueryStage 16\n                                    :        +- Exchange hashpartitioning(ws_bill_customer_sk#2090, 200), ENSURE_REQUIREMENTS, [plan_id=1572]\n                                    :           +- *(12) Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n                                    :              +- *(12) BroadcastHashJoin [ws_sold_date_sk#2120], [d_date_sk#2121], Inner, BuildRight, false\n                                    :                 :- *(12) Filter isnotnull(ws_bill_customer_sk#2090)\n                                    :                 :  +- *(12) ColumnarToRow\n                                    :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2090,ws_net_paid#2115,ws_sold_date_sk#2120] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2090)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2120), dynamicpruningexpression(ws_sold_date_sk#2120 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n                                    :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n                                    :                 +- BroadcastQueryStage 10\n                                    :                    +- ReusedExchange [d_date_sk#2121, d_year#2127], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                    +- *(23) Sort [c_customer_sk#2069 ASC NULLS FIRST], false, 0\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 12\n                                             +- ReusedExchange [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 276176568,
        "inputRowCount" : 5437077
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "11" : [ 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395 ],
        "10" : [ 327127, 327127, 327834, 328612, 326484, 326484, 327127, 327127, 327834, 359133, 327834, 327127, 326484, 359840, 359133, 326484, 327834, 327127, 327834, 327834, 327127, 327127, 359840, 326484, 327127, 326484, 326484, 326484, 327127, 359840, 326484, 357906, 327127, 327127, 360618, 327834, 327127, 327127, 325900, 327834, 359133, 326484, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 326484, 327127, 326484, 327834, 327834, 327834, 327834, 326484, 359133, 327834, 326484, 327834, 327127, 326484, 358490, 327127, 326484, 326484, 327127, 327127, 327834, 326484, 327127, 327127, 327834, 327834, 327834, 326484, 327834, 326484, 326484, 327127, 326484, 328612, 326484, 359840, 327127, 326484, 327127, 326484, 327834, 359840, 359133, 327834, 359133, 359133, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127, 327127, 327834, 359133, 327834, 327127, 327834, 327834, 327127, 327834, 327127, 327127, 327834, 327834, 327127, 328612, 359133, 359840, 327127, 327127, 359133, 326484, 327127, 327834, 326484, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 328612, 327127, 327127, 327127, 327127, 326484, 327127, 328612, 327834, 326484, 327834, 327127, 326484, 327127, 359133, 327127, 327834, 326484, 359133, 326484, 326484, 359133, 327834, 327127, 327127, 327127, 327127, 327834, 326484, 327127, 326484, 326484, 327834, 327127, 327834, 327834, 327127, 326484, 327127, 359133, 327127, 327127, 326484, 327834, 327834, 327834, 326484, 326484, 327127, 327127, 359133, 327127, 326484, 327834, 326484, 327127, 359840, 359840, 327127, 327127, 327127, 327127, 327127, 327834, 327127, 327127 ],
        "9" : [ 63321, 57565, 57565, 57565, 63321, 57565, 57565, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 57565, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321 ],
        "12" : [ 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 57565, 63321, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 63321, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 57565, 57565, 63321, 63321, 63321, 57565, 63321, 63321, 63321, 57565, 57565, 57565, 63321, 57565, 57565, 57565, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321, 63321 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 43 ],
      "Objectives" : {
        "DurationInMs" : 6904,
        "TotalTasksDurationInMs" : 11615,
        "IOBytes" : {
          "Total" : 111244337,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 111244337,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1675883117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n+- Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n   +- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n      +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n         :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n         :  +- Join Inner, (ws_sold_date_sk#1965 = d_date_sk#1966)\n         :     :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965]\n         :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965])\n         :     :     :  +- Project [d_date_sk#1966, d_year#1972]\n         :     :     :     +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n         :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n         :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1932,ws_ship_date_sk#1933,ws_item_sk#1934,ws_bill_customer_sk#1935,ws_bill_cdemo_sk#1936,ws_bill_hdemo_sk#1937,ws_bill_addr_sk#1938,ws_ship_customer_sk#1939,ws_ship_cdemo_sk#1940,ws_ship_hdemo_sk#1941,ws_ship_addr_sk#1942,ws_web_page_sk#1943,ws_web_site_sk#1944,ws_ship_mode_sk#1945,ws_warehouse_sk#1946,ws_promo_sk#1947,ws_order_number#1948L,ws_quantity#1949,ws_wholesale_cost#1950,ws_list_price#1951,ws_sales_price#1952,ws_ext_discount_amt#1953,ws_ext_sales_price#1954,ws_ext_wholesale_cost#1955,... 10 more fields] parquet\n         :     +- Project [d_date_sk#1966, d_year#1972]\n         :        +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n         :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n         +- Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923]\n            +- Filter (isnotnull(c_customer_sk#1914) AND isnotnull(c_customer_id#1915))\n               +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1914,c_customer_id#1915,c_current_cdemo_sk#1916,c_current_hdemo_sk#1917,c_current_addr_sk#1918,c_first_shipto_date_sk#1919,c_first_sales_date_sk#1920,c_salutation#1921,c_first_name#1922,c_last_name#1923,c_preferred_cust_flag#1924,c_birth_day#1925,c_birth_month#1926,c_birth_year#1927,c_birth_country#1928,c_login#1929,c_email_address#1930,c_last_review_date#1931] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1501507623,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [customer_id#1148, year_total#1152] Condition : (isnotnull(year_total#1152) AND (year_total#1152 > 0.00)) "
          },
          "1" : {
            "sign" : 1379229883,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 72161088,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182] Keys [4]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972] Functions [1]: [max(ws_net_paid#1960)] Aggregate Attributes [1]: [max(ws_net_paid#1960)#1201] Results [2]: [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960)#1201 AS year_total#1152] "
          },
          "2" : {
            "sign" : 1496391412,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182] Arguments: 17 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(year_total#1152) AND (year_total#1152 > 0.00))\n+- HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[max(ws_net_paid#1960)], output=[customer_id#1148, year_total#1152])\n   +- ShuffleQueryStage 17\n      +- Exchange hashpartitioning(c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, 200), ENSURE_REQUIREMENTS, [plan_id=2082]\n         +- *(15) HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[partial_max(ws_net_paid#1960)], output=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182])\n            +- *(15) Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n               +- *(15) SortMergeJoin [ws_bill_customer_sk#1935], [c_customer_sk#1914], Inner\n                  :- *(13) Sort [ws_bill_customer_sk#1935 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 14\n                  :        +- Exchange hashpartitioning(ws_bill_customer_sk#1935, 200), ENSURE_REQUIREMENTS, [plan_id=1179]\n                  :           +- *(10) Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n                  :              +- *(10) BroadcastHashJoin [ws_sold_date_sk#1965], [d_date_sk#1966], Inner, BuildRight, false\n                  :                 :- *(10) Filter isnotnull(ws_bill_customer_sk#1935)\n                  :                 :  +- *(10) ColumnarToRow\n                  :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#1935,ws_net_paid#1960,ws_sold_date_sk#1965] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#1935)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#1965), dynamicpruningexpression(ws_sold_date_sk#1965 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n                  :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n                  :                 +- BroadcastQueryStage 6\n                  :                    +- ReusedExchange [d_date_sk#1966, d_year#1972], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                  +- *(14) Sort [c_customer_sk#1914 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 8\n                           +- ReusedExchange [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 72161088,
        "inputRowCount" : 899061
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 169323, 169323, 174743, 163919, 169509, 169714, 169714, 169939, 169323, 164089, 163919, 174743, 163919, 169323, 174948, 164275, 174948, 159471, 164705, 169509, 169323, 174557, 174948, 169509, 169714, 163919, 164275, 163919, 169153, 169509, 174948, 170187, 174557, 169153, 163919, 169323, 169509, 164480, 169323, 164275, 174387, 169323, 174387, 163765, 163919, 174948, 163919, 169323, 164089, 168999, 169509, 169153, 164089, 174948, 169714, 169509, 169714, 164480, 164480, 164275, 164089, 169509, 175173, 169714, 169323, 163919, 164275, 169153, 169509, 169153, 159471, 168999, 159246, 174948, 174557, 169153, 169323, 174743, 169509, 164275, 174387, 168999, 174557, 174743, 169714, 169153, 164705, 163919, 169714, 169509, 169509, 163919, 163765, 174387, 158531, 169323, 164705, 174387, 169323, 169323, 164275, 164089, 169714, 169323, 169509, 174948, 174557, 169323, 169323, 164705, 159041, 169509, 170187, 169509, 169153, 164275, 169509, 169714, 169323, 169714, 169153, 169509, 164275, 169509, 164089, 164089, 169714, 174387, 174557, 158392, 169323, 164089, 168999, 174743, 169939, 169939, 169323, 164275, 164275, 164953, 169714, 169323, 169714, 169509, 175173, 164275, 174948, 163919, 174743, 164275, 163919, 174557, 164089, 169323, 169509, 174948, 169153, 168999, 169714, 174387, 175173, 169153, 159041, 164705, 164089, 174948, 169939, 174948, 169714, 169323, 174557, 169509, 174948, 174387, 164705, 174557, 169153, 158855, 169323, 164089, 158855, 164275, 169714, 164705, 174387, 169714, 174557, 164275, 164480, 169509, 164275, 174743, 169509, 169714, 169153, 164275, 164480, 174557, 174557, 169714 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 3755.0,
        "FinishedTasksDistributionInMs" : [ 3755.0, 3755.0, 3755.0, 3755.0, 3755.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 1848,
        "TotalTasksDurationInMs" : 925,
        "IOBytes" : {
          "Total" : 43614281,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 31995786,
            "SW" : 11618495
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -920711519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146] "
          },
          "1" : {
            "sign" : 1597832336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23378735835,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 23378735835,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] "
          },
          "2" : {
            "sign" : 1217542321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25579087443,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 25579087443,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#12 = ss_customer_sk#32) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n+- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n   +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n      :- Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n      :  +- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n      :     :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n      :     :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52])\n      :     :     :  +- Project [d_date_sk#53, d_year#59]\n      :     :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n      :     +- Project [d_date_sk#53, d_year#59]\n      :        +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n      +- Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21]\n         +- Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_current_cdemo_sk#14,c_current_hdemo_sk#15,c_current_addr_sk#16,c_first_shipto_date_sk#17,c_first_sales_date_sk#18,c_salutation#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -619623082,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1709217184,
            "rowCount" : 53413037,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_customer_sk#32, ss_net_paid#49, d_year#59] Arguments: 13 "
          },
          "5" : {
            "sign" : -1316114688,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] Arguments: [c_customer_sk#12 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1023478225,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] Arguments: 1 "
          },
          "1" : {
            "sign" : -1188709745,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 23378735835,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] Input [7]: [ss_customer_sk#32, ss_net_paid#49, d_year#59, c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] "
          },
          "0" : {
            "sign" : 307245179,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59] Keys [4]: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59] Functions [1]: [partial_max(ss_net_paid#49)] Aggregate Attributes [1]: [max#2177] Results [5]: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178] "
          },
          "2" : {
            "sign" : -1705603682,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 25579087443,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#32] Right keys [1]: [c_customer_sk#12] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1192592104,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ss_customer_sk#32, ss_net_paid#49, d_year#59] Arguments: [ss_customer_sk#32 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[partial_max(ss_net_paid#49)], output=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178])\n+- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n   +- SortMergeJoin [ss_customer_sk#32], [c_customer_sk#12], Inner\n      :- Sort [ss_customer_sk#32 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 13\n      :     +- Exchange hashpartitioning(ss_customer_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1075]\n      :        +- *(9) Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n      :           +- *(9) BroadcastHashJoin [ss_sold_date_sk#52], [d_date_sk#53], Inner, BuildRight, false\n      :              :- *(9) Filter isnotnull(ss_customer_sk#32)\n      :              :  +- *(9) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#32,ss_net_paid#49,ss_sold_date_sk#52] Batched: true, DataFilters: [isnotnull(ss_customer_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#52), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#2173)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n      :              :           +- SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n      :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#53, d_year#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1046]\n                                          +- Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :              +- BroadcastQueryStage 0\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :                    +- *(1) Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n      :                       +- *(1) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      +- Sort [c_customer_sk#12 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 1\n            +- Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n               +- *(2) Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n                  +- *(2) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_first_name#20,c_last_name#21] Batched: true, DataFilters: [isnotnull(c_customer_sk#12), isnotnull(c_customer_id#13)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1853745032,
        "inputRowCount" : 55413037
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 2488960, 2475451, 2446936, 2447998, 2465078, 2445737, 2451734, 2425723, 2473503, 2464929, 2509328, 2490138, 2496472, 2487225, 2445360, 2456084, 2467751, 2498834, 2462637, 2413710, 2449207, 2495823, 2459810, 2478698, 2504634, 2482897, 2463025, 2489299, 2468903, 2454166, 2413586, 2441372, 2501540, 2448973, 2476603, 2464310, 2469091, 2408598, 2432944, 2442963, 2435364, 2477017, 2417990, 2470183, 2492885, 2436898, 2504899, 2437461, 2463555, 2479014, 2475500, 2458521, 2428191, 2478749, 2430903, 2427052, 2421947, 2437041, 2438536, 2425578, 2450507, 2496813, 2412235, 2472488, 2407830, 2520921, 2484650, 2443141, 2440412, 2499973, 2464133, 2409562, 2471161, 2481932, 2486626, 2473330, 2481638, 2496885, 2501226, 2444263, 2453402, 2494020, 2491103, 2424044, 2448563, 2454862, 2420543, 2453255, 2475098, 2507143, 2455804, 2455630, 2506717, 2471099, 2443704, 2488104, 2409296, 2432031, 2454599, 2386033, 2399450, 2471511, 2433742, 2416773, 2431908, 2501773, 2502034, 2520225, 2424955, 2446744, 2422424, 2459777, 2469503, 2501696, 2483838, 2445905, 2413752, 2416191, 2459749, 2456012, 2423432, 2434996, 2508978, 2465846, 2477476, 2503676, 2473503, 2420038, 2439763, 2410552, 2481932, 2449757, 2480447, 2458257, 2420735, 2429032, 2467383, 2474468, 2463529, 2484605, 2430875, 2433016, 2484838, 2474257, 2417857, 2462522, 2544214, 2450805, 2454054, 2469119, 2504047, 2434446, 2490703, 2488090, 2488191, 2479308, 2406486, 2482730, 2497993, 2429047, 2430566, 2417588, 2472859, 2434654, 2459512, 2477195, 2457076, 2488030, 2469989, 2401020, 2444484, 2482009, 2466066, 2485297, 2464233, 2433013, 2479471, 2416526, 2467718, 2455365, 2458863, 2435214, 2445325, 2447230, 2529003, 2466036, 2544256, 2499132, 2424957, 2468206, 2488297, 2453707, 2442387, 2399513, 2489419, 2502996, 2446245, 2455591, 2460929, 2459514 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 12336.0,
        "FinishedTasksDistributionInMs" : [ 661.0, 724.0, 748.0, 807.0, 1099.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 10337,
        "TotalTasksDurationInMs" : 48858,
        "IOBytes" : {
          "Total" : 600257616,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 535352379,
            "SW" : 64905237
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1097195053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n+- Aggregate [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49) AS year_total#1146]\n   +- Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n      +- Join Inner, (c_customer_sk#12 = ss_customer_sk#32)\n         :- Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n         :  +- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n         :     :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n         :     :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52])\n         :     :     :  +- Project [d_date_sk#53, d_year#59]\n         :     :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n         :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n         :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n         :     +- Project [d_date_sk#53, d_year#59]\n         :        +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n         :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n         +- Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21]\n            +- Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n               +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_current_cdemo_sk#14,c_current_hdemo_sk#15,c_current_addr_sk#16,c_first_shipto_date_sk#17,c_first_sales_date_sk#18,c_salutation#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -739612064,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [customer_id#1142, year_total#1146] Condition : (isnotnull(year_total#1146) AND (year_total#1146 > 0.00)) "
          },
          "1" : {
            "sign" : 1199212950,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 145814488,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178] Keys [4]: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59] Functions [1]: [max(ss_net_paid#49)] Aggregate Attributes [1]: [max(ss_net_paid#49)#1200] Results [2]: [c_customer_id#13 AS customer_id#1142, max(ss_net_paid#49)#1200 AS year_total#1146] "
          },
          "2" : {
            "sign" : -777285854,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178] Arguments: 19 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(year_total#1146) AND (year_total#1146 > 0.00))\n+- HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[max(ss_net_paid#49)], output=[customer_id#1142, year_total#1146])\n   +- ShuffleQueryStage 19\n      +- Exchange hashpartitioning(c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, 200), ENSURE_REQUIREMENTS, [plan_id=2404]\n         +- *(21) HashAggregate(keys=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59], functions=[partial_max(ss_net_paid#49)], output=[c_customer_id#13, c_first_name#20, c_last_name#21, d_year#59, max#2178])\n            +- *(21) Project [c_customer_id#13, c_first_name#20, c_last_name#21, ss_net_paid#49, d_year#59]\n               +- *(21) SortMergeJoin [ss_customer_sk#32], [c_customer_sk#12], Inner\n                  :- *(19) Sort [ss_customer_sk#32 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 13\n                  :        +- Exchange hashpartitioning(ss_customer_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1075]\n                  :           +- *(9) Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n                  :              +- *(9) BroadcastHashJoin [ss_sold_date_sk#52], [d_date_sk#53], Inner, BuildRight, false\n                  :                 :- *(9) Filter isnotnull(ss_customer_sk#32)\n                  :                 :  +- *(9) ColumnarToRow\n                  :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#32,ss_net_paid#49,ss_sold_date_sk#52] Batched: true, DataFilters: [isnotnull(ss_customer_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#52), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#2173)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n                  :                 :           +- SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n                  :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#53, d_year#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1046]\n                                                         +- Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                  :                 +- BroadcastQueryStage 0\n                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                  :                       +- *(1) Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n                  :                          +- *(1) ColumnarToRow\n                  :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                  +- *(20) Sort [c_customer_sk#12 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 1\n                           +- Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n                              +- *(2) Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n                                 +- *(2) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_first_name#20,c_last_name#21] Batched: true, DataFilters: [isnotnull(c_customer_sk#12), isnotnull(c_customer_id#13)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 145814488,
        "inputRowCount" : 1816698
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 337816, 338949, 342881, 345322, 337816, 337816, 337816, 344075, 341390, 337816, 334242, 345322, 337816, 336927, 348007, 337816, 337816, 341390, 341390, 334242, 337816, 341390, 354893, 341390, 341748, 337816, 341748, 336927, 341748, 341748, 345322, 345322, 341390, 345322, 331801, 337816, 341390, 341390, 337816, 334242, 349254, 341390, 345322, 341748, 337816, 342106, 341390, 344075, 337816, 337816, 341390, 341390, 345322, 341390, 348007, 341390, 340501, 341390, 341390, 344075, 335375, 348007, 344075, 344075, 337816, 341390, 341390, 341390, 337816, 330668, 337816, 341390, 337816, 348007, 338949, 338174, 341390, 341390, 337816, 353186, 345322, 344075, 341390, 344075, 337816, 340501, 334242, 334242, 341390, 341390, 341390, 334242, 337816, 344075, 341390, 341390, 344075, 341390, 337816, 345322, 345322, 334242, 338174, 337816, 337816, 341390, 341390, 334242, 345322, 337816, 337816, 337816, 341748, 338174, 341390, 341390, 340501, 337816, 335733, 340501, 341748, 341390, 337816, 344075, 334242, 334242, 334242, 341390, 348007, 331801, 345322, 334242, 345322, 345322, 344075, 341390, 341390, 341390, 334242, 337816, 345322, 334242, 344433, 337816, 344075, 341390, 345322, 341390, 334242, 337816, 336927, 345322, 341390, 344075, 341390, 341748, 345322, 330668, 337816, 341390, 344075, 337816, 337816, 341390, 340501, 344075, 340501, 344075, 340501, 337816, 341390, 338174, 341390, 344433, 341390, 337816, 337816, 341390, 341390, 341390, 330668, 341390, 334242, 341748, 337816, 337816, 341390, 334242, 336927, 345322, 336927, 341390, 341390, 341390, 345322, 337816, 340501, 341390, 341390, 337816 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 26 ],
      "Objectives" : {
        "DurationInMs" : 1870,
        "TotalTasksDurationInMs" : 1862,
        "IOBytes" : {
          "Total" : 88299736,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 64905237,
            "SW" : 23394499
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -643887020,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#1708, ss_item_sk#1709, ss_customer_sk#1710, ss_cdemo_sk#1711, ss_hdemo_sk#1712, ss_addr_sk#1713, ss_store_sk#1714, ss_promo_sk#1715, ss_ticket_number#1716L, ss_quantity#1717, ss_wholesale_cost#1718, ss_list_price#1719, ss_sales_price#1720, ss_ext_discount_amt#1721, ss_ext_sales_price#1722, ss_ext_wholesale_cost#1723, ss_ext_list_price#1724, ss_ext_tax#1725, ss_coupon_amt#1726, ss_net_paid#1727, ss_net_paid_inc_tax#1728, ss_net_profit#1729, ss_sold_date_sk#1730], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1549894145,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#1730 = d_date_sk#1731) "
          },
          "0" : {
            "sign" : 371029744,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] "
          },
          "2" : {
            "sign" : 1800636684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730] "
          },
          "3" : {
            "sign" : 1314556937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n+- Join Inner, (ss_sold_date_sk#1730 = d_date_sk#1731)\n   :- Project [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730]\n   :  +- Filter ((isnotnull(ss_customer_sk#1710) AND isnotnull(ss_sold_date_sk#1730)) AND dynamicpruning#2174 [ss_sold_date_sk#1730])\n   :     :  +- Project [d_date_sk#1731, d_year#1737]\n   :     :     +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1708,ss_item_sk#1709,ss_customer_sk#1710,ss_cdemo_sk#1711,ss_hdemo_sk#1712,ss_addr_sk#1713,ss_store_sk#1714,ss_promo_sk#1715,ss_ticket_number#1716L,ss_quantity#1717,ss_wholesale_cost#1718,ss_list_price#1719,ss_sales_price#1720,ss_ext_discount_amt#1721,ss_ext_sales_price#1722,ss_ext_wholesale_cost#1723,ss_ext_list_price#1724,ss_ext_tax#1725,ss_coupon_amt#1726,ss_net_paid#1727,ss_net_paid_inc_tax#1728,ss_net_profit#1729,ss_sold_date_sk#1730] parquet\n   +- Project [d_date_sk#1731, d_year#1737]\n      +- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -364843191,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#1731, d_year#1737] Arguments: 2 "
          },
          "1" : {
            "sign" : 287594460,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#1730] Right keys [1]: [d_date_sk#1731] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1593808587,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737] Input [5]: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730, d_date_sk#1731, d_year#1737] "
          },
          "2" : {
            "sign" : -1278483524,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730] Condition : isnotnull(ss_customer_sk#1710) "
          },
          "3" : {
            "sign" : 348956361,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_customer_sk#1710, ss_net_paid#1727, ss_sold_date_sk#1730] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#1730), dynamicpruningexpression(ss_sold_date_sk#1730 IN dynamicpruning#2174)] PushedFilters: [IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#1710, ss_net_paid#1727, d_year#1737]\n+- BroadcastHashJoin [ss_sold_date_sk#1730], [d_date_sk#1731], Inner, BuildRight, false\n   :- Filter isnotnull(ss_customer_sk#1710)\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1710,ss_net_paid#1727,ss_sold_date_sk#1730] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1710)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1730), dynamicpruningexpression(ss_sold_date_sk#1730 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1468]\n   :                 +- Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n         +- *(3) Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n            +- *(3) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6305108768,
        "inputRowCount" : 262669418
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14367.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1316.0, 1638.0, 2190.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 11630,
        "TotalTasksDurationInMs" : 27226,
        "IOBytes" : {
          "Total" : 729949794,
          "Details" : {
            "IR" : 262555933,
            "IW" : 0,
            "SR" : 0,
            "SW" : 467393861
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -54643698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220] "
          },
          "1" : {
            "sign" : 2003093930,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6149067960,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 6149067960,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] "
          },
          "2" : {
            "sign" : -1199902494,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6727803768,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 6727803768,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220]\n+- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n   +- Join Inner, (c_customer_sk#2069 = ws_bill_customer_sk#2090)\n      :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n      :  +- Join Inner, (ws_sold_date_sk#2120 = d_date_sk#2121)\n      :     :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120]\n      :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120])\n      :     :     :  +- Project [d_date_sk#2121, d_year#2127]\n      :     :     :     +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2087,ws_ship_date_sk#2088,ws_item_sk#2089,ws_bill_customer_sk#2090,ws_bill_cdemo_sk#2091,ws_bill_hdemo_sk#2092,ws_bill_addr_sk#2093,ws_ship_customer_sk#2094,ws_ship_cdemo_sk#2095,ws_ship_hdemo_sk#2096,ws_ship_addr_sk#2097,ws_web_page_sk#2098,ws_web_site_sk#2099,ws_ship_mode_sk#2100,ws_warehouse_sk#2101,ws_promo_sk#2102,ws_order_number#2103L,ws_quantity#2104,ws_wholesale_cost#2105,ws_list_price#2106,ws_sales_price#2107,ws_ext_discount_amt#2108,ws_ext_sales_price#2109,ws_ext_wholesale_cost#2110,... 10 more fields] parquet\n      :     +- Project [d_date_sk#2121, d_year#2127]\n      :        +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n      +- Project [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078]\n         +- Filter (isnotnull(c_customer_sk#2069) AND isnotnull(c_customer_id#2070))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2069,c_customer_id#2070,c_current_cdemo_sk#2071,c_current_hdemo_sk#2072,c_current_addr_sk#2073,c_first_shipto_date_sk#2074,c_first_sales_date_sk#2075,c_salutation#2076,c_first_name#2077,c_last_name#2078,c_preferred_cust_flag#2079,c_birth_day#2080,c_birth_month#2081,c_birth_year#2082,c_birth_country#2083,c_login#2084,c_email_address#2085,c_last_review_date#2086] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -982903736,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 460509888,
            "rowCount" : 14390934,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] Arguments: 16 "
          },
          "5" : {
            "sign" : 3943851,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078] Arguments: [c_customer_sk#2069 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -224674422,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078] Arguments: 12 "
          },
          "1" : {
            "sign" : 68777553,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] Input [7]: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127, c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078] "
          },
          "0" : {
            "sign" : -2081820992,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127] Keys [4]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127] Functions [1]: [partial_max(ws_net_paid#2115)] Aggregate Attributes [1]: [max#2183] Results [5]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184] "
          },
          "2" : {
            "sign" : -475271,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_bill_customer_sk#2090] Right keys [1]: [c_customer_sk#2069] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1371482496,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] Arguments: [ws_bill_customer_sk#2090 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[partial_max(ws_net_paid#2115)], output=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184])\n+- Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n   +- SortMergeJoin [ws_bill_customer_sk#2090], [c_customer_sk#2069], Inner\n      :- Sort [ws_bill_customer_sk#2090 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 16\n      :     +- Exchange hashpartitioning(ws_bill_customer_sk#2090, 200), ENSURE_REQUIREMENTS, [plan_id=1572]\n      :        +- *(12) Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n      :           +- *(12) BroadcastHashJoin [ws_sold_date_sk#2120], [d_date_sk#2121], Inner, BuildRight, false\n      :              :- *(12) Filter isnotnull(ws_bill_customer_sk#2090)\n      :              :  +- *(12) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2090,ws_net_paid#2115,ws_sold_date_sk#2120] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2090)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2120), dynamicpruningexpression(ws_sold_date_sk#2120 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n      :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n      :              +- BroadcastQueryStage 10\n      :                 +- ReusedExchange [d_date_sk#2121, d_year#2127], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      +- Sort [c_customer_sk#2069 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 12\n            +- ReusedExchange [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 605037736,
        "inputRowCount" : 16390934
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 659719, 639379, 636197, 666002, 647758, 654126, 649852, 627434, 644352, 660104, 664529, 626248, 660345, 645980, 630804, 669076, 655148, 665207, 646188, 652455, 647949, 658215, 647419, 665268, 644890, 652820, 636593, 636117, 649477, 640588, 641531, 649124, 664582, 642275, 643614, 646294, 648666, 634050, 642807, 627515, 656970, 641179, 622444, 652223, 648349, 634298, 659921, 643707, 644027, 653559, 664693, 655099, 634868, 644786, 651060, 649246, 650927, 624909, 645420, 644294, 636693, 665619, 636029, 657451, 622767, 657384, 648955, 646721, 650700, 668633, 656377, 640767, 633698, 656752, 665619, 657291, 638507, 663526, 665660, 654666, 649112, 661633, 658819, 647064, 647493, 640671, 647284, 665517, 641220, 678677, 647345, 665632, 642248, 650964, 647247, 651783, 645419, 636742, 644190, 656319, 628834, 651408, 642574, 641881, 650964, 655662, 648178, 663825, 625838, 625478, 638558, 649877, 659432, 633584, 662698, 645007, 626289, 648955, 644507, 646765, 649947, 656309, 674740, 649450, 642951, 676595, 646863, 642574, 642412, 644585, 665769, 662460, 628470, 637913, 634800, 645240, 641316, 670871, 654992, 662550, 641509, 650927, 639397, 641693, 638203, 635808, 666266, 669896, 667648, 650542, 664476, 658645, 680946, 666771, 652975, 657511, 647468, 661516, 650255, 631321, 642711, 654814, 645954, 662269, 655878, 678057, 658645, 658791, 639649, 645445, 646602, 639413, 666497, 650909, 639451, 645226, 623760, 649139, 650752, 654974, 655597, 642181, 639825, 638247, 669396, 641450, 649150, 651263, 645910, 663040, 643535, 652543, 631745, 646225, 658807, 666087, 639066, 629797, 658557, 633321 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 10743,
        "TotalTasksDurationInMs" : 14040,
        "IOBytes" : {
          "Total" : 221748513,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 189710123,
            "SW" : 32038390
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1968597988,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2087, ws_ship_date_sk#2088, ws_item_sk#2089, ws_bill_customer_sk#2090, ws_bill_cdemo_sk#2091, ws_bill_hdemo_sk#2092, ws_bill_addr_sk#2093, ws_ship_customer_sk#2094, ws_ship_cdemo_sk#2095, ws_ship_hdemo_sk#2096, ws_ship_addr_sk#2097, ws_web_page_sk#2098, ws_web_site_sk#2099, ws_ship_mode_sk#2100, ws_warehouse_sk#2101, ws_promo_sk#2102, ws_order_number#2103L, ws_quantity#2104, ws_wholesale_cost#2105, ws_list_price#2106, ws_sales_price#2107, ws_ext_discount_amt#2108, ws_ext_sales_price#2109, ws_ext_wholesale_cost#2110, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 234996573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2120 = d_date_sk#2121) "
          },
          "0" : {
            "sign" : 230998006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] "
          },
          "2" : {
            "sign" : -1414391754,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727174424,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 1727174424,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120] "
          },
          "3" : {
            "sign" : -1575053379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n+- Join Inner, (ws_sold_date_sk#2120 = d_date_sk#2121)\n   :- Project [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120]\n   :  +- Filter ((isnotnull(ws_bill_customer_sk#2090) AND isnotnull(ws_sold_date_sk#2120)) AND dynamicpruning#2176 [ws_sold_date_sk#2120])\n   :     :  +- Project [d_date_sk#2121, d_year#2127]\n   :     :     +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2087,ws_ship_date_sk#2088,ws_item_sk#2089,ws_bill_customer_sk#2090,ws_bill_cdemo_sk#2091,ws_bill_hdemo_sk#2092,ws_bill_addr_sk#2093,ws_ship_customer_sk#2094,ws_ship_cdemo_sk#2095,ws_ship_hdemo_sk#2096,ws_ship_addr_sk#2097,ws_web_page_sk#2098,ws_web_site_sk#2099,ws_ship_mode_sk#2100,ws_warehouse_sk#2101,ws_promo_sk#2102,ws_order_number#2103L,ws_quantity#2104,ws_wholesale_cost#2105,ws_list_price#2106,ws_sales_price#2107,ws_ext_discount_amt#2108,ws_ext_sales_price#2109,ws_ext_wholesale_cost#2110,... 10 more fields] parquet\n   +- Project [d_date_sk#2121, d_year#2127]\n      +- Filter ((isnotnull(d_year#2127) AND ((d_year#2127 = 2002) AND d_year#2127 IN (2001,2002))) AND isnotnull(d_date_sk#2121))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2121,d_date_id#2122,d_date#2123,d_month_seq#2124,d_week_seq#2125,d_quarter_seq#2126,d_year#2127,d_dow#2128,d_moy#2129,d_dom#2130,d_qoy#2131,d_fy_year#2132,d_fy_quarter_seq#2133,d_fy_week_seq#2134,d_day_name#2135,d_quarter_name#2136,d_holiday#2137,d_weekend#2138,d_following_holiday#2139,d_first_dom#2140,d_last_dom#2141,d_same_day_ly#2142,d_same_day_lq#2143,d_current_day#2144,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1272154365,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#2121, d_year#2127] Arguments: 10 "
          },
          "1" : {
            "sign" : -871728665,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#2120] Right keys [1]: [d_date_sk#2121] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1642778376,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127] Input [5]: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120, d_date_sk#2121, d_year#2127] "
          },
          "2" : {
            "sign" : -1126578471,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120] Condition : isnotnull(ws_bill_customer_sk#2090) "
          },
          "3" : {
            "sign" : -444857810,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727174424,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_bill_customer_sk#2090, ws_net_paid#2115, ws_sold_date_sk#2120] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#2120), dynamicpruningexpression(ws_sold_date_sk#2120 IN dynamicpruning#2174)] PushedFilters: [IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n+- BroadcastHashJoin [ws_sold_date_sk#2120], [d_date_sk#2121], Inner, BuildRight, false\n   :- Filter isnotnull(ws_bill_customer_sk#2090)\n   :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2090,ws_net_paid#2115,ws_sold_date_sk#2120] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2090)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2120), dynamicpruningexpression(ws_sold_date_sk#2120 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n   +- BroadcastQueryStage 10\n      +- ReusedExchange [d_date_sk#2121, d_year#2127], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1728225920,
        "inputRowCount" : 71965966
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14367.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1316.0, 1638.0, 2190.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 12589,
        "TotalTasksDurationInMs" : 14798,
        "IOBytes" : {
          "Total" : 195136301,
          "Details" : {
            "IR" : 71406264,
            "IW" : 0,
            "SR" : 0,
            "SW" : 123730037
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 477583540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1731, d_year#1737] "
          },
          "1" : {
            "sign" : 1042142537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731)) "
          },
          "2" : {
            "sign" : -1532514990,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1731, d_date_id#1732, d_date#1733, d_month_seq#1734, d_week_seq#1735, d_quarter_seq#1736, d_year#1737, d_dow#1738, d_moy#1739, d_dom#1740, d_qoy#1741, d_fy_year#1742, d_fy_quarter_seq#1743, d_fy_week_seq#1744, d_day_name#1745, d_quarter_name#1746, d_holiday#1747, d_weekend#1748, d_following_holiday#1749, d_first_dom#1750, d_last_dom#1751, d_same_day_ly#1752, d_same_day_lq#1753, d_current_day#1754, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#1731, d_year#1737]\n+- Filter ((isnotnull(d_year#1737) AND ((d_year#1737 = 2002) AND d_year#1737 IN (2001,2002))) AND isnotnull(d_date_sk#1731))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_date_id#1732,d_date#1733,d_month_seq#1734,d_week_seq#1735,d_quarter_seq#1736,d_year#1737,d_dow#1738,d_moy#1739,d_dom#1740,d_qoy#1741,d_fy_year#1742,d_fy_quarter_seq#1743,d_fy_week_seq#1744,d_day_name#1745,d_quarter_name#1746,d_holiday#1747,d_weekend#1748,d_following_holiday#1749,d_first_dom#1750,d_last_dom#1751,d_same_day_ly#1752,d_same_day_lq#1753,d_current_day#1754,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1803409270,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#1731, d_year#1737] Condition : (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731)) "
          },
          "1" : {
            "sign" : 441490145,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#1731, d_year#1737] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (((isnotnull(d_year#1737) AND (d_year#1737 = 2002)) AND d_year#1737 IN (2001,2002)) AND isnotnull(d_date_sk#1731))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1731,d_year#1737] Batched: true, DataFilters: [isnotnull(d_year#1737), (d_year#1737 = 2002), d_year#1737 IN (2001,2002), isnotnull(d_date_sk#17..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9216,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1905,
        "TotalTasksDurationInMs" : 786,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 472629858,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72413000,
                "rowCount" : 902229
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115) AS year_total#1220], HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 782577100,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 72413000,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184] Keys [4]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127] Functions [1]: [max(ws_net_paid#2115)] Aggregate Attributes [1]: [max(ws_net_paid#2115)#1201] Results [2]: [c_customer_id#2070 AS customer_id#1216, max(ws_net_paid#2115)#1201 AS year_total#1220] "
          },
          "1" : {
            "sign" : -1767756340,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184] Arguments: 20 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[max(ws_net_paid#2115)], output=[customer_id#1216, year_total#1220])\n+- ShuffleQueryStage 20\n   +- Exchange hashpartitioning(c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, 200), ENSURE_REQUIREMENTS, [plan_id=2538]\n      +- *(24) HashAggregate(keys=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127], functions=[partial_max(ws_net_paid#2115)], output=[c_customer_id#2070, c_first_name#2077, c_last_name#2078, d_year#2127, max#2184])\n         +- *(24) Project [c_customer_id#2070, c_first_name#2077, c_last_name#2078, ws_net_paid#2115, d_year#2127]\n            +- *(24) SortMergeJoin [ws_bill_customer_sk#2090], [c_customer_sk#2069], Inner\n               :- *(22) Sort [ws_bill_customer_sk#2090 ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 16\n               :        +- Exchange hashpartitioning(ws_bill_customer_sk#2090, 200), ENSURE_REQUIREMENTS, [plan_id=1572]\n               :           +- *(12) Project [ws_bill_customer_sk#2090, ws_net_paid#2115, d_year#2127]\n               :              +- *(12) BroadcastHashJoin [ws_sold_date_sk#2120], [d_date_sk#2121], Inner, BuildRight, false\n               :                 :- *(12) Filter isnotnull(ws_bill_customer_sk#2090)\n               :                 :  +- *(12) ColumnarToRow\n               :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2090,ws_net_paid#2115,ws_sold_date_sk#2120] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2090)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2120), dynamicpruningexpression(ws_sold_date_sk#2120 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n               :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2174, 0, [d_date_sk#1731], [id=#1471]\n               :                 +- BroadcastQueryStage 10\n               :                    +- ReusedExchange [d_date_sk#2121, d_year#2127], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n               +- *(23) Sort [c_customer_sk#2069 ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 12\n                        +- ReusedExchange [c_customer_sk#2069, c_customer_id#2070, c_first_name#2077, c_last_name#2078], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 72413000,
        "inputRowCount" : 902229
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 178451, 156993, 167461, 167461, 167461, 167461, 172695, 167461, 167461, 172695, 172695, 172695, 167461, 167461, 167461, 172695, 167461, 172695, 162227, 172695, 172695, 172695, 172695, 167461, 167461, 172695, 172695, 162227, 172695, 167461, 172695, 167461, 167461, 167461, 167461, 162227, 172695, 167461, 172695, 167461, 172695, 172695, 167461, 167461, 167461, 167461, 167461, 167461, 167461, 172695, 167461, 162227, 167461, 167461, 172695, 167461, 167461, 162227, 167461, 172695, 172695, 167461, 172695, 172695, 162227, 172695, 167461, 172695, 172695, 167461, 167461, 167461, 167461, 167461, 172695, 167461, 173217, 167461, 172695, 162227, 162227, 172695, 167461, 167461, 167461, 167461, 172695, 172695, 172695, 172695, 167461, 172695, 172695, 167461, 167461, 167461, 162227, 167461, 172695, 172695, 172695, 167461, 167461, 172695, 167461, 172695, 162227, 162227, 172695, 167461, 172695, 167461, 172695, 167461, 172695, 167461, 172695, 167461, 172695, 167461, 156993, 172695, 172695, 172695, 172695, 172695, 162227, 172695, 178451, 172695, 167461, 167461, 172695, 167461, 167461, 167461, 172695, 172695, 167461, 172695, 167461, 172695, 167461, 172695, 172695, 167461, 167461, 172695, 167461, 167461, 167461, 172695, 172695, 172695, 172695, 172695, 167461, 167461, 172695, 167461, 162227, 172695, 172695, 167461, 172695, 162227, 167461, 167461, 172695, 167461, 172695, 167461, 167461, 167461, 172695, 162227, 167461, 172695, 172695, 172695, 172695, 172695, 172695, 172695, 172695, 162227, 172695, 162227, 172695, 167461, 167461, 167461, 167461, 167461, 167461, 167461, 172695, 172695, 167461, 167461 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 887,
        "TotalTasksDurationInMs" : 879,
        "IOBytes" : {
          "Total" : 43702005,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 32038390,
            "SW" : 11663615
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1101785547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#53, d_year#59] "
          },
          "1" : {
            "sign" : -1793290454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53)) "
          },
          "2" : {
            "sign" : 52891486,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#53, d_date_id#54, d_date#55, d_month_seq#56, d_week_seq#57, d_quarter_seq#58, d_year#59, d_dow#60, d_moy#61, d_dom#62, d_qoy#63, d_fy_year#64, d_fy_quarter_seq#65, d_fy_week_seq#66, d_day_name#67, d_quarter_name#68, d_holiday#69, d_weekend#70, d_following_holiday#71, d_first_dom#72, d_last_dom#73, d_same_day_ly#74, d_same_day_lq#75, d_current_day#76, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#53, d_year#59]\n+- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1173592401,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#53, d_year#59] Condition : (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53)) "
          },
          "1" : {
            "sign" : 1989940845,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#53, d_year#59] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9216,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2078,
        "TotalTasksDurationInMs" : 1053,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 800936878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 154000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 154000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] "
          },
          "1" : {
            "sign" : -1158006206,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13)) "
          },
          "2" : {
            "sign" : 140424530,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#12, c_customer_id#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16, c_first_shipto_date_sk#17, c_first_sales_date_sk#18, c_salutation#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_day#23, c_birth_month#24, c_birth_year#25, c_birth_country#26, c_login#27, c_email_address#28, c_last_review_date#29], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21]\n+- Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_current_cdemo_sk#14,c_current_hdemo_sk#15,c_current_addr_sk#16,c_first_shipto_date_sk#17,c_first_sales_date_sk#18,c_salutation#19,c_first_name#20,c_last_name#21,c_preferred_cust_flag#22,c_birth_day#23,c_birth_month#24,c_birth_year#25,c_birth_country#26,c_login#27,c_email_address#28,c_last_review_date#29] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1412261274,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] Condition : (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13)) "
          },
          "1" : {
            "sign" : 1554401418,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 154000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [4]: [c_customer_sk#12, c_customer_id#13, c_first_name#20, c_last_name#21] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)] ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#12,c_customer_id#13,c_first_name#20,c_last_name#21] Batched: true, DataFilters: [isnotnull(c_customer_sk#12), isnotnull(c_customer_id#13)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 154000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 7752,
        "TotalTasksDurationInMs" : 45416,
        "IOBytes" : {
          "Total" : 90709875,
          "Details" : {
            "IR" : 24729789,
            "IW" : 0,
            "SR" : 0,
            "SW" : 65980086
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1765574029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152] "
          },
          "1" : {
            "sign" : 1702248895,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6149067960,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 6149067960,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] "
          },
          "2" : {
            "sign" : 774221138,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6727803768,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 6727803768,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], [c_customer_id#1915 AS customer_id#1148, max(ws_net_paid#1960) AS year_total#1152]\n+- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n   +- Join Inner, (c_customer_sk#1914 = ws_bill_customer_sk#1935)\n      :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n      :  +- Join Inner, (ws_sold_date_sk#1965 = d_date_sk#1966)\n      :     :- Project [ws_bill_customer_sk#1935, ws_net_paid#1960, ws_sold_date_sk#1965]\n      :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1935) AND isnotnull(ws_sold_date_sk#1965)) AND dynamicpruning#2175 [ws_sold_date_sk#1965])\n      :     :     :  +- Project [d_date_sk#1966, d_year#1972]\n      :     :     :     +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1932,ws_ship_date_sk#1933,ws_item_sk#1934,ws_bill_customer_sk#1935,ws_bill_cdemo_sk#1936,ws_bill_hdemo_sk#1937,ws_bill_addr_sk#1938,ws_ship_customer_sk#1939,ws_ship_cdemo_sk#1940,ws_ship_hdemo_sk#1941,ws_ship_addr_sk#1942,ws_web_page_sk#1943,ws_web_site_sk#1944,ws_ship_mode_sk#1945,ws_warehouse_sk#1946,ws_promo_sk#1947,ws_order_number#1948L,ws_quantity#1949,ws_wholesale_cost#1950,ws_list_price#1951,ws_sales_price#1952,ws_ext_discount_amt#1953,ws_ext_sales_price#1954,ws_ext_wholesale_cost#1955,... 10 more fields] parquet\n      :     +- Project [d_date_sk#1966, d_year#1972]\n      :        +- Filter ((isnotnull(d_year#1972) AND ((d_year#1972 = 2001) AND d_year#1972 IN (2001,2002))) AND isnotnull(d_date_sk#1966))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1966,d_date_id#1967,d_date#1968,d_month_seq#1969,d_week_seq#1970,d_quarter_seq#1971,d_year#1972,d_dow#1973,d_moy#1974,d_dom#1975,d_qoy#1976,d_fy_year#1977,d_fy_quarter_seq#1978,d_fy_week_seq#1979,d_day_name#1980,d_quarter_name#1981,d_holiday#1982,d_weekend#1983,d_following_holiday#1984,d_first_dom#1985,d_last_dom#1986,d_same_day_ly#1987,d_same_day_lq#1988,d_current_day#1989,... 4 more fields] parquet\n      +- Project [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923]\n         +- Filter (isnotnull(c_customer_sk#1914) AND isnotnull(c_customer_id#1915))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1914,c_customer_id#1915,c_current_cdemo_sk#1916,c_current_hdemo_sk#1917,c_current_addr_sk#1918,c_first_shipto_date_sk#1919,c_first_sales_date_sk#1920,c_salutation#1921,c_first_name#1922,c_last_name#1923,c_preferred_cust_flag#1924,c_birth_day#1925,c_birth_month#1926,c_birth_year#1927,c_birth_country#1928,c_login#1929,c_email_address#1930,c_last_review_date#1931] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 984000642,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 458097760,
            "rowCount" : 14315555,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972] Arguments: 14 "
          },
          "5" : {
            "sign" : -686675139,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923] Arguments: [c_customer_sk#1914 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -348971318,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 144527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923] Arguments: 8 "
          },
          "1" : {
            "sign" : -1021733484,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6149067960,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] Input [7]: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972, c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923] "
          },
          "0" : {
            "sign" : -1494317898,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972] Keys [4]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972] Functions [1]: [partial_max(ws_net_paid#1960)] Aggregate Attributes [1]: [max#2181] Results [5]: [c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182] "
          },
          "2" : {
            "sign" : 941992531,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 6727803768,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_bill_customer_sk#1935] Right keys [1]: [c_customer_sk#1914] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 824364073,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972] Arguments: [ws_bill_customer_sk#1935 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972], functions=[partial_max(ws_net_paid#1960)], output=[c_customer_id#1915, c_first_name#1922, c_last_name#1923, d_year#1972, max#2182])\n+- Project [c_customer_id#1915, c_first_name#1922, c_last_name#1923, ws_net_paid#1960, d_year#1972]\n   +- SortMergeJoin [ws_bill_customer_sk#1935], [c_customer_sk#1914], Inner\n      :- Sort [ws_bill_customer_sk#1935 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 14\n      :     +- Exchange hashpartitioning(ws_bill_customer_sk#1935, 200), ENSURE_REQUIREMENTS, [plan_id=1179]\n      :        +- *(10) Project [ws_bill_customer_sk#1935, ws_net_paid#1960, d_year#1972]\n      :           +- *(10) BroadcastHashJoin [ws_sold_date_sk#1965], [d_date_sk#1966], Inner, BuildRight, false\n      :              :- *(10) Filter isnotnull(ws_bill_customer_sk#1935)\n      :              :  +- *(10) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#1935,ws_net_paid#1960,ws_sold_date_sk#1965] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#1935)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#1965), dynamicpruningexpression(ws_sold_date_sk#1965 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>\n      :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n      :              +- BroadcastQueryStage 6\n      :                 +- ReusedExchange [d_date_sk#1966, d_year#1972], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      +- Sort [c_customer_sk#1914 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 8\n            +- ReusedExchange [c_customer_sk#1914, c_customer_id#1915, c_first_name#1922, c_last_name#1923], Exchange hashpartitioning(c_customer_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 602625608,
        "inputRowCount" : 16315555
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 674752, 648619, 653602, 641241, 635746, 663514, 648879, 653094, 653907, 654406, 663015, 647003, 658320, 664613, 642494, 663726, 654704, 668561, 668178, 653184, 648234, 657534, 660843, 658320, 644775, 669243, 645469, 663439, 662286, 651255, 646303, 662901, 646308, 653654, 661568, 652309, 644507, 637462, 652022, 639088, 635773, 656274, 631513, 655176, 655817, 643887, 651083, 647390, 649889, 646209, 658293, 681155, 649168, 668233, 657712, 642720, 647284, 622778, 627565, 654122, 663394, 644284, 650659, 659010, 647843, 663487, 652538, 642919, 645232, 657300, 654529, 656450, 655639, 655140, 667992, 658766, 662925, 668514, 663682, 652617, 654261, 677891, 677085, 638020, 645301, 641247, 644065, 651079, 654058, 673511, 659118, 657273, 678767, 653387, 625777, 667123, 658633, 644660, 659954, 653125, 632029, 659612, 664582, 654097, 650550, 654480, 656780, 657394, 624893, 640441, 651302, 642873, 664709, 634568, 646506, 649246, 637955, 633473, 636582, 657069, 639365, 642321, 668813, 646935, 675325, 673113, 657826, 658711, 634654, 656020, 657057, 664246, 651186, 653531, 663378, 643856, 649520, 649647, 659159, 660089, 649613, 645877, 654308, 667322, 648197, 646080, 675999, 631368, 664965, 652770, 680545, 665143, 681778, 656909, 656770, 672645, 649889, 654600, 675182, 644890, 648592, 640240, 648822, 656042, 650896, 667020, 645793, 656108, 663060, 648554, 642976, 653879, 659227, 668774, 649938, 648717, 637970, 634501, 662032, 650522, 669427, 656606, 660198, 640862, 665309, 652243, 656287, 627583, 649940, 674308, 661338, 651388, 675002, 638626, 654105, 663596, 649224, 643444, 675131, 632727 ],
        "0" : [ 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 29,
        "FinishedTasksTotalTimeInMs" : 89657.0,
        "FinishedTasksDistributionInMs" : [ 690.0, 781.0, 1455.0, 5966.0, 8725.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 7823,
        "TotalTasksDurationInMs" : 17469,
        "IOBytes" : {
          "Total" : 222672612,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 190676826,
            "SW" : 31995786
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 507063040,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_cdemo_sk#33, ss_hdemo_sk#34, ss_addr_sk#35, ss_store_sk#36, ss_promo_sk#37, ss_ticket_number#38L, ss_quantity#39, ss_wholesale_cost#40, ss_list_price#41, ss_sales_price#42, ss_ext_discount_amt#43, ss_ext_sales_price#44, ss_ext_wholesale_cost#45, ss_ext_list_price#46, ss_ext_tax#47, ss_coupon_amt#48, ss_net_paid#49, ss_net_paid_inc_tax#50, ss_net_profit#51, ss_sold_date_sk#52], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -639836226,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#52 = d_date_sk#53) "
          },
          "0" : {
            "sign" : -6670601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, d_year#59] "
          },
          "2" : {
            "sign" : -1528657994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52] "
          },
          "3" : {
            "sign" : 846247961,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n+- Join Inner, (ss_sold_date_sk#52 = d_date_sk#53)\n   :- Project [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52]\n   :  +- Filter ((isnotnull(ss_customer_sk#32) AND isnotnull(ss_sold_date_sk#52)) AND dynamicpruning#2173 [ss_sold_date_sk#52])\n   :     :  +- Project [d_date_sk#53, d_year#59]\n   :     :     +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#30,ss_item_sk#31,ss_customer_sk#32,ss_cdemo_sk#33,ss_hdemo_sk#34,ss_addr_sk#35,ss_store_sk#36,ss_promo_sk#37,ss_ticket_number#38L,ss_quantity#39,ss_wholesale_cost#40,ss_list_price#41,ss_sales_price#42,ss_ext_discount_amt#43,ss_ext_sales_price#44,ss_ext_wholesale_cost#45,ss_ext_list_price#46,ss_ext_tax#47,ss_coupon_amt#48,ss_net_paid#49,ss_net_paid_inc_tax#50,ss_net_profit#51,ss_sold_date_sk#52] parquet\n   +- Project [d_date_sk#53, d_year#59]\n      +- Filter ((isnotnull(d_year#59) AND ((d_year#59 = 2001) AND d_year#59 IN (2001,2002))) AND isnotnull(d_date_sk#53))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_date_id#54,d_date#55,d_month_seq#56,d_week_seq#57,d_quarter_seq#58,d_year#59,d_dow#60,d_moy#61,d_dom#62,d_qoy#63,d_fy_year#64,d_fy_quarter_seq#65,d_fy_week_seq#66,d_day_name#67,d_quarter_name#68,d_holiday#69,d_weekend#70,d_following_holiday#71,d_first_dom#72,d_last_dom#73,d_same_day_ly#74,d_same_day_lq#75,d_current_day#76,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1908125927,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#53, d_year#59] Arguments: 0 "
          },
          "1" : {
            "sign" : -1993430851,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#52] Right keys [1]: [d_date_sk#53] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 964535324,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_customer_sk#32, ss_net_paid#49, d_year#59] Input [5]: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52, d_date_sk#53, d_year#59] "
          },
          "2" : {
            "sign" : 1674308259,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52] Condition : isnotnull(ss_customer_sk#32) "
          },
          "3" : {
            "sign" : 1703103826,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_customer_sk#32, ss_net_paid#49, ss_sold_date_sk#52] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#52), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#2173)] PushedFilters: [IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#32, ss_net_paid#49, d_year#59]\n+- BroadcastHashJoin [ss_sold_date_sk#52], [d_date_sk#53], Inner, BuildRight, false\n   :- Filter isnotnull(ss_customer_sk#32)\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#32,ss_net_paid#49,ss_sold_date_sk#52] Batched: true, DataFilters: [isnotnull(ss_customer_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#52), dynamicpruningexpression(ss_sold_date_sk#52 IN dynamicpruning#2173)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#2173, 0, [d_date_sk#53], [id=#1049]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1046]\n   :                 +- Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n         +- *(1) Filter (((isnotnull(d_year#59) AND (d_year#59 = 2001)) AND d_year#59 IN (2001,2002)) AND isnotnull(d_date_sk#53))\n            +- *(1) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#53,d_year#59] Batched: true, DataFilters: [isnotnull(d_year#59), (d_year#59 = 2001), d_year#59 IN (2001,2002), isnotnull(d_date_sk#53)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6305108768,
        "inputRowCount" : 262669418
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12177.0,
        "FinishedTasksDistributionInMs" : [ 1038.0, 1144.0, 1223.0, 1529.0, 2004.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 12790,
        "TotalTasksDurationInMs" : 125911,
        "IOBytes" : {
          "Total" : 730795565,
          "Details" : {
            "IR" : 261423272,
            "IW" : 0,
            "SR" : 0,
            "SW" : 469372293
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227306332,
  "SQLEndTimeInMs" : 1702227341297,
  "Objectives" : {
    "DurationInMs" : 34965,
    "IOBytes" : {
      "Total" : 4002019316,
      "Details" : {
        "IR" : 691391724,
        "IW" : 0,
        "SR" : 1754283925,
        "SW" : 1556343667
      }
    }
  }
}
