{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -1554825190,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8310975720,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#194 = d_date_sk#315) "
        },
        "34" : {
          "sign" : -1378602978,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16080,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#91, s_store_id#92] "
        },
        "67" : {
          "sign" : -1686941550,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7266853796,
          "rowCount" : 106865497,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
        },
        "93" : {
          "sign" : 1298770897,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 265772,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_channel_tv#445) AND (p_channel_tv#445 = N)) AND isnotnull(p_promo_sk#434)) "
        },
        "12" : {
          "sign" : 562220632,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 16086443576,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#21 = i_item_sk#120) "
        },
        "66" : {
          "sign" : -1176651086,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1200,
          "rowCount" : 12,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#17, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#18, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#19, web channel AS channel#495, concat(web_site, web_site_id#290) AS id#496] "
        },
        "89" : {
          "sign" : 2134837583,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 960,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [web_site_sk#289, web_site_id#290] "
        },
        "51" : {
          "sign" : 1312697074,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#315] "
        },
        "84" : {
          "sign" : 2051225854,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L)) "
        },
        "8" : {
          "sign" : 808588885,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 43916830964,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#26 = s_store_sk#91) "
        },
        "73" : {
          "sign" : 659030790,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3613771460,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
        },
        "78" : {
          "sign" : -672675954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14965105376,
          "rowCount" : 71947622,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#499 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#514 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#517 [], xxhash64(ws_promo_sk#246, 42)))) "
        },
        "19" : {
          "sign" : -2131571707,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#20, ss_item_sk#21, ss_customer_sk#22, ss_cdemo_sk#23, ss_hdemo_sk#24, ss_addr_sk#25, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_quantity#29, ss_wholesale_cost#30, ss_list_price#31, ss_sales_price#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_ext_tax#37, ss_coupon_amt#38, ss_net_paid#39, ss_net_paid_inc_tax#40, ss_net_profit#41, ss_sold_date_sk#42], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 146478045,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#501] "
        },
        "62" : {
          "sign" : -289517560,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3774000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cp_catalog_page_sk#222, cp_catalog_page_id#223, cp_start_date_sk#224, cp_end_date_sk#225, cp_department#226, cp_catalog_number#227, cp_catalog_page_number#228, cp_description#229, cp_type#230], `spark_catalog`.`tpcds_100`.`catalog_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : -784064353,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
          "sizeInBytes" : 6749016,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Expand Arguments: [[sales#10, returns#11, profit#12, channel#483, id#484, 0], [sales#10, returns#11, profit#12, channel#483, null, 1], [sales#10, returns#11, profit#12, null, null, 3]], [sales#10, returns#11, profit#12, channel#486, id#487, spark_grouping_id#485L] "
        },
        "88" : {
          "sign" : 498769889,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#412, i_item_id#413, i_rec_start_date#414, i_rec_end_date#415, i_item_desc#416, i_current_price#417, i_wholesale_cost#418, i_brand_id#419, i_brand#420, i_class_id#421, i_class#422, i_category_id#423, i_category#424, i_manufact_id#425, i_manufact#426, i_size#427, i_formulation#428, i_color#429, i_units#430, i_container#431, i_manager_id#432, i_product_name#433], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "77" : {
          "sign" : -1125136971,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3453485856,
          "rowCount" : 71947622,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] "
        },
        "40" : {
          "sign" : -1806421967,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10260389808,
          "rowCount" : 142505414,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
        },
        "15" : {
          "sign" : 1680156749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 19458829880,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61] "
        },
        "11" : {
          "sign" : 330858997,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13788380208,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
        },
        "90" : {
          "sign" : -194656941,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(web_site_sk#289) "
        },
        "9" : {
          "sign" : -1857565161,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 17458386484,
          "rowCount" : 396781511,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
        },
        "44" : {
          "sign" : 1562938206,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7202845624,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
        },
        "33" : {
          "sign" : 1207064257,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#43, sr_item_sk#44, sr_customer_sk#45, sr_cdemo_sk#46, sr_hdemo_sk#47, sr_addr_sk#48, sr_store_sk#49, sr_reason_sk#50, sr_ticket_number#51L, sr_return_quantity#52, sr_return_amt#53, sr_return_tax#54, sr_return_amt_inc_tax#55, sr_fee#56, sr_return_ship_cost#57, sr_refunded_cash#58, sr_reversed_charge#59, sr_store_credit#60, sr_net_loss#61, sr_returned_date_sk#62], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : -927145728,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "56" : {
          "sign" : 201829251,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#195, cr_item_sk#196, cr_refunded_customer_sk#197, cr_refunded_cdemo_sk#198, cr_refunded_hdemo_sk#199, cr_refunded_addr_sk#200, cr_returning_customer_sk#201, cr_returning_cdemo_sk#202, cr_returning_hdemo_sk#203, cr_returning_addr_sk#204, cr_call_center_sk#205, cr_catalog_page_sk#206, cr_ship_mode_sk#207, cr_warehouse_sk#208, cr_reason_sk#209, cr_order_number#210L, cr_return_quantity#211, cr_return_amount#212, cr_return_tax#213, cr_return_amt_inc_tax#214, cr_fee#215, cr_return_ship_cost#216, cr_refunded_cash#217, cr_reversed_charge#218, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "55" : {
          "sign" : 1007977036,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L)) "
        },
        "26" : {
          "sign" : -126434393,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#120, i_item_id#121, i_rec_start_date#122, i_rec_end_date#123, i_item_desc#124, i_current_price#125, i_wholesale_cost#126, i_brand_id#127, i_brand#128, i_class_id#129, i_class#130, i_category_id#131, i_category#132, i_manufact_id#133, i_manufact#134, i_size#135, i_formulation#136, i_color#137, i_units#138, i_container#139, i_manager_id#140, i_product_name#141], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "50" : {
          "sign" : -1882573256,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#161, cs_ship_date_sk#162, cs_bill_customer_sk#163, cs_bill_cdemo_sk#164, cs_bill_hdemo_sk#165, cs_bill_addr_sk#166, cs_ship_customer_sk#167, cs_ship_cdemo_sk#168, cs_ship_hdemo_sk#169, cs_ship_addr_sk#170, cs_call_center_sk#171, cs_catalog_page_sk#172, cs_ship_mode_sk#173, cs_warehouse_sk#174, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_quantity#178, cs_wholesale_cost#179, cs_list_price#180, cs_sales_price#181, cs_ext_discount_amt#182, cs_ext_sales_price#183, cs_ext_wholesale_cost#184, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : -1881006109,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 2040000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#14, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#15, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#16, catalog channel AS channel#493, concat(catalog_page, cp_catalog_page_id#223) AS id#494] "
        },
        "68" : {
          "sign" : -457568927,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8121777772,
          "rowCount" : 106865497,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_promo_sk#246 = p_promo_sk#434) "
        },
        "61" : {
          "sign" : -441519414,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3774000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(cp_catalog_page_sk#222) "
        },
        "13" : {
          "sign" : 338819626,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13808110420,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
        },
        "46" : {
          "sign" : -2022928563,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7943192488,
          "rowCount" : 141842723,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220] "
        },
        "24" : {
          "sign" : -1234961240,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 136656,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#120] "
        },
        "94" : {
          "sign" : 9053254,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 269000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#434, p_promo_id#435, p_start_date_sk#436, p_end_date_sk#437, p_item_sk#438, p_cost#439, p_response_target#440, p_promo_name#441, p_channel_dmail#442, p_channel_email#443, p_channel_catalog#444, p_channel_tv#445, p_channel_radio#446, p_channel_press#447, p_channel_event#448, p_channel_demo#449, p_channel_details#450, p_purpose#451, p_discount_active#452], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "83" : {
          "sign" : -1504849468,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 259178004,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] "
        },
        "35" : {
          "sign" : -1540726409,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#91) "
        },
        "16" : {
          "sign" : -750389705,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26408411980,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L)) "
        },
        "79" : {
          "sign" : -868994196,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#231, ws_ship_date_sk#232, ws_item_sk#233, ws_bill_customer_sk#234, ws_bill_cdemo_sk#235, ws_bill_hdemo_sk#236, ws_bill_addr_sk#237, ws_ship_customer_sk#238, ws_ship_cdemo_sk#239, ws_ship_hdemo_sk#240, ws_ship_addr_sk#241, ws_web_page_sk#242, ws_web_site_sk#243, ws_ship_mode_sk#244, ws_warehouse_sk#245, ws_promo_sk#246, ws_order_number#247L, ws_quantity#248, ws_wholesale_cost#249, ws_list_price#250, ws_sales_price#251, ws_ext_discount_amt#252, ws_ext_sales_price#253, ws_ext_wholesale_cost#254, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 385378324,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 2062200,
          "rowCount" : 20622,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "72" : {
          "sign" : -1938488857,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4027346680,
          "rowCount" : 71916905,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#233 = i_item_sk#412) "
        },
        "10" : {
          "sign" : 733456653,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 20632638572,
          "rowCount" : 396781511,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_promo_sk#27 = p_promo_sk#142) "
        },
        "59" : {
          "sign" : -1184025517,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#343, i_item_id#344, i_rec_start_date#345, i_rec_end_date#346, i_item_desc#347, i_current_price#348, i_wholesale_cost#349, i_brand_id#350, i_brand#351, i_class_id#352, i_class#353, i_category_id#354, i_category#355, i_manufact_id#356, i_manufact#357, i_size#358, i_formulation#359, i_color#360, i_units#361, i_container#362, i_manager_id#363, i_product_name#364], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "87" : {
          "sign" : -1860551235,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4851288,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#417) AND (i_current_price#417 > 50.00)) AND isnotnull(i_item_sk#412)) "
        },
        "48" : {
          "sign" : 1722347892,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6808450704,
          "rowCount" : 141842723,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] "
        },
        "21" : {
          "sign" : -460317325,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63)) "
        },
        "76" : {
          "sign" : -511816769,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6585447880,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L)) "
        },
        "54" : {
          "sign" : -1043983241,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 518321592,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] "
        },
        "43" : {
          "sign" : -868920797,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8056969368,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#175 = i_item_sk#343) "
        },
        "65" : {
          "sign" : -1420527529,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 269000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#365, p_promo_id#366, p_start_date_sk#367, p_end_date_sk#368, p_item_sk#369, p_cost#370, p_response_target#371, p_promo_name#372, p_channel_dmail#373, p_channel_email#374, p_channel_catalog#375, p_channel_tv#376, p_channel_radio#377, p_channel_press#378, p_channel_event#379, p_channel_demo#380, p_channel_details#381, p_purpose#382, p_discount_active#383], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "71" : {
          "sign" : 1232433114,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3452011440,
          "rowCount" : 71916905,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
        },
        "57" : {
          "sign" : -152590790,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 136656,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#343] "
        },
        "32" : {
          "sign" : 964728509,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L)) "
        },
        "80" : {
          "sign" : -1121181948,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#384] "
        },
        "82" : {
          "sign" : -1130969338,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#384, d_date_id#385, d_date#386, d_month_seq#387, d_week_seq#388, d_quarter_seq#389, d_year#390, d_dow#391, d_moy#392, d_dom#393, d_qoy#394, d_fy_year#395, d_fy_quarter_seq#396, d_fy_week_seq#397, d_day_name#398, d_quarter_name#399, d_holiday#400, d_weekend#401, d_following_holiday#402, d_first_dom#403, d_last_dom#404, d_same_day_ly#405, d_same_day_lq#406, d_current_day#407, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "49" : {
          "sign" : -92116246,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29503286384,
          "rowCount" : 141842723,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#498 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#508 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#511 [], xxhash64(cs_promo_sk#176, 42)))) "
        },
        "6" : {
          "sign" : 1313671220,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 21000,
          "rowCount" : 210,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#10, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#11, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#12, store channel AS channel#483, concat(store, s_store_id#92) AS id#484] "
        },
        "36" : {
          "sign" : 1000988083,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#91, s_store_id#92, s_rec_start_date#93, s_rec_end_date#94, s_closed_date_sk#95, s_store_name#96, s_number_employees#97, s_floor_space#98, s_hours#99, s_manager#100, s_market_id#101, s_geography_class#102, s_market_desc#103, s_market_manager#104, s_division_id#105, s_division_name#106, s_company_id#107, s_company_name#108, s_street_number#109, s_street_name#110, s_street_type#111, s_suite_number#112, s_city#113, s_county#114, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 102524566,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 6749016,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 85550738,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 15775003916,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_promo_sk#176 = p_promo_sk#365) "
        },
        "17" : {
          "sign" : 1182892242,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12040948896,
          "rowCount" : 250853102,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] "
        },
        "25" : {
          "sign" : 867516341,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4851288,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120)) "
        },
        "60" : {
          "sign" : 510504401,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 816000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cp_catalog_page_sk#222, cp_catalog_page_id#223] "
        },
        "14" : {
          "sign" : -674607006,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 15932435100,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#42 = d_date_sk#63) "
        },
        "47" : {
          "sign" : -1255441923,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10780046948,
          "rowCount" : 141842723,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L)) "
        },
        "31" : {
          "sign" : 1920353313,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1036857996,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] "
        },
        "69" : {
          "sign" : -1297579056,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6098300208,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
        },
        "58" : {
          "sign" : -1945291592,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4851288,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#348) AND (i_current_price#348 > 50.00)) AND isnotnull(i_item_sk#343)) "
        },
        "64" : {
          "sign" : -1038617249,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 265772,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_channel_tv#376) AND (p_channel_tv#376 = N)) AND isnotnull(p_promo_sk#365)) "
        },
        "53" : {
          "sign" : 971442284,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#315, d_date_id#316, d_date#317, d_month_seq#318, d_week_seq#319, d_quarter_seq#320, d_year#321, d_dow#322, d_moy#323, d_dom#324, d_qoy#325, d_fy_year#326, d_fy_quarter_seq#327, d_fy_week_seq#328, d_day_name#329, d_quarter_name#330, d_holiday#331, d_weekend#332, d_following_holiday#333, d_first_dom#334, d_last_dom#335, d_same_day_ly#336, d_same_day_lq#337, d_current_day#338, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "42" : {
          "sign" : -557476640,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6905973744,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
        },
        "75" : {
          "sign" : 466983388,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4852435280,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] "
        },
        "0" : {
          "sign" : 323946483,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 9600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1483874036,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#63] "
        },
        "27" : {
          "sign" : -1613652615,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#504] "
        },
        "70" : {
          "sign" : 1566235821,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6775889120,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#243 = web_site_sk#289) "
        },
        "2" : {
          "sign" : -1622671651,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 6749016,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [channel#486 ASC NULLS FIRST, id#487 ASC NULLS FIRST], true "
        },
        "86" : {
          "sign" : 410490350,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 136656,
          "rowCount" : 11388,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#412] "
        },
        "38" : {
          "sign" : -1607978544,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14114477188,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
        },
        "81" : {
          "sign" : 1211420207,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#386) AND ((d_date#386 >= 1998-08-04) AND (d_date#386 <= 1998-09-03))) AND isnotnull(d_date_sk#384)) "
        },
        "92" : {
          "sign" : 823538603,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11856,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_promo_sk#434] "
        },
        "18" : {
          "sign" : 50955919,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 38129671504,
          "rowCount" : 250853102,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#497 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#502 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#505 [], xxhash64(ss_promo_sk#27, 42)))) "
        },
        "30" : {
          "sign" : 918578238,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 269000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#142, p_promo_id#143, p_start_date_sk#144, p_end_date_sk#145, p_item_sk#146, p_cost#147, p_response_target#148, p_promo_name#149, p_channel_dmail#150, p_channel_email#151, p_channel_catalog#152, p_channel_tv#153, p_channel_radio#154, p_channel_press#155, p_channel_event#156, p_channel_demo#157, p_channel_details#158, p_purpose#159, p_discount_active#160], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -2019635242,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 39294006652,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92] "
        },
        "29" : {
          "sign" : 2063461987,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 265772,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142)) "
        },
        "41" : {
          "sign" : -999859303,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11400433120,
          "rowCount" : 142505414,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222) "
        },
        "63" : {
          "sign" : -2004198814,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11856,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_promo_sk#365] "
        },
        "3" : {
          "sign" : 1912842844,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 6749016,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [channel#486, id#487, spark_grouping_id#485L], [channel#486, id#487, sum(sales#10) AS sales#6, sum(returns#11) AS returns#7, sum(profit#12) AS profit#8] "
        },
        "74" : {
          "sign" : 418543089,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4169736300,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#264 = d_date_sk#384) "
        },
        "91" : {
          "sign" : 1170715515,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#289, web_site_id#290, web_rec_start_date#291, web_rec_end_date#292, web_name#293, web_open_date_sk#294, web_close_date_sk#295, web_class#296, web_manager#297, web_mkt_id#298, web_mkt_class#299, web_mkt_desc#300, web_market_manager#301, web_company_id#302, web_company_name#303, web_street_number#304, web_street_name#305, web_street_type#306, web_suite_number#307, web_city#308, web_county#309, web_state#310, web_zip#311, web_country#312, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "52" : {
          "sign" : -637239067,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#317) AND ((d_date#317 >= 1998-08-04) AND (d_date#317 <= 1998-09-03))) AND isnotnull(d_date_sk#315)) "
        },
        "85" : {
          "sign" : 1242473740,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#265, wr_item_sk#266, wr_refunded_customer_sk#267, wr_refunded_cdemo_sk#268, wr_refunded_hdemo_sk#269, wr_refunded_addr_sk#270, wr_returning_customer_sk#271, wr_returning_cdemo_sk#272, wr_returning_hdemo_sk#273, wr_returning_addr_sk#274, wr_web_page_sk#275, wr_reason_sk#276, wr_order_number#277L, wr_return_quantity#278, wr_return_amt#279, wr_return_tax#280, wr_return_amt_inc_tax#281, wr_fee#282, wr_return_ship_cost#283, wr_refunded_cash#284, wr_reversed_charge#285, wr_account_credit#286, wr_net_loss#287, wr_returned_date_sk#288], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "28" : {
          "sign" : 940088751,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11856,
          "rowCount" : 988,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_promo_sk#142] "
        }
      },
      "links" : [ {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Aggregate",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Join",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Join",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "LogicalRelation",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "LogicalRelation",
        "toId" : 52,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Filter",
        "toId" : 51,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 23,
        "fromName" : "Aggregate",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 49,
        "fromName" : "Filter",
        "toId" : 48,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "LogicalRelation",
        "toId" : 55,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "Filter",
        "toId" : 54,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Join",
        "toId" : 46,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 45,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 45,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Join",
        "toId" : 44,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Project",
        "toId" : 43,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "LogicalRelation",
        "toId" : 58,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 58,
        "fromName" : "Filter",
        "toId" : 57,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Project",
        "toId" : 43,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Join",
        "toId" : 42,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 62,
        "fromName" : "LogicalRelation",
        "toId" : 61,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "Filter",
        "toId" : 60,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Join",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 65,
        "fromName" : "LogicalRelation",
        "toId" : 64,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "Filter",
        "toId" : 63,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Join",
        "toId" : 38,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 79,
        "fromName" : "LogicalRelation",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 82,
        "fromName" : "LogicalRelation",
        "toId" : 81,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 81,
        "fromName" : "Filter",
        "toId" : 80,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 80,
        "fromName" : "Project",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 23,
        "fromName" : "Aggregate",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 78,
        "fromName" : "Filter",
        "toId" : 77,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 77,
        "fromName" : "Project",
        "toId" : 76,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 85,
        "fromName" : "LogicalRelation",
        "toId" : 84,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 84,
        "fromName" : "Filter",
        "toId" : 83,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 83,
        "fromName" : "Project",
        "toId" : 76,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 76,
        "fromName" : "Join",
        "toId" : 75,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 75,
        "fromName" : "Project",
        "toId" : 74,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 80,
        "fromName" : "Project",
        "toId" : 74,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 74,
        "fromName" : "Join",
        "toId" : 73,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 73,
        "fromName" : "Project",
        "toId" : 72,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 88,
        "fromName" : "LogicalRelation",
        "toId" : 87,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 87,
        "fromName" : "Filter",
        "toId" : 86,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 86,
        "fromName" : "Project",
        "toId" : 72,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 72,
        "fromName" : "Join",
        "toId" : 71,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 71,
        "fromName" : "Project",
        "toId" : 70,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 91,
        "fromName" : "LogicalRelation",
        "toId" : 90,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 90,
        "fromName" : "Filter",
        "toId" : 89,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 89,
        "fromName" : "Project",
        "toId" : 70,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 70,
        "fromName" : "Join",
        "toId" : 69,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 69,
        "fromName" : "Project",
        "toId" : 68,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 94,
        "fromName" : "LogicalRelation",
        "toId" : 93,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 93,
        "fromName" : "Filter",
        "toId" : 92,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 92,
        "fromName" : "Project",
        "toId" : 68,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 68,
        "fromName" : "Join",
        "toId" : 67,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 67,
        "fromName" : "Project",
        "toId" : 66,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 66,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Union",
        "toId" : 4,
        "toName" : "Expand",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Expand",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#486 ASC NULLS FIRST, id#487 ASC NULLS FIRST], true\n      +- Aggregate [channel#486, id#487, spark_grouping_id#485L], [channel#486, id#487, sum(sales#10) AS sales#6, sum(returns#11) AS returns#7, sum(profit#12) AS profit#8]\n         +- Expand [[sales#10, returns#11, profit#12, channel#483, id#484, 0], [sales#10, returns#11, profit#12, channel#483, null, 1], [sales#10, returns#11, profit#12, null, null, 3]], [sales#10, returns#11, profit#12, channel#486, id#487, spark_grouping_id#485L]\n            +- Union false, false\n               :- Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#10, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#11, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#12, store channel AS channel#483, concat(store, s_store_id#92) AS id#484]\n               :  +- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n               :     +- Join Inner, (ss_store_sk#26 = s_store_sk#91)\n               :        :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :  +- Join Inner, (ss_promo_sk#27 = p_promo_sk#142)\n               :        :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :  +- Join Inner, (ss_item_sk#21 = i_item_sk#120)\n               :        :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :  +- Join Inner, (ss_sold_date_sk#42 = d_date_sk#63)\n               :        :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :     :  +- Join LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L))\n               :        :     :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42]\n               :        :     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#497 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#502 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#505 [], xxhash64(ss_promo_sk#27, 42))))\n               :        :     :     :     :     :     :  :- Project [d_date_sk#63]\n               :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n               :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n               :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#501]\n               :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n               :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#504]\n               :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n               :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#20,ss_item_sk#21,ss_customer_sk#22,ss_cdemo_sk#23,ss_hdemo_sk#24,ss_addr_sk#25,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_quantity#29,ss_wholesale_cost#30,ss_list_price#31,ss_sales_price#32,ss_ext_discount_amt#33,ss_ext_sales_price#34,ss_ext_wholesale_cost#35,ss_ext_list_price#36,ss_ext_tax#37,ss_coupon_amt#38,ss_net_paid#39,ss_net_paid_inc_tax#40,ss_net_profit#41,ss_sold_date_sk#42] parquet\n               :        :     :     :     :     +- Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :     :        +- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n               :        :     :     :     :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#43,sr_item_sk#44,sr_customer_sk#45,sr_cdemo_sk#46,sr_hdemo_sk#47,sr_addr_sk#48,sr_store_sk#49,sr_reason_sk#50,sr_ticket_number#51L,sr_return_quantity#52,sr_return_amt#53,sr_return_tax#54,sr_return_amt_inc_tax#55,sr_fee#56,sr_return_ship_cost#57,sr_refunded_cash#58,sr_reversed_charge#59,sr_store_credit#60,sr_net_loss#61,sr_returned_date_sk#62] parquet\n               :        :     :     :     +- Project [d_date_sk#63]\n               :        :     :     :        +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n               :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n               :        :     :     +- Project [i_item_sk#120]\n               :        :     :        +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     +- Project [p_promo_sk#142]\n               :        :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        +- Project [s_store_sk#91, s_store_id#92]\n               :           +- Filter isnotnull(s_store_sk#91)\n               :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92,s_rec_start_date#93,s_rec_end_date#94,s_closed_date_sk#95,s_store_name#96,s_number_employees#97,s_floor_space#98,s_hours#99,s_manager#100,s_market_id#101,s_geography_class#102,s_market_desc#103,s_market_manager#104,s_division_id#105,s_division_name#106,s_company_id#107,s_company_name#108,s_street_number#109,s_street_name#110,s_street_type#111,s_suite_number#112,s_city#113,s_county#114,... 5 more fields] parquet\n               :- Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#14, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#15, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#16, catalog channel AS channel#493, concat(catalog_page, cp_catalog_page_id#223) AS id#494]\n               :  +- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :     +- Join Inner, (cs_promo_sk#176 = p_promo_sk#365)\n               :        :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :        :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n               :        :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#343)\n               :        :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#315)\n               :        :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n               :        :     :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194]\n               :        :     :     :     :     :  +- Filter (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#498 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#508 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#511 [], xxhash64(cs_promo_sk#176, 42))))\n               :        :     :     :     :     :     :  :- Project [d_date_sk#315]\n               :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#317) AND ((d_date#317 >= 1998-08-04) AND (d_date#317 <= 1998-09-03))) AND isnotnull(d_date_sk#315))\n               :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#315,d_date_id#316,d_date#317,d_month_seq#318,d_week_seq#319,d_quarter_seq#320,d_year#321,d_dow#322,d_moy#323,d_dom#324,d_qoy#325,d_fy_year#326,d_fy_quarter_seq#327,d_fy_week_seq#328,d_day_name#329,d_quarter_name#330,d_holiday#331,d_weekend#332,d_following_holiday#333,d_first_dom#334,d_last_dom#335,d_same_day_ly#336,d_same_day_lq#337,d_current_day#338,... 4 more fields] parquet\n               :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#501]\n               :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n               :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#504]\n               :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n               :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#161,cs_ship_date_sk#162,cs_bill_customer_sk#163,cs_bill_cdemo_sk#164,cs_bill_hdemo_sk#165,cs_bill_addr_sk#166,cs_ship_customer_sk#167,cs_ship_cdemo_sk#168,cs_ship_hdemo_sk#169,cs_ship_addr_sk#170,cs_call_center_sk#171,cs_catalog_page_sk#172,cs_ship_mode_sk#173,cs_warehouse_sk#174,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_quantity#178,cs_wholesale_cost#179,cs_list_price#180,cs_sales_price#181,cs_ext_discount_amt#182,cs_ext_sales_price#183,cs_ext_wholesale_cost#184,... 10 more fields] parquet\n               :        :     :     :     :     +- Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :        +- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n               :        :     :     :     :           +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#195,cr_item_sk#196,cr_refunded_customer_sk#197,cr_refunded_cdemo_sk#198,cr_refunded_hdemo_sk#199,cr_refunded_addr_sk#200,cr_returning_customer_sk#201,cr_returning_cdemo_sk#202,cr_returning_hdemo_sk#203,cr_returning_addr_sk#204,cr_call_center_sk#205,cr_catalog_page_sk#206,cr_ship_mode_sk#207,cr_warehouse_sk#208,cr_reason_sk#209,cr_order_number#210L,cr_return_quantity#211,cr_return_amount#212,cr_return_tax#213,cr_return_amt_inc_tax#214,cr_fee#215,cr_return_ship_cost#216,cr_refunded_cash#217,cr_reversed_charge#218,... 3 more fields] parquet\n               :        :     :     :     +- Project [d_date_sk#315]\n               :        :     :     :        +- Filter ((isnotnull(d_date#317) AND ((d_date#317 >= 1998-08-04) AND (d_date#317 <= 1998-09-03))) AND isnotnull(d_date_sk#315))\n               :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#315,d_date_id#316,d_date#317,d_month_seq#318,d_week_seq#319,d_quarter_seq#320,d_year#321,d_dow#322,d_moy#323,d_dom#324,d_qoy#325,d_fy_year#326,d_fy_quarter_seq#327,d_fy_week_seq#328,d_day_name#329,d_quarter_name#330,d_holiday#331,d_weekend#332,d_following_holiday#333,d_first_dom#334,d_last_dom#335,d_same_day_ly#336,d_same_day_lq#337,d_current_day#338,... 4 more fields] parquet\n               :        :     :     +- Project [i_item_sk#343]\n               :        :     :        +- Filter ((isnotnull(i_current_price#348) AND (i_current_price#348 > 50.00)) AND isnotnull(i_item_sk#343))\n               :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#343,i_item_id#344,i_rec_start_date#345,i_rec_end_date#346,i_item_desc#347,i_current_price#348,i_wholesale_cost#349,i_brand_id#350,i_brand#351,i_class_id#352,i_class#353,i_category_id#354,i_category#355,i_manufact_id#356,i_manufact#357,i_size#358,i_formulation#359,i_color#360,i_units#361,i_container#362,i_manager_id#363,i_product_name#364] parquet\n               :        :     +- Project [cp_catalog_page_sk#222, cp_catalog_page_id#223]\n               :        :        +- Filter isnotnull(cp_catalog_page_sk#222)\n               :        :           +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223,cp_start_date_sk#224,cp_end_date_sk#225,cp_department#226,cp_catalog_number#227,cp_catalog_page_number#228,cp_description#229,cp_type#230] parquet\n               :        +- Project [p_promo_sk#365]\n               :           +- Filter ((isnotnull(p_channel_tv#376) AND (p_channel_tv#376 = N)) AND isnotnull(p_promo_sk#365))\n               :              +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#365,p_promo_id#366,p_start_date_sk#367,p_end_date_sk#368,p_item_sk#369,p_cost#370,p_response_target#371,p_promo_name#372,p_channel_dmail#373,p_channel_email#374,p_channel_catalog#375,p_channel_tv#376,p_channel_radio#377,p_channel_press#378,p_channel_event#379,p_channel_demo#380,p_channel_details#381,p_purpose#382,p_discount_active#383] parquet\n               +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#17, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#18, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#19, web channel AS channel#495, concat(web_site, web_site_id#290) AS id#496]\n                  +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- Join Inner, (ws_promo_sk#246 = p_promo_sk#434)\n                        :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n                        :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#412)\n                        :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#384)\n                        :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n                        :     :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264]\n                        :     :     :     :     :  +- Filter (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#499 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#514 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#517 [], xxhash64(ws_promo_sk#246, 42))))\n                        :     :     :     :     :     :  :- Project [d_date_sk#384]\n                        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#386) AND ((d_date#386 >= 1998-08-04) AND (d_date#386 <= 1998-09-03))) AND isnotnull(d_date_sk#384))\n                        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#384,d_date_id#385,d_date#386,d_month_seq#387,d_week_seq#388,d_quarter_seq#389,d_year#390,d_dow#391,d_moy#392,d_dom#393,d_qoy#394,d_fy_year#395,d_fy_quarter_seq#396,d_fy_week_seq#397,d_day_name#398,d_quarter_name#399,d_holiday#400,d_weekend#401,d_following_holiday#402,d_first_dom#403,d_last_dom#404,d_same_day_ly#405,d_same_day_lq#406,d_current_day#407,... 4 more fields] parquet\n                        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#501]\n                        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n                        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n                        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#504]\n                        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n                        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n                        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#231,ws_ship_date_sk#232,ws_item_sk#233,ws_bill_customer_sk#234,ws_bill_cdemo_sk#235,ws_bill_hdemo_sk#236,ws_bill_addr_sk#237,ws_ship_customer_sk#238,ws_ship_cdemo_sk#239,ws_ship_hdemo_sk#240,ws_ship_addr_sk#241,ws_web_page_sk#242,ws_web_site_sk#243,ws_ship_mode_sk#244,ws_warehouse_sk#245,ws_promo_sk#246,ws_order_number#247L,ws_quantity#248,ws_wholesale_cost#249,ws_list_price#250,ws_sales_price#251,ws_ext_discount_amt#252,ws_ext_sales_price#253,ws_ext_wholesale_cost#254,... 10 more fields] parquet\n                        :     :     :     :     +- Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :        +- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n                        :     :     :     :           +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#265,wr_item_sk#266,wr_refunded_customer_sk#267,wr_refunded_cdemo_sk#268,wr_refunded_hdemo_sk#269,wr_refunded_addr_sk#270,wr_returning_customer_sk#271,wr_returning_cdemo_sk#272,wr_returning_hdemo_sk#273,wr_returning_addr_sk#274,wr_web_page_sk#275,wr_reason_sk#276,wr_order_number#277L,wr_return_quantity#278,wr_return_amt#279,wr_return_tax#280,wr_return_amt_inc_tax#281,wr_fee#282,wr_return_ship_cost#283,wr_refunded_cash#284,wr_reversed_charge#285,wr_account_credit#286,wr_net_loss#287,wr_returned_date_sk#288] parquet\n                        :     :     :     +- Project [d_date_sk#384]\n                        :     :     :        +- Filter ((isnotnull(d_date#386) AND ((d_date#386 >= 1998-08-04) AND (d_date#386 <= 1998-09-03))) AND isnotnull(d_date_sk#384))\n                        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#384,d_date_id#385,d_date#386,d_month_seq#387,d_week_seq#388,d_quarter_seq#389,d_year#390,d_dow#391,d_moy#392,d_dom#393,d_qoy#394,d_fy_year#395,d_fy_quarter_seq#396,d_fy_week_seq#397,d_day_name#398,d_quarter_name#399,d_holiday#400,d_weekend#401,d_following_holiday#402,d_first_dom#403,d_last_dom#404,d_same_day_ly#405,d_same_day_lq#406,d_current_day#407,... 4 more fields] parquet\n                        :     :     +- Project [i_item_sk#412]\n                        :     :        +- Filter ((isnotnull(i_current_price#417) AND (i_current_price#417 > 50.00)) AND isnotnull(i_item_sk#412))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#412,i_item_id#413,i_rec_start_date#414,i_rec_end_date#415,i_item_desc#416,i_current_price#417,i_wholesale_cost#418,i_brand_id#419,i_brand#420,i_class_id#421,i_class#422,i_category_id#423,i_category#424,i_manufact_id#425,i_manufact#426,i_size#427,i_formulation#428,i_color#429,i_units#430,i_container#431,i_manager_id#432,i_product_name#433] parquet\n                        :     +- Project [web_site_sk#289, web_site_id#290]\n                        :        +- Filter isnotnull(web_site_sk#289)\n                        :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290,web_rec_start_date#291,web_rec_end_date#292,web_name#293,web_open_date_sk#294,web_close_date_sk#295,web_class#296,web_manager#297,web_mkt_id#298,web_mkt_class#299,web_mkt_desc#300,web_market_manager#301,web_company_id#302,web_company_name#303,web_street_number#304,web_street_name#305,web_street_type#306,web_suite_number#307,web_city#308,web_county#309,web_state#310,web_zip#311,web_country#312,... 2 more fields] parquet\n                        +- Project [p_promo_sk#434]\n                           +- Filter ((isnotnull(p_channel_tv#445) AND (p_channel_tv#445 = N)) AND isnotnull(p_promo_sk#434))\n                              +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#434,p_promo_id#435,p_start_date_sk#436,p_end_date_sk#437,p_item_sk#438,p_cost#439,p_response_target#440,p_promo_name#441,p_channel_dmail#442,p_channel_email#443,p_channel_catalog#444,p_channel_tv#445,p_channel_radio#446,p_channel_press#447,p_channel_event#448,p_channel_demo#449,p_channel_details#450,p_purpose#451,p_discount_active#452] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 93869060896,
      "inputRowCount" : 541555789
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 858809100,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1200,
            "rowCount" : 12,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))]) "
          },
          "4" : {
            "sign" : 1231369636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 2264280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "5" : {
            "sign" : -1213490061,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 691864,
            "rowCount" : 6653,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "6" : {
            "sign" : -700745428,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 229944,
            "rowCount" : 2211,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))]) "
          },
          "1" : {
            "sign" : 379938038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2264280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -839561433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -857645187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2264280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 66774136,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 460720,
            "rowCount" : 4430,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))]) "
          },
          "3" : {
            "sign" : -845081208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2264280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))])\n               +- LogicalQueryStage Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 691864,
        "inputRowCount" : 6653
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 5782.0,
        "FinishedTasksDistributionInMs" : [ 2329.0, 2329.0, 3453.0, 3453.0, 3453.0 ]
      },
      "StartTimeInMs" : 1702227411253,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1470,
        "IOBytes" : {
          "Total" : 166708743,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 166621775,
            "SW" : 86968
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1422008846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10847749785428849328,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "34" : {
            "sign" : -1813833438,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11311616,
            "rowCount" : 176744,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194], ShuffleQueryStage 6 "
          },
          "12" : {
            "sign" : -559054686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 187344122155134151536,
            "rowCount" : 3345430752770252706,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#21 = i_item_sk#120) "
          },
          "51" : {
            "sign" : -857881211,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5690304,
            "rowCount" : 88911,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : -1783126234,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 90353286717034896435561408,
            "rowCount" : 1328724804662277888758256,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#26 = s_store_sk#91) "
          },
          "19" : {
            "sign" : -2028494195,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#63], BroadcastQueryStage 2 "
          },
          "23" : {
            "sign" : 2101358752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1593523786576795985002291200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709] "
          },
          "4" : {
            "sign" : 244690085,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 5599384830869722697948742144,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "40" : {
            "sign" : -1486552633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 471573378672162937986816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711] "
          },
          "15" : {
            "sign" : 847748218,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 530631203722704,
            "rowCount" : 9475557209334,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61] "
          },
          "11" : {
            "sign" : 1439607869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 160580676132972129888,
            "rowCount" : 3345430752770252706,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          },
          "9" : {
            "sign" : -1587939052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 145432565684428425635232,
            "rowCount" : 3305285583737009673528,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          },
          "44" : {
            "sign" : 2041841661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 390518992275438575808,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#243 = web_site_sk#289) "
          },
          "33" : {
            "sign" : -513858028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 193399377519168,
            "rowCount" : 2544728651568,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L)) "
          },
          "22" : {
            "sign" : -152368302,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#91, s_store_id#92], BroadcastQueryStage 5 "
          },
          "56" : {
            "sign" : -1588709561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#661], BroadcastQueryStage 23 "
          },
          "55" : {
            "sign" : 1274694889,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21 "
          },
          "26" : {
            "sign" : -670160195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1173002419268896566067200,
            "rowCount" : 18328162801076508844800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          },
          "50" : {
            "sign" : 851129912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 48647970528804,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L)) "
          },
          "37" : {
            "sign" : -1749991018,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#570], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : -350621830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15274598221446408,
            "rowCount" : 293742273489354,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          },
          "46" : {
            "sign" : -647026703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12655708083000324216,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#233 = i_item_sk#639) "
          },
          "24" : {
            "sign" : 159277430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1086493490847815444319744000,
            "rowCount" : 18108224847463590738662400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          },
          "35" : {
            "sign" : 722450972,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 518321592,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220], ShuffleQueryStage 7 "
          },
          "16" : {
            "sign" : -792006320,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 720142347909384,
            "rowCount" : 9475557209334,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L)) "
          },
          "5" : {
            "sign" : -1797673572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1710923142765748602151004544,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 337604318,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 171874850354324503023456,
            "rowCount" : 3305285583737009673528,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_promo_sk#27 = p_promo_sk#142) "
          },
          "48" : {
            "sign" : 843748570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1190595068204940,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#264 = d_date_sk#611) "
          },
          "21" : {
            "sign" : -1916700166,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#142], BroadcastQueryStage 4 "
          },
          "54" : {
            "sign" : 26649350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#639], BroadcastQueryStage 20 "
          },
          "43" : {
            "sign" : -445095060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 347127993133723178496,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "32" : {
            "sign" : 560883090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 142504804487808,
            "rowCount" : 2544728651568,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220] "
          },
          "49" : {
            "sign" : 388942843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35845873021224,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] "
          },
          "6" : {
            "sign" : 416137426,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 116927782810280454210726528,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699] "
          },
          "36" : {
            "sign" : 193530688,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#542], BroadcastQueryStage 9 "
          },
          "1" : {
            "sign" : -46423137,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5599384830869722697948742144,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -2084407806,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#592], BroadcastQueryStage 14 "
          },
          "17" : {
            "sign" : -704517545,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21055616,
            "rowCount" : 328994,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42], ShuffleQueryStage 0 "
          },
          "25" : {
            "sign" : 420609212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1231359289627524170229043200,
            "rowCount" : 18108224847463590738662400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_promo_sk#176 = p_promo_sk#592) "
          },
          "14" : {
            "sign" : -217423264,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17624536409361240,
            "rowCount" : 293742273489354,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#42 = d_date_sk#63) "
          },
          "47" : {
            "sign" : 1453334329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1031849059110948,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "31" : {
            "sign" : -416038899,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4733195291916480,
            "rowCount" : 78886588198608,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#194 = d_date_sk#542) "
          },
          "53" : {
            "sign" : -2094792201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#611], BroadcastQueryStage 18 "
          },
          "42" : {
            "sign" : 1477680727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 364397610792125906626176,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_promo_sk#246 = p_promo_sk#661) "
          },
          "0" : {
            "sign" : -959882328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -104797238,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#120], BroadcastQueryStage 3 "
          },
          "27" : {
            "sign" : 143808855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1319627721677508636825600,
            "rowCount" : 18328162801076508844800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222) "
          },
          "2" : {
            "sign" : 532827006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5599384830869722697948742144,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1212823688,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1211776,
            "rowCount" : 20400,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cp_catalog_page_sk#222, cp_catalog_page_id#223], BroadcastQueryStage 12 "
          },
          "18" : {
            "sign" : -2132227479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1152064440,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61], ShuffleQueryStage 1 "
          },
          "30" : {
            "sign" : 179565289,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4102102586327616,
            "rowCount" : 78886588198608,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          },
          "7" : {
            "sign" : -774118671,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 79723488279736673325495360,
            "rowCount" : 1328724804662277888758256,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92] "
          },
          "29" : {
            "sign" : 1764349660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50312603767661004672,
            "rowCount" : 898439352993946512,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#175 = i_item_sk#570) "
          },
          "41" : {
            "sign" : 311967086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 321527303640111094081920,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "3" : {
            "sign" : -1494673231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5599384830869722697948742144,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          },
          "52" : {
            "sign" : 1848823745,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 259178004,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16 "
          },
          "28" : {
            "sign" : 840925781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43125088943709432576,
            "rowCount" : 898439352993946512,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          }
        },
        "links" : [ {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalQueryStage",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Join",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Join",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalQueryStage",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "LogicalQueryStage",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Join",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "LogicalQueryStage",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Join",
          "toId" : 47,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Project",
          "toId" : 46,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalQueryStage",
          "toId" : 46,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Join",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Join",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "LogicalQueryStage",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Join",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699]\n               :  +- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n               :     +- Join Inner, (ss_store_sk#26 = s_store_sk#91)\n               :        :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :  +- Join Inner, (ss_promo_sk#27 = p_promo_sk#142)\n               :        :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :  +- Join Inner, (ss_item_sk#21 = i_item_sk#120)\n               :        :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :  +- Join Inner, (ss_sold_date_sk#42 = d_date_sk#63)\n               :        :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :     :  +- Join LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L))\n               :        :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42], ShuffleQueryStage 0\n               :        :     :     :     :     +- LogicalQueryStage Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61], ShuffleQueryStage 1\n               :        :     :     :     +- LogicalQueryStage Project [d_date_sk#63], BroadcastQueryStage 2\n               :        :     :     +- LogicalQueryStage Project [i_item_sk#120], BroadcastQueryStage 3\n               :        :     +- LogicalQueryStage Project [p_promo_sk#142], BroadcastQueryStage 4\n               :        +- LogicalQueryStage Project [s_store_sk#91, s_store_id#92], BroadcastQueryStage 5\n               :- Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709]\n               :  +- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :     +- Join Inner, (cs_promo_sk#176 = p_promo_sk#592)\n               :        :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :        :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n               :        :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#570)\n               :        :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#542)\n               :        :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n               :        :     :     :     :     :- LogicalQueryStage Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194], ShuffleQueryStage 6\n               :        :     :     :     :     +- LogicalQueryStage Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220], ShuffleQueryStage 7\n               :        :     :     :     +- LogicalQueryStage Project [d_date_sk#542], BroadcastQueryStage 9\n               :        :     :     +- LogicalQueryStage Project [i_item_sk#570], BroadcastQueryStage 11\n               :        :     +- LogicalQueryStage Project [cp_catalog_page_sk#222, cp_catalog_page_id#223], BroadcastQueryStage 12\n               :        +- LogicalQueryStage Project [p_promo_sk#592], BroadcastQueryStage 14\n               +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n                  +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n                        :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n                        :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n                        :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n                        :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n                        :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15\n                        :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16\n                        :     :     :     +- LogicalQueryStage Project [d_date_sk#611], BroadcastQueryStage 18\n                        :     :     +- LogicalQueryStage Project [i_item_sk#639], BroadcastQueryStage 20\n                        :     +- LogicalQueryStage Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21\n                        +- LogicalQueryStage Project [p_promo_sk#661], BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1981968700,
        "inputRowCount" : 51051521
      },
      "PD" : {
        "2" : [ 57932, 57533, 57350, 57768, 57278, 59654, 54590, 58461, 56624, 58324, 57531, 55522, 58254, 57038, 58189, 57300, 57032, 56841, 58071, 58385, 56872, 58461, 57240, 54702, 56743, 57507, 56716, 58257, 55577, 60210, 56742, 56204, 55923, 59897, 59259, 58153, 56223, 56852, 55938, 56345, 55250, 59506, 59086, 55677, 57897, 58748, 58888, 57667, 57372, 58029, 55672, 56607, 57398, 55855, 60710, 57794, 55409, 56270, 57656, 58631, 56973, 57027, 56887, 58098, 58679, 58764, 58997, 55881, 58155, 55772, 56844, 57470, 55791, 58931, 59186, 57639, 56509, 57598, 56567, 56277, 57204, 55973, 58232, 56117, 58365, 53990, 57583, 56841, 57260, 57687, 55818, 58122, 57006, 56517, 57800, 53994, 57997, 55912, 56974, 57105, 56303, 57663, 56996, 58451, 53930, 57872, 55488, 58232, 57800, 57035, 59063, 58230, 58055, 54399, 58931, 58487, 56492, 58019, 56667, 57938, 57696, 56712, 57639, 57204, 56275, 56941, 58958, 56322, 57376, 59873, 57603, 58015, 58276, 57799, 57663, 56071, 57900, 57433, 56467, 59327, 55583, 58700, 55486, 58188, 55347, 56381, 56567, 58038, 56217, 56439, 56644, 57597, 56841, 57936, 54629, 57892, 55893, 56711, 55693, 55615, 56370, 56910, 59111, 58129, 58784, 57039, 57827, 58451, 57800, 58235, 56797, 59451, 57326, 57027, 57603, 58715, 58235, 57833, 56707, 54491, 58458, 59352, 58432, 57982, 56963, 58060, 55715, 57666, 56751, 57276, 55885, 58824, 57639, 55501, 57243, 57630, 56270, 57362, 55752, 57938 ],
        "4" : [ 28645, 30242, 29426, 30296, 29721, 30531, 30900, 29810, 30985, 31004, 30952, 31125, 32796, 32668, 29833, 30551, 31410, 29086, 30949, 28922, 30090, 29014, 33714, 31577, 31207, 30467, 28248, 30461, 31840, 31414, 31596, 30757, 31109, 31112, 32101, 31318, 30837, 30513, 30961, 30814, 30162, 31191, 30212, 30018, 31657, 31634, 30150, 29628, 29082, 30635, 30659, 29343, 30917, 30991, 30293, 30339, 30000, 30518, 30083, 31171, 30119, 30474, 31444, 31310, 29640, 31615, 30703, 29374, 29863, 30444, 29558, 30632, 30491, 31639, 31010, 29801, 32758, 31438, 30952, 32464, 29168, 32386, 31908, 29019, 29080, 30628, 30901, 31581, 31067, 31711, 30185, 30988, 31505, 30284, 31229, 30013, 30125, 31395, 31099, 31299, 29972, 30369, 30684, 30787, 30795, 30750, 31561, 31605, 32437, 29712, 31007, 31439, 31026, 31219, 30774, 31418, 30359, 31224, 33277, 31954, 30098, 30509, 30728, 31273, 29554, 29557, 30161, 31968, 30169, 31434, 30715, 31822, 31514, 31953, 30372, 30174, 32193, 29364, 29346, 30505, 29151, 30606, 30018, 31241, 30226, 29245, 30852, 30015, 29883, 30046, 31467, 31151, 31712, 29178, 29747, 32271, 31540, 30706, 29968, 32026, 32517, 29916, 31745, 30205, 31991, 30387, 31971, 31110, 31512, 28789, 30205, 30678, 31375, 29999, 30872, 32951, 32208, 30532, 29211, 30544, 31473, 31019, 30351, 31093, 31059, 30946, 30133, 31526, 31153, 30576, 31948, 29705, 29292, 30619, 30519, 30735, 30889, 30320, 32254, 29432 ],
        "3" : [ 3413738, 3409110, 3416794, 3418424, 3397085, 3424817, 3413635, 3416650, 3394794, 3427127, 3428153, 3389666, 3404097, 3417203, 3405786, 3404626, 3380982, 3400751, 3398119, 3417963, 3421569, 3389178, 3408489, 3407136, 3389078, 3443558, 3412408, 3428337, 3401576, 3412466, 3418493, 3424974, 3379153, 3423369, 3415576, 3417652, 3413800, 3405552, 3433059, 3426174, 3412198, 3408499, 3394991, 3410710, 3411195, 3429213, 3401077, 3423439, 3440477, 3410510, 3391906, 3407008, 3399534, 3402434, 3385826, 3433159, 3404292, 3409341, 3409253, 3413851, 3416190, 3397135, 3430396, 3407196, 3431585, 3415284, 3410729, 3405511, 3423191, 3400062, 3381273, 3419509, 3403917, 3448699, 3386811, 3433887, 3413598, 3400888, 3417300, 3435989, 3400555, 3408914, 3402951, 3421138, 3419929, 3398401, 3406936, 3414679, 3422237, 3411624, 3423705, 3411828, 3416848, 3418131, 3422940, 3409171, 3408918, 3405438, 3415621, 3407759, 3412778, 3411589, 3418965, 3412299, 3408215, 3410192, 3420985, 3433306, 3416774, 3418081, 3414449, 3415291, 3401002, 3426864, 3412274, 3420546, 3421970, 3401103, 3423338, 3409262, 3405397, 3377064, 3428391, 3396851, 3404092, 3402810, 3404547, 3421020, 3410971, 3418747, 3376655, 3406234, 3434189, 3423332, 3403628, 3424078, 3411902, 3437104, 3433960, 3413583, 3412141, 3416446, 3409391, 3395655, 3408232, 3403185, 3395589, 3430390, 3419041, 3399895, 3412333, 3422583, 3424740, 3409894, 3396037, 3429522, 3400639, 3371182, 3418623, 3414782, 3399162, 3423256, 3415188, 3390945, 3406051, 3426811, 3398442, 3407565, 3428155, 3411394, 3410478, 3388335, 3412614, 3396571, 3415385, 3403075, 3408148, 3411788, 3410666, 3434204, 3402056, 3424207, 3416016, 3411624, 3426061, 3425261, 3396732, 3397505, 3433636, 3424689, 3415179, 3420804, 3413912, 3404394, 3384236, 3420619, 3416087, 3431363, 3467914, 3388012 ],
        "6" : [ 16312, 16224, 16849, 17046, 16539, 16671, 16442, 17157, 16307, 15998, 16997, 17280, 17598, 16713, 17380, 16527, 16261, 16123, 16167, 16933, 17649, 16252, 16596, 16880, 16390, 16921, 17700, 16758, 16510, 18125, 16526, 17400, 17047, 16606, 16741, 16005, 16917, 16669, 16268, 16489, 18337, 17319, 16420, 17268, 16563, 17455, 15242, 17383, 16542, 17391, 15494, 16555, 16633, 17133, 16536, 16772, 17394, 15542, 16775, 17702, 16479, 15720, 18557, 16582, 17007, 17138, 16590, 16597, 18071, 17558, 15237, 16960, 16616, 16468, 16414, 17495, 16746, 16002, 16811, 15575, 15623, 17180, 17323, 17377, 16338, 15405, 17456, 16021, 17383, 16352, 17305, 17091, 16594, 17002, 17211, 17325, 16638, 16705, 16874, 17963, 16279, 18141, 17189, 16043, 16357, 16327, 16088, 16113, 15289, 17088, 17189, 17345, 16798, 16660, 16245, 16548, 17113, 16225, 16754, 17223, 16583, 16244, 15899, 17285, 16107, 16605, 17382, 17130, 16806, 17961, 15699, 17532, 17077, 17507, 15976, 17109, 17568, 15705, 15085, 16038, 15987, 15895, 17657, 16352, 15682, 17203, 16502, 17624, 16076, 18457, 14924, 16606, 17339, 17518, 16063, 16183, 16403, 16223, 17229, 17294, 17285, 17707, 16432, 17802, 17379, 16336, 15584, 17301, 16695, 16324, 17468, 17275, 17041, 17032, 17521, 15862, 16388, 17398, 17505, 16471, 16079, 17198, 16760, 15162, 16635, 16251, 16920, 16190, 16675, 17667, 17917, 16772, 16474, 17268, 16550, 16885, 16522, 17218, 16002, 17836 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 73,
        "FinishedTasksTotalTimeInMs" : 100200.0,
        "FinishedTasksDistributionInMs" : [ 297.0, 489.0, 548.0, 1910.0, 8311.0 ]
      },
      "StartTimeInMs" : 1702227400848,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11875,
        "IOBytes" : {
          "Total" : 2047405638,
          "Details" : {
            "IR" : 406241442,
            "IW" : 0,
            "SR" : 1155466296,
            "SW" : 485697900
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 858809100,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3744,
            "rowCount" : 36,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))]) "
          },
          "4" : {
            "sign" : 1231369636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 2272608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "5" : {
            "sign" : -1213490061,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 694408,
            "rowCount" : 6677,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "6" : {
            "sign" : -700745428,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 229944,
            "rowCount" : 2211,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))]) "
          },
          "1" : {
            "sign" : 379938038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2272608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -839561433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -857645187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2272608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 66774136,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 460720,
            "rowCount" : 4430,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))]) "
          },
          "3" : {
            "sign" : -845081208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2272608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))])\n               +- LogicalQueryStage Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 694408,
        "inputRowCount" : 6677
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227411502,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1221,
        "IOBytes" : {
          "Total" : 620523,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 537778,
            "SW" : 82745
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 851129912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 48647970528804,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L)) "
          },
          "12" : {
            "sign" : 840925781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43125088943709432576,
            "rowCount" : 898439352993946512,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          },
          "8" : {
            "sign" : 159277430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1086493490847815444319744000,
            "rowCount" : 18108224847463590738662400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          },
          "19" : {
            "sign" : 722450972,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 575912880,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220], ShuffleQueryStage 7 "
          },
          "23" : {
            "sign" : -2084407806,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#592], BroadcastQueryStage 14 "
          },
          "4" : {
            "sign" : 970773119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 5216712087126986665986433143,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "40" : {
            "sign" : -1588709561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#661], BroadcastQueryStage 23 "
          },
          "15" : {
            "sign" : -416038899,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4733195291916480,
            "rowCount" : 78886588198608,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#194 = d_date_sk#542) "
          },
          "11" : {
            "sign" : 143808855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1319627721677508636825600,
            "rowCount" : 18328162801076508844800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222) "
          },
          "9" : {
            "sign" : 420609212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1231359289627524170229043200,
            "rowCount" : 18108224847463590738662400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_promo_sk#176 = p_promo_sk#592) "
          },
          "33" : {
            "sign" : 388942843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35845873021224,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] "
          },
          "22" : {
            "sign" : -1212823688,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1211776,
            "rowCount" : 20400,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cp_catalog_page_sk#222, cp_catalog_page_id#223], BroadcastQueryStage 12 "
          },
          "26" : {
            "sign" : 1477680727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 364397610792125906626176,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_promo_sk#246 = p_promo_sk#661) "
          },
          "37" : {
            "sign" : -2094792201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#611], BroadcastQueryStage 18 "
          },
          "13" : {
            "sign" : 1764349660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50312603767661004672,
            "rowCount" : 898439352993946512,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#175 = i_item_sk#570) "
          },
          "24" : {
            "sign" : -1486552633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 471573378672162937986816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711] "
          },
          "35" : {
            "sign" : -857881211,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5690304,
            "rowCount" : 88911,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15 "
          },
          "16" : {
            "sign" : 560883090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 142504804487808,
            "rowCount" : 2544728651568,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220] "
          },
          "5" : {
            "sign" : 608222684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1593995359955468147940299016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -670160195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1173002419268896566067200,
            "rowCount" : 18328162801076508844800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          },
          "21" : {
            "sign" : -1749991018,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#570], BroadcastQueryStage 11 "
          },
          "32" : {
            "sign" : 843748570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1190595068204940,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#264 = d_date_sk#611) "
          },
          "6" : {
            "sign" : -700745428,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21000,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))]) "
          },
          "36" : {
            "sign" : 1848823745,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 259178004,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16 "
          },
          "1" : {
            "sign" : -799987553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5216712087126986665986433143,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 1274694889,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21 "
          },
          "17" : {
            "sign" : -513858028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 193399377519168,
            "rowCount" : 2544728651568,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L)) "
          },
          "25" : {
            "sign" : 311967086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 321527303640111094081920,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "14" : {
            "sign" : 179565289,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4102102586327616,
            "rowCount" : 78886588198608,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          },
          "31" : {
            "sign" : 1453334329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1031849059110948,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "0" : {
            "sign" : 1832813890,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 193530688,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#542], BroadcastQueryStage 9 "
          },
          "27" : {
            "sign" : -445095060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 347127993133723178496,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "2" : {
            "sign" : 137279320,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5216712087126986665986433143,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 26649350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#639], BroadcastQueryStage 20 "
          },
          "18" : {
            "sign" : -1813833438,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11311616,
            "rowCount" : 176744,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194], ShuffleQueryStage 6 "
          },
          "30" : {
            "sign" : -647026703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12655708083000324216,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#233 = i_item_sk#639) "
          },
          "7" : {
            "sign" : 2101358752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1593523786576795985002291200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709] "
          },
          "29" : {
            "sign" : -1422008846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10847749785428849328,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "3" : {
            "sign" : -775494799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5216712087126986665986433143,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          },
          "28" : {
            "sign" : 2041841661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 390518992275438575808,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#243 = web_site_sk#289) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))])\n               :- Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709]\n               :  +- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :     +- Join Inner, (cs_promo_sk#176 = p_promo_sk#592)\n               :        :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :        :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n               :        :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#570)\n               :        :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#542)\n               :        :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n               :        :     :     :     :     :- LogicalQueryStage Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194], ShuffleQueryStage 6\n               :        :     :     :     :     +- LogicalQueryStage Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220], ShuffleQueryStage 7\n               :        :     :     :     +- LogicalQueryStage Project [d_date_sk#542], BroadcastQueryStage 9\n               :        :     :     +- LogicalQueryStage Project [i_item_sk#570], BroadcastQueryStage 11\n               :        :     +- LogicalQueryStage Project [cp_catalog_page_sk#222, cp_catalog_page_id#223], BroadcastQueryStage 12\n               :        +- LogicalQueryStage Project [p_promo_sk#592], BroadcastQueryStage 14\n               +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n                  +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n                        :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n                        :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n                        :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n                        :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n                        :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15\n                        :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16\n                        :     :     :     +- LogicalQueryStage Project [d_date_sk#611], BroadcastQueryStage 18\n                        :     :     +- LogicalQueryStage Project [i_item_sk#639], BroadcastQueryStage 20\n                        :     +- LogicalQueryStage Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21\n                        +- LogicalQueryStage Project [p_promo_sk#661], BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 861730876,
        "inputRowCount" : 21908316
      },
      "PD" : {
        "5" : [ 1683639, 1695543, 1683684, 1695007, 1688841, 1688411, 1681465, 1693238, 1690734, 1697678, 1688078, 1699589, 1700454, 1684258, 1692787, 1713787, 1690044, 1683096, 1687762, 1690372, 1697025, 1687049, 1677331, 1695733, 1670705, 1689536, 1680145, 1681261, 1693224, 1678855, 1688937, 1674774, 1700655, 1692268, 1693255, 1686605, 1698503, 1686350, 1691606, 1675286, 1700355, 1687749, 1676025, 1684911, 1700878, 1687718, 1680241, 1700294, 1691118, 1688133, 1687247, 1696611, 1691622, 1700787, 1694953, 1698599, 1689944, 1692074, 1688394, 1688893, 1684052, 1691383, 1690367, 1684920, 1681844, 1693265, 1690819, 1697854, 1680980, 1688794, 1684852, 1688615, 1693809, 1689015, 1686967, 1694217, 1702719, 1694358, 1696077, 1692092, 1687132, 1689327, 1682982, 1678169, 1691279, 1683755, 1695801, 1703928, 1691100, 1688711, 1682002, 1673244, 1685458, 1686727, 1687485, 1692584, 1682619, 1692558, 1697349, 1683187, 1680693, 1690582, 1701963, 1707246, 1687550, 1700209, 1692338, 1690702, 1689393, 1688452, 1689006, 1697452, 1689718, 1707394, 1686997, 1700071, 1701402, 1700050, 1694979, 1681103, 1680059, 1698465, 1689307, 1696720, 1701382, 1684063, 1688107, 1696481, 1690628, 1678456, 1693135, 1704318, 1681580, 1682914, 1701535, 1663485, 1673517, 1682663, 1691232, 1668836, 1708914, 1689065, 1681069, 1686184, 1683090, 1689181, 1674274, 1690948, 1691442, 1682948, 1696099, 1699866, 1695624, 1697044, 1678456, 1685745, 1681352, 1702223, 1683513, 1688526, 1684303, 1686638, 1687930, 1674479, 1684166, 1689127, 1700369, 1691935, 1693243, 1693677, 1692607, 1690709, 1694275, 1699169, 1704919, 1703570, 1681802, 1679347, 1689338, 1690352, 1700034, 1696648, 1685057, 1685047, 1682470, 1689392, 1704230, 1694309, 1696273, 1695875, 1696216, 1685048, 1686809, 1704895, 1674535, 1693043, 1691430, 1688711, 1687917, 1682170 ],
        "4" : [ 28645, 30242, 29426, 30296, 29721, 30531, 30900, 29810, 30985, 31004, 30952, 31125, 32796, 32668, 29833, 30551, 31410, 29086, 30949, 28922, 30090, 29014, 33714, 31577, 31207, 30467, 28248, 30461, 31840, 31414, 31596, 30757, 31109, 31112, 32101, 31318, 30837, 30513, 30961, 30814, 30162, 31191, 30212, 30018, 31657, 31634, 30150, 29628, 29082, 30635, 30659, 29343, 30917, 30991, 30293, 30339, 30000, 30518, 30083, 31171, 30119, 30474, 31444, 31310, 29640, 31615, 30703, 29374, 29863, 30444, 29558, 30632, 30491, 31639, 31010, 29801, 32758, 31438, 30952, 32464, 29168, 32386, 31908, 29019, 29080, 30628, 30901, 31581, 31067, 31711, 30185, 30988, 31505, 30284, 31229, 30013, 30125, 31395, 31099, 31299, 29972, 30369, 30684, 30787, 30795, 30750, 31561, 31605, 32437, 29712, 31007, 31439, 31026, 31219, 30774, 31418, 30359, 31224, 33277, 31954, 30098, 30509, 30728, 31273, 29554, 29557, 30161, 31968, 30169, 31434, 30715, 31822, 31514, 31953, 30372, 30174, 32193, 29364, 29346, 30505, 29151, 30606, 30018, 31241, 30226, 29245, 30852, 30015, 29883, 30046, 31467, 31151, 31712, 29178, 29747, 32271, 31540, 30706, 29968, 32026, 32517, 29916, 31745, 30205, 31991, 30387, 31971, 31110, 31512, 28789, 30205, 30678, 31375, 29999, 30872, 32951, 32208, 30532, 29211, 30544, 31473, 31019, 30351, 31093, 31059, 30946, 30133, 31526, 31153, 30576, 31948, 29705, 29292, 30619, 30519, 30735, 30889, 30320, 32254, 29432 ],
        "6" : [ 16312, 16224, 16849, 17046, 16539, 16671, 16442, 17157, 16307, 15998, 16997, 17280, 17598, 16713, 17380, 16527, 16261, 16123, 16167, 16933, 17649, 16252, 16596, 16880, 16390, 16921, 17700, 16758, 16510, 18125, 16526, 17400, 17047, 16606, 16741, 16005, 16917, 16669, 16268, 16489, 18337, 17319, 16420, 17268, 16563, 17455, 15242, 17383, 16542, 17391, 15494, 16555, 16633, 17133, 16536, 16772, 17394, 15542, 16775, 17702, 16479, 15720, 18557, 16582, 17007, 17138, 16590, 16597, 18071, 17558, 15237, 16960, 16616, 16468, 16414, 17495, 16746, 16002, 16811, 15575, 15623, 17180, 17323, 17377, 16338, 15405, 17456, 16021, 17383, 16352, 17305, 17091, 16594, 17002, 17211, 17325, 16638, 16705, 16874, 17963, 16279, 18141, 17189, 16043, 16357, 16327, 16088, 16113, 15289, 17088, 17189, 17345, 16798, 16660, 16245, 16548, 17113, 16225, 16754, 17223, 16583, 16244, 15899, 17285, 16107, 16605, 17382, 17130, 16806, 17961, 15699, 17532, 17077, 17507, 15976, 17109, 17568, 15705, 15085, 16038, 15987, 15895, 17657, 16352, 15682, 17203, 16502, 17624, 16076, 18457, 14924, 16606, 17339, 17518, 16063, 16183, 16403, 16223, 17229, 17294, 17285, 17707, 16432, 17802, 17379, 16336, 15584, 17301, 16695, 16324, 17468, 17275, 17041, 17032, 17521, 15862, 16388, 17398, 17505, 16471, 16079, 17198, 16760, 15162, 16635, 16251, 16920, 16190, 16675, 17667, 17917, 16772, 16474, 17268, 16550, 16885, 16522, 17218, 16002, 17836 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 6,
        "FinishedTasksTotalTimeInMs" : 2360.0,
        "FinishedTasksDistributionInMs" : [ 352.0, 376.0, 400.0, 419.0, 423.0 ]
      },
      "StartTimeInMs" : 1702227401233,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11490,
        "IOBytes" : {
          "Total" : 1461984232,
          "Details" : {
            "IR" : 143095016,
            "IW" : 0,
            "SR" : 1155466296,
            "SW" : 163422920
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1923232602,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 68977081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 168952,
            "rowCount" : 971,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 240721084,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 168952,
            "rowCount" : 971,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1242428313,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 168952,
            "rowCount" : 971,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530], HashAggregate(keys=[channel#701, id#702, spark_grouping_id#700L], functions=[sum(sales#532), sum(returns#533), sum(profit#534)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530], HashAggregate(keys=[channel#701, id#702, spark_grouping_id#700L], functions=[sum(sales#532), sum(returns#533), sum(profit#534)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 168952,
        "inputRowCount" : 971
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227412250,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 473,
        "IOBytes" : {
          "Total" : 82745,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 82745,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2041841661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 390518992275438575808,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#243 = web_site_sk#289) "
          },
          "8" : {
            "sign" : -1486552633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 471573378672162937986816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711] "
          },
          "19" : {
            "sign" : -857881211,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5690304,
            "rowCount" : 88911,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15 "
          },
          "23" : {
            "sign" : 1274694889,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21 "
          },
          "4" : {
            "sign" : -614683025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 1543331057472533258338305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "15" : {
            "sign" : 1453334329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1031849059110948,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "11" : {
            "sign" : -445095060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 347127993133723178496,
            "rowCount" : 5423874892714424664,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "9" : {
            "sign" : 311967086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 321527303640111094081920,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "22" : {
            "sign" : 26649350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#639], BroadcastQueryStage 20 "
          },
          "13" : {
            "sign" : -1422008846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10847749785428849328,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "24" : {
            "sign" : -1588709561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#661], BroadcastQueryStage 23 "
          },
          "16" : {
            "sign" : 843748570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1190595068204940,
            "rowCount" : 19843251136749,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#264 = d_date_sk#611) "
          },
          "5" : {
            "sign" : 1943269698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 471573378672162940047816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1477680727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 364397610792125906626176,
            "rowCount" : 5358788394001851568032,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_promo_sk#246 = p_promo_sk#661) "
          },
          "21" : {
            "sign" : -2094792201,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#611], BroadcastQueryStage 18 "
          },
          "6" : {
            "sign" : -700745428,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21000,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))]) "
          },
          "1" : {
            "sign" : -594151393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1543331057472533258338305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 388942843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35845873021224,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] "
          },
          "14" : {
            "sign" : -647026703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12655708083000324216,
            "rowCount" : 225994787196434361,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#233 = i_item_sk#639) "
          },
          "0" : {
            "sign" : 32480588,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1848823745,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 287975560,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16 "
          },
          "2" : {
            "sign" : 1393382006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1543331057472533258338305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 851129912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 48647970528804,
            "rowCount" : 640104875379,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L)) "
          },
          "7" : {
            "sign" : 66774136,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2040000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))]) "
          },
          "3" : {
            "sign" : -2120650227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1543331057472533258338305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))])\n               +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n                  +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n                        :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n                        :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n                        :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n                        :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n                        :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264], ShuffleQueryStage 15\n                        :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287], ShuffleQueryStage 16\n                        :     :     :     +- LogicalQueryStage Project [d_date_sk#611], BroadcastQueryStage 18\n                        :     :     +- LogicalQueryStage Project [i_item_sk#639], BroadcastQueryStage 20\n                        :     +- LogicalQueryStage Project [web_site_sk#289, web_site_id#290], BroadcastQueryStage 21\n                        +- LogicalQueryStage Project [p_promo_sk#661], BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 300453896,
        "inputRowCount" : 7321342
      },
      "PD" : {
        "7" : [ 849788, 856360, 856550, 854032, 847596, 854602, 858523, 852894, 852992, 853057, 856964, 852637, 850298, 856327, 856779, 854682, 847898, 852811, 852485, 863958, 862952, 855584, 856248, 856564, 859664, 869344, 851337, 848000, 842117, 850746, 863790, 853260, 854128, 856364, 856252, 855833, 847568, 860546, 850692, 858914, 847088, 854903, 850834, 867096, 855589, 858406, 856934, 860890, 851952, 857067, 854743, 838351, 859462, 851729, 849886, 852296, 856116, 857120, 852290, 847739, 840988, 861933, 848687, 849881, 846725, 843989, 847110, 850966, 866232, 855901, 862496, 859865, 846994, 855793, 850287, 847188, 860236, 854389, 851047, 864074, 854313, 850152, 852047, 846961, 857844, 847640, 852629, 854897, 854718, 848371, 853023, 862207, 851685, 852987, 864246, 844537, 850798, 850531, 855709, 848957, 857646, 857902, 857263, 846461, 856069, 842036, 853081, 853860, 859579, 854293, 847327, 852897, 848793, 839053, 858878, 863206, 849089, 854959, 855321, 845325, 859603, 857708, 855753, 851046, 862820, 858087, 854798, 846214, 859176, 849648, 855048, 852227, 852699, 854159, 862590, 856004, 855431, 850033, 858611, 841745, 851047, 856400, 852127, 854955, 863479, 857294, 845758, 852137, 856892, 850811, 851781, 859703, 860994, 847577, 849325, 850993, 860885, 855183, 858994, 853660, 853400, 855717, 859488, 848993, 848564, 854288, 854954, 862392, 860318, 852368, 861578, 854978, 852593, 855513, 856026, 850338, 849373, 855884, 847166, 855898, 846081, 866184, 860685, 847981, 849356, 853024, 850979, 851437, 856768, 849995, 849349, 856379, 845775, 849381, 849783, 857887, 852690, 857988, 850899, 858681 ],
        "6" : [ 16312, 16224, 16849, 17046, 16539, 16671, 16442, 17157, 16307, 15998, 16997, 17280, 17598, 16713, 17380, 16527, 16261, 16123, 16167, 16933, 17649, 16252, 16596, 16880, 16390, 16921, 17700, 16758, 16510, 18125, 16526, 17400, 17047, 16606, 16741, 16005, 16917, 16669, 16268, 16489, 18337, 17319, 16420, 17268, 16563, 17455, 15242, 17383, 16542, 17391, 15494, 16555, 16633, 17133, 16536, 16772, 17394, 15542, 16775, 17702, 16479, 15720, 18557, 16582, 17007, 17138, 16590, 16597, 18071, 17558, 15237, 16960, 16616, 16468, 16414, 17495, 16746, 16002, 16811, 15575, 15623, 17180, 17323, 17377, 16338, 15405, 17456, 16021, 17383, 16352, 17305, 17091, 16594, 17002, 17211, 17325, 16638, 16705, 16874, 17963, 16279, 18141, 17189, 16043, 16357, 16327, 16088, 16113, 15289, 17088, 17189, 17345, 16798, 16660, 16245, 16548, 17113, 16225, 16754, 17223, 16583, 16244, 15899, 17285, 16107, 16605, 17382, 17130, 16806, 17961, 15699, 17532, 17077, 17507, 15976, 17109, 17568, 15705, 15085, 16038, 15987, 15895, 17657, 16352, 15682, 17203, 16502, 17624, 16076, 18457, 14924, 16606, 17339, 17518, 16063, 16183, 16403, 16223, 17229, 17294, 17285, 17707, 16432, 17802, 17379, 16336, 15584, 17301, 16695, 16324, 17468, 17275, 17041, 17032, 17521, 15862, 16388, 17398, 17505, 16471, 16079, 17198, 16760, 15162, 16635, 16251, 16920, 16190, 16675, 17667, 17917, 16772, 16474, 17268, 16550, 16885, 16522, 17218, 16002, 17836 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227404478,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8245,
        "IOBytes" : {
          "Total" : 1156004074,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1155466296,
            "SW" : 537778
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 897135405,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3072,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3072,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5633.0,
        "FinishedTasksDistributionInMs" : [ 1101.0, 1318.0, 1584.0, 1630.0, 1630.0 ]
      },
      "StartTimeInMs" : 1702227374176,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 38547,
        "IOBytes" : {
          "Total" : 3383014536,
          "Details" : {
            "IR" : 1072021646,
            "IW" : 0,
            "SR" : 1155498004,
            "SW" : 1155494886
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -2028494226,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#63], BroadcastQueryStage 1 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [d_date_sk#63], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1048824,
        "inputRowCount" : 31
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5633.0,
        "FinishedTasksDistributionInMs" : [ 1101.0, 1318.0, 1584.0, 1630.0, 1630.0 ]
      },
      "StartTimeInMs" : 1702227374200,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 38523,
        "IOBytes" : {
          "Total" : 3383014536,
          "Details" : {
            "IR" : 1072021646,
            "IW" : 0,
            "SR" : 1155498004,
            "SW" : 1155494886
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 858809100,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1200,
            "rowCount" : 12,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))]) "
          },
          "4" : {
            "sign" : 1231369636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 7432833,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "5" : {
            "sign" : -1213490061,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 2271144,
            "rowCount" : 22623,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "6" : {
            "sign" : -700745428,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 229944,
            "rowCount" : 2211,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))]) "
          },
          "1" : {
            "sign" : 379938038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7432833,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -839561433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -857645187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7432833,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 66774136,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2040000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))]) "
          },
          "3" : {
            "sign" : -845081208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7432833,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699], HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709], HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))])\n               +- LogicalQueryStage Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711], HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2271144,
        "inputRowCount" : 22623
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3217.0,
        "FinishedTasksDistributionInMs" : [ 888.0, 888.0, 2329.0, 2329.0, 2329.0 ]
      },
      "StartTimeInMs" : 1702227410502,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2221,
        "IOBytes" : {
          "Total" : 495099300,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 494756372,
            "SW" : 342928
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -2104451566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 138960,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 138960,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227377467,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35256,
        "IOBytes" : {
          "Total" : 3380198574,
          "Details" : {
            "IR" : 1069237392,
            "IW" : 0,
            "SR" : 1155494886,
            "SW" : 1155466296
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1248078213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6808450704,
                "rowCount" : 141842723
              },
              "compileTime" : {
                "sizeInBytes" : 6808450704,
                "rowCount" : 141842723
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] "
          },
          "1" : {
            "sign" : -1048006979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29503286384,
                "rowCount" : 141842723
              },
              "compileTime" : {
                "sizeInBytes" : 29503286384,
                "rowCount" : 141842723
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#713 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#723 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#726 [], xxhash64(cs_promo_sk#176, 42)))) "
          },
          "2" : {
            "sign" : -1882573256,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#161, cs_ship_date_sk#162, cs_bill_customer_sk#163, cs_bill_cdemo_sk#164, cs_bill_hdemo_sk#165, cs_bill_addr_sk#166, cs_ship_customer_sk#167, cs_ship_cdemo_sk#168, cs_ship_hdemo_sk#169, cs_ship_addr_sk#170, cs_call_center_sk#171, cs_catalog_page_sk#172, cs_ship_mode_sk#173, cs_warehouse_sk#174, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_quantity#178, cs_wholesale_cost#179, cs_list_price#180, cs_sales_price#181, cs_ext_discount_amt#182, cs_ext_sales_price#183, cs_ext_wholesale_cost#184, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194]\n+- Filter (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#713 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#723 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#726 [], xxhash64(cs_promo_sk#176, 42))))\n   :  :- Project [d_date_sk#542]\n   :  :  +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n   :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n   :  :  +- Project [i_item_sk#120]\n   :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n   :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n   :     +- Project [p_promo_sk#142]\n   :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n   :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n   +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#161,cs_ship_date_sk#162,cs_bill_customer_sk#163,cs_bill_cdemo_sk#164,cs_bill_hdemo_sk#165,cs_bill_addr_sk#166,cs_ship_customer_sk#167,cs_ship_cdemo_sk#168,cs_ship_hdemo_sk#169,cs_ship_addr_sk#170,cs_call_center_sk#171,cs_catalog_page_sk#172,cs_ship_mode_sk#173,cs_warehouse_sk#174,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_quantity#178,cs_wholesale_cost#179,cs_list_price#180,cs_sales_price#181,cs_ext_discount_amt#182,cs_ext_sales_price#183,cs_ext_wholesale_cost#184,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 211504304,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6808450704,
            "rowCount" : 141842723,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] Condition : ((((isnotnull(cs_catalog_page_sk#172) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(cs_item_sk#175, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(cs_promo_sk#176, 42))) "
          },
          "1" : {
            "sign" : 1552241330,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6808450704,
            "rowCount" : 141842723,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [7]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#194), dynamicpruningexpression(cs_sold_date_sk#194 IN dynamicpruning#712)] PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)] ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((((isnotnull(cs_catalog_page_sk#172) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(cs_item_sk#175, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(cs_promo_sk#176, 42)))\n:  :- ReusedSubquery Subquery subquery#717, [id=#317]\n:  +- ReusedSubquery Subquery subquery#720, [id=#330]\n+- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#172,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_ext_sales_price#183,cs_net_profit#193,cs_sold_date_sk#194] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#172), isnotnull(cs_item_sk#175), isnotnull(cs_promo_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#194), dynamicpruningexpression(cs_sold_date_sk#194 IN dynamicpruning#7..., PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_ext_sales_...\n      +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6808450704,
        "inputRowCount" : 141842723
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 6184,
        "TotalTasksDurationInMs" : 2889,
        "IOBytes" : {
          "Total" : 57136310,
          "Details" : {
            "IR" : 51276693,
            "IW" : 0,
            "SR" : 0,
            "SW" : 5859617
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1182023789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n+- Project [p_promo_sk#142]\n   +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -747725139,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [p_promo_sk#142] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)] Aggregate Attributes [1]: [buf#733] Results [1]: [buf#780] "
          },
          "1" : {
            "sign" : 1381425518,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [p_promo_sk#142] Input [2]: [p_promo_sk#142, p_channel_tv#153] "
          },
          "2" : {
            "sign" : 1699919394,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [p_promo_sk#142, p_channel_tv#153] Condition : ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142)) "
          },
          "3" : {
            "sign" : 1371779837,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.promotion Output [2]: [p_promo_sk#142, p_channel_tv#153] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion] PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)] ReadSchema: struct<p_promo_sk:int,p_channel_tv:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.promotion",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n+- Project [p_promo_sk#142]\n   +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11856,
        "inputRowCount" : 988
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 2766,
        "TotalTasksDurationInMs" : 2762,
        "IOBytes" : {
          "Total" : 12350,
          "Details" : {
            "IR" : 12350,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "19" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1578556033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530] "
          },
          "1" : {
            "sign" : 2017931661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "2" : {
            "sign" : 472141290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2062200,
                "rowCount" : 20622
              },
              "compileTime" : {
                "sizeInBytes" : 2062200,
                "rowCount" : 20622
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n+- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n   +- Union false, false\n      :- Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699]\n      :  +- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n      :     +- Join Inner, (ss_store_sk#26 = s_store_sk#91)\n      :        :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :        :  +- Join Inner, (ss_promo_sk#27 = p_promo_sk#142)\n      :        :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :        :     :  +- Join Inner, (ss_item_sk#21 = i_item_sk#120)\n      :        :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :        :     :     :  +- Join Inner, (ss_sold_date_sk#42 = d_date_sk#63)\n      :        :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n      :        :     :     :     :  +- Join LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L))\n      :        :     :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42]\n      :        :     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#712 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#717 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#720 [], xxhash64(ss_promo_sk#27, 42))))\n      :        :     :     :     :     :     :  :- Project [d_date_sk#63]\n      :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n      :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n      :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n      :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n      :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n      :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#20,ss_item_sk#21,ss_customer_sk#22,ss_cdemo_sk#23,ss_hdemo_sk#24,ss_addr_sk#25,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_quantity#29,ss_wholesale_cost#30,ss_list_price#31,ss_sales_price#32,ss_ext_discount_amt#33,ss_ext_sales_price#34,ss_ext_wholesale_cost#35,ss_ext_list_price#36,ss_ext_tax#37,ss_coupon_amt#38,ss_net_paid#39,ss_net_paid_inc_tax#40,ss_net_profit#41,ss_sold_date_sk#42] parquet\n      :        :     :     :     :     +- Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n      :        :     :     :     :        +- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n      :        :     :     :     :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#43,sr_item_sk#44,sr_customer_sk#45,sr_cdemo_sk#46,sr_hdemo_sk#47,sr_addr_sk#48,sr_store_sk#49,sr_reason_sk#50,sr_ticket_number#51L,sr_return_quantity#52,sr_return_amt#53,sr_return_tax#54,sr_return_amt_inc_tax#55,sr_fee#56,sr_return_ship_cost#57,sr_refunded_cash#58,sr_reversed_charge#59,sr_store_credit#60,sr_net_loss#61,sr_returned_date_sk#62] parquet\n      :        :     :     :     +- Project [d_date_sk#63]\n      :        :     :     :        +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n      :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :        :     :     +- Project [i_item_sk#120]\n      :        :     :        +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :        :     +- Project [p_promo_sk#142]\n      :        :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :        :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :        +- Project [s_store_sk#91, s_store_id#92]\n      :           +- Filter isnotnull(s_store_sk#91)\n      :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92,s_rec_start_date#93,s_rec_end_date#94,s_closed_date_sk#95,s_store_name#96,s_number_employees#97,s_floor_space#98,s_hours#99,s_manager#100,s_market_id#101,s_geography_class#102,s_market_desc#103,s_market_manager#104,s_division_id#105,s_division_name#106,s_company_id#107,s_company_name#108,s_street_number#109,s_street_name#110,s_street_type#111,s_suite_number#112,s_city#113,s_county#114,... 5 more fields] parquet\n      :- Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709]\n      :  +- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :     +- Join Inner, (cs_promo_sk#176 = p_promo_sk#592)\n      :        :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :        :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n      :        :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :        :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#570)\n      :        :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :        :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#542)\n      :        :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n      :        :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n      :        :     :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194]\n      :        :     :     :     :     :  +- Filter (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#713 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#723 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#726 [], xxhash64(cs_promo_sk#176, 42))))\n      :        :     :     :     :     :     :  :- Project [d_date_sk#542]\n      :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n      :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n      :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n      :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n      :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n      :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n      :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#161,cs_ship_date_sk#162,cs_bill_customer_sk#163,cs_bill_cdemo_sk#164,cs_bill_hdemo_sk#165,cs_bill_addr_sk#166,cs_ship_customer_sk#167,cs_ship_cdemo_sk#168,cs_ship_hdemo_sk#169,cs_ship_addr_sk#170,cs_call_center_sk#171,cs_catalog_page_sk#172,cs_ship_mode_sk#173,cs_warehouse_sk#174,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_quantity#178,cs_wholesale_cost#179,cs_list_price#180,cs_sales_price#181,cs_ext_discount_amt#182,cs_ext_sales_price#183,cs_ext_wholesale_cost#184,... 10 more fields] parquet\n      :        :     :     :     :     +- Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n      :        :     :     :     :        +- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n      :        :     :     :     :           +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#195,cr_item_sk#196,cr_refunded_customer_sk#197,cr_refunded_cdemo_sk#198,cr_refunded_hdemo_sk#199,cr_refunded_addr_sk#200,cr_returning_customer_sk#201,cr_returning_cdemo_sk#202,cr_returning_hdemo_sk#203,cr_returning_addr_sk#204,cr_call_center_sk#205,cr_catalog_page_sk#206,cr_ship_mode_sk#207,cr_warehouse_sk#208,cr_reason_sk#209,cr_order_number#210L,cr_return_quantity#211,cr_return_amount#212,cr_return_tax#213,cr_return_amt_inc_tax#214,cr_fee#215,cr_return_ship_cost#216,cr_refunded_cash#217,cr_reversed_charge#218,... 3 more fields] parquet\n      :        :     :     :     +- Project [d_date_sk#542]\n      :        :     :     :        +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n      :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n      :        :     :     +- Project [i_item_sk#570]\n      :        :     :        +- Filter ((isnotnull(i_current_price#575) AND (i_current_price#575 > 50.00)) AND isnotnull(i_item_sk#570))\n      :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#570,i_item_id#571,i_rec_start_date#572,i_rec_end_date#573,i_item_desc#574,i_current_price#575,i_wholesale_cost#576,i_brand_id#577,i_brand#578,i_class_id#579,i_class#580,i_category_id#581,i_category#582,i_manufact_id#583,i_manufact#584,i_size#585,i_formulation#586,i_color#587,i_units#588,i_container#589,i_manager_id#590,i_product_name#591] parquet\n      :        :     +- Project [cp_catalog_page_sk#222, cp_catalog_page_id#223]\n      :        :        +- Filter isnotnull(cp_catalog_page_sk#222)\n      :        :           +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223,cp_start_date_sk#224,cp_end_date_sk#225,cp_department#226,cp_catalog_number#227,cp_catalog_page_number#228,cp_description#229,cp_type#230] parquet\n      :        +- Project [p_promo_sk#592]\n      :           +- Filter ((isnotnull(p_channel_tv#603) AND (p_channel_tv#603 = N)) AND isnotnull(p_promo_sk#592))\n      :              +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#592,p_promo_id#593,p_start_date_sk#594,p_end_date_sk#595,p_item_sk#596,p_cost#597,p_response_target#598,p_promo_name#599,p_channel_dmail#600,p_channel_email#601,p_channel_catalog#602,p_channel_tv#603,p_channel_radio#604,p_channel_press#605,p_channel_event#606,p_channel_demo#607,p_channel_details#608,p_purpose#609,p_discount_active#610] parquet\n      +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n         +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n            +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n               :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n               :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n               :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n               :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n               :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n               :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n               :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n               :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n               :     :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264]\n               :     :     :     :     :  +- Filter (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#714 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#729 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#732 [], xxhash64(ws_promo_sk#246, 42))))\n               :     :     :     :     :     :  :- Project [d_date_sk#611]\n               :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n               :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n               :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n               :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n               :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n               :     :     :     :     :     :     +- Project [p_promo_sk#142]\n               :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#231,ws_ship_date_sk#232,ws_item_sk#233,ws_bill_customer_sk#234,ws_bill_cdemo_sk#235,ws_bill_hdemo_sk#236,ws_bill_addr_sk#237,ws_ship_customer_sk#238,ws_ship_cdemo_sk#239,ws_ship_hdemo_sk#240,ws_ship_addr_sk#241,ws_web_page_sk#242,ws_web_site_sk#243,ws_ship_mode_sk#244,ws_warehouse_sk#245,ws_promo_sk#246,ws_order_number#247L,ws_quantity#248,ws_wholesale_cost#249,ws_list_price#250,ws_sales_price#251,ws_ext_discount_amt#252,ws_ext_sales_price#253,ws_ext_wholesale_cost#254,... 10 more fields] parquet\n               :     :     :     :     +- Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n               :     :     :     :        +- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#265,wr_item_sk#266,wr_refunded_customer_sk#267,wr_refunded_cdemo_sk#268,wr_refunded_hdemo_sk#269,wr_refunded_addr_sk#270,wr_returning_customer_sk#271,wr_returning_cdemo_sk#272,wr_returning_hdemo_sk#273,wr_returning_addr_sk#274,wr_web_page_sk#275,wr_reason_sk#276,wr_order_number#277L,wr_return_quantity#278,wr_return_amt#279,wr_return_tax#280,wr_return_amt_inc_tax#281,wr_fee#282,wr_return_ship_cost#283,wr_refunded_cash#284,wr_reversed_charge#285,wr_account_credit#286,wr_net_loss#287,wr_returned_date_sk#288] parquet\n               :     :     :     +- Project [d_date_sk#611]\n               :     :     :        +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n               :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n               :     :     +- Project [i_item_sk#639]\n               :     :        +- Filter ((isnotnull(i_current_price#644) AND (i_current_price#644 > 50.00)) AND isnotnull(i_item_sk#639))\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#639,i_item_id#640,i_rec_start_date#641,i_rec_end_date#642,i_item_desc#643,i_current_price#644,i_wholesale_cost#645,i_brand_id#646,i_brand#647,i_class_id#648,i_class#649,i_category_id#650,i_category#651,i_manufact_id#652,i_manufact#653,i_size#654,i_formulation#655,i_color#656,i_units#657,i_container#658,i_manager_id#659,i_product_name#660] parquet\n               :     +- Project [web_site_sk#289, web_site_id#290]\n               :        +- Filter isnotnull(web_site_sk#289)\n               :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290,web_rec_start_date#291,web_rec_end_date#292,web_name#293,web_open_date_sk#294,web_close_date_sk#295,web_class#296,web_manager#297,web_mkt_id#298,web_mkt_class#299,web_mkt_desc#300,web_market_manager#301,web_company_id#302,web_company_name#303,web_street_number#304,web_street_name#305,web_street_type#306,web_suite_number#307,web_city#308,web_county#309,web_state#310,web_zip#311,web_country#312,... 2 more fields] parquet\n               +- Project [p_promo_sk#661]\n                  +- Filter ((isnotnull(p_channel_tv#672) AND (p_channel_tv#672 = N)) AND isnotnull(p_promo_sk#661))\n                     +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#661,p_promo_id#662,p_start_date_sk#663,p_end_date_sk#664,p_item_sk#665,p_cost#666,p_response_target#667,p_promo_name#668,p_channel_dmail#669,p_channel_email#670,p_channel_catalog#671,p_channel_tv#672,p_channel_radio#673,p_channel_press#674,p_channel_event#675,p_channel_demo#676,p_channel_details#677,p_purpose#678,p_discount_active#679] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1656113845,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1200,
            "rowCount" : 12,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778] Arguments: 26 "
          },
          "4" : {
            "sign" : 567388826,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 21000,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758] Arguments: 24 "
          },
          "5" : {
            "sign" : -568207418,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 460720,
            "rowCount" : 4430,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768] Keys [1]: [cp_catalog_page_id#223] Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))] Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#183))#687L, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00))#691, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))#692] Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183))#687L,17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00))#691 AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))#692 AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709] "
          },
          "6" : {
            "sign" : 1251053385,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2040000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768] Arguments: 25 "
          },
          "1" : {
            "sign" : 1507895416,
            "className" : "org.apache.spark.sql.execution.ExpandExec",
            "sizeInBytes" : 6749016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Input [5]: [sales#532, returns#533, profit#534, channel#698, id#699] Arguments: [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] "
          },
          "0" : {
            "sign" : -1482018943,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 6749016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L] Keys [3]: [channel#701, id#702, spark_grouping_id#700L] Functions [3]: [partial_sum(sales#532), partial_sum(returns#533), partial_sum(profit#534)] Aggregate Attributes [6]: [sum#737, isEmpty#738, sum#739, isEmpty#740, sum#741, isEmpty#742] Results [9]: [channel#701, id#702, spark_grouping_id#700L, sum#743, isEmpty#744, sum#745, isEmpty#746, sum#747, isEmpty#748] "
          },
          "2" : {
            "sign" : 1122202767,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 2062200,
            "rowCount" : 20622,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "7" : {
            "sign" : -620237004,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3744,
            "rowCount" : 36,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778] Keys [1]: [web_site_id#290] Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))] Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#253))#688L, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00))#693, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))#694] Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253))#688L,17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00))#693 AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))#694 AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711] "
          },
          "3" : {
            "sign" : -95954642,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 229944,
            "rowCount" : 2211,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758] Keys [1]: [s_store_id#92] Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))] Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#34))#686L, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00))#689, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))#690] Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34))#686L,17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00))#689 AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))#690 AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[channel#701, id#702, spark_grouping_id#700L], functions=[partial_sum(sales#532), partial_sum(returns#533), partial_sum(profit#534)], output=[channel#701, id#702, spark_grouping_id#700L, sum#743, isEmpty#744, sum#745, isEmpty#746, sum#747, isEmpty#748])\n+- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n   +- Union\n      :- HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))], output=[sales#532, returns#533, profit#534, channel#698, id#699])\n      :  +- ShuffleQueryStage 24\n      :     +- Exchange hashpartitioning(s_store_id#92, 200), ENSURE_REQUIREMENTS, [plan_id=1719]\n      :        +- *(21) HashAggregate(keys=[s_store_id#92], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#34)), partial_sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))], output=[s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758])\n      :           +- *(21) Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n      :              +- *(21) BroadcastHashJoin [ss_store_sk#26], [s_store_sk#91], Inner, BuildRight, false\n      :                 :- *(21) Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :                 :  +- *(21) BroadcastHashJoin [ss_promo_sk#27], [p_promo_sk#142], Inner, BuildRight, false\n      :                 :     :- *(21) Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :                 :     :  +- *(21) BroadcastHashJoin [ss_item_sk#21], [i_item_sk#120], Inner, BuildRight, false\n      :                 :     :     :- *(21) Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :                 :     :     :  +- *(21) BroadcastHashJoin [ss_sold_date_sk#42], [d_date_sk#63], Inner, BuildRight, false\n      :                 :     :     :     :- *(21) Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n      :                 :     :     :     :  +- *(21) SortMergeJoin [ss_item_sk#21, ss_ticket_number#28L], [sr_item_sk#44, sr_ticket_number#51L], LeftOuter\n      :                 :     :     :     :     :- *(19) Sort [ss_item_sk#21 ASC NULLS FIRST, ss_ticket_number#28L ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :  +- AQEShuffleRead coalesced\n      :                 :     :     :     :     :     +- ShuffleQueryStage 0\n      :                 :     :     :     :     :        +- Exchange hashpartitioning(ss_item_sk#21, ss_ticket_number#28L, 200), ENSURE_REQUIREMENTS, [plan_id=879]\n      :                 :     :     :     :     :           +- *(1) Filter ((((isnotnull(ss_store_sk#26) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND might_contain(Subquery subquery#717, [id=#317], xxhash64(ss_item_sk#21, 42))) AND might_contain(Subquery subquery#720, [id=#330], xxhash64(ss_promo_sk#27, 42)))\n      :                 :     :     :     :     :              :  :- Subquery subquery#717, [id=#317]\n      :                 :     :     :     :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                                           +- ShuffleQueryStage 0\n                                                                              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1339]\n                                                                                 +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                                                    +- *(1) Project [i_item_sk#120]\n                                                                                       +- *(1) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                                          +- *(1) ColumnarToRow\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n                                                                        +- == Initial Plan ==\n                                                                           ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=315]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                                                 +- Project [i_item_sk#120]\n                                                                                    +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n      :                 :     :     :     :     :              :  +- Subquery subquery#720, [id=#330]\n      :                 :     :     :     :     :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                                           +- ShuffleQueryStage 0\n                                                                              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1338]\n                                                                                 +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                                                    +- *(1) Project [p_promo_sk#142]\n                                                                                       +- *(1) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                                          +- *(1) ColumnarToRow\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n                                                                        +- == Initial Plan ==\n                                                                           ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=328]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                                                 +- Project [p_promo_sk#142]\n                                                                                    +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n      :                 :     :     :     :     :              +- *(1) ColumnarToRow\n      :                 :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#21,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_ext_sales_price#34,ss_net_profit#41,ss_sold_date_sk#42] Batched: true, DataFilters: [isnotnull(ss_store_sk#26), isnotnull(ss_item_sk#21), isnotnull(ss_promo_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#42), dynamicpruningexpression(ss_sold_date_sk#42 IN dynamicpruning#712)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:...\n      :                 :     :     :     :     :                       +- SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n      :                 :     :     :     :     :                          +- AdaptiveSparkPlan isFinalPlan=true\n                                                                              +- == Final Plan ==\n                                                                                 BroadcastQueryStage 1\n                                                                                 +- ReusedExchange [d_date_sk#63], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                                                                              +- == Initial Plan ==\n                                                                                 BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=861]\n                                                                                 +- Project [d_date_sk#63]\n                                                                                    +- Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :                 :     :     :     :     +- *(20) Sort [sr_item_sk#44 ASC NULLS FIRST, sr_ticket_number#51L ASC NULLS FIRST], false, 0\n      :                 :     :     :     :        +- AQEShuffleRead coalesced\n      :                 :     :     :     :           +- ShuffleQueryStage 1\n      :                 :     :     :     :              +- Exchange hashpartitioning(sr_item_sk#44, sr_ticket_number#51L, 200), ENSURE_REQUIREMENTS, [plan_id=898]\n      :                 :     :     :     :                 +- *(2) Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n      :                 :     :     :     :                    +- *(2) Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n      :                 :     :     :     :                       +- *(2) ColumnarToRow\n      :                 :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#44,sr_ticket_number#51L,sr_return_amt#53,sr_net_loss#61,sr_returned_date_sk#62] Batched: true, DataFilters: [isnotnull(sr_item_sk#44), isnotnull(sr_ticket_number#51L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :                 :     :     :     +- BroadcastQueryStage 2\n      :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n      :                 :     :     :           +- *(3) Project [d_date_sk#63]\n      :                 :     :     :              +- *(3) Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n      :                 :     :     :                 +- *(3) ColumnarToRow\n      :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :                 :     :     +- BroadcastQueryStage 3\n      :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n      :                 :     :           +- *(4) Project [i_item_sk#120]\n      :                 :     :              +- *(4) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :                 :     :                 +- *(4) ColumnarToRow\n      :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n      :                 :     +- BroadcastQueryStage 4\n      :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n      :                 :           +- *(5) Project [p_promo_sk#142]\n      :                 :              +- *(5) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :                 :                 +- *(5) ColumnarToRow\n      :                 :                    +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n      :                 +- BroadcastQueryStage 5\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=982]\n      :                       +- *(6) Filter isnotnull(s_store_sk#91)\n      :                          +- *(6) ColumnarToRow\n      :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92] Batched: true, DataFilters: [isnotnull(s_store_sk#91)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n      :- HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))], output=[sales#536, returns#537, profit#538, channel#708, id#709])\n      :  +- ShuffleQueryStage 25\n      :     +- Exchange hashpartitioning(cp_catalog_page_id#223, 200), ENSURE_REQUIREMENTS, [plan_id=1967]\n      :        +- *(24) HashAggregate(keys=[cp_catalog_page_id#223], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#183)), partial_sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))], output=[cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768])\n      :           +- *(24) Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :              +- *(24) BroadcastHashJoin [cs_promo_sk#176], [p_promo_sk#592], Inner, BuildRight, false\n      :                 :- *(24) Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :                 :  +- *(24) BroadcastHashJoin [cs_catalog_page_sk#172], [cp_catalog_page_sk#222], Inner, BuildRight, false\n      :                 :     :- *(24) Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :                 :     :  +- *(24) BroadcastHashJoin [cs_item_sk#175], [i_item_sk#570], Inner, BuildRight, false\n      :                 :     :     :- *(24) Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :                 :     :     :  +- *(24) BroadcastHashJoin [cs_sold_date_sk#194], [d_date_sk#542], Inner, BuildRight, false\n      :                 :     :     :     :- *(24) Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n      :                 :     :     :     :  +- *(24) SortMergeJoin [cs_item_sk#175, cs_order_number#177L], [cr_item_sk#196, cr_order_number#210L], LeftOuter\n      :                 :     :     :     :     :- *(22) Sort [cs_item_sk#175 ASC NULLS FIRST, cs_order_number#177L ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :  +- AQEShuffleRead coalesced\n      :                 :     :     :     :     :     +- ShuffleQueryStage 6\n      :                 :     :     :     :     :        +- Exchange hashpartitioning(cs_item_sk#175, cs_order_number#177L, 200), ENSURE_REQUIREMENTS, [plan_id=1019]\n      :                 :     :     :     :     :           +- *(7) Filter ((((isnotnull(cs_catalog_page_sk#172) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(cs_item_sk#175, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(cs_promo_sk#176, 42)))\n      :                 :     :     :     :     :              :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n      :                 :     :     :     :     :              :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n      :                 :     :     :     :     :              +- *(7) ColumnarToRow\n      :                 :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#172,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_ext_sales_price#183,cs_net_profit#193,cs_sold_date_sk#194] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#172), isnotnull(cs_item_sk#175), isnotnull(cs_promo_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#194), dynamicpruningexpression(cs_sold_date_sk#194 IN dynamicpruning#7..., PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_ext_sales_...\n      :                 :     :     :     :     :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n      :                 :     :     :     :     +- *(23) Sort [cr_item_sk#196 ASC NULLS FIRST, cr_order_number#210L ASC NULLS FIRST], false, 0\n      :                 :     :     :     :        +- AQEShuffleRead coalesced\n      :                 :     :     :     :           +- ShuffleQueryStage 7\n      :                 :     :     :     :              +- Exchange hashpartitioning(cr_item_sk#196, cr_order_number#210L, 200), ENSURE_REQUIREMENTS, [plan_id=1038]\n      :                 :     :     :     :                 +- *(8) Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n      :                 :     :     :     :                    +- *(8) Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n      :                 :     :     :     :                       +- *(8) ColumnarToRow\n      :                 :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#196,cr_order_number#210L,cr_return_amount#212,cr_net_loss#220,cr_returned_date_sk#221] Batched: true, DataFilters: [isnotnull(cr_item_sk#196), isnotnull(cr_order_number#210L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :                 :     :     :     +- BroadcastQueryStage 9\n      :                 :     :     :        +- ReusedExchange [d_date_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n      :                 :     :     +- BroadcastQueryStage 11\n      :                 :     :        +- ReusedExchange [i_item_sk#570], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n      :                 :     +- BroadcastQueryStage 12\n      :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1105]\n      :                 :           +- *(11) Filter isnotnull(cp_catalog_page_sk#222)\n      :                 :              +- *(11) ColumnarToRow\n      :                 :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n      :                 +- BroadcastQueryStage 14\n      :                    +- ReusedExchange [p_promo_sk#592], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n      +- HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))], output=[sales#539, returns#540, profit#541, channel#710, id#711])\n         +- ShuffleQueryStage 26\n            +- Exchange hashpartitioning(web_site_id#290, 200), ENSURE_REQUIREMENTS, [plan_id=2153]\n               +- *(27) HashAggregate(keys=[web_site_id#290], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#253)), partial_sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))], output=[web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778])\n                  +- *(27) Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- *(27) BroadcastHashJoin [ws_promo_sk#246], [p_promo_sk#661], Inner, BuildRight, false\n                        :- *(27) Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- *(27) BroadcastHashJoin [ws_web_site_sk#243], [web_site_sk#289], Inner, BuildRight, false\n                        :     :- *(27) Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- *(27) BroadcastHashJoin [ws_item_sk#233], [i_item_sk#639], Inner, BuildRight, false\n                        :     :     :- *(27) Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- *(27) BroadcastHashJoin [ws_sold_date_sk#264], [d_date_sk#611], Inner, BuildRight, false\n                        :     :     :     :- *(27) Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- *(27) SortMergeJoin [ws_item_sk#233, ws_order_number#247L], [wr_item_sk#266, wr_order_number#277L], LeftOuter\n                        :     :     :     :     :- *(25) Sort [ws_item_sk#233 ASC NULLS FIRST, ws_order_number#247L ASC NULLS FIRST], false, 0\n                        :     :     :     :     :  +- AQEShuffleRead coalesced\n                        :     :     :     :     :     +- ShuffleQueryStage 15\n                        :     :     :     :     :        +- Exchange hashpartitioning(ws_item_sk#233, ws_order_number#247L, 200), ENSURE_REQUIREMENTS, [plan_id=1165]\n                        :     :     :     :     :           +- *(13) Filter ((((isnotnull(ws_web_site_sk#243) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(ws_item_sk#233, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(ws_promo_sk#246, 42)))\n                        :     :     :     :     :              :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n                        :     :     :     :     :              :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n                        :     :     :     :     :              +- *(13) ColumnarToRow\n                        :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#233,ws_web_site_sk#243,ws_promo_sk#246,ws_order_number#247L,ws_ext_sales_price#253,ws_net_profit#263,ws_sold_date_sk#264] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#243), isnotnull(ws_item_sk#233), isnotnull(ws_promo_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#264), dynamicpruningexpression(ws_sold_date_sk#264 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:bigint,ws_ext_sales_pric...\n                        :     :     :     :     :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n                        :     :     :     :     +- *(26) Sort [wr_item_sk#266 ASC NULLS FIRST, wr_order_number#277L ASC NULLS FIRST], false, 0\n                        :     :     :     :        +- AQEShuffleRead coalesced\n                        :     :     :     :           +- ShuffleQueryStage 16\n                        :     :     :     :              +- Exchange hashpartitioning(wr_item_sk#266, wr_order_number#277L, 200), ENSURE_REQUIREMENTS, [plan_id=1184]\n                        :     :     :     :                 +- *(14) Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :                    +- *(14) Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n                        :     :     :     :                       +- *(14) ColumnarToRow\n                        :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#266,wr_order_number#277L,wr_return_amt#279,wr_net_loss#287,wr_returned_date_sk#288] Batched: true, DataFilters: [isnotnull(wr_item_sk#266), isnotnull(wr_order_number#277L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                        :     :     :     +- BroadcastQueryStage 18\n                        :     :     :        +- ReusedExchange [d_date_sk#611], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                        :     :     +- BroadcastQueryStage 20\n                        :     :        +- ReusedExchange [i_item_sk#639], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n                        :     +- BroadcastQueryStage 21\n                        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1251]\n                        :           +- *(17) Filter isnotnull(web_site_sk#289)\n                        :              +- *(17) ColumnarToRow\n                        :                 +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290] Batched: true, DataFilters: [isnotnull(web_site_sk#289)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n                        +- BroadcastQueryStage 23\n                           +- ReusedExchange [p_promo_sk#661], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 694408,
        "inputRowCount" : 6677
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "8" : [ 0, 0, 1731, 0, 2223, 1746, 0, 1746, 1407, 1821, 1287, 0, 1791, 1407, 0, 0, 0, 1761, 0, 1419, 1746, 0, 0, 1407, 1716, 1395, 1371, 1761, 1407, 1761, 1407, 1407, 0, 1395, 1407, 1419, 0, 1407, 1731, 1407, 1731, 0, 1395, 1419, 0, 1287, 1407, 1383, 1761, 2151, 1716, 0, 1407, 1761, 1407, 1419, 0, 0, 0, 1716, 3374, 0, 1419, 1395, 0, 1746, 2531, 1407, 1407, 1716, 1731, 0, 0, 0, 1761, 1419, 1383, 0, 0, 1407, 1716, 0, 1407, 1395, 1383, 1395, 1746, 0, 0, 1761, 1761, 1761, 1287, 0, 0, 0, 1716, 1761, 0, 1407, 2187, 0, 1407, 0, 0, 1407, 1407, 0, 1716, 0, 0, 1791, 1746, 1383, 0, 0, 1716, 1395, 0, 0, 0, 1716, 2187, 0, 1395, 0, 0, 1731, 1791, 1716, 0, 1407, 0, 0, 1419, 1407, 1407, 1716, 1407, 0, 0, 1407, 0, 0, 1761, 0, 1731, 1359, 1395, 1407, 1407, 0, 1407, 0, 0, 1716, 1407, 1746, 2531, 1407, 0, 0, 1731, 0, 0, 0, 1299, 0, 1761, 1716, 0, 1395, 0, 1383, 0, 2531, 1287, 1806, 2241, 1383, 1731, 0, 1395, 1407, 1407, 1731, 1746, 1383, 1716, 0, 1716, 0, 1407, 1395, 0, 1407, 1383, 1407, 0, 1407 ],
        "10" : [ 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 0, 0, 0, 0, 0, 351, 0, 0, 0, 351, 0, 0, 351, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 351, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
        "9" : [ 1206, 936, 1824, 1631, 1631, 1170, 1206, 1608, 1748, 1242, 936, 1224, 1011, 702, 702, 1155, 1242, 1656, 951, 1608, 1606, 1437, 897, 1224, 936, 1608, 1155, 1824, 1826, 2393, 1242, 1856, 966, 936, 1656, 2211, 951, 1439, 1801, 1191, 1391, 1391, 1460, 1437, 1080, 1796, 1212, 1393, 1884, 1854, 1824, 936, 1854, 1191, 1824, 1656, 1854, 1824, 1796, 951, 2106, 2012, 2593, 951, 702, 1826, 2245, 1771, 1608, 1826, 1206, 1206, 702, 1462, 1439, 2072, 1444, 1824, 1854, 1824, 951, 936, 1368, 702, 1242, 1684, 1826, 1224, 1587, 1191, 1206, 1608, 1173, 1583, 1421, 0, 1798, 1206, 597, 912, 2670, 858, 702, 1224, 1206, 897, 897, 1824, 1319, 1460, 1155, 1173, 1224, 936, 780, 1101, 1656, 1854, 1188, 951, 780, 702, 1414, 1891, 1188, 1368, 897, 981, 2670, 1224, 951, 1656, 702, 951, 1191, 702, 996, 1137, 1170, 585, 702, 1242, 714, 1011, 1636, 951, 1414, 1421, 1608, 1460, 1824, 1242, 1242, 1188, 1631, 996, 1224, 966, 966, 1296, 702, 937, 1437, 936, 936, 0, 1224, 936, 1656, 1583, 936, 1224, 951, 1242, 1368, 1606, 1155, 996, 1854, 1826, 702, 1631, 585, 936, 1483, 1656, 2439, 966, 2282, 2038, 1631, 1826, 702, 966, 937, 1560, 936, 1224, 1391, 2322 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 19,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 42 ],
      "Objectives" : {
        "DurationInMs" : 498,
        "TotalTasksDurationInMs" : 973,
        "IOBytes" : {
          "Total" : 537778,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 455033,
            "SW" : 82745
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 510504401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 816000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 816000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cp_catalog_page_sk#222, cp_catalog_page_id#223] "
          },
          "1" : {
            "sign" : -441519414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(cp_catalog_page_sk#222) "
          },
          "2" : {
            "sign" : -289517560,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cp_catalog_page_sk#222, cp_catalog_page_id#223, cp_start_date_sk#224, cp_end_date_sk#225, cp_department#226, cp_catalog_number#227, cp_catalog_page_number#228, cp_description#229, cp_type#230], `spark_catalog`.`tpcds_100`.`catalog_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cp_catalog_page_sk#222, cp_catalog_page_id#223]\n+- Filter isnotnull(cp_catalog_page_sk#222)\n   +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223,cp_start_date_sk#224,cp_end_date_sk#225,cp_department#226,cp_catalog_number#227,cp_catalog_page_number#228,cp_description#229,cp_type#230] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1999579095,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 816000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cp_catalog_page_sk#222, cp_catalog_page_id#223] Condition : isnotnull(cp_catalog_page_sk#222) "
          },
          "1" : {
            "sign" : -361780775,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 816000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_page Output [2]: [cp_catalog_page_sk#222, cp_catalog_page_id#223] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_page] PushedFilters: [IsNotNull(cp_catalog_page_sk)] ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_page",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(cp_catalog_page_sk#222)\n+- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 816000,
        "inputRowCount" : 20400
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2481,
        "TotalTasksDurationInMs" : 2477,
        "IOBytes" : {
          "Total" : 188265,
          "Details" : {
            "IR" : 188265,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1504849468,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 259178004,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 259178004,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] "
          },
          "1" : {
            "sign" : 2051225854,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L)) "
          },
          "2" : {
            "sign" : 1242473740,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#265, wr_item_sk#266, wr_refunded_customer_sk#267, wr_refunded_cdemo_sk#268, wr_refunded_hdemo_sk#269, wr_refunded_addr_sk#270, wr_returning_customer_sk#271, wr_returning_cdemo_sk#272, wr_returning_hdemo_sk#273, wr_returning_addr_sk#274, wr_web_page_sk#275, wr_reason_sk#276, wr_order_number#277L, wr_return_quantity#278, wr_return_amt#279, wr_return_tax#280, wr_return_amt_inc_tax#281, wr_fee#282, wr_return_ship_cost#283, wr_refunded_cash#284, wr_reversed_charge#285, wr_account_credit#286, wr_net_loss#287, wr_returned_date_sk#288], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n+- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#265,wr_item_sk#266,wr_refunded_customer_sk#267,wr_refunded_cdemo_sk#268,wr_refunded_hdemo_sk#269,wr_refunded_addr_sk#270,wr_returning_customer_sk#271,wr_returning_cdemo_sk#272,wr_returning_hdemo_sk#273,wr_returning_addr_sk#274,wr_web_page_sk#275,wr_reason_sk#276,wr_order_number#277L,wr_return_quantity#278,wr_return_amt#279,wr_return_tax#280,wr_return_amt_inc_tax#281,wr_fee#282,wr_return_ship_cost#283,wr_refunded_cash#284,wr_reversed_charge#285,wr_account_credit#286,wr_net_loss#287,wr_returned_date_sk#288] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1906657393,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 259178004,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] Input [5]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287, wr_returned_date_sk#288] "
          },
          "1" : {
            "sign" : 420174153,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 259178004,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287, wr_returned_date_sk#288] Condition : (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L)) "
          },
          "2" : {
            "sign" : -1957999401,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 259178004,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [5]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287, wr_returned_date_sk#288] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)] ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n+- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n   +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#266,wr_order_number#277L,wr_return_amt#279,wr_net_loss#287,wr_returned_date_sk#288] Batched: true, DataFilters: [isnotnull(wr_item_sk#266), isnotnull(wr_order_number#277L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 259178004,
        "inputRowCount" : 7199389
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 3654,
        "TotalTasksDurationInMs" : 45622,
        "IOBytes" : {
          "Total" : 305980158,
          "Details" : {
            "IR" : 143095016,
            "IW" : 0,
            "SR" : 0,
            "SW" : 162885142
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1920353313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036857996,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 1036857996,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] "
          },
          "1" : {
            "sign" : 964728509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L)) "
          },
          "2" : {
            "sign" : 1207064257,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#43, sr_item_sk#44, sr_customer_sk#45, sr_cdemo_sk#46, sr_hdemo_sk#47, sr_addr_sk#48, sr_store_sk#49, sr_reason_sk#50, sr_ticket_number#51L, sr_return_quantity#52, sr_return_amt#53, sr_return_tax#54, sr_return_amt_inc_tax#55, sr_fee#56, sr_return_ship_cost#57, sr_refunded_cash#58, sr_reversed_charge#59, sr_store_credit#60, sr_net_loss#61, sr_returned_date_sk#62], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n+- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n   +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#43,sr_item_sk#44,sr_customer_sk#45,sr_cdemo_sk#46,sr_hdemo_sk#47,sr_addr_sk#48,sr_store_sk#49,sr_reason_sk#50,sr_ticket_number#51L,sr_return_quantity#52,sr_return_amt#53,sr_return_tax#54,sr_return_amt_inc_tax#55,sr_fee#56,sr_return_ship_cost#57,sr_refunded_cash#58,sr_reversed_charge#59,sr_store_credit#60,sr_net_loss#61,sr_returned_date_sk#62] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 991761703,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1036857996,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] Input [5]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61, sr_returned_date_sk#62] "
          },
          "1" : {
            "sign" : 1922712003,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1036857996,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61, sr_returned_date_sk#62] Condition : (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L)) "
          },
          "2" : {
            "sign" : -391407673,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1036857996,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [5]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61, sr_returned_date_sk#62] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns] PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)] ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n+- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n   +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#44,sr_ticket_number#51L,sr_return_amt#53,sr_net_loss#61,sr_returned_date_sk#62] Batched: true, DataFilters: [isnotnull(sr_item_sk#44), isnotnull(sr_ticket_number#51L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1036857996,
        "inputRowCount" : 28801611
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 6511,
        "TotalTasksDurationInMs" : 55637,
        "IOBytes" : {
          "Total" : 1149538455,
          "Details" : {
            "IR" : 499746800,
            "IW" : 0,
            "SR" : 0,
            "SW" : 649791655
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 897135405,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3072,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2019413676,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 3072,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#780] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)#718] Results [1]: [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)#718 AS bloomFilter#719] "
          },
          "1" : {
            "sign" : 943656535,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#780] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1338]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n         +- *(1) Project [p_promo_sk#142]\n            +- *(1) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3072,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 3298 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5633.0,
        "FinishedTasksDistributionInMs" : [ 1101.0, 1318.0, 1584.0, 1630.0, 1630.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 142,
        "TotalTasksDurationInMs" : 128,
        "IOBytes" : {
          "Total" : 28590,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 28590,
            "SW" : 0
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1043983241,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 518321592,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 518321592,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] "
          },
          "1" : {
            "sign" : 1007977036,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L)) "
          },
          "2" : {
            "sign" : 201829251,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#195, cr_item_sk#196, cr_refunded_customer_sk#197, cr_refunded_cdemo_sk#198, cr_refunded_hdemo_sk#199, cr_refunded_addr_sk#200, cr_returning_customer_sk#201, cr_returning_cdemo_sk#202, cr_returning_hdemo_sk#203, cr_returning_addr_sk#204, cr_call_center_sk#205, cr_catalog_page_sk#206, cr_ship_mode_sk#207, cr_warehouse_sk#208, cr_reason_sk#209, cr_order_number#210L, cr_return_quantity#211, cr_return_amount#212, cr_return_tax#213, cr_return_amt_inc_tax#214, cr_fee#215, cr_return_ship_cost#216, cr_refunded_cash#217, cr_reversed_charge#218, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n+- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n   +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#195,cr_item_sk#196,cr_refunded_customer_sk#197,cr_refunded_cdemo_sk#198,cr_refunded_hdemo_sk#199,cr_refunded_addr_sk#200,cr_returning_customer_sk#201,cr_returning_cdemo_sk#202,cr_returning_hdemo_sk#203,cr_returning_addr_sk#204,cr_call_center_sk#205,cr_catalog_page_sk#206,cr_ship_mode_sk#207,cr_warehouse_sk#208,cr_reason_sk#209,cr_order_number#210L,cr_return_quantity#211,cr_return_amount#212,cr_return_tax#213,cr_return_amt_inc_tax#214,cr_fee#215,cr_return_ship_cost#216,cr_refunded_cash#217,cr_reversed_charge#218,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1174260797,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 518321592,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] Input [5]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220, cr_returned_date_sk#221] "
          },
          "1" : {
            "sign" : -2044919662,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 518321592,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220, cr_returned_date_sk#221] Condition : (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L)) "
          },
          "2" : {
            "sign" : 120846665,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 518321592,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [5]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220, cr_returned_date_sk#221] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns] PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)] ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n+- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n   +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#196,cr_order_number#210L,cr_return_amount#212,cr_net_loss#220,cr_returned_date_sk#221] Batched: true, DataFilters: [isnotnull(cr_item_sk#196), isnotnull(cr_order_number#210L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 518321592,
        "inputRowCount" : 14397822
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 9375,
        "TotalTasksDurationInMs" : 108400,
        "IOBytes" : {
          "Total" : 585421406,
          "Details" : {
            "IR" : 263146426,
            "IW" : 0,
            "SR" : 0,
            "SW" : 322274980
          }
        }
      }
    },
    "16" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1402416333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15932435100,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 15932435100,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#42 = d_date_sk#63) "
          },
          "4" : {
            "sign" : -1077544740,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20632638572,
                "rowCount" : 396781511
              },
              "compileTime" : {
                "sizeInBytes" : 20632638572,
                "rowCount" : 396781511
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_promo_sk#27 = p_promo_sk#142) "
          },
          "9" : {
            "sign" : 1551760670,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19458829880,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 19458829880,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61] "
          },
          "5" : {
            "sign" : 27650436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13788380208,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 13788380208,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          },
          "10" : {
            "sign" : 2125846726,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26408411980,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 26408411980,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L)) "
          },
          "6" : {
            "sign" : -1910143575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16086443576,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 16086443576,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#21 = i_item_sk#120) "
          },
          "1" : {
            "sign" : 1464619557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39294006652,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 39294006652,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92] "
          },
          "0" : {
            "sign" : 1333969658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21000,
                "rowCount" : 210
              },
              "compileTime" : {
                "sizeInBytes" : 21000,
                "rowCount" : 210
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699] "
          },
          "2" : {
            "sign" : -1760428762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43916830964,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 43916830964,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#26 = s_store_sk#91) "
          },
          "7" : {
            "sign" : 1728295227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13808110420,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 13808110420,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          },
          "3" : {
            "sign" : -490771482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17458386484,
                "rowCount" : 396781511
              },
              "compileTime" : {
                "sizeInBytes" : 17458386484,
                "rowCount" : 396781511
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699]\n+- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n   +- Join Inner, (ss_store_sk#26 = s_store_sk#91)\n      :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :  +- Join Inner, (ss_promo_sk#27 = p_promo_sk#142)\n      :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :     :  +- Join Inner, (ss_item_sk#21 = i_item_sk#120)\n      :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :     :     :  +- Join Inner, (ss_sold_date_sk#42 = d_date_sk#63)\n      :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n      :     :     :     :  +- Join LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L))\n      :     :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42]\n      :     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#712 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#717 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#720 [], xxhash64(ss_promo_sk#27, 42))))\n      :     :     :     :     :     :  :- Project [d_date_sk#63]\n      :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n      :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n      :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n      :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n      :     :     :     :     :     :     +- Project [p_promo_sk#142]\n      :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#20,ss_item_sk#21,ss_customer_sk#22,ss_cdemo_sk#23,ss_hdemo_sk#24,ss_addr_sk#25,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_quantity#29,ss_wholesale_cost#30,ss_list_price#31,ss_sales_price#32,ss_ext_discount_amt#33,ss_ext_sales_price#34,ss_ext_wholesale_cost#35,ss_ext_list_price#36,ss_ext_tax#37,ss_coupon_amt#38,ss_net_paid#39,ss_net_paid_inc_tax#40,ss_net_profit#41,ss_sold_date_sk#42] parquet\n      :     :     :     :     +- Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n      :     :     :     :        +- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#43,sr_item_sk#44,sr_customer_sk#45,sr_cdemo_sk#46,sr_hdemo_sk#47,sr_addr_sk#48,sr_store_sk#49,sr_reason_sk#50,sr_ticket_number#51L,sr_return_quantity#52,sr_return_amt#53,sr_return_tax#54,sr_return_amt_inc_tax#55,sr_fee#56,sr_return_ship_cost#57,sr_refunded_cash#58,sr_reversed_charge#59,sr_store_credit#60,sr_net_loss#61,sr_returned_date_sk#62] parquet\n      :     :     :     +- Project [d_date_sk#63]\n      :     :     :        +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n      :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :     :     +- Project [i_item_sk#120]\n      :     :        +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :     +- Project [p_promo_sk#142]\n      :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      +- Project [s_store_sk#91, s_store_id#92]\n         +- Filter isnotnull(s_store_sk#91)\n            +- Relation spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92,s_rec_start_date#93,s_rec_end_date#94,s_closed_date_sk#95,s_store_name#96,s_number_employees#97,s_floor_space#98,s_hours#99,s_manager#100,s_market_id#101,s_geography_class#102,s_market_desc#103,s_market_manager#104,s_division_id#105,s_division_name#106,s_company_id#107,s_company_name#108,s_street_number#109,s_street_name#110,s_street_type#111,s_suite_number#112,s_city#113,s_county#114,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1833536938,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 21055616,
            "rowCount" : 328994,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] Arguments: 0 "
          },
          "8" : {
            "sign" : 925120337,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 15932435100,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#42] Right keys [1]: [d_date_sk#63] Join type: Inner Join condition: None "
          },
          "4" : {
            "sign" : 1945213728,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 20632638572,
            "rowCount" : 396781511,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_promo_sk#27] Right keys [1]: [p_promo_sk#142] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : 2115440589,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#63] Arguments: 2 "
          },
          "11" : {
            "sign" : 1969861834,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] Arguments: [ss_item_sk#21 ASC NULLS FIRST, ss_ticket_number#28L ASC NULLS FIRST], false, 0 "
          },
          "9" : {
            "sign" : 862468491,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 19458829880,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61] Input [11]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] "
          },
          "13" : {
            "sign" : -1759509357,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] Arguments: [sr_item_sk#44 ASC NULLS FIRST, sr_ticket_number#51L ASC NULLS FIRST], false, 0 "
          },
          "16" : {
            "sign" : -1071009282,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#120] Arguments: 3 "
          },
          "5" : {
            "sign" : -1452281678,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 13788380208,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] Input [8]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, i_item_sk#120] "
          },
          "10" : {
            "sign" : 1597496491,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 26408411980,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_item_sk#21, ss_ticket_number#28L] Right keys [2]: [sr_item_sk#44, sr_ticket_number#51L] Join type: LeftOuter Join condition: None "
          },
          "6" : {
            "sign" : 1722339511,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 16086443576,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#21] Right keys [1]: [i_item_sk#120] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -236644470,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 39294006652,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92] Input [7]: [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_sk#91, s_store_id#92] "
          },
          "17" : {
            "sign" : 1435619235,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_promo_sk#142] Arguments: 4 "
          },
          "14" : {
            "sign" : 711020224,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1152064440,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61] Arguments: 1 "
          },
          "0" : {
            "sign" : -781251371,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 21000,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92] Keys [1]: [s_store_id#92] Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#34)), partial_sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))] Aggregate Attributes [5]: [sum#749L, sum#750, isEmpty#751, sum#752, isEmpty#753] Results [6]: [s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758] "
          },
          "2" : {
            "sign" : -384889989,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 43916830964,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#26] Right keys [1]: [s_store_sk#91] Join type: Inner Join condition: None "
          },
          "18" : {
            "sign" : -800110107,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_store_sk#91, s_store_id#92] Arguments: 5 "
          },
          "7" : {
            "sign" : 1247283393,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 13808110420,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] Input [9]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61, d_date_sk#63] "
          },
          "3" : {
            "sign" : -1501828520,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 17458386484,
            "rowCount" : 396781511,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61] Input [7]: [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, p_promo_sk#142] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 11,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "ShuffleQueryStage",
          "toId" : 13,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "SortMergeJoin",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_id#92], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#34)), partial_sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))], output=[s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758])\n+- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n   +- BroadcastHashJoin [ss_store_sk#26], [s_store_sk#91], Inner, BuildRight, false\n      :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :  +- BroadcastHashJoin [ss_promo_sk#27], [p_promo_sk#142], Inner, BuildRight, false\n      :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :     :  +- BroadcastHashJoin [ss_item_sk#21], [i_item_sk#120], Inner, BuildRight, false\n      :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n      :     :     :  +- BroadcastHashJoin [ss_sold_date_sk#42], [d_date_sk#63], Inner, BuildRight, false\n      :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n      :     :     :     :  +- SortMergeJoin [ss_item_sk#21, ss_ticket_number#28L], [sr_item_sk#44, sr_ticket_number#51L], LeftOuter\n      :     :     :     :     :- Sort [ss_item_sk#21 ASC NULLS FIRST, ss_ticket_number#28L ASC NULLS FIRST], false, 0\n      :     :     :     :     :  +- ShuffleQueryStage 0\n      :     :     :     :     :     +- Exchange hashpartitioning(ss_item_sk#21, ss_ticket_number#28L, 200), ENSURE_REQUIREMENTS, [plan_id=879]\n      :     :     :     :     :        +- *(1) Filter ((((isnotnull(ss_store_sk#26) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND might_contain(Subquery subquery#717, [id=#317], xxhash64(ss_item_sk#21, 42))) AND might_contain(Subquery subquery#720, [id=#330], xxhash64(ss_promo_sk#27, 42)))\n      :     :     :     :     :           :  :- Subquery subquery#717, [id=#317]\n      :     :     :     :     :           :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1339]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                               +- *(1) Project [i_item_sk#120]\n                                                                  +- *(1) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n                                                   +- == Initial Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=315]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                            +- Project [i_item_sk#120]\n                                                               +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n      :     :     :     :     :           :  +- Subquery subquery#720, [id=#330]\n      :     :     :     :     :           :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1338]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                               +- *(1) Project [p_promo_sk#142]\n                                                                  +- *(1) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n                                                   +- == Initial Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=328]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                            +- Project [p_promo_sk#142]\n                                                               +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n      :     :     :     :     :           +- *(1) ColumnarToRow\n      :     :     :     :     :              +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#21,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_ext_sales_price#34,ss_net_profit#41,ss_sold_date_sk#42] Batched: true, DataFilters: [isnotnull(ss_store_sk#26), isnotnull(ss_item_sk#21), isnotnull(ss_promo_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#42), dynamicpruningexpression(ss_sold_date_sk#42 IN dynamicpruning#712)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:...\n      :     :     :     :     :                    +- SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n      :     :     :     :     :                       +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#63], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=861]\n                                                            +- Project [d_date_sk#63]\n                                                               +- Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :     :     :     +- Sort [sr_item_sk#44 ASC NULLS FIRST, sr_ticket_number#51L ASC NULLS FIRST], false, 0\n      :     :     :     :        +- ShuffleQueryStage 1\n      :     :     :     :           +- Exchange hashpartitioning(sr_item_sk#44, sr_ticket_number#51L, 200), ENSURE_REQUIREMENTS, [plan_id=898]\n      :     :     :     :              +- *(2) Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n      :     :     :     :                 +- *(2) Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n      :     :     :     :                    +- *(2) ColumnarToRow\n      :     :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#44,sr_ticket_number#51L,sr_return_amt#53,sr_net_loss#61,sr_returned_date_sk#62] Batched: true, DataFilters: [isnotnull(sr_item_sk#44), isnotnull(sr_ticket_number#51L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :     :     :     +- BroadcastQueryStage 2\n      :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n      :     :     :           +- *(3) Project [d_date_sk#63]\n      :     :     :              +- *(3) Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n      :     :     :                 +- *(3) ColumnarToRow\n      :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :     +- BroadcastQueryStage 3\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n      :     :           +- *(4) Project [i_item_sk#120]\n      :     :              +- *(4) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :     :                 +- *(4) ColumnarToRow\n      :     :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n      :     +- BroadcastQueryStage 4\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n      :           +- *(5) Project [p_promo_sk#142]\n      :              +- *(5) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :                 +- *(5) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n      +- BroadcastQueryStage 5\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=982]\n            +- *(6) Filter isnotnull(s_store_sk#91)\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92] Batched: true, DataFilters: [isnotnull(s_store_sk#91)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1177850112,
        "inputRowCount" : 29143415
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 57932, 57533, 57350, 57768, 57278, 59654, 54590, 58461, 56624, 58324, 57531, 55522, 58254, 57038, 58189, 57300, 57032, 56841, 58071, 58385, 56872, 58461, 57240, 54702, 56743, 57507, 56716, 58257, 55577, 60210, 56742, 56204, 55923, 59897, 59259, 58153, 56223, 56852, 55938, 56345, 55250, 59506, 59086, 55677, 57897, 58748, 58888, 57667, 57372, 58029, 55672, 56607, 57398, 55855, 60710, 57794, 55409, 56270, 57656, 58631, 56973, 57027, 56887, 58098, 58679, 58764, 58997, 55881, 58155, 55772, 56844, 57470, 55791, 58931, 59186, 57639, 56509, 57598, 56567, 56277, 57204, 55973, 58232, 56117, 58365, 53990, 57583, 56841, 57260, 57687, 55818, 58122, 57006, 56517, 57800, 53994, 57997, 55912, 56974, 57105, 56303, 57663, 56996, 58451, 53930, 57872, 55488, 58232, 57800, 57035, 59063, 58230, 58055, 54399, 58931, 58487, 56492, 58019, 56667, 57938, 57696, 56712, 57639, 57204, 56275, 56941, 58958, 56322, 57376, 59873, 57603, 58015, 58276, 57799, 57663, 56071, 57900, 57433, 56467, 59327, 55583, 58700, 55486, 58188, 55347, 56381, 56567, 58038, 56217, 56439, 56644, 57597, 56841, 57936, 54629, 57892, 55893, 56711, 55693, 55615, 56370, 56910, 59111, 58129, 58784, 57039, 57827, 58451, 57800, 58235, 56797, 59451, 57326, 57027, 57603, 58715, 58235, 57833, 56707, 54491, 58458, 59352, 58432, 57982, 56963, 58060, 55715, 57666, 56751, 57276, 55885, 58824, 57639, 55501, 57243, 57630, 56270, 57362, 55752, 57938 ],
        "3" : [ 3413738, 3409110, 3416794, 3418424, 3397085, 3424817, 3413635, 3416650, 3394794, 3427127, 3428153, 3389666, 3404097, 3417203, 3405786, 3404626, 3380982, 3400751, 3398119, 3417963, 3421569, 3389178, 3408489, 3407136, 3389078, 3443558, 3412408, 3428337, 3401576, 3412466, 3418493, 3424974, 3379153, 3423369, 3415576, 3417652, 3413800, 3405552, 3433059, 3426174, 3412198, 3408499, 3394991, 3410710, 3411195, 3429213, 3401077, 3423439, 3440477, 3410510, 3391906, 3407008, 3399534, 3402434, 3385826, 3433159, 3404292, 3409341, 3409253, 3413851, 3416190, 3397135, 3430396, 3407196, 3431585, 3415284, 3410729, 3405511, 3423191, 3400062, 3381273, 3419509, 3403917, 3448699, 3386811, 3433887, 3413598, 3400888, 3417300, 3435989, 3400555, 3408914, 3402951, 3421138, 3419929, 3398401, 3406936, 3414679, 3422237, 3411624, 3423705, 3411828, 3416848, 3418131, 3422940, 3409171, 3408918, 3405438, 3415621, 3407759, 3412778, 3411589, 3418965, 3412299, 3408215, 3410192, 3420985, 3433306, 3416774, 3418081, 3414449, 3415291, 3401002, 3426864, 3412274, 3420546, 3421970, 3401103, 3423338, 3409262, 3405397, 3377064, 3428391, 3396851, 3404092, 3402810, 3404547, 3421020, 3410971, 3418747, 3376655, 3406234, 3434189, 3423332, 3403628, 3424078, 3411902, 3437104, 3433960, 3413583, 3412141, 3416446, 3409391, 3395655, 3408232, 3403185, 3395589, 3430390, 3419041, 3399895, 3412333, 3422583, 3424740, 3409894, 3396037, 3429522, 3400639, 3371182, 3418623, 3414782, 3399162, 3423256, 3415188, 3390945, 3406051, 3426811, 3398442, 3407565, 3428155, 3411394, 3410478, 3388335, 3412614, 3396571, 3415385, 3403075, 3408148, 3411788, 3410666, 3434204, 3402056, 3424207, 3416016, 3411624, 3426061, 3425261, 3396732, 3397505, 3433636, 3424689, 3415179, 3420804, 3413912, 3404394, 3384236, 3420619, 3416087, 3431363, 3467914, 3388012 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 73,
        "FinishedTasksTotalTimeInMs" : 100200.0,
        "FinishedTasksDistributionInMs" : [ 297.0, 489.0, 548.0, 1910.0, 8311.0 ]
      },
      "QueryStageOptimizationId" : 16,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 26 ],
      "Objectives" : {
        "DurationInMs" : 9275,
        "TotalTasksDurationInMs" : 49965,
        "IOBytes" : {
          "Total" : 660904774,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 660709924,
            "SW" : 194850
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2134837583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 960,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 960,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web_site_sk#289, web_site_id#290] "
          },
          "1" : {
            "sign" : -194656941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(web_site_sk#289) "
          },
          "2" : {
            "sign" : 1170715515,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#289, web_site_id#290, web_rec_start_date#291, web_rec_end_date#292, web_name#293, web_open_date_sk#294, web_close_date_sk#295, web_class#296, web_manager#297, web_mkt_id#298, web_mkt_class#299, web_mkt_desc#300, web_market_manager#301, web_company_id#302, web_company_name#303, web_street_number#304, web_street_name#305, web_street_type#306, web_suite_number#307, web_city#308, web_county#309, web_state#310, web_zip#311, web_country#312, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#289, web_site_id#290]\n+- Filter isnotnull(web_site_sk#289)\n   +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290,web_rec_start_date#291,web_rec_end_date#292,web_name#293,web_open_date_sk#294,web_close_date_sk#295,web_class#296,web_manager#297,web_mkt_id#298,web_mkt_class#299,web_mkt_desc#300,web_market_manager#301,web_company_id#302,web_company_name#303,web_street_number#304,web_street_name#305,web_street_type#306,web_suite_number#307,web_city#308,web_county#309,web_state#310,web_zip#311,web_country#312,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -848053503,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 960,
            "rowCount" : 24,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#289, web_site_id#290] Condition : isnotnull(web_site_sk#289) "
          },
          "1" : {
            "sign" : 2110708009,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 960,
            "rowCount" : 24,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#289, web_site_id#290] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_site_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(web_site_sk#289)\n+- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290] Batched: true, DataFilters: [isnotnull(web_site_sk#289)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 960,
        "inputRowCount" : 24
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 1894,
        "TotalTasksDurationInMs" : 1890,
        "IOBytes" : {
          "Total" : 11430,
          "Details" : {
            "IR" : 11430,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -646043487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12040948896,
                "rowCount" : 250853102
              },
              "compileTime" : {
                "sizeInBytes" : 12040948896,
                "rowCount" : 250853102
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] "
          },
          "1" : {
            "sign" : 1158702302,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38129671504,
                "rowCount" : 250853102
              },
              "compileTime" : {
                "sizeInBytes" : 38129671504,
                "rowCount" : 250853102
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#712 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#717 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#720 [], xxhash64(ss_promo_sk#27, 42)))) "
          },
          "2" : {
            "sign" : -2131571707,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#20, ss_item_sk#21, ss_customer_sk#22, ss_cdemo_sk#23, ss_hdemo_sk#24, ss_addr_sk#25, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_quantity#29, ss_wholesale_cost#30, ss_list_price#31, ss_sales_price#32, ss_ext_discount_amt#33, ss_ext_sales_price#34, ss_ext_wholesale_cost#35, ss_ext_list_price#36, ss_ext_tax#37, ss_coupon_amt#38, ss_net_paid#39, ss_net_paid_inc_tax#40, ss_net_profit#41, ss_sold_date_sk#42], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42]\n+- Filter (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#712 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#717 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#720 [], xxhash64(ss_promo_sk#27, 42))))\n   :  :- Project [d_date_sk#63]\n   :  :  +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n   :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n   :  :  +- Project [i_item_sk#120]\n   :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n   :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n   :     +- Project [p_promo_sk#142]\n   :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n   :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#20,ss_item_sk#21,ss_customer_sk#22,ss_cdemo_sk#23,ss_hdemo_sk#24,ss_addr_sk#25,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_quantity#29,ss_wholesale_cost#30,ss_list_price#31,ss_sales_price#32,ss_ext_discount_amt#33,ss_ext_sales_price#34,ss_ext_wholesale_cost#35,ss_ext_list_price#36,ss_ext_tax#37,ss_coupon_amt#38,ss_net_paid#39,ss_net_paid_inc_tax#40,ss_net_profit#41,ss_sold_date_sk#42] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1824393941,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12040948896,
            "rowCount" : 250853102,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] Condition : ((((isnotnull(ss_store_sk#26) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND might_contain(Subquery subquery#717, [id=#317], xxhash64(ss_item_sk#21, 42))) AND might_contain(Subquery subquery#720, [id=#330], xxhash64(ss_promo_sk#27, 42))) "
          },
          "1" : {
            "sign" : 2112119976,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12040948896,
            "rowCount" : 250853102,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [7]: [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#42), dynamicpruningexpression(ss_sold_date_sk#42 IN dynamicpruning#712)] PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)] ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((((isnotnull(ss_store_sk#26) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND might_contain(Subquery subquery#717, [id=#317], xxhash64(ss_item_sk#21, 42))) AND might_contain(Subquery subquery#720, [id=#330], xxhash64(ss_promo_sk#27, 42)))\n:  :- Subquery subquery#717, [id=#317]\n:  :  +- AdaptiveSparkPlan isFinalPlan=false\n:  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n:  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=315]\n:  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n:  :              +- Project [i_item_sk#120]\n:  :                 +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n:  :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n:  +- Subquery subquery#720, [id=#330]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=328]\n:              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n:                 +- Project [p_promo_sk#142]\n:                    +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n:                       +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n+- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#21,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_ext_sales_price#34,ss_net_profit#41,ss_sold_date_sk#42] Batched: true, DataFilters: [isnotnull(ss_store_sk#26), isnotnull(ss_item_sk#21), isnotnull(ss_promo_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#42), dynamicpruningexpression(ss_sold_date_sk#42 IN dynamicpruning#712)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:...\n      +- SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n         +- AdaptiveSparkPlan isFinalPlan=false\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=861]\n               +- Project [d_date_sk#63]\n                  +- Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12040948896,
        "inputRowCount" : 250853102
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 13165,
        "TotalTasksDurationInMs" : 106434,
        "IOBytes" : {
          "Total" : 99041996,
          "Details" : {
            "IR" : 88123727,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10918269
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 610546179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n+- Project [i_item_sk#120]\n   +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -182197249,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#120] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)] Aggregate Attributes [1]: [buf#734] Results [1]: [buf#779] "
          },
          "1" : {
            "sign" : 426057944,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#120] Input [2]: [i_item_sk#120, i_current_price#125] "
          },
          "2" : {
            "sign" : -1562536597,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#120, i_current_price#125] Condition : ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120)) "
          },
          "3" : {
            "sign" : 482610105,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#120, i_current_price#125] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n+- Project [i_item_sk#120]\n   +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136656,
        "inputRowCount" : 11388
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 3767,
        "TotalTasksDurationInMs" : 11178,
        "IOBytes" : {
          "Total" : 1278317,
          "Details" : {
            "IR" : 1278317,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1234961240,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 136656,
                "rowCount" : 11388
              },
              "compileTime" : {
                "sizeInBytes" : 136656,
                "rowCount" : 11388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#120] "
          },
          "1" : {
            "sign" : 867516341,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4851288,
                "rowCount" : 11388
              },
              "compileTime" : {
                "sizeInBytes" : 4851288,
                "rowCount" : 11388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120)) "
          },
          "2" : {
            "sign" : -126434393,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#120, i_item_id#121, i_rec_start_date#122, i_rec_end_date#123, i_item_desc#124, i_current_price#125, i_wholesale_cost#126, i_brand_id#127, i_brand#128, i_class_id#129, i_class#130, i_category_id#131, i_category#132, i_manufact_id#133, i_manufact#134, i_size#135, i_formulation#136, i_color#137, i_units#138, i_container#139, i_manager_id#140, i_product_name#141], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#120]\n+- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 426057944,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#120] Input [2]: [i_item_sk#120, i_current_price#125] "
          },
          "1" : {
            "sign" : -1562536597,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#120, i_current_price#125] Condition : ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120)) "
          },
          "2" : {
            "sign" : 482610105,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 136656,
            "rowCount" : 11388,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#120, i_current_price#125] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#120]\n+- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136656,
        "inputRowCount" : 11388
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 5157,
        "TotalTasksDurationInMs" : 17176,
        "IOBytes" : {
          "Total" : 1306907,
          "Details" : {
            "IR" : 1278317,
            "IW" : 0,
            "SR" : 0,
            "SW" : 28590
          }
        }
      }
    },
    "17" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 2060348367,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8310975720,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 8310975720,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#194 = d_date_sk#542) "
          },
          "4" : {
            "sign" : 63861996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11400433120,
                "rowCount" : 142505414
              },
              "compileTime" : {
                "sizeInBytes" : 11400433120,
                "rowCount" : 142505414
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222) "
          },
          "9" : {
            "sign" : 368515110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7943192488,
                "rowCount" : 141842723
              },
              "compileTime" : {
                "sizeInBytes" : 7943192488,
                "rowCount" : 141842723
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220] "
          },
          "5" : {
            "sign" : 2101030607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6905973744,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 6905973744,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          },
          "10" : {
            "sign" : -1573647152,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10780046948,
                "rowCount" : 141842723
              },
              "compileTime" : {
                "sizeInBytes" : 10780046948,
                "rowCount" : 141842723
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L)) "
          },
          "6" : {
            "sign" : -1262204944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8056969368,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 8056969368,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#175 = i_item_sk#570) "
          },
          "1" : {
            "sign" : -686494586,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14114477188,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 14114477188,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          },
          "0" : {
            "sign" : 65642570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2040000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 2040000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709] "
          },
          "2" : {
            "sign" : -736181850,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15775003916,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 15775003916,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_promo_sk#176 = p_promo_sk#592) "
          },
          "7" : {
            "sign" : 128147479,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7202845624,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 7202845624,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] "
          },
          "3" : {
            "sign" : 950149088,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10260389808,
                "rowCount" : 142505414
              },
              "compileTime" : {
                "sizeInBytes" : 10260389808,
                "rowCount" : 142505414
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709]\n+- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n   +- Join Inner, (cs_promo_sk#176 = p_promo_sk#592)\n      :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n      :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#570)\n      :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#542)\n      :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n      :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n      :     :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194]\n      :     :     :     :     :  +- Filter (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#713 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#723 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#726 [], xxhash64(cs_promo_sk#176, 42))))\n      :     :     :     :     :     :  :- Project [d_date_sk#542]\n      :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n      :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n      :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n      :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n      :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n      :     :     :     :     :     :     +- Project [p_promo_sk#142]\n      :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#161,cs_ship_date_sk#162,cs_bill_customer_sk#163,cs_bill_cdemo_sk#164,cs_bill_hdemo_sk#165,cs_bill_addr_sk#166,cs_ship_customer_sk#167,cs_ship_cdemo_sk#168,cs_ship_hdemo_sk#169,cs_ship_addr_sk#170,cs_call_center_sk#171,cs_catalog_page_sk#172,cs_ship_mode_sk#173,cs_warehouse_sk#174,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_quantity#178,cs_wholesale_cost#179,cs_list_price#180,cs_sales_price#181,cs_ext_discount_amt#182,cs_ext_sales_price#183,cs_ext_wholesale_cost#184,... 10 more fields] parquet\n      :     :     :     :     +- Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n      :     :     :     :        +- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#195,cr_item_sk#196,cr_refunded_customer_sk#197,cr_refunded_cdemo_sk#198,cr_refunded_hdemo_sk#199,cr_refunded_addr_sk#200,cr_returning_customer_sk#201,cr_returning_cdemo_sk#202,cr_returning_hdemo_sk#203,cr_returning_addr_sk#204,cr_call_center_sk#205,cr_catalog_page_sk#206,cr_ship_mode_sk#207,cr_warehouse_sk#208,cr_reason_sk#209,cr_order_number#210L,cr_return_quantity#211,cr_return_amount#212,cr_return_tax#213,cr_return_amt_inc_tax#214,cr_fee#215,cr_return_ship_cost#216,cr_refunded_cash#217,cr_reversed_charge#218,... 3 more fields] parquet\n      :     :     :     +- Project [d_date_sk#542]\n      :     :     :        +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n      :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n      :     :     +- Project [i_item_sk#570]\n      :     :        +- Filter ((isnotnull(i_current_price#575) AND (i_current_price#575 > 50.00)) AND isnotnull(i_item_sk#570))\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#570,i_item_id#571,i_rec_start_date#572,i_rec_end_date#573,i_item_desc#574,i_current_price#575,i_wholesale_cost#576,i_brand_id#577,i_brand#578,i_class_id#579,i_class#580,i_category_id#581,i_category#582,i_manufact_id#583,i_manufact#584,i_size#585,i_formulation#586,i_color#587,i_units#588,i_container#589,i_manager_id#590,i_product_name#591] parquet\n      :     +- Project [cp_catalog_page_sk#222, cp_catalog_page_id#223]\n      :        +- Filter isnotnull(cp_catalog_page_sk#222)\n      :           +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223,cp_start_date_sk#224,cp_end_date_sk#225,cp_department#226,cp_catalog_number#227,cp_catalog_page_number#228,cp_description#229,cp_type#230] parquet\n      +- Project [p_promo_sk#592]\n         +- Filter ((isnotnull(p_channel_tv#603) AND (p_channel_tv#603 = N)) AND isnotnull(p_promo_sk#592))\n            +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#592,p_promo_id#593,p_start_date_sk#594,p_end_date_sk#595,p_item_sk#596,p_cost#597,p_response_target#598,p_promo_name#599,p_channel_dmail#600,p_channel_email#601,p_channel_catalog#602,p_channel_tv#603,p_channel_radio#604,p_channel_press#605,p_channel_event#606,p_channel_demo#607,p_channel_details#608,p_purpose#609,p_discount_active#610] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 543574639,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 11311616,
            "rowCount" : 176744,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] Arguments: 6 "
          },
          "8" : {
            "sign" : 194260186,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8310975720,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#194] Right keys [1]: [d_date_sk#542] Join type: Inner Join condition: None "
          },
          "4" : {
            "sign" : -1279585019,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 11400433120,
            "rowCount" : 142505414,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_catalog_page_sk#172] Right keys [1]: [cp_catalog_page_sk#222] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -2089764299,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#542] Arguments: 9 "
          },
          "11" : {
            "sign" : -940782088,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194] Arguments: [cs_item_sk#175 ASC NULLS FIRST, cs_order_number#177L ASC NULLS FIRST], false, 0 "
          },
          "9" : {
            "sign" : -1840207782,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7943192488,
            "rowCount" : 141842723,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220] Input [11]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] "
          },
          "13" : {
            "sign" : -689205418,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] Arguments: [cr_item_sk#196 ASC NULLS FIRST, cr_order_number#210L ASC NULLS FIRST], false, 0 "
          },
          "16" : {
            "sign" : 907221330,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#570] Arguments: 11 "
          },
          "5" : {
            "sign" : 1821612340,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6905973744,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] Input [8]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, i_item_sk#570] "
          },
          "10" : {
            "sign" : 68515348,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 10780046948,
            "rowCount" : 141842723,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [cs_item_sk#175, cs_order_number#177L] Right keys [2]: [cr_item_sk#196, cr_order_number#210L] Join type: LeftOuter Join condition: None "
          },
          "6" : {
            "sign" : 152037897,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8056969368,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_item_sk#175] Right keys [1]: [i_item_sk#570] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -998957461,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14114477188,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] Input [7]: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223, p_promo_sk#592] "
          },
          "17" : {
            "sign" : -2115802865,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1211776,
            "rowCount" : 20400,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [cp_catalog_page_sk#222, cp_catalog_page_id#223] Arguments: 12 "
          },
          "14" : {
            "sign" : 1517185852,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 575912880,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220] Arguments: 7 "
          },
          "0" : {
            "sign" : -2053526850,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 2040000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] Keys [1]: [cp_catalog_page_id#223] Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#183)), partial_sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))] Aggregate Attributes [5]: [sum#759L, sum#760, isEmpty#761, sum#762, isEmpty#763] Results [6]: [cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768] "
          },
          "2" : {
            "sign" : -2024775365,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 15775003916,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_promo_sk#176] Right keys [1]: [p_promo_sk#592] Join type: Inner Join condition: None "
          },
          "18" : {
            "sign" : -1118547633,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_promo_sk#592] Arguments: 14 "
          },
          "7" : {
            "sign" : 356214452,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7202845624,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220] Input [9]: [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220, d_date_sk#542] "
          },
          "3" : {
            "sign" : -2062575639,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 10260389808,
            "rowCount" : 142505414,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223] Input [8]: [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_sk#222, cp_catalog_page_id#223] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 11,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "ShuffleQueryStage",
          "toId" : 13,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "SortMergeJoin",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cp_catalog_page_id#223], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#183)), partial_sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))], output=[cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768])\n+- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n   +- BroadcastHashJoin [cs_promo_sk#176], [p_promo_sk#592], Inner, BuildRight, false\n      :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n      :  +- BroadcastHashJoin [cs_catalog_page_sk#172], [cp_catalog_page_sk#222], Inner, BuildRight, false\n      :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :     :  +- BroadcastHashJoin [cs_item_sk#175], [i_item_sk#570], Inner, BuildRight, false\n      :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n      :     :     :  +- BroadcastHashJoin [cs_sold_date_sk#194], [d_date_sk#542], Inner, BuildRight, false\n      :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n      :     :     :     :  +- SortMergeJoin [cs_item_sk#175, cs_order_number#177L], [cr_item_sk#196, cr_order_number#210L], LeftOuter\n      :     :     :     :     :- Sort [cs_item_sk#175 ASC NULLS FIRST, cs_order_number#177L ASC NULLS FIRST], false, 0\n      :     :     :     :     :  +- ShuffleQueryStage 6\n      :     :     :     :     :     +- Exchange hashpartitioning(cs_item_sk#175, cs_order_number#177L, 200), ENSURE_REQUIREMENTS, [plan_id=1019]\n      :     :     :     :     :        +- *(7) Filter ((((isnotnull(cs_catalog_page_sk#172) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(cs_item_sk#175, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(cs_promo_sk#176, 42)))\n      :     :     :     :     :           :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n      :     :     :     :     :           :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n      :     :     :     :     :           +- *(7) ColumnarToRow\n      :     :     :     :     :              +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#172,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_ext_sales_price#183,cs_net_profit#193,cs_sold_date_sk#194] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#172), isnotnull(cs_item_sk#175), isnotnull(cs_promo_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#194), dynamicpruningexpression(cs_sold_date_sk#194 IN dynamicpruning#7..., PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_ext_sales_...\n      :     :     :     :     :                    +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n      :     :     :     :     +- Sort [cr_item_sk#196 ASC NULLS FIRST, cr_order_number#210L ASC NULLS FIRST], false, 0\n      :     :     :     :        +- ShuffleQueryStage 7\n      :     :     :     :           +- Exchange hashpartitioning(cr_item_sk#196, cr_order_number#210L, 200), ENSURE_REQUIREMENTS, [plan_id=1038]\n      :     :     :     :              +- *(8) Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n      :     :     :     :                 +- *(8) Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n      :     :     :     :                    +- *(8) ColumnarToRow\n      :     :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#196,cr_order_number#210L,cr_return_amount#212,cr_net_loss#220,cr_returned_date_sk#221] Batched: true, DataFilters: [isnotnull(cr_item_sk#196), isnotnull(cr_order_number#210L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :     :     :     +- BroadcastQueryStage 9\n      :     :     :        +- ReusedExchange [d_date_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n      :     :     +- BroadcastQueryStage 11\n      :     :        +- ReusedExchange [i_item_sk#570], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n      :     +- BroadcastQueryStage 12\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1105]\n      :           +- *(11) Filter isnotnull(cp_catalog_page_sk#222)\n      :              +- *(11) ColumnarToRow\n      :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n      +- BroadcastQueryStage 14\n         +- ReusedExchange [p_promo_sk#592], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 592114536,
        "inputRowCount" : 14607374
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 1683639, 1695543, 1683684, 1695007, 1688841, 1688411, 1681465, 1693238, 1690734, 1697678, 1688078, 1699589, 1700454, 1684258, 1692787, 1713787, 1690044, 1683096, 1687762, 1690372, 1697025, 1687049, 1677331, 1695733, 1670705, 1689536, 1680145, 1681261, 1693224, 1678855, 1688937, 1674774, 1700655, 1692268, 1693255, 1686605, 1698503, 1686350, 1691606, 1675286, 1700355, 1687749, 1676025, 1684911, 1700878, 1687718, 1680241, 1700294, 1691118, 1688133, 1687247, 1696611, 1691622, 1700787, 1694953, 1698599, 1689944, 1692074, 1688394, 1688893, 1684052, 1691383, 1690367, 1684920, 1681844, 1693265, 1690819, 1697854, 1680980, 1688794, 1684852, 1688615, 1693809, 1689015, 1686967, 1694217, 1702719, 1694358, 1696077, 1692092, 1687132, 1689327, 1682982, 1678169, 1691279, 1683755, 1695801, 1703928, 1691100, 1688711, 1682002, 1673244, 1685458, 1686727, 1687485, 1692584, 1682619, 1692558, 1697349, 1683187, 1680693, 1690582, 1701963, 1707246, 1687550, 1700209, 1692338, 1690702, 1689393, 1688452, 1689006, 1697452, 1689718, 1707394, 1686997, 1700071, 1701402, 1700050, 1694979, 1681103, 1680059, 1698465, 1689307, 1696720, 1701382, 1684063, 1688107, 1696481, 1690628, 1678456, 1693135, 1704318, 1681580, 1682914, 1701535, 1663485, 1673517, 1682663, 1691232, 1668836, 1708914, 1689065, 1681069, 1686184, 1683090, 1689181, 1674274, 1690948, 1691442, 1682948, 1696099, 1699866, 1695624, 1697044, 1678456, 1685745, 1681352, 1702223, 1683513, 1688526, 1684303, 1686638, 1687930, 1674479, 1684166, 1689127, 1700369, 1691935, 1693243, 1693677, 1692607, 1690709, 1694275, 1699169, 1704919, 1703570, 1681802, 1679347, 1689338, 1690352, 1700034, 1696648, 1685057, 1685047, 1682470, 1689392, 1704230, 1694309, 1696273, 1695875, 1696216, 1685048, 1686809, 1704895, 1674535, 1693043, 1691430, 1688711, 1687917, 1682170 ],
        "4" : [ 28645, 30242, 29426, 30296, 29721, 30531, 30900, 29810, 30985, 31004, 30952, 31125, 32796, 32668, 29833, 30551, 31410, 29086, 30949, 28922, 30090, 29014, 33714, 31577, 31207, 30467, 28248, 30461, 31840, 31414, 31596, 30757, 31109, 31112, 32101, 31318, 30837, 30513, 30961, 30814, 30162, 31191, 30212, 30018, 31657, 31634, 30150, 29628, 29082, 30635, 30659, 29343, 30917, 30991, 30293, 30339, 30000, 30518, 30083, 31171, 30119, 30474, 31444, 31310, 29640, 31615, 30703, 29374, 29863, 30444, 29558, 30632, 30491, 31639, 31010, 29801, 32758, 31438, 30952, 32464, 29168, 32386, 31908, 29019, 29080, 30628, 30901, 31581, 31067, 31711, 30185, 30988, 31505, 30284, 31229, 30013, 30125, 31395, 31099, 31299, 29972, 30369, 30684, 30787, 30795, 30750, 31561, 31605, 32437, 29712, 31007, 31439, 31026, 31219, 30774, 31418, 30359, 31224, 33277, 31954, 30098, 30509, 30728, 31273, 29554, 29557, 30161, 31968, 30169, 31434, 30715, 31822, 31514, 31953, 30372, 30174, 32193, 29364, 29346, 30505, 29151, 30606, 30018, 31241, 30226, 29245, 30852, 30015, 29883, 30046, 31467, 31151, 31712, 29178, 29747, 32271, 31540, 30706, 29968, 32026, 32517, 29916, 31745, 30205, 31991, 30387, 31971, 31110, 31512, 28789, 30205, 30678, 31375, 29999, 30872, 32951, 32208, 30532, 29211, 30544, 31473, 31019, 30351, 31093, 31059, 30946, 30133, 31526, 31153, 30576, 31948, 29705, 29292, 30619, 30519, 30735, 30889, 30320, 32254, 29432 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 3219.0,
        "FinishedTasksDistributionInMs" : [ 352.0, 390.0, 419.0, 429.0, 430.0 ]
      },
      "QueryStageOptimizationId" : 17,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 9815,
        "TotalTasksDurationInMs" : 34818,
        "IOBytes" : {
          "Total" : 328390557,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 328134597,
            "SW" : 255960
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1404113723,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3453485856,
                "rowCount" : 71947622
              },
              "compileTime" : {
                "sizeInBytes" : 3453485856,
                "rowCount" : 71947622
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] "
          },
          "1" : {
            "sign" : 2067912368,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14965105376,
                "rowCount" : 71947622
              },
              "compileTime" : {
                "sizeInBytes" : 14965105376,
                "rowCount" : 71947622
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#714 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#729 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#732 [], xxhash64(ws_promo_sk#246, 42)))) "
          },
          "2" : {
            "sign" : -868994196,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#231, ws_ship_date_sk#232, ws_item_sk#233, ws_bill_customer_sk#234, ws_bill_cdemo_sk#235, ws_bill_hdemo_sk#236, ws_bill_addr_sk#237, ws_ship_customer_sk#238, ws_ship_cdemo_sk#239, ws_ship_hdemo_sk#240, ws_ship_addr_sk#241, ws_web_page_sk#242, ws_web_site_sk#243, ws_ship_mode_sk#244, ws_warehouse_sk#245, ws_promo_sk#246, ws_order_number#247L, ws_quantity#248, ws_wholesale_cost#249, ws_list_price#250, ws_sales_price#251, ws_ext_discount_amt#252, ws_ext_sales_price#253, ws_ext_wholesale_cost#254, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264]\n+- Filter (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#714 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#729 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#732 [], xxhash64(ws_promo_sk#246, 42))))\n   :  :- Project [d_date_sk#611]\n   :  :  +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n   :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n   :  :  +- Project [i_item_sk#120]\n   :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n   :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n   :     +- Project [p_promo_sk#142]\n   :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n   :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#231,ws_ship_date_sk#232,ws_item_sk#233,ws_bill_customer_sk#234,ws_bill_cdemo_sk#235,ws_bill_hdemo_sk#236,ws_bill_addr_sk#237,ws_ship_customer_sk#238,ws_ship_cdemo_sk#239,ws_ship_hdemo_sk#240,ws_ship_addr_sk#241,ws_web_page_sk#242,ws_web_site_sk#243,ws_ship_mode_sk#244,ws_warehouse_sk#245,ws_promo_sk#246,ws_order_number#247L,ws_quantity#248,ws_wholesale_cost#249,ws_list_price#250,ws_sales_price#251,ws_ext_discount_amt#252,ws_ext_sales_price#253,ws_ext_wholesale_cost#254,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1987109894,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3453485856,
            "rowCount" : 71947622,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] Condition : ((((isnotnull(ws_web_site_sk#243) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(ws_item_sk#233, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(ws_promo_sk#246, 42))) "
          },
          "1" : {
            "sign" : -277223740,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3453485856,
            "rowCount" : 71947622,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [7]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#264), dynamicpruningexpression(ws_sold_date_sk#264 IN dynamicpruning#712)] PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)] ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:bigint,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((((isnotnull(ws_web_site_sk#243) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(ws_item_sk#233, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(ws_promo_sk#246, 42)))\n:  :- ReusedSubquery Subquery subquery#717, [id=#317]\n:  +- ReusedSubquery Subquery subquery#720, [id=#330]\n+- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#233,ws_web_site_sk#243,ws_promo_sk#246,ws_order_number#247L,ws_ext_sales_price#253,ws_net_profit#263,ws_sold_date_sk#264] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#243), isnotnull(ws_item_sk#233), isnotnull(ws_promo_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#264), dynamicpruningexpression(ws_sold_date_sk#264 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:bigint,ws_ext_sales_pric...\n      +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3453485856,
        "inputRowCount" : 71947622
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 6443,
        "TotalTasksDurationInMs" : 2272,
        "IOBytes" : {
          "Total" : 27047585,
          "Details" : {
            "IR" : 23848730,
            "IW" : 0,
            "SR" : 0,
            "SW" : 3198855
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1483874036,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#63] "
          },
          "1" : {
            "sign" : -460317325,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63)) "
          },
          "2" : {
            "sign" : -927145728,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#63]\n+- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 6907490,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#63] Input [2]: [d_date_sk#63, d_date#65] "
          },
          "1" : {
            "sign" : -366721565,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#63, d_date#65] Condition : (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63)) "
          },
          "2" : {
            "sign" : 1049502598,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#63, d_date#65] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#63]\n+- Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 360,
        "inputRowCount" : 30
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1780,
        "TotalTasksDurationInMs" : 1775,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "20" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1463529366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 9600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -641713363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -500197164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 6749016,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], true\n      +- Aggregate [channel#701, id#702, spark_grouping_id#700L], [channel#701, id#702, sum(sales#532) AS sales#528, sum(returns#533) AS returns#529, sum(profit#534) AS profit#530]\n         +- Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n            +- Union false, false\n               :- Aggregate [s_store_id#92], [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34)),17,2) AS sales#532, sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)) AS returns#533, sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00))) AS profit#534, store channel AS channel#698, concat(store, s_store_id#92) AS id#699]\n               :  +- Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n               :     +- Join Inner, (ss_store_sk#26 = s_store_sk#91)\n               :        :- Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :  +- Join Inner, (ss_promo_sk#27 = p_promo_sk#142)\n               :        :     :- Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :  +- Join Inner, (ss_item_sk#21 = i_item_sk#120)\n               :        :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :  +- Join Inner, (ss_sold_date_sk#42 = d_date_sk#63)\n               :        :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :     :  +- Join LeftOuter, ((ss_item_sk#21 = sr_item_sk#44) AND (ss_ticket_number#28L = sr_ticket_number#51L))\n               :        :     :     :     :     :- Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ticket_number#28L, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42]\n               :        :     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#42) AND isnotnull(ss_store_sk#26)) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND dynamicpruning#712 [ss_sold_date_sk#42]) AND (might_contain(scalar-subquery#717 [], xxhash64(ss_item_sk#21, 42)) AND might_contain(scalar-subquery#720 [], xxhash64(ss_promo_sk#27, 42))))\n               :        :     :     :     :     :     :  :- Project [d_date_sk#63]\n               :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n               :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n               :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n               :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n               :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n               :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n               :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#20,ss_item_sk#21,ss_customer_sk#22,ss_cdemo_sk#23,ss_hdemo_sk#24,ss_addr_sk#25,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_quantity#29,ss_wholesale_cost#30,ss_list_price#31,ss_sales_price#32,ss_ext_discount_amt#33,ss_ext_sales_price#34,ss_ext_wholesale_cost#35,ss_ext_list_price#36,ss_ext_tax#37,ss_coupon_amt#38,ss_net_paid#39,ss_net_paid_inc_tax#40,ss_net_profit#41,ss_sold_date_sk#42] parquet\n               :        :     :     :     :     +- Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n               :        :     :     :     :        +- Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n               :        :     :     :     :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#43,sr_item_sk#44,sr_customer_sk#45,sr_cdemo_sk#46,sr_hdemo_sk#47,sr_addr_sk#48,sr_store_sk#49,sr_reason_sk#50,sr_ticket_number#51L,sr_return_quantity#52,sr_return_amt#53,sr_return_tax#54,sr_return_amt_inc_tax#55,sr_fee#56,sr_return_ship_cost#57,sr_refunded_cash#58,sr_reversed_charge#59,sr_store_credit#60,sr_net_loss#61,sr_returned_date_sk#62] parquet\n               :        :     :     :     +- Project [d_date_sk#63]\n               :        :     :     :        +- Filter ((isnotnull(d_date#65) AND ((d_date#65 >= 1998-08-04) AND (d_date#65 <= 1998-09-03))) AND isnotnull(d_date_sk#63))\n               :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n               :        :     :     +- Project [i_item_sk#120]\n               :        :     :        +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     +- Project [p_promo_sk#142]\n               :        :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        +- Project [s_store_sk#91, s_store_id#92]\n               :           +- Filter isnotnull(s_store_sk#91)\n               :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92,s_rec_start_date#93,s_rec_end_date#94,s_closed_date_sk#95,s_store_name#96,s_number_employees#97,s_floor_space#98,s_hours#99,s_manager#100,s_market_id#101,s_geography_class#102,s_market_desc#103,s_market_manager#104,s_division_id#105,s_division_name#106,s_company_id#107,s_company_name#108,s_street_number#109,s_street_name#110,s_street_type#111,s_suite_number#112,s_city#113,s_county#114,... 5 more fields] parquet\n               :- Aggregate [cp_catalog_page_id#223], [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#183)),17,2) AS sales#536, sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)) AS returns#537, sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00))) AS profit#538, catalog channel AS channel#708, concat(catalog_page, cp_catalog_page_id#223) AS id#709]\n               :  +- Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :     +- Join Inner, (cs_promo_sk#176 = p_promo_sk#592)\n               :        :- Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n               :        :  +- Join Inner, (cs_catalog_page_sk#172 = cp_catalog_page_sk#222)\n               :        :     :- Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :  +- Join Inner, (cs_item_sk#175 = i_item_sk#570)\n               :        :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :  +- Join Inner, (cs_sold_date_sk#194 = d_date_sk#542)\n               :        :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :  +- Join LeftOuter, ((cs_item_sk#175 = cr_item_sk#196) AND (cs_order_number#177L = cr_order_number#210L))\n               :        :     :     :     :     :- Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_order_number#177L, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194]\n               :        :     :     :     :     :  +- Filter (((((isnotnull(cs_sold_date_sk#194) AND isnotnull(cs_catalog_page_sk#172)) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND dynamicpruning#713 [cs_sold_date_sk#194]) AND (might_contain(scalar-subquery#723 [], xxhash64(cs_item_sk#175, 42)) AND might_contain(scalar-subquery#726 [], xxhash64(cs_promo_sk#176, 42))))\n               :        :     :     :     :     :     :  :- Project [d_date_sk#542]\n               :        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n               :        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n               :        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n               :        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n               :        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               :        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n               :        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n               :        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n               :        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n               :        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n               :        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#161,cs_ship_date_sk#162,cs_bill_customer_sk#163,cs_bill_cdemo_sk#164,cs_bill_hdemo_sk#165,cs_bill_addr_sk#166,cs_ship_customer_sk#167,cs_ship_cdemo_sk#168,cs_ship_hdemo_sk#169,cs_ship_addr_sk#170,cs_call_center_sk#171,cs_catalog_page_sk#172,cs_ship_mode_sk#173,cs_warehouse_sk#174,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_quantity#178,cs_wholesale_cost#179,cs_list_price#180,cs_sales_price#181,cs_ext_discount_amt#182,cs_ext_sales_price#183,cs_ext_wholesale_cost#184,... 10 more fields] parquet\n               :        :     :     :     :     +- Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n               :        :     :     :     :        +- Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n               :        :     :     :     :           +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#195,cr_item_sk#196,cr_refunded_customer_sk#197,cr_refunded_cdemo_sk#198,cr_refunded_hdemo_sk#199,cr_refunded_addr_sk#200,cr_returning_customer_sk#201,cr_returning_cdemo_sk#202,cr_returning_hdemo_sk#203,cr_returning_addr_sk#204,cr_call_center_sk#205,cr_catalog_page_sk#206,cr_ship_mode_sk#207,cr_warehouse_sk#208,cr_reason_sk#209,cr_order_number#210L,cr_return_quantity#211,cr_return_amount#212,cr_return_tax#213,cr_return_amt_inc_tax#214,cr_fee#215,cr_return_ship_cost#216,cr_refunded_cash#217,cr_reversed_charge#218,... 3 more fields] parquet\n               :        :     :     :     +- Project [d_date_sk#542]\n               :        :     :     :        +- Filter ((isnotnull(d_date#544) AND ((d_date#544 >= 1998-08-04) AND (d_date#544 <= 1998-09-03))) AND isnotnull(d_date_sk#542))\n               :        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#542,d_date_id#543,d_date#544,d_month_seq#545,d_week_seq#546,d_quarter_seq#547,d_year#548,d_dow#549,d_moy#550,d_dom#551,d_qoy#552,d_fy_year#553,d_fy_quarter_seq#554,d_fy_week_seq#555,d_day_name#556,d_quarter_name#557,d_holiday#558,d_weekend#559,d_following_holiday#560,d_first_dom#561,d_last_dom#562,d_same_day_ly#563,d_same_day_lq#564,d_current_day#565,... 4 more fields] parquet\n               :        :     :     +- Project [i_item_sk#570]\n               :        :     :        +- Filter ((isnotnull(i_current_price#575) AND (i_current_price#575 > 50.00)) AND isnotnull(i_item_sk#570))\n               :        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#570,i_item_id#571,i_rec_start_date#572,i_rec_end_date#573,i_item_desc#574,i_current_price#575,i_wholesale_cost#576,i_brand_id#577,i_brand#578,i_class_id#579,i_class#580,i_category_id#581,i_category#582,i_manufact_id#583,i_manufact#584,i_size#585,i_formulation#586,i_color#587,i_units#588,i_container#589,i_manager_id#590,i_product_name#591] parquet\n               :        :     +- Project [cp_catalog_page_sk#222, cp_catalog_page_id#223]\n               :        :        +- Filter isnotnull(cp_catalog_page_sk#222)\n               :        :           +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223,cp_start_date_sk#224,cp_end_date_sk#225,cp_department#226,cp_catalog_number#227,cp_catalog_page_number#228,cp_description#229,cp_type#230] parquet\n               :        +- Project [p_promo_sk#592]\n               :           +- Filter ((isnotnull(p_channel_tv#603) AND (p_channel_tv#603 = N)) AND isnotnull(p_promo_sk#592))\n               :              +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#592,p_promo_id#593,p_start_date_sk#594,p_end_date_sk#595,p_item_sk#596,p_cost#597,p_response_target#598,p_promo_name#599,p_channel_dmail#600,p_channel_email#601,p_channel_catalog#602,p_channel_tv#603,p_channel_radio#604,p_channel_press#605,p_channel_event#606,p_channel_demo#607,p_channel_details#608,p_purpose#609,p_discount_active#610] parquet\n               +- Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n                  +- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                     +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n                        :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                        :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n                        :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n                        :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n                        :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n                        :     :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264]\n                        :     :     :     :     :  +- Filter (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#714 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#729 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#732 [], xxhash64(ws_promo_sk#246, 42))))\n                        :     :     :     :     :     :  :- Project [d_date_sk#611]\n                        :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n                        :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n                        :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n                        :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n                        :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                        :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n                        :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n                        :     :     :     :     :     :     +- Project [p_promo_sk#142]\n                        :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                        :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n                        :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#231,ws_ship_date_sk#232,ws_item_sk#233,ws_bill_customer_sk#234,ws_bill_cdemo_sk#235,ws_bill_hdemo_sk#236,ws_bill_addr_sk#237,ws_ship_customer_sk#238,ws_ship_cdemo_sk#239,ws_ship_hdemo_sk#240,ws_ship_addr_sk#241,ws_web_page_sk#242,ws_web_site_sk#243,ws_ship_mode_sk#244,ws_warehouse_sk#245,ws_promo_sk#246,ws_order_number#247L,ws_quantity#248,ws_wholesale_cost#249,ws_list_price#250,ws_sales_price#251,ws_ext_discount_amt#252,ws_ext_sales_price#253,ws_ext_wholesale_cost#254,... 10 more fields] parquet\n                        :     :     :     :     +- Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n                        :     :     :     :        +- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n                        :     :     :     :           +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#265,wr_item_sk#266,wr_refunded_customer_sk#267,wr_refunded_cdemo_sk#268,wr_refunded_hdemo_sk#269,wr_refunded_addr_sk#270,wr_returning_customer_sk#271,wr_returning_cdemo_sk#272,wr_returning_hdemo_sk#273,wr_returning_addr_sk#274,wr_web_page_sk#275,wr_reason_sk#276,wr_order_number#277L,wr_return_quantity#278,wr_return_amt#279,wr_return_tax#280,wr_return_amt_inc_tax#281,wr_fee#282,wr_return_ship_cost#283,wr_refunded_cash#284,wr_reversed_charge#285,wr_account_credit#286,wr_net_loss#287,wr_returned_date_sk#288] parquet\n                        :     :     :     +- Project [d_date_sk#611]\n                        :     :     :        +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n                        :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n                        :     :     +- Project [i_item_sk#639]\n                        :     :        +- Filter ((isnotnull(i_current_price#644) AND (i_current_price#644 > 50.00)) AND isnotnull(i_item_sk#639))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#639,i_item_id#640,i_rec_start_date#641,i_rec_end_date#642,i_item_desc#643,i_current_price#644,i_wholesale_cost#645,i_brand_id#646,i_brand#647,i_class_id#648,i_class#649,i_category_id#650,i_category#651,i_manufact_id#652,i_manufact#653,i_size#654,i_formulation#655,i_color#656,i_units#657,i_container#658,i_manager_id#659,i_product_name#660] parquet\n                        :     +- Project [web_site_sk#289, web_site_id#290]\n                        :        +- Filter isnotnull(web_site_sk#289)\n                        :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290,web_rec_start_date#291,web_rec_end_date#292,web_name#293,web_open_date_sk#294,web_close_date_sk#295,web_class#296,web_manager#297,web_mkt_id#298,web_mkt_class#299,web_mkt_desc#300,web_market_manager#301,web_company_id#302,web_company_name#303,web_street_number#304,web_street_name#305,web_street_type#306,web_suite_number#307,web_city#308,web_county#309,web_state#310,web_zip#311,web_country#312,... 2 more fields] parquet\n                        +- Project [p_promo_sk#661]\n                           +- Filter ((isnotnull(p_channel_tv#672) AND (p_channel_tv#672 = N)) AND isnotnull(p_promo_sk#661))\n                              +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#661,p_promo_id#662,p_start_date_sk#663,p_end_date_sk#664,p_item_sk#665,p_cost#666,p_response_target#667,p_promo_name#668,p_channel_dmail#669,p_channel_email#670,p_channel_catalog#671,p_channel_tv#672,p_channel_radio#673,p_channel_press#674,p_channel_event#675,p_channel_demo#676,p_channel_details#677,p_purpose#678,p_discount_active#679] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1414272231,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [5]: [channel#701, id#702, sales#528, returns#529, profit#530] Arguments: 100, [channel#701 ASC NULLS FIRST, id#702 ASC NULLS FIRST], [channel#701, id#702, sales#528, returns#529, profit#530] "
          },
          "1" : {
            "sign" : 512629690,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 168952,
            "rowCount" : 971,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [channel#701, id#702, spark_grouping_id#700L, sum#743, isEmpty#744, sum#745, isEmpty#746, sum#747, isEmpty#748] Keys [3]: [channel#701, id#702, spark_grouping_id#700L] Functions [3]: [sum(sales#532), sum(returns#533), sum(profit#534)] Aggregate Attributes [3]: [sum(sales#532)#695, sum(returns#533)#696, sum(profit#534)#697] Results [5]: [channel#701, id#702, sum(sales#532)#695 AS sales#528, sum(returns#533)#696 AS returns#529, sum(profit#534)#697 AS profit#530] "
          },
          "2" : {
            "sign" : 2115185890,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 6749016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [channel#701, id#702, spark_grouping_id#700L, sum#743, isEmpty#744, sum#745, isEmpty#746, sum#747, isEmpty#748] Arguments: 27 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[channel#701 ASC NULLS FIRST,id#702 ASC NULLS FIRST], output=[channel#701,id#702,sales#528,returns#529,profit#530])\n+- HashAggregate(keys=[channel#701, id#702, spark_grouping_id#700L], functions=[sum(sales#532), sum(returns#533), sum(profit#534)], output=[channel#701, id#702, sales#528, returns#529, profit#530])\n   +- ShuffleQueryStage 27\n      +- Exchange hashpartitioning(channel#701, id#702, spark_grouping_id#700L, 200), ENSURE_REQUIREMENTS, [plan_id=2299]\n         +- *(31) HashAggregate(keys=[channel#701, id#702, spark_grouping_id#700L], functions=[partial_sum(sales#532), partial_sum(returns#533), partial_sum(profit#534)], output=[channel#701, id#702, spark_grouping_id#700L, sum#743, isEmpty#744, sum#745, isEmpty#746, sum#747, isEmpty#748])\n            +- *(31) Expand [[sales#532, returns#533, profit#534, channel#698, id#699, 0], [sales#532, returns#533, profit#534, channel#698, null, 1], [sales#532, returns#533, profit#534, null, null, 3]], [sales#532, returns#533, profit#534, channel#701, id#702, spark_grouping_id#700L]\n               +- Union\n                  :- *(28) HashAggregate(keys=[s_store_id#92], functions=[sum(UnscaledValue(ss_ext_sales_price#34)), sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))], output=[sales#532, returns#533, profit#534, channel#698, id#699])\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 24\n                  :        +- Exchange hashpartitioning(s_store_id#92, 200), ENSURE_REQUIREMENTS, [plan_id=1719]\n                  :           +- *(21) HashAggregate(keys=[s_store_id#92], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#34)), partial_sum(coalesce(cast(sr_return_amt#53 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#41 - coalesce(cast(sr_net_loss#61 as decimal(12,2)), 0.00)))], output=[s_store_id#92, sum#754L, sum#755, isEmpty#756, sum#757, isEmpty#758])\n                  :              +- *(21) Project [ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61, s_store_id#92]\n                  :                 +- *(21) BroadcastHashJoin [ss_store_sk#26], [s_store_sk#91], Inner, BuildRight, false\n                  :                    :- *(21) Project [ss_store_sk#26, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n                  :                    :  +- *(21) BroadcastHashJoin [ss_promo_sk#27], [p_promo_sk#142], Inner, BuildRight, false\n                  :                    :     :- *(21) Project [ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n                  :                    :     :  +- *(21) BroadcastHashJoin [ss_item_sk#21], [i_item_sk#120], Inner, BuildRight, false\n                  :                    :     :     :- *(21) Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, sr_return_amt#53, sr_net_loss#61]\n                  :                    :     :     :  +- *(21) BroadcastHashJoin [ss_sold_date_sk#42], [d_date_sk#63], Inner, BuildRight, false\n                  :                    :     :     :     :- *(21) Project [ss_item_sk#21, ss_store_sk#26, ss_promo_sk#27, ss_ext_sales_price#34, ss_net_profit#41, ss_sold_date_sk#42, sr_return_amt#53, sr_net_loss#61]\n                  :                    :     :     :     :  +- *(21) SortMergeJoin [ss_item_sk#21, ss_ticket_number#28L], [sr_item_sk#44, sr_ticket_number#51L], LeftOuter\n                  :                    :     :     :     :     :- *(19) Sort [ss_item_sk#21 ASC NULLS FIRST, ss_ticket_number#28L ASC NULLS FIRST], false, 0\n                  :                    :     :     :     :     :  +- AQEShuffleRead coalesced\n                  :                    :     :     :     :     :     +- ShuffleQueryStage 0\n                  :                    :     :     :     :     :        +- Exchange hashpartitioning(ss_item_sk#21, ss_ticket_number#28L, 200), ENSURE_REQUIREMENTS, [plan_id=879]\n                  :                    :     :     :     :     :           +- *(1) Filter ((((isnotnull(ss_store_sk#26) AND isnotnull(ss_item_sk#21)) AND isnotnull(ss_promo_sk#27)) AND might_contain(Subquery subquery#717, [id=#317], xxhash64(ss_item_sk#21, 42))) AND might_contain(Subquery subquery#720, [id=#330], xxhash64(ss_promo_sk#27, 42)))\n                  :                    :     :     :     :     :              :  :- Subquery subquery#717, [id=#317]\n                  :                    :     :     :     :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                                                          +- ShuffleQueryStage 0\n                                                                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1339]\n                                                                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                                                                   +- *(1) Project [i_item_sk#120]\n                                                                                                      +- *(1) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                                                         +- *(1) ColumnarToRow\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n                                                                                       +- == Initial Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=315]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n                                                                                                +- Project [i_item_sk#120]\n                                                                                                   +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n                  :                    :     :     :     :     :              :  +- Subquery subquery#720, [id=#330]\n                  :                    :     :     :     :     :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                                                          +- ShuffleQueryStage 0\n                                                                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1338]\n                                                                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                                                                   +- *(1) Project [p_promo_sk#142]\n                                                                                                      +- *(1) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                                                         +- *(1) ColumnarToRow\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n                                                                                       +- == Initial Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[bloomFilter#719])\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=328]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0)], output=[buf#780])\n                                                                                                +- Project [p_promo_sk#142]\n                                                                                                   +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n                  :                    :     :     :     :     :              +- *(1) ColumnarToRow\n                  :                    :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#21,ss_store_sk#26,ss_promo_sk#27,ss_ticket_number#28L,ss_ext_sales_price#34,ss_net_profit#41,ss_sold_date_sk#42] Batched: true, DataFilters: [isnotnull(ss_store_sk#26), isnotnull(ss_item_sk#21), isnotnull(ss_promo_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#42), dynamicpruningexpression(ss_sold_date_sk#42 IN dynamicpruning#712)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:...\n                  :                    :     :     :     :     :                       +- SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n                  :                    :     :     :     :     :                          +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                             +- == Final Plan ==\n                                                                                                BroadcastQueryStage 1\n                                                                                                +- ReusedExchange [d_date_sk#63], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                                                                                             +- == Initial Plan ==\n                                                                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=861]\n                                                                                                +- Project [d_date_sk#63]\n                                                                                                   +- Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :                    :     :     :     :     +- *(20) Sort [sr_item_sk#44 ASC NULLS FIRST, sr_ticket_number#51L ASC NULLS FIRST], false, 0\n                  :                    :     :     :     :        +- AQEShuffleRead coalesced\n                  :                    :     :     :     :           +- ShuffleQueryStage 1\n                  :                    :     :     :     :              +- Exchange hashpartitioning(sr_item_sk#44, sr_ticket_number#51L, 200), ENSURE_REQUIREMENTS, [plan_id=898]\n                  :                    :     :     :     :                 +- *(2) Project [sr_item_sk#44, sr_ticket_number#51L, sr_return_amt#53, sr_net_loss#61]\n                  :                    :     :     :     :                    +- *(2) Filter (isnotnull(sr_item_sk#44) AND isnotnull(sr_ticket_number#51L))\n                  :                    :     :     :     :                       +- *(2) ColumnarToRow\n                  :                    :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#44,sr_ticket_number#51L,sr_return_amt#53,sr_net_loss#61,sr_returned_date_sk#62] Batched: true, DataFilters: [isnotnull(sr_item_sk#44), isnotnull(sr_ticket_number#51L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n                  :                    :     :     :     +- BroadcastQueryStage 2\n                  :                    :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                  :                    :     :     :           +- *(3) Project [d_date_sk#63]\n                  :                    :     :     :              +- *(3) Filter (((isnotnull(d_date#65) AND (d_date#65 >= 1998-08-04)) AND (d_date#65 <= 1998-09-03)) AND isnotnull(d_date_sk#63))\n                  :                    :     :     :                 +- *(3) ColumnarToRow\n                  :                    :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date#65] Batched: true, DataFilters: [isnotnull(d_date#65), (d_date#65 >= 1998-08-04), (d_date#65 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :                    :     :     +- BroadcastQueryStage 3\n                  :                    :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n                  :                    :     :           +- *(4) Project [i_item_sk#120]\n                  :                    :     :              +- *(4) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n                  :                    :     :                 +- *(4) ColumnarToRow\n                  :                    :     :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n                  :                    :     +- BroadcastQueryStage 4\n                  :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n                  :                    :           +- *(5) Project [p_promo_sk#142]\n                  :                    :              +- *(5) Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n                  :                    :                 +- *(5) ColumnarToRow\n                  :                    :                    +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n                  :                    +- BroadcastQueryStage 5\n                  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=982]\n                  :                          +- *(6) Filter isnotnull(s_store_sk#91)\n                  :                             +- *(6) ColumnarToRow\n                  :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92] Batched: true, DataFilters: [isnotnull(s_store_sk#91)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n                  :- *(29) HashAggregate(keys=[cp_catalog_page_id#223], functions=[sum(UnscaledValue(cs_ext_sales_price#183)), sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))], output=[sales#536, returns#537, profit#538, channel#708, id#709])\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 25\n                  :        +- Exchange hashpartitioning(cp_catalog_page_id#223, 200), ENSURE_REQUIREMENTS, [plan_id=1967]\n                  :           +- *(24) HashAggregate(keys=[cp_catalog_page_id#223], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#183)), partial_sum(coalesce(cast(cr_return_amount#212 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#193 - coalesce(cast(cr_net_loss#220 as decimal(12,2)), 0.00)))], output=[cp_catalog_page_id#223, sum#764L, sum#765, isEmpty#766, sum#767, isEmpty#768])\n                  :              +- *(24) Project [cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n                  :                 +- *(24) BroadcastHashJoin [cs_promo_sk#176], [p_promo_sk#592], Inner, BuildRight, false\n                  :                    :- *(24) Project [cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220, cp_catalog_page_id#223]\n                  :                    :  +- *(24) BroadcastHashJoin [cs_catalog_page_sk#172], [cp_catalog_page_sk#222], Inner, BuildRight, false\n                  :                    :     :- *(24) Project [cs_catalog_page_sk#172, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n                  :                    :     :  +- *(24) BroadcastHashJoin [cs_item_sk#175], [i_item_sk#570], Inner, BuildRight, false\n                  :                    :     :     :- *(24) Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cr_return_amount#212, cr_net_loss#220]\n                  :                    :     :     :  +- *(24) BroadcastHashJoin [cs_sold_date_sk#194], [d_date_sk#542], Inner, BuildRight, false\n                  :                    :     :     :     :- *(24) Project [cs_catalog_page_sk#172, cs_item_sk#175, cs_promo_sk#176, cs_ext_sales_price#183, cs_net_profit#193, cs_sold_date_sk#194, cr_return_amount#212, cr_net_loss#220]\n                  :                    :     :     :     :  +- *(24) SortMergeJoin [cs_item_sk#175, cs_order_number#177L], [cr_item_sk#196, cr_order_number#210L], LeftOuter\n                  :                    :     :     :     :     :- *(22) Sort [cs_item_sk#175 ASC NULLS FIRST, cs_order_number#177L ASC NULLS FIRST], false, 0\n                  :                    :     :     :     :     :  +- AQEShuffleRead coalesced\n                  :                    :     :     :     :     :     +- ShuffleQueryStage 6\n                  :                    :     :     :     :     :        +- Exchange hashpartitioning(cs_item_sk#175, cs_order_number#177L, 200), ENSURE_REQUIREMENTS, [plan_id=1019]\n                  :                    :     :     :     :     :           +- *(7) Filter ((((isnotnull(cs_catalog_page_sk#172) AND isnotnull(cs_item_sk#175)) AND isnotnull(cs_promo_sk#176)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(cs_item_sk#175, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(cs_promo_sk#176, 42)))\n                  :                    :     :     :     :     :              :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n                  :                    :     :     :     :     :              :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n                  :                    :     :     :     :     :              +- *(7) ColumnarToRow\n                  :                    :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#172,cs_item_sk#175,cs_promo_sk#176,cs_order_number#177L,cs_ext_sales_price#183,cs_net_profit#193,cs_sold_date_sk#194] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#172), isnotnull(cs_item_sk#175), isnotnull(cs_promo_sk#176)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#194), dynamicpruningexpression(cs_sold_date_sk#194 IN dynamicpruning#7..., PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_ext_sales_...\n                  :                    :     :     :     :     :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n                  :                    :     :     :     :     +- *(23) Sort [cr_item_sk#196 ASC NULLS FIRST, cr_order_number#210L ASC NULLS FIRST], false, 0\n                  :                    :     :     :     :        +- AQEShuffleRead coalesced\n                  :                    :     :     :     :           +- ShuffleQueryStage 7\n                  :                    :     :     :     :              +- Exchange hashpartitioning(cr_item_sk#196, cr_order_number#210L, 200), ENSURE_REQUIREMENTS, [plan_id=1038]\n                  :                    :     :     :     :                 +- *(8) Project [cr_item_sk#196, cr_order_number#210L, cr_return_amount#212, cr_net_loss#220]\n                  :                    :     :     :     :                    +- *(8) Filter (isnotnull(cr_item_sk#196) AND isnotnull(cr_order_number#210L))\n                  :                    :     :     :     :                       +- *(8) ColumnarToRow\n                  :                    :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#196,cr_order_number#210L,cr_return_amount#212,cr_net_loss#220,cr_returned_date_sk#221] Batched: true, DataFilters: [isnotnull(cr_item_sk#196), isnotnull(cr_order_number#210L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n                  :                    :     :     :     +- BroadcastQueryStage 9\n                  :                    :     :     :        +- ReusedExchange [d_date_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                  :                    :     :     +- BroadcastQueryStage 11\n                  :                    :     :        +- ReusedExchange [i_item_sk#570], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n                  :                    :     +- BroadcastQueryStage 12\n                  :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1105]\n                  :                    :           +- *(11) Filter isnotnull(cp_catalog_page_sk#222)\n                  :                    :              +- *(11) ColumnarToRow\n                  :                    :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#222,cp_catalog_page_id#223] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#222)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n                  :                    +- BroadcastQueryStage 14\n                  :                       +- ReusedExchange [p_promo_sk#592], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n                  +- *(30) HashAggregate(keys=[web_site_id#290], functions=[sum(UnscaledValue(ws_ext_sales_price#253)), sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))], output=[sales#539, returns#540, profit#541, channel#710, id#711])\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 26\n                           +- Exchange hashpartitioning(web_site_id#290, 200), ENSURE_REQUIREMENTS, [plan_id=2153]\n                              +- *(27) HashAggregate(keys=[web_site_id#290], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#253)), partial_sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))], output=[web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778])\n                                 +- *(27) Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                                    +- *(27) BroadcastHashJoin [ws_promo_sk#246], [p_promo_sk#661], Inner, BuildRight, false\n                                       :- *(27) Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n                                       :  +- *(27) BroadcastHashJoin [ws_web_site_sk#243], [web_site_sk#289], Inner, BuildRight, false\n                                       :     :- *(27) Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                                       :     :  +- *(27) BroadcastHashJoin [ws_item_sk#233], [i_item_sk#639], Inner, BuildRight, false\n                                       :     :     :- *(27) Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n                                       :     :     :  +- *(27) BroadcastHashJoin [ws_sold_date_sk#264], [d_date_sk#611], Inner, BuildRight, false\n                                       :     :     :     :- *(27) Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n                                       :     :     :     :  +- *(27) SortMergeJoin [ws_item_sk#233, ws_order_number#247L], [wr_item_sk#266, wr_order_number#277L], LeftOuter\n                                       :     :     :     :     :- *(25) Sort [ws_item_sk#233 ASC NULLS FIRST, ws_order_number#247L ASC NULLS FIRST], false, 0\n                                       :     :     :     :     :  +- AQEShuffleRead coalesced\n                                       :     :     :     :     :     +- ShuffleQueryStage 15\n                                       :     :     :     :     :        +- Exchange hashpartitioning(ws_item_sk#233, ws_order_number#247L, 200), ENSURE_REQUIREMENTS, [plan_id=1165]\n                                       :     :     :     :     :           +- *(13) Filter ((((isnotnull(ws_web_site_sk#243) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(ws_item_sk#233, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(ws_promo_sk#246, 42)))\n                                       :     :     :     :     :              :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n                                       :     :     :     :     :              :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n                                       :     :     :     :     :              +- *(13) ColumnarToRow\n                                       :     :     :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#233,ws_web_site_sk#243,ws_promo_sk#246,ws_order_number#247L,ws_ext_sales_price#253,ws_net_profit#263,ws_sold_date_sk#264] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#243), isnotnull(ws_item_sk#233), isnotnull(ws_promo_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#264), dynamicpruningexpression(ws_sold_date_sk#264 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:bigint,ws_ext_sales_pric...\n                                       :     :     :     :     :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n                                       :     :     :     :     +- *(26) Sort [wr_item_sk#266 ASC NULLS FIRST, wr_order_number#277L ASC NULLS FIRST], false, 0\n                                       :     :     :     :        +- AQEShuffleRead coalesced\n                                       :     :     :     :           +- ShuffleQueryStage 16\n                                       :     :     :     :              +- Exchange hashpartitioning(wr_item_sk#266, wr_order_number#277L, 200), ENSURE_REQUIREMENTS, [plan_id=1184]\n                                       :     :     :     :                 +- *(14) Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n                                       :     :     :     :                    +- *(14) Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n                                       :     :     :     :                       +- *(14) ColumnarToRow\n                                       :     :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#266,wr_order_number#277L,wr_return_amt#279,wr_net_loss#287,wr_returned_date_sk#288] Batched: true, DataFilters: [isnotnull(wr_item_sk#266), isnotnull(wr_order_number#277L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                                       :     :     :     +- BroadcastQueryStage 18\n                                       :     :     :        +- ReusedExchange [d_date_sk#611], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n                                       :     :     +- BroadcastQueryStage 20\n                                       :     :        +- ReusedExchange [i_item_sk#639], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n                                       :     +- BroadcastQueryStage 21\n                                       :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1251]\n                                       :           +- *(17) Filter isnotnull(web_site_sk#289)\n                                       :              +- *(17) ColumnarToRow\n                                       :                 +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290] Batched: true, DataFilters: [isnotnull(web_site_sk#289)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n                                       +- BroadcastQueryStage 23\n                                          +- ReusedExchange [p_promo_sk#661], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 168952,
        "inputRowCount" : 971
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "11" : [ 171, 475, 445, 475, 505, 399, 880, 435, 475, 539, 368, 555, 576, 304, 399, 612, 539, 576, 511, 251, 334, 334, 475, 304, 189, 304, 435, 612, 228, 447, 527, 422, 422, 422, 435, 171, 334, 0, 619, 207, 502, 405, 422, 304, 334, 479, 475, 228, 171, 399, 276, 189, 541, 787, 539, 228, 447, 447, 368, 304, 447, 251, 251, 276, 539, 304, 772, 505, 207, 171, 399, 399, 483, 656, 447, 399, 612, 304, 399, 399, 527, 447, 399, 171, 502, 435, 422, 511, 435, 511, 378, 576, 399, 399, 483, 276, 368, 661, 505, 276, 447, 228, 399, 576, 697, 228, 539, 639, 228, 619, 505, 368, 475, 505, 251, 475, 697, 475, 505, 483, 304, 189, 368, 616, 676, 447, 378, 593, 422, 405, 541, 189, 483, 276, 228, 207, 342, 458, 661, 541, 585, 672, 435, 447, 405, 399, 360, 304, 475, 407, 334, 342, 304, 447, 207, 378, 539, 741, 342, 709, 576, 539, 676, 171, 228, 251, 475, 575, 652, 661, 787, 396, 576, 304, 405, 511, 555, 490, 422, 334, 304, 276, 414, 378, 422, 541, 576, 502, 304, 368, 539, 562, 304, 576, 827, 458, 414, 435, 832, 342 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 20,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 53 ],
      "Objectives" : {
        "DurationInMs" : 293,
        "TotalTasksDurationInMs" : 281,
        "IOBytes" : {
          "Total" : 82745,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 82745,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 940088751,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11856,
                "rowCount" : 988
              },
              "compileTime" : {
                "sizeInBytes" : 11856,
                "rowCount" : 988
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_promo_sk#142] "
          },
          "1" : {
            "sign" : 2063461987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 265772,
                "rowCount" : 988
              },
              "compileTime" : {
                "sizeInBytes" : 265772,
                "rowCount" : 988
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142)) "
          },
          "2" : {
            "sign" : 918578238,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              },
              "compileTime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#142, p_promo_id#143, p_start_date_sk#144, p_end_date_sk#145, p_item_sk#146, p_cost#147, p_response_target#148, p_promo_name#149, p_channel_dmail#150, p_channel_email#151, p_channel_catalog#152, p_channel_tv#153, p_channel_radio#154, p_channel_press#155, p_channel_event#156, p_channel_demo#157, p_channel_details#158, p_purpose#159, p_discount_active#160], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_promo_sk#142]\n+- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n   +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1381425518,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [p_promo_sk#142] Input [2]: [p_promo_sk#142, p_channel_tv#153] "
          },
          "1" : {
            "sign" : 1699919394,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [p_promo_sk#142, p_channel_tv#153] Condition : ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142)) "
          },
          "2" : {
            "sign" : 1371779837,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11856,
            "rowCount" : 988,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.promotion Output [2]: [p_promo_sk#142, p_channel_tv#153] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion] PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)] ReadSchema: struct<p_promo_sk:int,p_channel_tv:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.promotion",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_promo_sk#142]\n+- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n   +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_channel_tv#153] Batched: true, DataFilters: [isnotnull(p_channel_tv#153), (p_channel_tv#153 = N), isnotnull(p_promo_sk#142)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11856,
        "inputRowCount" : 988
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1801,
        "TotalTasksDurationInMs" : 1784,
        "IOBytes" : {
          "Total" : 15468,
          "Details" : {
            "IR" : 12350,
            "IW" : 0,
            "SR" : 0,
            "SW" : 3118
          }
        }
      }
    },
    "18" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -298520063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4169736300,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 4169736300,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#264 = d_date_sk#611) "
          },
          "4" : {
            "sign" : -1522158085,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6775889120,
                "rowCount" : 84698614
              },
              "compileTime" : {
                "sizeInBytes" : 6775889120,
                "rowCount" : 84698614
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#243 = web_site_sk#289) "
          },
          "9" : {
            "sign" : -250855540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4852435280,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 4852435280,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] "
          },
          "5" : {
            "sign" : 484683010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3452011440,
                "rowCount" : 71916905
              },
              "compileTime" : {
                "sizeInBytes" : 3452011440,
                "rowCount" : 71916905
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "10" : {
            "sign" : 714046625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6585447880,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 6585447880,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L)) "
          },
          "6" : {
            "sign" : 946090613,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4027346680,
                "rowCount" : 71916905
              },
              "compileTime" : {
                "sizeInBytes" : 4027346680,
                "rowCount" : 71916905
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#233 = i_item_sk#639) "
          },
          "1" : {
            "sign" : -995038682,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7266853796,
                "rowCount" : 106865497
              },
              "compileTime" : {
                "sizeInBytes" : 7266853796,
                "rowCount" : 106865497
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          },
          "0" : {
            "sign" : 1000028159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1200,
                "rowCount" : 12
              },
              "compileTime" : {
                "sizeInBytes" : 1200,
                "rowCount" : 12
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711] "
          },
          "2" : {
            "sign" : 142622031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8121777772,
                "rowCount" : 106865497
              },
              "compileTime" : {
                "sizeInBytes" : 8121777772,
                "rowCount" : 106865497
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_promo_sk#246 = p_promo_sk#661) "
          },
          "7" : {
            "sign" : 288141032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3613771460,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 3613771460,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] "
          },
          "3" : {
            "sign" : -185090200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6098300208,
                "rowCount" : 84698614
              },
              "compileTime" : {
                "sizeInBytes" : 6098300208,
                "rowCount" : 84698614
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [web_site_id#290], [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#253)),17,2) AS sales#539, sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)) AS returns#540, sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00))) AS profit#541, web channel AS channel#710, concat(web_site, web_site_id#290) AS id#711]\n+- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n   +- Join Inner, (ws_promo_sk#246 = p_promo_sk#661)\n      :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n      :  +- Join Inner, (ws_web_site_sk#243 = web_site_sk#289)\n      :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n      :     :  +- Join Inner, (ws_item_sk#233 = i_item_sk#639)\n      :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n      :     :     :  +- Join Inner, (ws_sold_date_sk#264 = d_date_sk#611)\n      :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n      :     :     :     :  +- Join LeftOuter, ((ws_item_sk#233 = wr_item_sk#266) AND (ws_order_number#247L = wr_order_number#277L))\n      :     :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264]\n      :     :     :     :     :  +- Filter (((((isnotnull(ws_sold_date_sk#264) AND isnotnull(ws_web_site_sk#243)) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND dynamicpruning#714 [ws_sold_date_sk#264]) AND (might_contain(scalar-subquery#729 [], xxhash64(ws_item_sk#233, 42)) AND might_contain(scalar-subquery#732 [], xxhash64(ws_promo_sk#246, 42))))\n      :     :     :     :     :     :  :- Project [d_date_sk#611]\n      :     :     :     :     :     :  :  +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n      :     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n      :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716]\n      :     :     :     :     :     :  :  +- Project [i_item_sk#120]\n      :     :     :     :     :     :  :     +- Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n      :     :     :     :     :     :  :        +- Relation spark_catalog.tpcds_100.item[i_item_sk#120,i_item_id#121,i_rec_start_date#122,i_rec_end_date#123,i_item_desc#124,i_current_price#125,i_wholesale_cost#126,i_brand_id#127,i_brand#128,i_class_id#129,i_class#130,i_category_id#131,i_category#132,i_manufact_id#133,i_manufact#134,i_size#135,i_formulation#136,i_color#137,i_units#138,i_container#139,i_manager_id#140,i_product_name#141] parquet\n      :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(p_promo_sk#142, 42), 988, 24291, 0, 0) AS bloomFilter#719]\n      :     :     :     :     :     :     +- Project [p_promo_sk#142]\n      :     :     :     :     :     :        +- Filter ((isnotnull(p_channel_tv#153) AND (p_channel_tv#153 = N)) AND isnotnull(p_promo_sk#142))\n      :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#142,p_promo_id#143,p_start_date_sk#144,p_end_date_sk#145,p_item_sk#146,p_cost#147,p_response_target#148,p_promo_name#149,p_channel_dmail#150,p_channel_email#151,p_channel_catalog#152,p_channel_tv#153,p_channel_radio#154,p_channel_press#155,p_channel_event#156,p_channel_demo#157,p_channel_details#158,p_purpose#159,p_discount_active#160] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#231,ws_ship_date_sk#232,ws_item_sk#233,ws_bill_customer_sk#234,ws_bill_cdemo_sk#235,ws_bill_hdemo_sk#236,ws_bill_addr_sk#237,ws_ship_customer_sk#238,ws_ship_cdemo_sk#239,ws_ship_hdemo_sk#240,ws_ship_addr_sk#241,ws_web_page_sk#242,ws_web_site_sk#243,ws_ship_mode_sk#244,ws_warehouse_sk#245,ws_promo_sk#246,ws_order_number#247L,ws_quantity#248,ws_wholesale_cost#249,ws_list_price#250,ws_sales_price#251,ws_ext_discount_amt#252,ws_ext_sales_price#253,ws_ext_wholesale_cost#254,... 10 more fields] parquet\n      :     :     :     :     +- Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n      :     :     :     :        +- Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#265,wr_item_sk#266,wr_refunded_customer_sk#267,wr_refunded_cdemo_sk#268,wr_refunded_hdemo_sk#269,wr_refunded_addr_sk#270,wr_returning_customer_sk#271,wr_returning_cdemo_sk#272,wr_returning_hdemo_sk#273,wr_returning_addr_sk#274,wr_web_page_sk#275,wr_reason_sk#276,wr_order_number#277L,wr_return_quantity#278,wr_return_amt#279,wr_return_tax#280,wr_return_amt_inc_tax#281,wr_fee#282,wr_return_ship_cost#283,wr_refunded_cash#284,wr_reversed_charge#285,wr_account_credit#286,wr_net_loss#287,wr_returned_date_sk#288] parquet\n      :     :     :     +- Project [d_date_sk#611]\n      :     :     :        +- Filter ((isnotnull(d_date#613) AND ((d_date#613 >= 1998-08-04) AND (d_date#613 <= 1998-09-03))) AND isnotnull(d_date_sk#611))\n      :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#611,d_date_id#612,d_date#613,d_month_seq#614,d_week_seq#615,d_quarter_seq#616,d_year#617,d_dow#618,d_moy#619,d_dom#620,d_qoy#621,d_fy_year#622,d_fy_quarter_seq#623,d_fy_week_seq#624,d_day_name#625,d_quarter_name#626,d_holiday#627,d_weekend#628,d_following_holiday#629,d_first_dom#630,d_last_dom#631,d_same_day_ly#632,d_same_day_lq#633,d_current_day#634,... 4 more fields] parquet\n      :     :     +- Project [i_item_sk#639]\n      :     :        +- Filter ((isnotnull(i_current_price#644) AND (i_current_price#644 > 50.00)) AND isnotnull(i_item_sk#639))\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#639,i_item_id#640,i_rec_start_date#641,i_rec_end_date#642,i_item_desc#643,i_current_price#644,i_wholesale_cost#645,i_brand_id#646,i_brand#647,i_class_id#648,i_class#649,i_category_id#650,i_category#651,i_manufact_id#652,i_manufact#653,i_size#654,i_formulation#655,i_color#656,i_units#657,i_container#658,i_manager_id#659,i_product_name#660] parquet\n      :     +- Project [web_site_sk#289, web_site_id#290]\n      :        +- Filter isnotnull(web_site_sk#289)\n      :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290,web_rec_start_date#291,web_rec_end_date#292,web_name#293,web_open_date_sk#294,web_close_date_sk#295,web_class#296,web_manager#297,web_mkt_id#298,web_mkt_class#299,web_mkt_desc#300,web_market_manager#301,web_company_id#302,web_company_name#303,web_street_number#304,web_street_name#305,web_street_type#306,web_suite_number#307,web_city#308,web_county#309,web_state#310,web_zip#311,web_country#312,... 2 more fields] parquet\n      +- Project [p_promo_sk#661]\n         +- Filter ((isnotnull(p_channel_tv#672) AND (p_channel_tv#672 = N)) AND isnotnull(p_promo_sk#661))\n            +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#661,p_promo_id#662,p_start_date_sk#663,p_end_date_sk#664,p_item_sk#665,p_cost#666,p_response_target#667,p_promo_name#668,p_channel_dmail#669,p_channel_email#670,p_channel_catalog#671,p_channel_tv#672,p_channel_radio#673,p_channel_press#674,p_channel_event#675,p_channel_demo#676,p_channel_details#677,p_purpose#678,p_discount_active#679] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -2029021368,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 5690304,
            "rowCount" : 88911,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] Arguments: 15 "
          },
          "8" : {
            "sign" : -1454644374,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4169736300,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#264] Right keys [1]: [d_date_sk#611] Join type: Inner Join condition: None "
          },
          "4" : {
            "sign" : 986933749,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6775889120,
            "rowCount" : 84698614,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_web_site_sk#243] Right keys [1]: [web_site_sk#289] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -474877806,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#611] Arguments: 18 "
          },
          "11" : {
            "sign" : -1627968014,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264] Arguments: [ws_item_sk#233 ASC NULLS FIRST, ws_order_number#247L ASC NULLS FIRST], false, 0 "
          },
          "9" : {
            "sign" : 1606132650,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4852435280,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287] Input [11]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_order_number#247L, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] "
          },
          "13" : {
            "sign" : -574211497,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] Arguments: [wr_item_sk#266 ASC NULLS FIRST, wr_order_number#277L ASC NULLS FIRST], false, 0 "
          },
          "16" : {
            "sign" : 498669666,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1572864,
            "rowCount" : 11389,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#639] Arguments: 20 "
          },
          "5" : {
            "sign" : -156671680,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3452011440,
            "rowCount" : 71916905,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] Input [8]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, i_item_sk#639] "
          },
          "10" : {
            "sign" : 1126831453,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 6585447880,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ws_item_sk#233, ws_order_number#247L] Right keys [2]: [wr_item_sk#266, wr_order_number#277L] Join type: LeftOuter Join condition: None "
          },
          "6" : {
            "sign" : 136859337,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4027346680,
            "rowCount" : 71916905,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_item_sk#233] Right keys [1]: [i_item_sk#639] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -1234816057,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7266853796,
            "rowCount" : 106865497,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] Input [7]: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290, p_promo_sk#661] "
          },
          "17" : {
            "sign" : -2059654139,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [web_site_sk#289, web_site_id#290] Arguments: 21 "
          },
          "14" : {
            "sign" : -1591899172,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 287975560,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287] Arguments: 16 "
          },
          "0" : {
            "sign" : 888886065,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1200,
            "rowCount" : 12,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] Keys [1]: [web_site_id#290] Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#253)), partial_sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))] Aggregate Attributes [5]: [sum#769L, sum#770, isEmpty#771, sum#772, isEmpty#773] Results [6]: [web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778] "
          },
          "2" : {
            "sign" : -785737818,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8121777772,
            "rowCount" : 106865497,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_promo_sk#246] Right keys [1]: [p_promo_sk#661] Join type: Inner Join condition: None "
          },
          "18" : {
            "sign" : 1588495214,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056576,
            "rowCount" : 988,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_promo_sk#661] Arguments: 23 "
          },
          "7" : {
            "sign" : -292081873,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3613771460,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287] Input [9]: [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287, d_date_sk#611] "
          },
          "3" : {
            "sign" : -206893020,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6098300208,
            "rowCount" : 84698614,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290] Input [8]: [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_sk#289, web_site_id#290] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 11,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "ShuffleQueryStage",
          "toId" : 13,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "SortMergeJoin",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[web_site_id#290], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#253)), partial_sum(coalesce(cast(wr_return_amt#279 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#263 - coalesce(cast(wr_net_loss#287 as decimal(12,2)), 0.00)))], output=[web_site_id#290, sum#774L, sum#775, isEmpty#776, sum#777, isEmpty#778])\n+- Project [ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n   +- BroadcastHashJoin [ws_promo_sk#246], [p_promo_sk#661], Inner, BuildRight, false\n      :- Project [ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287, web_site_id#290]\n      :  +- BroadcastHashJoin [ws_web_site_sk#243], [web_site_sk#289], Inner, BuildRight, false\n      :     :- Project [ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n      :     :  +- BroadcastHashJoin [ws_item_sk#233], [i_item_sk#639], Inner, BuildRight, false\n      :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, wr_return_amt#279, wr_net_loss#287]\n      :     :     :  +- BroadcastHashJoin [ws_sold_date_sk#264], [d_date_sk#611], Inner, BuildRight, false\n      :     :     :     :- Project [ws_item_sk#233, ws_web_site_sk#243, ws_promo_sk#246, ws_ext_sales_price#253, ws_net_profit#263, ws_sold_date_sk#264, wr_return_amt#279, wr_net_loss#287]\n      :     :     :     :  +- SortMergeJoin [ws_item_sk#233, ws_order_number#247L], [wr_item_sk#266, wr_order_number#277L], LeftOuter\n      :     :     :     :     :- Sort [ws_item_sk#233 ASC NULLS FIRST, ws_order_number#247L ASC NULLS FIRST], false, 0\n      :     :     :     :     :  +- ShuffleQueryStage 15\n      :     :     :     :     :     +- Exchange hashpartitioning(ws_item_sk#233, ws_order_number#247L, 200), ENSURE_REQUIREMENTS, [plan_id=1165]\n      :     :     :     :     :        +- *(13) Filter ((((isnotnull(ws_web_site_sk#243) AND isnotnull(ws_item_sk#233)) AND isnotnull(ws_promo_sk#246)) AND might_contain(ReusedSubquery Subquery subquery#717, [id=#317], xxhash64(ws_item_sk#233, 42))) AND might_contain(ReusedSubquery Subquery subquery#720, [id=#330], xxhash64(ws_promo_sk#246, 42)))\n      :     :     :     :     :           :  :- ReusedSubquery Subquery subquery#717, [id=#317]\n      :     :     :     :     :           :  +- ReusedSubquery Subquery subquery#720, [id=#330]\n      :     :     :     :     :           +- *(13) ColumnarToRow\n      :     :     :     :     :              +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#233,ws_web_site_sk#243,ws_promo_sk#246,ws_order_number#247L,ws_ext_sales_price#253,ws_net_profit#263,ws_sold_date_sk#264] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#243), isnotnull(ws_item_sk#233), isnotnull(ws_promo_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#264), dynamicpruningexpression(ws_sold_date_sk#264 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:bigint,ws_ext_sales_pric...\n      :     :     :     :     :                    +- ReusedSubquery SubqueryBroadcast dynamicpruning#712, 0, [d_date_sk#63], [id=#864]\n      :     :     :     :     +- Sort [wr_item_sk#266 ASC NULLS FIRST, wr_order_number#277L ASC NULLS FIRST], false, 0\n      :     :     :     :        +- ShuffleQueryStage 16\n      :     :     :     :           +- Exchange hashpartitioning(wr_item_sk#266, wr_order_number#277L, 200), ENSURE_REQUIREMENTS, [plan_id=1184]\n      :     :     :     :              +- *(14) Project [wr_item_sk#266, wr_order_number#277L, wr_return_amt#279, wr_net_loss#287]\n      :     :     :     :                 +- *(14) Filter (isnotnull(wr_item_sk#266) AND isnotnull(wr_order_number#277L))\n      :     :     :     :                    +- *(14) ColumnarToRow\n      :     :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#266,wr_order_number#277L,wr_return_amt#279,wr_net_loss#287,wr_returned_date_sk#288] Batched: true, DataFilters: [isnotnull(wr_item_sk#266), isnotnull(wr_order_number#277L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n      :     :     :     +- BroadcastQueryStage 18\n      :     :     :        +- ReusedExchange [d_date_sk#611], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=921]\n      :     :     +- BroadcastQueryStage 20\n      :     :        +- ReusedExchange [i_item_sk#639], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=942]\n      :     +- BroadcastQueryStage 21\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1251]\n      :           +- *(17) Filter isnotnull(web_site_sk#289)\n      :              +- *(17) ColumnarToRow\n      :                 +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#289,web_site_id#290] Batched: true, DataFilters: [isnotnull(web_site_sk#289)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n      +- BroadcastQueryStage 23\n         +- ReusedExchange [p_promo_sk#661], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=963]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 298392896,
        "inputRowCount" : 7300732
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 849788, 856360, 856550, 854032, 847596, 854602, 858523, 852894, 852992, 853057, 856964, 852637, 850298, 856327, 856779, 854682, 847898, 852811, 852485, 863958, 862952, 855584, 856248, 856564, 859664, 869344, 851337, 848000, 842117, 850746, 863790, 853260, 854128, 856364, 856252, 855833, 847568, 860546, 850692, 858914, 847088, 854903, 850834, 867096, 855589, 858406, 856934, 860890, 851952, 857067, 854743, 838351, 859462, 851729, 849886, 852296, 856116, 857120, 852290, 847739, 840988, 861933, 848687, 849881, 846725, 843989, 847110, 850966, 866232, 855901, 862496, 859865, 846994, 855793, 850287, 847188, 860236, 854389, 851047, 864074, 854313, 850152, 852047, 846961, 857844, 847640, 852629, 854897, 854718, 848371, 853023, 862207, 851685, 852987, 864246, 844537, 850798, 850531, 855709, 848957, 857646, 857902, 857263, 846461, 856069, 842036, 853081, 853860, 859579, 854293, 847327, 852897, 848793, 839053, 858878, 863206, 849089, 854959, 855321, 845325, 859603, 857708, 855753, 851046, 862820, 858087, 854798, 846214, 859176, 849648, 855048, 852227, 852699, 854159, 862590, 856004, 855431, 850033, 858611, 841745, 851047, 856400, 852127, 854955, 863479, 857294, 845758, 852137, 856892, 850811, 851781, 859703, 860994, 847577, 849325, 850993, 860885, 855183, 858994, 853660, 853400, 855717, 859488, 848993, 848564, 854288, 854954, 862392, 860318, 852368, 861578, 854978, 852593, 855513, 856026, 850338, 849373, 855884, 847166, 855898, 846081, 866184, 860685, 847981, 849356, 853024, 850979, 851437, 856768, 849995, 849349, 856379, 845775, 849381, 849783, 857887, 852690, 857988, 850899, 858681 ],
        "6" : [ 16312, 16224, 16849, 17046, 16539, 16671, 16442, 17157, 16307, 15998, 16997, 17280, 17598, 16713, 17380, 16527, 16261, 16123, 16167, 16933, 17649, 16252, 16596, 16880, 16390, 16921, 17700, 16758, 16510, 18125, 16526, 17400, 17047, 16606, 16741, 16005, 16917, 16669, 16268, 16489, 18337, 17319, 16420, 17268, 16563, 17455, 15242, 17383, 16542, 17391, 15494, 16555, 16633, 17133, 16536, 16772, 17394, 15542, 16775, 17702, 16479, 15720, 18557, 16582, 17007, 17138, 16590, 16597, 18071, 17558, 15237, 16960, 16616, 16468, 16414, 17495, 16746, 16002, 16811, 15575, 15623, 17180, 17323, 17377, 16338, 15405, 17456, 16021, 17383, 16352, 17305, 17091, 16594, 17002, 17211, 17325, 16638, 16705, 16874, 17963, 16279, 18141, 17189, 16043, 16357, 16327, 16088, 16113, 15289, 17088, 17189, 17345, 16798, 16660, 16245, 16548, 17113, 16225, 16754, 17223, 16583, 16244, 15899, 17285, 16107, 16605, 17382, 17130, 16806, 17961, 15699, 17532, 17077, 17507, 15976, 17109, 17568, 15705, 15085, 16038, 15987, 15895, 17657, 16352, 15682, 17203, 16502, 17624, 16076, 18457, 14924, 16606, 17339, 17518, 16063, 16183, 16403, 16223, 17229, 17294, 17285, 17707, 16432, 17802, 17379, 16336, 15584, 17301, 16695, 16324, 17468, 17275, 17041, 17032, 17521, 15862, 16388, 17398, 17505, 16471, 16079, 17198, 16760, 15162, 16635, 16251, 16920, 16190, 16675, 17667, 17917, 16772, 16474, 17268, 16550, 16885, 16522, 17218, 16002, 17836 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 18,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 6831,
        "TotalTasksDurationInMs" : 9769,
        "IOBytes" : {
          "Total" : 166088220,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 166083997,
            "SW" : 4223
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2104451566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 138960,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0) AS bloomFilter#716], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 669759232,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 138960,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#779] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)#715] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)#715 AS bloomFilter#716] "
          },
          "1" : {
            "sign" : -124029106,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#779] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[bloomFilter#716])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1339]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#120, 42), 11388, 222047, 0, 0)], output=[buf#779])\n         +- *(1) Project [i_item_sk#120]\n            +- *(1) Filter ((isnotnull(i_current_price#125) AND (i_current_price#125 > 50.00)) AND isnotnull(i_item_sk#120))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#120,i_current_price#125] Batched: true, DataFilters: [isnotnull(i_current_price#125), (i_current_price#125 > 50.00), isnotnull(i_item_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 138960,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 30295 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 951,
        "TotalTasksDurationInMs" : 922,
        "IOBytes" : {
          "Total" : 3118,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3118,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1378602978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16080,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 16080,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#91, s_store_id#92] "
          },
          "1" : {
            "sign" : -1540726409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#91) "
          },
          "2" : {
            "sign" : 1000988083,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#91, s_store_id#92, s_rec_start_date#93, s_rec_end_date#94, s_closed_date_sk#95, s_store_name#96, s_number_employees#97, s_floor_space#98, s_hours#99, s_manager#100, s_market_id#101, s_geography_class#102, s_market_desc#103, s_market_manager#104, s_division_id#105, s_division_name#106, s_company_id#107, s_company_name#108, s_street_number#109, s_street_name#110, s_street_type#111, s_suite_number#112, s_city#113, s_county#114, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#91, s_store_id#92]\n+- Filter isnotnull(s_store_sk#91)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92,s_rec_start_date#93,s_rec_end_date#94,s_closed_date_sk#95,s_store_name#96,s_number_employees#97,s_floor_space#98,s_hours#99,s_manager#100,s_market_id#101,s_geography_class#102,s_market_desc#103,s_market_manager#104,s_division_id#105,s_division_name#106,s_company_id#107,s_company_name#108,s_street_number#109,s_street_name#110,s_street_type#111,s_suite_number#112,s_city#113,s_county#114,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1944043213,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16080,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#91, s_store_id#92] Condition : isnotnull(s_store_sk#91) "
          },
          "1" : {
            "sign" : -1271463159,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16080,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#91, s_store_id#92] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_store_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#91)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#91,s_store_id#92] Batched: true, DataFilters: [isnotnull(s_store_sk#91)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16080,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 3626,
        "TotalTasksDurationInMs" : 3621,
        "IOBytes" : {
          "Total" : 15575,
          "Details" : {
            "IR" : 15575,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227371515,
  "SQLEndTimeInMs" : 1702227412723,
  "Objectives" : {
    "DurationInMs" : 41208,
    "IOBytes" : {
      "Total" : 3383201742,
      "Details" : {
        "IR" : 1072205734,
        "IW" : 0,
        "SR" : 1155498004,
        "SW" : 1155498004
      }
    }
  }
}
