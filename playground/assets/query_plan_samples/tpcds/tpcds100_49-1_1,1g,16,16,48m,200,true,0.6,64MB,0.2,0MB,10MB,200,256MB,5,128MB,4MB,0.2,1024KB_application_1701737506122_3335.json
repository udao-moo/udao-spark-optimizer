{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -1601226992,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 8914268,
          "rowCount" : 202597,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#178], [ss_item_sk#178 AS item#12, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#13, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#14] "
        },
        "34" : {
          "sign" : 2057503892,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 2060014053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] "
        },
        "51" : {
          "sign" : -1705100864,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 9304904048,
          "rowCount" : 61216474,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#370 [ss_sold_date_sk#199]) "
        },
        "8" : {
          "sign" : 344983866,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 9719040,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(return_ratio#1) windowspecdefinition(return_ratio#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#3], [return_ratio#1 ASC NULLS FIRST] "
        },
        "19" : {
          "sign" : 850338322,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#88, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : -781167744,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11366488,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [catalog AS channel#11, item#6, return_ratio#7, return_rank#9, currency_rank#10] "
        },
        "4" : {
          "sign" : 1164209577,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 34050800,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "40" : {
          "sign" : -1542094344,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#150, cr_item_sk#151, cr_refunded_customer_sk#152, cr_refunded_cdemo_sk#153, cr_refunded_hdemo_sk#154, cr_refunded_addr_sk#155, cr_returning_customer_sk#156, cr_returning_cdemo_sk#157, cr_returning_hdemo_sk#158, cr_returning_addr_sk#159, cr_call_center_sk#160, cr_catalog_page_sk#161, cr_ship_mode_sk#162, cr_warehouse_sk#163, cr_reason_sk#164, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167, cr_return_tax#168, cr_return_amt_inc_tax#169, cr_fee#170, cr_return_ship_cost#171, cr_refunded_cash#172, cr_reversed_charge#173, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "15" : {
          "sign" : 42111308,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 5779411456,
          "rowCount" : 27785632,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#368 [ws_sold_date_sk#63]) "
        },
        "11" : {
          "sign" : -2091115883,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4852435280,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65)) "
        },
        "9" : {
          "sign" : -2112369140,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 8909120,
          "rowCount" : 202480,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#32], [ws_item_sk#32 AS item#0, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#1, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#2] "
        },
        "44" : {
          "sign" : -1084039382,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 9724656,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(return_ratio#13) windowspecdefinition(return_ratio#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#15], [return_ratio#13 ASC NULLS FIRST] "
        },
        "33" : {
          "sign" : 307201178,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 11390901392,
          "rowCount" : 54763949,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#369 [cs_sold_date_sk#149]) "
        },
        "22" : {
          "sign" : -548910500,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#64, wr_item_sk#65, wr_refunded_customer_sk#66, wr_refunded_cdemo_sk#67, wr_refunded_hdemo_sk#68, wr_refunded_addr_sk#69, wr_returning_customer_sk#70, wr_returning_cdemo_sk#71, wr_returning_hdemo_sk#72, wr_returning_addr_sk#73, wr_web_page_sk#74, wr_reason_sk#75, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78, wr_return_tax#79, wr_return_amt_inc_tax#80, wr_fee#81, wr_return_ship_cost#82, wr_refunded_cash#83, wr_reversed_charge#84, wr_account_credit#85, wr_net_loss#86, wr_returned_date_sk#87], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "56" : {
          "sign" : 1855459122,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3020736,
          "rowCount" : 94398,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210] "
        },
        "55" : {
          "sign" : 1283288084,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#248, d_date_id#249, d_date#250, d_month_seq#251, d_week_seq#252, d_quarter_seq#253, d_year#254, d_dow#255, d_moy#256, d_dom#257, d_qoy#258, d_fy_year#259, d_fy_quarter_seq#260, d_fy_week_seq#261, d_day_name#262, d_quarter_name#263, d_holiday#264, d_weekend#265, d_following_holiday#266, d_first_dom#267, d_last_dom#268, d_same_day_ly#269, d_same_day_lq#270, d_current_day#271, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -996306847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 9742704,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(return_ratio#7) windowspecdefinition(return_ratio#7 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#9], [return_ratio#7 ASC NULLS FIRST] "
        },
        "50" : {
          "sign" : 1844736624,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2203793064,
          "rowCount" : 61216474,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199] "
        },
        "37" : {
          "sign" : 1923360296,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#220, d_date_id#221, d_date#222, d_month_seq#223, d_week_seq#224, d_quarter_seq#225, d_year#226, d_dow#227, d_moy#228, d_dom#229, d_qoy#230, d_fy_year#231, d_fy_quarter_seq#232, d_fy_week_seq#233, d_day_name#234, d_quarter_name#235, d_holiday#236, d_weekend#237, d_following_holiday#238, d_first_dom#239, d_last_dom#240, d_same_day_ly#241, d_same_day_lq#242, d_current_day#243, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 911433278,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2779824200,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#63 = d_date_sk#88) "
        },
        "46" : {
          "sign" : -1566971895,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12509247780,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] "
        },
        "24" : {
          "sign" : -103934063,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 10554596,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((return_rank#9 <= 10) OR (currency_rank#10 <= 10)) "
        },
        "35" : {
          "sign" : 1865989231,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#220] "
        },
        "16" : {
          "sign" : -2098628888,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#30, ws_ship_date_sk#31, ws_item_sk#32, ws_bill_customer_sk#33, ws_bill_cdemo_sk#34, ws_bill_hdemo_sk#35, ws_bill_addr_sk#36, ws_ship_customer_sk#37, ws_ship_cdemo_sk#38, ws_ship_hdemo_sk#39, ws_ship_addr_sk#40, ws_web_page_sk#41, ws_web_site_sk#42, ws_ship_mode_sk#43, ws_warehouse_sk#44, ws_promo_sk#45, ws_order_number#46L, ws_quantity#47, ws_wholesale_cost#48, ws_list_price#49, ws_sales_price#50, ws_ext_discount_amt#51, ws_ext_sales_price#52, ws_ext_wholesale_cost#53, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 135500652,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11338880,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [web AS channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4] "
        },
        "10" : {
          "sign" : -1108746712,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3119422680,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] "
        },
        "48" : {
          "sign" : 431566353,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196] "
        },
        "21" : {
          "sign" : 539304457,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 8841744,
          "rowCount" : 61401,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65))) "
        },
        "54" : {
          "sign" : 355695129,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#254) AND isnotnull(d_moy#256)) AND ((d_year#254 = 2000) AND (d_moy#256 = 12))) AND isnotnull(d_date_sk#248)) "
        },
        "43" : {
          "sign" : -52814510,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 10535044,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#14) windowspecdefinition(currency_ratio#14 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#16], [currency_ratio#14 ASC NULLS FIRST] "
        },
        "57" : {
          "sign" : -1845221019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12082944,
          "rowCount" : 94398,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201))) "
        },
        "32" : {
          "sign" : -1705786456,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1971502164,
          "rowCount" : 54763949,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
        },
        "49" : {
          "sign" : -975679780,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#199 = d_date_sk#248) "
        },
        "6" : {
          "sign" : -310809890,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 10528960,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((return_rank#3 <= 10) OR (currency_rank#4 <= 10)) "
        },
        "36" : {
          "sign" : 875734631,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#226) AND isnotnull(d_moy#228)) AND ((d_year#226 = 2000) AND (d_moy#228 = 12))) AND isnotnull(d_date_sk#220)) "
        },
        "1" : {
          "sign" : 788277037,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 34050800,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 1494584532,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 19487052,
          "rowCount" : 124917,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151))) "
        },
        "17" : {
          "sign" : 1668918259,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#88] "
        },
        "25" : {
          "sign" : -918395600,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 10554596,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#8) windowspecdefinition(currency_ratio#8 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#10], [currency_ratio#8 ASC NULLS FIRST] "
        },
        "14" : {
          "sign" : -886240362,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1000282752,
          "rowCount" : 27785632,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] "
        },
        "47" : {
          "sign" : -304308643,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 19458829880,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201)) "
        },
        "31" : {
          "sign" : 1440748149,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5540650480,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#220) "
        },
        "58" : {
          "sign" : 630062237,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#200, sr_item_sk#201, sr_customer_sk#202, sr_cdemo_sk#203, sr_hdemo_sk#204, sr_addr_sk#205, sr_store_sk#206, sr_reason_sk#207, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210, sr_return_tax#211, sr_return_amt_inc_tax#212, sr_fee#213, sr_return_ship_cost#214, sr_refunded_cash#215, sr_reversed_charge#216, sr_store_credit#217, sr_net_loss#218, sr_returned_date_sk#219], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "53" : {
          "sign" : -592848689,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#248] "
        },
        "42" : {
          "sign" : -301729060,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 10535044,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((return_rank#15 <= 10) OR (currency_rank#16 <= 10)) "
        },
        "0" : {
          "sign" : 877026640,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 5600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 860665384,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1964832,
          "rowCount" : 61401,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78] "
        },
        "27" : {
          "sign" : 925133573,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 8930812,
          "rowCount" : 202973,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#6, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#7, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#8] "
        },
        "2" : {
          "sign" : 1629634426,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 34050800,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [channel#5 ASC NULLS FIRST, return_rank#3 ASC NULLS FIRST, currency_rank#4 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 228881872,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3997344,
          "rowCount" : 124917,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167] "
        },
        "18" : {
          "sign" : -1507908187,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88)) "
        },
        "30" : {
          "sign" : 1247851653,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
        },
        "7" : {
          "sign" : 1715381638,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 10528960,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#2) windowspecdefinition(currency_ratio#2 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#4], [currency_ratio#2 ASC NULLS FIRST] "
        },
        "29" : {
          "sign" : 712727199,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7277467456,
          "rowCount" : 129954776,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
        },
        "41" : {
          "sign" : 1629154672,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11345432,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [store AS channel#17, item#12, return_ratio#13, return_rank#15, currency_rank#16] "
        },
        "3" : {
          "sign" : 1147089450,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 34050800,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4], [channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4] "
        },
        "52" : {
          "sign" : 1676410602,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#177, ss_item_sk#178, ss_customer_sk#179, ss_cdemo_sk#180, ss_hdemo_sk#181, ss_addr_sk#182, ss_store_sk#183, ss_promo_sk#184, ss_ticket_number#185L, ss_quantity#186, ss_wholesale_cost#187, ss_list_price#188, ss_sales_price#189, ss_ext_discount_amt#190, ss_ext_sales_price#191, ss_ext_wholesale_cost#192, ss_ext_list_price#193, ss_ext_tax#194, ss_coupon_amt#195, ss_net_paid#196, ss_net_paid_inc_tax#197, ss_net_profit#198, ss_sold_date_sk#199], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "28" : {
          "sign" : 1119972727,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4678371936,
          "rowCount" : 129954776,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Window",
        "toId" : 7,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Window",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Filter",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "LogicalRelation",
        "toId" : 36,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Filter",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Join",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "LogicalRelation",
        "toId" : 39,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Filter",
        "toId" : 38,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Join",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 26,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Window",
        "toId" : 25,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Window",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "LogicalRelation",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "LogicalRelation",
        "toId" : 54,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Filter",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 51,
        "fromName" : "Filter",
        "toId" : 50,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Join",
        "toId" : 48,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 58,
        "fromName" : "LogicalRelation",
        "toId" : 57,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Filter",
        "toId" : 56,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Join",
        "toId" : 46,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 45,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Aggregate",
        "toId" : 44,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Window",
        "toId" : 43,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Window",
        "toId" : 42,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Filter",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Union",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#5 ASC NULLS FIRST, return_rank#3 ASC NULLS FIRST, currency_rank#4 ASC NULLS FIRST], true\n      +- Aggregate [channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4], [channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4]\n         +- Union false, false\n            :- Project [web AS channel#5, item#0, return_ratio#1, return_rank#3, currency_rank#4]\n            :  +- Filter ((return_rank#3 <= 10) OR (currency_rank#4 <= 10))\n            :     +- Window [rank(currency_ratio#2) windowspecdefinition(currency_ratio#2 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#4], [currency_ratio#2 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#1) windowspecdefinition(return_ratio#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#3], [return_ratio#1 ASC NULLS FIRST]\n            :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#0, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#1, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#2]\n            :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n            :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n            :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n            :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n            :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#368 [ws_sold_date_sk#63])\n            :                    :     :     :  +- Project [d_date_sk#88]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n            :                    :     +- Project [d_date_sk#88]\n            :                    :        +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    +- Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n            :                       +- Filter ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65)))\n            :                          +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#64,wr_item_sk#65,wr_refunded_customer_sk#66,wr_refunded_cdemo_sk#67,wr_refunded_hdemo_sk#68,wr_refunded_addr_sk#69,wr_returning_customer_sk#70,wr_returning_cdemo_sk#71,wr_returning_hdemo_sk#72,wr_returning_addr_sk#73,wr_web_page_sk#74,wr_reason_sk#75,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_return_tax#79,wr_return_amt_inc_tax#80,wr_fee#81,wr_return_ship_cost#82,wr_refunded_cash#83,wr_reversed_charge#84,wr_account_credit#85,wr_net_loss#86,wr_returned_date_sk#87] parquet\n            :- Project [catalog AS channel#11, item#6, return_ratio#7, return_rank#9, currency_rank#10]\n            :  +- Filter ((return_rank#9 <= 10) OR (currency_rank#10 <= 10))\n            :     +- Window [rank(currency_ratio#8) windowspecdefinition(currency_ratio#8 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#10], [currency_ratio#8 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#7) windowspecdefinition(return_ratio#7 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#9], [return_ratio#7 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#6, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#7, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#8]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#220)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#369 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#220]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#226) AND isnotnull(d_moy#228)) AND ((d_year#226 = 2000) AND (d_moy#228 = 12))) AND isnotnull(d_date_sk#220))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#220,d_date_id#221,d_date#222,d_month_seq#223,d_week_seq#224,d_quarter_seq#225,d_year#226,d_dow#227,d_moy#228,d_dom#229,d_qoy#230,d_fy_year#231,d_fy_quarter_seq#232,d_fy_week_seq#233,d_day_name#234,d_quarter_name#235,d_holiday#236,d_weekend#237,d_following_holiday#238,d_first_dom#239,d_last_dom#240,d_same_day_ly#241,d_same_day_lq#242,d_current_day#243,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- Project [d_date_sk#220]\n            :                    :        +- Filter (((isnotnull(d_year#226) AND isnotnull(d_moy#228)) AND ((d_year#226 = 2000) AND (d_moy#228 = 12))) AND isnotnull(d_date_sk#220))\n            :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#220,d_date_id#221,d_date#222,d_month_seq#223,d_week_seq#224,d_quarter_seq#225,d_year#226,d_dow#227,d_moy#228,d_dom#229,d_qoy#230,d_fy_year#231,d_fy_quarter_seq#232,d_fy_week_seq#233,d_day_name#234,d_quarter_name#235,d_holiday#236,d_weekend#237,d_following_holiday#238,d_first_dom#239,d_last_dom#240,d_same_day_ly#241,d_same_day_lq#242,d_current_day#243,... 4 more fields] parquet\n            :                    +- Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n            :                       +- Filter ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151)))\n            :                          +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#150,cr_item_sk#151,cr_refunded_customer_sk#152,cr_refunded_cdemo_sk#153,cr_refunded_hdemo_sk#154,cr_refunded_addr_sk#155,cr_returning_customer_sk#156,cr_returning_cdemo_sk#157,cr_returning_hdemo_sk#158,cr_returning_addr_sk#159,cr_call_center_sk#160,cr_catalog_page_sk#161,cr_ship_mode_sk#162,cr_warehouse_sk#163,cr_reason_sk#164,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_return_tax#168,cr_return_amt_inc_tax#169,cr_fee#170,cr_return_ship_cost#171,cr_refunded_cash#172,cr_reversed_charge#173,... 3 more fields] parquet\n            +- Project [store AS channel#17, item#12, return_ratio#13, return_rank#15, currency_rank#16]\n               +- Filter ((return_rank#15 <= 10) OR (currency_rank#16 <= 10))\n                  +- Window [rank(currency_ratio#14) windowspecdefinition(currency_ratio#14 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#16], [currency_ratio#14 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#13) windowspecdefinition(return_ratio#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#15], [return_ratio#13 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#12, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#13, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#14]\n                           +- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                              +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n                                 :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                 :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#248)\n                                 :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                 :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#370 [ss_sold_date_sk#199])\n                                 :     :     :  +- Project [d_date_sk#248]\n                                 :     :     :     +- Filter (((isnotnull(d_year#254) AND isnotnull(d_moy#256)) AND ((d_year#254 = 2000) AND (d_moy#256 = 12))) AND isnotnull(d_date_sk#248))\n                                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#248,d_date_id#249,d_date#250,d_month_seq#251,d_week_seq#252,d_quarter_seq#253,d_year#254,d_dow#255,d_moy#256,d_dom#257,d_qoy#258,d_fy_year#259,d_fy_quarter_seq#260,d_fy_week_seq#261,d_day_name#262,d_quarter_name#263,d_holiday#264,d_weekend#265,d_following_holiday#266,d_first_dom#267,d_last_dom#268,d_same_day_ly#269,d_same_day_lq#270,d_current_day#271,... 4 more fields] parquet\n                                 :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n                                 :     +- Project [d_date_sk#248]\n                                 :        +- Filter (((isnotnull(d_year#254) AND isnotnull(d_moy#256)) AND ((d_year#254 = 2000) AND (d_moy#256 = 12))) AND isnotnull(d_date_sk#248))\n                                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#248,d_date_id#249,d_date#250,d_month_seq#251,d_week_seq#252,d_quarter_seq#253,d_year#254,d_dow#255,d_moy#256,d_dom#257,d_qoy#258,d_fy_year#259,d_fy_quarter_seq#260,d_fy_week_seq#261,d_day_name#262,d_quarter_name#263,d_holiday#264,d_weekend#265,d_following_holiday#266,d_first_dom#267,d_last_dom#268,d_same_day_ly#269,d_same_day_lq#270,d_current_day#271,... 4 more fields] parquet\n                                 +- Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                                    +- Filter ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201)))\n                                       +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#200,sr_item_sk#201,sr_customer_sk#202,sr_cdemo_sk#203,sr_hdemo_sk#204,sr_addr_sk#205,sr_store_sk#206,sr_reason_sk#207,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_return_tax#211,sr_return_amt_inc_tax#212,sr_fee#213,sr_return_ship_cost#214,sr_refunded_cash#215,sr_reversed_charge#216,sr_store_credit#217,sr_net_loss#218,sr_returned_date_sk#219] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 93603563602,
      "inputRowCount" : 540919963
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1517967102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 417172,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : 2001315282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 136484303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11 "
          },
          "4" : {
            "sign" : -1104840614,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 11890447,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 2786136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 102305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -1119274260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 417172,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : 1320337492,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12 "
          },
          "13" : {
            "sign" : 1770256518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 385082,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 498233913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -664367375,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 979503918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 449262,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 1517376376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : 757185931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11890447,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 414439017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1335585864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 352992,
            "rowCount" : 3677,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))]) "
          },
          "0" : {
            "sign" : -76354368,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2093525846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11890447,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1265546560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 87691,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : -714795570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : 104590599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11890447,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))])\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9342496,
        "inputRowCount" : 207413
      },
      "PD" : {
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227039319,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1926,
        "IOBytes" : {
          "Total" : 764841,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 630555,
            "SW" : 134286
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1659416217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 4090008,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -538267545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : -1695174233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
          },
          "23" : {
            "sign" : 1600729266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425)) "
          },
          "4" : {
            "sign" : -506571879,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 27088936,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 1495262354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7550340697557360,
            "rowCount" : 209731686043260,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
          },
          "11" : {
            "sign" : -1625044803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 4090008,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : -293989655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))]) "
          },
          "22" : {
            "sign" : 609088485,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#425] "
          },
          "26" : {
            "sign" : 1395779888,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 37748736,
            "rowCount" : 123540,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4 "
          },
          "13" : {
            "sign" : 1891788695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 3775392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "24" : {
            "sign" : -255923156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#425, d_date_id#426, d_date#427, d_month_seq#428, d_week_seq#429, d_quarter_seq#430, d_year#431, d_dow#432, d_moy#433, d_dom#434, d_qoy#435, d_fy_year#436, d_fy_quarter_seq#437, d_fy_week_seq#438, d_day_name#439, d_quarter_name#440, d_holiday#441, d_weekend#442, d_following_holiday#443, d_first_dom#444, d_last_dom#445, d_same_day_ly#446, d_same_day_lq#447, d_current_day#448, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 522609648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11744974418422560,
            "rowCount" : 209731686043260,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
          },
          "5" : {
            "sign" : -1839598202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : -1987310583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4404624,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "21" : {
            "sign" : 2057503892,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 8500749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : -484643756,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 27088936,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -207872448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54325837408,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
          },
          "25" : {
            "sign" : -1381901566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#425], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : -1534730733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3460776,
            "rowCount" : 78654,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403] "
          },
          "31" : {
            "sign" : -626866452,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8914268,
            "rowCount" : 202597,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))]) "
          },
          "0" : {
            "sign" : -1741309709,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1243613055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11390901392,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149]) "
          },
          "27" : {
            "sign" : -760470781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11345432,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "2" : {
            "sign" : -581161271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 27088936,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1380718752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 67907296760,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#425) "
          },
          "30" : {
            "sign" : -1120779749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9724656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : 149786723,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "29" : {
            "sign" : 886779538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -1639574568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 27088936,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "28" : {
            "sign" : 1085551810,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Window",
          "toId" : 29,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Window",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))])\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#425]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#425], BroadcastQueryStage 3\n            :                    +- LogicalQueryStage Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29857408484,
        "inputRowCount" : 143801665
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227034341,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6904,
        "IOBytes" : {
          "Total" : 230782380,
          "Details" : {
            "IR" : 229278896,
            "IW" : 0,
            "SR" : 751742,
            "SW" : 751742
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -372592366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1485987591,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 9432,
            "rowCount" : 131,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -509270744,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 9432,
            "rowCount" : 131,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1985572163,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9432,
            "rowCount" : 131,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], HashAggregate(keys=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], functions=[]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], HashAggregate(keys=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9432,
        "inputRowCount" : 131
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227040956,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 289,
        "IOBytes" : {
          "Total" : 12299,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12299,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 843092535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : 2001315282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 129512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 136484303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11 "
          },
          "4" : {
            "sign" : 225337747,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 11619889,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 2786136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 102305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -128463835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : 1320337492,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 118720,
            "rowCount" : 1855,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12 "
          },
          "13" : {
            "sign" : -1331618881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 498233913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -664367375,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 151096,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 21018215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 1517376376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 140304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : 1541653490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11619889,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 414439017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 1704591601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], ShuffleQueryStage 13 "
          },
          "0" : {
            "sign" : -648478599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 702243875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11619889,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1265546560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 87691,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : -714795570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 140304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -778101330,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11619889,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], ShuffleQueryStage 13\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9129916,
        "inputRowCount" : 206084
      },
      "PD" : {
        "4" : [ 43249 ],
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227039475,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1770,
        "IOBytes" : {
          "Total" : 551102,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 458363,
            "SW" : 92739
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1517967102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -538267545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : -626866452,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 121248,
            "rowCount" : 1263,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))]) "
          },
          "4" : {
            "sign" : -2074685802,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 22859682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : -760470781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 154314,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -1119274260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : -293989655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))]) "
          },
          "13" : {
            "sign" : 1770256518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 1085551810,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 143292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -1839598202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 979503918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 8500749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : 1190375365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 22859682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 886779538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 143292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1335585864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))]) "
          },
          "0" : {
            "sign" : 580275952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -207130938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 22859682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1120779749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 132270,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : 149786723,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -304446647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22859682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))])\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))])\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17961180,
        "inputRowCount" : 406716
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 7880.0,
        "FinishedTasksDistributionInMs" : [ 135.0, 226.0, 316.0, 381.0, 1269.0 ]
      },
      "StartTimeInMs" : 1702227035979,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5266,
        "IOBytes" : {
          "Total" : 103975514,
          "Details" : {
            "IR" : 102593217,
            "IW" : 0,
            "SR" : 751742,
            "SW" : 630555
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 843092535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 273954,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : 2001315282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 129512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 136484303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11 "
          },
          "4" : {
            "sign" : 225337747,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 548428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 2786136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 102305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -128463835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 273954,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : 1320337492,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 118720,
            "rowCount" : 1855,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12 "
          },
          "13" : {
            "sign" : -1331618881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 252881,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 498233913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -664367375,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 151096,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 21018215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 295027,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 1517376376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 140304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : 1541653490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 548428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 414439017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 1704591601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 231808,
            "rowCount" : 3622,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], ShuffleQueryStage 13 "
          },
          "0" : {
            "sign" : -648478599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 702243875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 548428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1265546560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 87691,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : -714795570,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 140304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -778101330,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 548428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], ShuffleQueryStage 12\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], ShuffleQueryStage 13\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 430912,
        "inputRowCount" : 6733
      },
      "PD" : {
        "5" : [ 84280 ],
        "4" : [ 43249 ],
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227039660,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1585,
        "IOBytes" : {
          "Total" : 172780,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 160481,
            "SW" : 12299
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1517967102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -538267545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 136484303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11 "
          },
          "4" : {
            "sign" : -1193290779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 22807673,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 2786136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 102305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -1119274260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : -293989655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))]) "
          },
          "13" : {
            "sign" : 1770256518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 498233913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -1839598202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 979503918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 8500749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : -735130282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 22807673,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 414439017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1335585864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))]) "
          },
          "0" : {
            "sign" : -1624921269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -147417675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 22807673,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1265546560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 87691,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : 149786723,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -342137006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22807673,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))])\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))])\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17920316,
        "inputRowCount" : 406709
      },
      "PD" : {
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 26,
        "FinishedTasksTotalTimeInMs" : 10840.0,
        "FinishedTasksDistributionInMs" : [ 135.0, 237.0, 323.0, 418.0, 1269.0 ]
      },
      "StartTimeInMs" : 1702227036370,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4875,
        "IOBytes" : {
          "Total" : 103828132,
          "Details" : {
            "IR" : 102593217,
            "IW" : 0,
            "SR" : 630555,
            "SW" : 604360
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1444003346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19458829880,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201)) "
          },
          "34" : {
            "sign" : 609088485,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#425] "
          },
          "12" : {
            "sign" : -1408770731,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27563346944,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] "
          },
          "51" : {
            "sign" : -1020161819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#453] "
          },
          "8" : {
            "sign" : -1758336753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 850338322,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#88, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1625044803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "4" : {
            "sign" : 148553562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 900638329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "15" : {
            "sign" : 693295207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5779411456,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63]) "
          },
          "11" : {
            "sign" : -1610339899,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4852435280,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65)) "
          },
          "9" : {
            "sign" : -1758667683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397] "
          },
          "44" : {
            "sign" : 1114978974,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12509247780,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] "
          },
          "33" : {
            "sign" : 2057503892,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : -1987310583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "55" : {
            "sign" : -60864962,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3020736,
            "rowCount" : 94398,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210], BroadcastQueryStage 7 "
          },
          "26" : {
            "sign" : -1534730733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403] "
          },
          "50" : {
            "sign" : 1676410602,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#177, ss_item_sk#178, ss_customer_sk#179, ss_cdemo_sk#180, ss_hdemo_sk#181, ss_addr_sk#182, ss_store_sk#183, ss_promo_sk#184, ss_ticket_number#185L, ss_quantity#186, ss_wholesale_cost#187, ss_list_price#188, ss_sales_price#189, ss_ext_discount_amt#190, ss_ext_sales_price#191, ss_ext_wholesale_cost#192, ss_ext_list_price#193, ss_ext_tax#194, ss_coupon_amt#195, ss_net_paid#196, ss_net_paid_inc_tax#197, ss_net_profit#198, ss_sold_date_sk#199], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : -1381901566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#425], BroadcastQueryStage 3 "
          },
          "13" : {
            "sign" : 196990284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34454183680,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#63 = d_date_sk#88) "
          },
          "46" : {
            "sign" : 1493475866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60726742208,
            "rowCount" : 1897710694,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196] "
          },
          "24" : {
            "sign" : 1659416217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "35" : {
            "sign" : 1600729266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425)) "
          },
          "16" : {
            "sign" : -2098628888,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#30, ws_ship_date_sk#31, ws_item_sk#32, ws_bill_customer_sk#33, ws_bill_cdemo_sk#34, ws_bill_hdemo_sk#35, ws_bill_addr_sk#36, ws_ship_customer_sk#37, ws_ship_cdemo_sk#38, ws_ship_hdemo_sk#39, ws_ship_addr_sk#40, ws_web_page_sk#41, ws_web_site_sk#42, ws_ship_mode_sk#43, ws_warehouse_sk#44, ws_promo_sk#45, ws_order_number#46L, ws_quantity#47, ws_wholesale_cost#48, ws_list_price#49, ws_sales_price#50, ws_ext_discount_amt#51, ws_ext_sales_price#52, ws_ext_wholesale_cost#53, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -24353606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : -1954101126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3119422680,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] "
          },
          "48" : {
            "sign" : 914575576,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2203793064,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199] "
          },
          "21" : {
            "sign" : -1566946236,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1964832,
            "rowCount" : 61401,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1 "
          },
          "54" : {
            "sign" : 1440900964,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#453], BroadcastQueryStage 6 "
          },
          "43" : {
            "sign" : -1706590763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8914268,
            "rowCount" : 202597,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409] "
          },
          "32" : {
            "sign" : 1243613055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11390901392,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149]) "
          },
          "49" : {
            "sign" : -618444176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9304904048,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199]) "
          },
          "6" : {
            "sign" : -467021259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "36" : {
            "sign" : -255923156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#425, d_date_id#426, d_date#427, d_month_seq#428, d_week_seq#429, d_quarter_seq#430, d_year#431, d_dow#432, d_moy#433, d_dom#434, d_qoy#435, d_fy_year#436, d_fy_quarter_seq#437, d_fy_week_seq#438, d_day_name#439, d_quarter_name#440, d_holiday#441, d_weekend#442, d_following_holiday#443, d_first_dom#444, d_last_dom#445, d_same_day_ly#446, d_same_day_lq#447, d_current_day#448, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1326418287,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 705620254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11345432,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "17" : {
            "sign" : 1668918259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#88] "
          },
          "25" : {
            "sign" : 1891788695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1197702607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] "
          },
          "47" : {
            "sign" : -2032982509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 75908427760,
            "rowCount" : 1897710694,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#199 = d_date_sk#453) "
          },
          "31" : {
            "sign" : -1695174233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
          },
          "53" : {
            "sign" : 122916108,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#453, d_date_id#454, d_date#455, d_month_seq#456, d_week_seq#457, d_quarter_seq#458, d_year#459, d_dow#460, d_moy#461, d_dom#462, d_qoy#463, d_fy_year#464, d_fy_quarter_seq#465, d_fy_week_seq#466, d_day_name#467, d_quarter_name#468, d_holiday#469, d_weekend#470, d_following_holiday#471, d_first_dom#472, d_last_dom#473, d_same_day_ly#474, d_same_day_lq#475, d_current_day#476, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "42" : {
            "sign" : -1093541376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9724656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 352347968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 49832812,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#88], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 1495262354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4678371936,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
          },
          "2" : {
            "sign" : -1397669910,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1395779888,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4 "
          },
          "18" : {
            "sign" : -1507908187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88)) "
          },
          "30" : {
            "sign" : -1380718752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 67907296760,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#425) "
          },
          "7" : {
            "sign" : -749417897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "29" : {
            "sign" : -207872448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54325837408,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
          },
          "41" : {
            "sign" : -1978623953,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -826003123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "52" : {
            "sign" : -1891606249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453)) "
          },
          "28" : {
            "sign" : 522609648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7277467456,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Aggregate",
          "toId" : 25,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Window",
          "toId" : 24,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Window",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "LogicalRelation",
          "toId" : 49,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "LogicalRelation",
          "toId" : 52,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Filter",
          "toId" : 51,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Project",
          "toId" : 49,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 49,
          "fromName" : "Filter",
          "toId" : 48,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Project",
          "toId" : 47,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalQueryStage",
          "toId" : 47,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Join",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 45,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 45,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Join",
          "toId" : 44,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Project",
          "toId" : 43,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Aggregate",
          "toId" : 42,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Window",
          "toId" : 41,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Window",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n            :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n            :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n            :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n            :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n            :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n            :                    :     :     :  +- Project [d_date_sk#88]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#88], BroadcastQueryStage 0\n            :                    +- LogicalQueryStage Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#425]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#425], BroadcastQueryStage 3\n            :                    +- LogicalQueryStage Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409]\n                           +- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                              +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n                                 :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                 :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#453)\n                                 :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                 :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199])\n                                 :     :     :  +- Project [d_date_sk#453]\n                                 :     :     :     +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                                 :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n                                 :     +- LogicalQueryStage Project [d_date_sk#453], BroadcastQueryStage 6\n                                 +- LogicalQueryStage Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86592404368,
        "inputRowCount" : 490582803
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 18,
        "FinishedTasksNum" : 1371,
        "FinishedTasksTotalTimeInMs" : 28277.0,
        "FinishedTasksDistributionInMs" : [ 11.0, 14.0, 16.0, 19.0, 458.0 ]
      },
      "StartTimeInMs" : 1702227021018,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20227,
        "IOBytes" : {
          "Total" : 986354794,
          "Details" : {
            "IR" : 984851310,
            "IW" : 0,
            "SR" : 751742,
            "SW" : 751742
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1444003346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5042171768901344,
            "rowCount" : 90038781587524,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201)) "
          },
          "34" : {
            "sign" : 609088485,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#425] "
          },
          "12" : {
            "sign" : -1408770731,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27563346944,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] "
          },
          "51" : {
            "sign" : -1020161819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#453] "
          },
          "8" : {
            "sign" : -1758336753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 850338322,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#88, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1625044803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "4" : {
            "sign" : 148553562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 25167016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 900638329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2285816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "15" : {
            "sign" : 693295207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5779411456,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63]) "
          },
          "11" : {
            "sign" : -1610339899,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4852435280,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65)) "
          },
          "9" : {
            "sign" : -1758667683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397] "
          },
          "44" : {
            "sign" : 1114978974,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3241396137150864,
            "rowCount" : 90038781587524,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] "
          },
          "33" : {
            "sign" : 2057503892,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : -1987310583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "55" : {
            "sign" : -60864962,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35651584,
            "rowCount" : 47446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210], BroadcastQueryStage 7 "
          },
          "26" : {
            "sign" : -1534730733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403] "
          },
          "50" : {
            "sign" : 1676410602,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#177, ss_item_sk#178, ss_customer_sk#179, ss_cdemo_sk#180, ss_hdemo_sk#181, ss_addr_sk#182, ss_store_sk#183, ss_promo_sk#184, ss_ticket_number#185L, ss_quantity#186, ss_wholesale_cost#187, ss_list_price#188, ss_sales_price#189, ss_ext_discount_amt#190, ss_ext_sales_price#191, ss_ext_wholesale_cost#192, ss_ext_list_price#193, ss_ext_tax#194, ss_coupon_amt#195, ss_net_paid#196, ss_net_paid_inc_tax#197, ss_net_profit#198, ss_sold_date_sk#199], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : -1381901566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#425], BroadcastQueryStage 3 "
          },
          "13" : {
            "sign" : 196990284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34454183680,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#63 = d_date_sk#88) "
          },
          "46" : {
            "sign" : 1493475866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60726742208,
            "rowCount" : 1897710694,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196] "
          },
          "24" : {
            "sign" : 1659416217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "35" : {
            "sign" : 1600729266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425)) "
          },
          "16" : {
            "sign" : -2098628888,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#30, ws_ship_date_sk#31, ws_item_sk#32, ws_bill_customer_sk#33, ws_bill_cdemo_sk#34, ws_bill_hdemo_sk#35, ws_bill_addr_sk#36, ws_ship_customer_sk#37, ws_ship_cdemo_sk#38, ws_ship_hdemo_sk#39, ws_ship_addr_sk#40, ws_web_page_sk#41, ws_web_site_sk#42, ws_ship_mode_sk#43, ws_warehouse_sk#44, ws_promo_sk#45, ws_order_number#46L, ws_quantity#47, ws_wholesale_cost#48, ws_list_price#49, ws_sales_price#50, ws_ext_discount_amt#51, ws_ext_sales_price#52, ws_ext_wholesale_cost#53, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -24353606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : -1954101126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3119422680,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] "
          },
          "48" : {
            "sign" : 914575576,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2203793064,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199] "
          },
          "21" : {
            "sign" : -1566946236,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1964832,
            "rowCount" : 61401,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1 "
          },
          "54" : {
            "sign" : 1440900964,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#453], BroadcastQueryStage 6 "
          },
          "43" : {
            "sign" : -1706590763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1934152,
            "rowCount" : 43958,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409] "
          },
          "32" : {
            "sign" : 1243613055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11390901392,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149]) "
          },
          "49" : {
            "sign" : -618444176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9304904048,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199]) "
          },
          "6" : {
            "sign" : -467021259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "36" : {
            "sign" : -255923156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#425, d_date_id#426, d_date#427, d_month_seq#428, d_week_seq#429, d_quarter_seq#430, d_year#431, d_dow#432, d_moy#433, d_dom#434, d_qoy#435, d_fy_year#436, d_fy_quarter_seq#437, d_fy_week_seq#438, d_day_name#439, d_quarter_name#440, d_holiday#441, d_weekend#442, d_following_holiday#443, d_first_dom#444, d_last_dom#445, d_same_day_ly#446, d_same_day_lq#447, d_current_day#448, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1326418287,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 25167016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 705620254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2461648,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "17" : {
            "sign" : 1668918259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#88] "
          },
          "25" : {
            "sign" : 1891788695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1197702607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] "
          },
          "47" : {
            "sign" : -2032982509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 75908427760,
            "rowCount" : 1897710694,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#199 = d_date_sk#453) "
          },
          "31" : {
            "sign" : -1695174233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
          },
          "53" : {
            "sign" : 122916108,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#453, d_date_id#454, d_date#455, d_month_seq#456, d_week_seq#457, d_quarter_seq#458, d_year#459, d_dow#460, d_moy#461, d_dom#462, d_qoy#463, d_fy_year#464, d_fy_quarter_seq#465, d_fy_week_seq#466, d_day_name#467, d_quarter_name#468, d_holiday#469, d_weekend#470, d_following_holiday#471, d_first_dom#472, d_last_dom#473, d_same_day_ly#474, d_same_day_lq#475, d_current_day#476, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "42" : {
            "sign" : -1093541376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2109984,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 352347968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 49832812,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#88], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 1495262354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4678371936,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
          },
          "2" : {
            "sign" : -1397669910,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 25167016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1395779888,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4 "
          },
          "18" : {
            "sign" : -1507908187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88)) "
          },
          "30" : {
            "sign" : -1380718752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 67907296760,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#425) "
          },
          "7" : {
            "sign" : -749417897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "29" : {
            "sign" : -207872448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54325837408,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
          },
          "41" : {
            "sign" : -1978623953,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2285816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -826003123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25167016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "52" : {
            "sign" : -1891606249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453)) "
          },
          "28" : {
            "sign" : 522609648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7277467456,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Aggregate",
          "toId" : 25,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Window",
          "toId" : 24,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Window",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "LogicalRelation",
          "toId" : 49,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "LogicalRelation",
          "toId" : 52,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Filter",
          "toId" : 51,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Project",
          "toId" : 49,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 49,
          "fromName" : "Filter",
          "toId" : 48,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Project",
          "toId" : 47,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalQueryStage",
          "toId" : 47,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Join",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 45,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 45,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Join",
          "toId" : 44,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Project",
          "toId" : 43,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Aggregate",
          "toId" : 42,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Window",
          "toId" : 41,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Window",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n            :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n            :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n            :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n            :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n            :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n            :                    :     :     :  +- Project [d_date_sk#88]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#88], BroadcastQueryStage 0\n            :                    +- LogicalQueryStage Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#425]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#425], BroadcastQueryStage 3\n            :                    +- LogicalQueryStage Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409]\n                           +- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                              +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n                                 :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                 :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#453)\n                                 :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                 :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199])\n                                 :     :     :  +- Project [d_date_sk#453]\n                                 :     :     :     +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                                 :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n                                 :     +- LogicalQueryStage Project [d_date_sk#453], BroadcastQueryStage 6\n                                 +- LogicalQueryStage Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86625035216,
        "inputRowCount" : 490535851
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 17,
        "FinishedTasksNum" : 41,
        "FinishedTasksTotalTimeInMs" : 15586.0,
        "FinishedTasksDistributionInMs" : [ 233.0, 333.0, 370.0, 426.0, 551.0 ]
      },
      "StartTimeInMs" : 1702227032075,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9170,
        "IOBytes" : {
          "Total" : 573175735,
          "Details" : {
            "IR" : 571672251,
            "IW" : 0,
            "SR" : 751742,
            "SW" : 751742
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1517967102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -538267545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 196258,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 136484303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11 "
          },
          "4" : {
            "sign" : -1193290779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 11697759,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "15" : {
            "sign" : 2786136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 102305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "11" : {
            "sign" : -1119274260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "9" : {
            "sign" : -293989655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 179904,
            "rowCount" : 1874,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))]) "
          },
          "13" : {
            "sign" : 1770256518,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : 498233913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "5" : {
            "sign" : -1839598202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 228966,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : 979503918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "6" : {
            "sign" : 8500749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 212612,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "1" : {
            "sign" : -735130282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11697759,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 414439017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94998,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1335585864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))]) "
          },
          "0" : {
            "sign" : -1624921269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -147417675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11697759,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1265546560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 87691,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : 149786723,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 212612,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : -342137006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11697759,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))])\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))])\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9191100,
        "inputRowCount" : 206103
      },
      "PD" : {
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 13527.0,
        "FinishedTasksDistributionInMs" : [ 135.0, 222.0, 330.0, 942.0, 3083.0 ]
      },
      "StartTimeInMs" : 1702227039158,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2087,
        "IOBytes" : {
          "Total" : 70279225,
          "Details" : {
            "IR" : 69216502,
            "IW" : 0,
            "SR" : 630555,
            "SW" : 432168
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 609088485,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#425] "
          },
          "12" : {
            "sign" : -1408770731,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27563346944,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] "
          },
          "8" : {
            "sign" : -1758336753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 3830784,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : 850338322,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#88, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1625044803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "4" : {
            "sign" : -1325895679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 27181168,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 1085551810,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "15" : {
            "sign" : 693295207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5779411456,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63]) "
          },
          "11" : {
            "sign" : -1610339899,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2929315368983808,
            "rowCount" : 52309203017568,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65)) "
          },
          "9" : {
            "sign" : -1758667683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3511552,
            "rowCount" : 79808,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397] "
          },
          "33" : {
            "sign" : 2057503892,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : -1987310583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "26" : {
            "sign" : -1534730733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403] "
          },
          "37" : {
            "sign" : -1381901566,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#425], BroadcastQueryStage 3 "
          },
          "13" : {
            "sign" : 196990284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34454183680,
            "rowCount" : 861354592,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#63 = d_date_sk#88) "
          },
          "24" : {
            "sign" : 1659416217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "35" : {
            "sign" : 1600729266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425)) "
          },
          "16" : {
            "sign" : -2098628888,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#30, ws_ship_date_sk#31, ws_item_sk#32, ws_bill_customer_sk#33, ws_bill_cdemo_sk#34, ws_bill_hdemo_sk#35, ws_bill_addr_sk#36, ws_ship_customer_sk#37, ws_ship_cdemo_sk#38, ws_ship_hdemo_sk#39, ws_ship_addr_sk#40, ws_web_page_sk#41, ws_web_site_sk#42, ws_ship_mode_sk#43, ws_warehouse_sk#44, ws_promo_sk#45, ws_order_number#46L, ws_quantity#47, ws_wholesale_cost#48, ws_list_price#49, ws_sales_price#50, ws_ext_discount_amt#51, ws_ext_sales_price#52, ws_ext_wholesale_cost#53, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -24353606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4469248,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "10" : {
            "sign" : -1954101126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1883131308632448,
            "rowCount" : 52309203017568,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] "
          },
          "21" : {
            "sign" : -1566946236,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35651584,
            "rowCount" : 60729,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1 "
          },
          "43" : {
            "sign" : -626866452,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8914268,
            "rowCount" : 202597,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))]) "
          },
          "32" : {
            "sign" : 1243613055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11390901392,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149]) "
          },
          "6" : {
            "sign" : -467021259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 4150016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          },
          "36" : {
            "sign" : -255923156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#425, d_date_id#426, d_date#427, d_month_seq#428, d_week_seq#429, d_quarter_seq#430, d_year#431, d_dow#432, d_moy#433, d_dom#434, d_qoy#435, d_fy_year#436, d_fy_quarter_seq#437, d_fy_week_seq#438, d_day_name#439, d_quarter_name#440, d_holiday#441, d_weekend#442, d_following_holiday#443, d_first_dom#444, d_last_dom#445, d_same_day_ly#446, d_same_day_lq#447, d_current_day#448, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1694897072,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 27181168,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -760470781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11345432,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "17" : {
            "sign" : 1668918259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#88] "
          },
          "25" : {
            "sign" : 1891788695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : -1197702607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] "
          },
          "31" : {
            "sign" : -1695174233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
          },
          "42" : {
            "sign" : -1120779749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 9724656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 1989149659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 49832812,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#88], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 1495262354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4678371936,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
          },
          "2" : {
            "sign" : -1927698639,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 27181168,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1395779888,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4 "
          },
          "18" : {
            "sign" : -1507908187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88)) "
          },
          "30" : {
            "sign" : -1380718752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 67907296760,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#425) "
          },
          "7" : {
            "sign" : -749417897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 4150016,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "29" : {
            "sign" : -207872448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54325837408,
            "rowCount" : 1697682419,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
          },
          "41" : {
            "sign" : 886779538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : 254655028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 27181168,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "28" : {
            "sign" : 522609648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7277467456,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Window",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Aggregate",
          "toId" : 25,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Window",
          "toId" : 24,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Window",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalQueryStage",
          "toId" : 42,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Window",
          "toId" : 41,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Window",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n            :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n            :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n            :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n            :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n            :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n            :                    :     :     :  +- Project [d_date_sk#88]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#88], BroadcastQueryStage 0\n            :                    +- LogicalQueryStage Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78], BroadcastQueryStage 1\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#425]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- LogicalQueryStage Project [d_date_sk#425], BroadcastQueryStage 3\n            :                    +- LogicalQueryStage Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167], BroadcastQueryStage 4\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 44824042172,
        "inputRowCount" : 215644946
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 1416.0,
        "FinishedTasksDistributionInMs" : [ 335.0, 348.0, 357.0, 376.0, 376.0 ]
      },
      "StartTimeInMs" : 1702227032824,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8421,
        "IOBytes" : {
          "Total" : 450734479,
          "Details" : {
            "IR" : 449230995,
            "IW" : 0,
            "SR" : 751742,
            "SW" : 751742
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -293989655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 179904,
                "rowCount" : 1874
              },
              "compileTime" : {
                "sizeInBytes" : 8909120,
                "rowCount" : 202480
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397], HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2131101190,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 179904,
            "rowCount" : 1874,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586] Keys [1]: [ws_item_sk#32] Functions [4]: [sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))] Aggregate Attributes [4]: [sum(coalesce(wr_return_quantity#77, 0))#483L, sum(coalesce(ws_quantity#47, 0))#484L, sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00))#485, sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))#486] Results [3]: [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0))#483L as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0))#484L as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00))#485 as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))#486 as decimal(15,4))) AS currency_ratio#397] "
          },
          "1" : {
            "sign" : -1320267164,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[item#395, return_ratio#396, currency_ratio#397])\n+- ShuffleQueryStage 9\n   +- Exchange hashpartitioning(ws_item_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1500]\n      +- *(8) HashAggregate(keys=[ws_item_sk#32], functions=[partial_sum(coalesce(wr_return_quantity#77, 0)), partial_sum(coalesce(ws_quantity#47, 0)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586])\n         +- *(8) Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            +- *(8) BroadcastHashJoin [ws_order_number#46L, ws_item_sk#32], [wr_order_number#76L, wr_item_sk#65], Inner, BuildRight, false\n               :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n               :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#63], [d_date_sk#88], Inner, BuildRight, false\n               :     :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n               :     :  +- *(8) Filter (((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32))\n               :     :     +- *(8) ColumnarToRow\n               :     :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#32,ws_order_number#46L,ws_quantity#47,ws_net_paid#58,ws_net_profit#62,ws_sold_date_sk#63] Batched: true, DataFilters: [isnotnull(ws_net_profit#62), isnotnull(ws_net_paid#58), isnotnull(ws_quantity#47), (ws_net_profi..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#63), dynamicpruningexpression(ws_sold_date_sk#63 IN dynamicpruning#574)], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_prof...\n               :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n               :     +- BroadcastQueryStage 0\n               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n               :           +- *(1) Project [d_date_sk#88]\n               :              +- *(1) Filter ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88))\n               :                 +- *(1) ColumnarToRow\n               :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_year#94,d_moy#96] Batched: true, DataFilters: [isnotnull(d_year#94), isnotnull(d_moy#96), (d_year#94 = 2000), (d_moy#96 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               +- BroadcastQueryStage 1\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=518]\n                     +- *(2) Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n                        +- *(2) Filter (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65))\n                           +- *(2) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#65,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_returned_date_sk#87] Batched: true, DataFilters: [isnotnull(wr_return_amt#78), (wr_return_amt#78 > 10000.00), isnotnull(wr_order_number#76L), isno..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 179904,
        "inputRowCount" : 1874
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 602, 691, 897, 930, 1449, 964, 1159, 1000, 947, 909, 1187, 1272, 1444, 340, 1237, 730, 1042, 987, 1567, 858, 691, 652, 1003, 613, 741, 529, 758, 1008, 1238, 1170, 1003, 691, 730, 680, 1053, 585, 1131, 847, 841, 1114, 864, 780, 1203, 1042, 552, 819, 1237, 446, 981, 1133, 1491, 858, 847, 1368, 847, 1070, 870, 909, 446, 340, 975, 741, 493, 1014, 680, 1159, 730, 624, 897, 864, 1326, 886, 1047, 1078, 727, 975, 547, 792, 1143, 273, 741, 390, 652, 903, 1014, 1014, 1003, 1332, 1047, 836, 691, 765, 468, 390, 1510, 838, 875, 819, 1053, 981, 1282, 961, 390, 1131, 652, 468, 891, 1080, 937, 1348, 911, 847, 1170, 858, 468, 1187, 975, 841, 1148, 780, 1086, 930, 988, 1394, 781, 1077, 870, 1070, 663, 1192, 1109, 1460, 507, 847, 919, 847, 1187, 691, 1092, 507, 1176, 808, 1078, 624, 870, 727, 1131, 819, 1198, 1170, 1210, 780, 730, 769, 574, 1808, 719, 774, 1265, 714, 1003, 602, 1159, 1009, 792, 925, 1199, 536, 1192, 1109, 891, 769, 758, 847, 540, 496, 1042, 1196, 883, 546, 507, 794, 769, 702, 1170, 1147, 775, 858, 836, 741, 964, 468, 624, 1332, 847, 1238, 546, 1198, 992, 820 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 13527.0,
        "FinishedTasksDistributionInMs" : [ 135.0, 222.0, 330.0, 942.0, 3083.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 233,
        "TotalTasksDurationInMs" : 227,
        "IOBytes" : {
          "Total" : 213739,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 172192,
            "SW" : 41547
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -428596782,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#199 = d_date_sk#453) "
          },
          "5" : {
            "sign" : 914575576,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2203793064,
                "rowCount" : 61216474
              },
              "compileTime" : {
                "sizeInBytes" : 2203793064,
                "rowCount" : 61216474
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199] "
          },
          "6" : {
            "sign" : -618444176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9304904048,
                "rowCount" : 61216474
              },
              "compileTime" : {
                "sizeInBytes" : 9304904048,
                "rowCount" : 61216474
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199]) "
          },
          "1" : {
            "sign" : 648683859,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12509247780,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 12509247780,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] "
          },
          "0" : {
            "sign" : -1262909746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8914268,
                "rowCount" : 202597
              },
              "compileTime" : {
                "sizeInBytes" : 8914268,
                "rowCount" : 202597
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409] "
          },
          "2" : {
            "sign" : -1366678233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19458829880,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 19458829880,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201)) "
          },
          "7" : {
            "sign" : 1676410602,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#177, ss_item_sk#178, ss_customer_sk#179, ss_cdemo_sk#180, ss_hdemo_sk#181, ss_addr_sk#182, ss_store_sk#183, ss_promo_sk#184, ss_ticket_number#185L, ss_quantity#186, ss_wholesale_cost#187, ss_list_price#188, ss_sales_price#189, ss_ext_discount_amt#190, ss_ext_sales_price#191, ss_ext_wholesale_cost#192, ss_ext_list_price#193, ss_ext_tax#194, ss_coupon_amt#195, ss_net_paid#196, ss_net_paid_inc_tax#197, ss_net_profit#198, ss_sold_date_sk#199], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -851265317,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409]\n+- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n   +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n      :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n      :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#453)\n      :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n      :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199])\n      :     :     :  +- Project [d_date_sk#453]\n      :     :     :     +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n      :     +- Project [d_date_sk#453]\n      :        +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n      +- Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n         +- Filter ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201)))\n            +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#200,sr_item_sk#201,sr_customer_sk#202,sr_cdemo_sk#203,sr_hdemo_sk#204,sr_addr_sk#205,sr_store_sk#206,sr_reason_sk#207,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_return_tax#211,sr_return_amt_inc_tax#212,sr_fee#213,sr_return_ship_cost#214,sr_refunded_cash#215,sr_reversed_charge#216,sr_store_credit#217,sr_net_loss#218,sr_returned_date_sk#219] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -711641587,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#453] Arguments: 6 "
          },
          "4" : {
            "sign" : 584382232,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#199] Right keys [1]: [d_date_sk#453] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : 1906348601,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 35651584,
            "rowCount" : 47446,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210] Arguments: 7 "
          },
          "5" : {
            "sign" : 1388048606,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2203793064,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199] Input [6]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_net_profit#198, ss_sold_date_sk#199] "
          },
          "6" : {
            "sign" : 1584690030,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2203793064,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_net_profit#198, ss_sold_date_sk#199] Condition : (((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) "
          },
          "1" : {
            "sign" : -24119412,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12509247780,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] Input [8]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210] "
          },
          "0" : {
            "sign" : -1270155182,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8914268,
            "rowCount" : 202597,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210] Keys [1]: [ss_item_sk#178] Functions [4]: [partial_sum(coalesce(sr_return_quantity#209, 0)), partial_sum(coalesce(ss_quantity#186, 0)), partial_sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))] Aggregate Attributes [6]: [sum#599L, sum#600L, sum#601, isEmpty#602, sum#603, isEmpty#604] Results [7]: [ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610] "
          },
          "2" : {
            "sign" : 1898291908,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 19458829880,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [ss_ticket_number#185L, ss_item_sk#178] Right keys [2]: [sr_ticket_number#208L, sr_item_sk#201] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -91128281,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2203793064,
            "rowCount" : 61216474,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_net_profit#198, ss_sold_date_sk#199] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#199), dynamicpruningexpression(ss_sold_date_sk#199 IN dynamicpruning#574)] PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_profit,1.00), GreaterThan(ss_net_paid,0.00), GreaterThan(ss_quantity,0), IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk)] ReadSchema: struct<ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_profit:decimal(7,2)> "
          },
          "3" : {
            "sign" : 688930933,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196] Input [6]: [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199, d_date_sk#453] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_item_sk#178], functions=[partial_sum(coalesce(sr_return_quantity#209, 0)), partial_sum(coalesce(ss_quantity#186, 0)), partial_sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610])\n+- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n   +- BroadcastHashJoin [ss_ticket_number#185L, ss_item_sk#178], [sr_ticket_number#208L, sr_item_sk#201], Inner, BuildRight, false\n      :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n      :  +- BroadcastHashJoin [ss_sold_date_sk#199], [d_date_sk#453], Inner, BuildRight, false\n      :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n      :     :  +- Filter (((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178))\n      :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#178,ss_ticket_number#185L,ss_quantity#186,ss_net_paid#196,ss_net_profit#198,ss_sold_date_sk#199] Batched: true, DataFilters: [isnotnull(ss_net_profit#198), isnotnull(ss_net_paid#196), isnotnull(ss_quantity#186), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#199), dynamicpruningexpression(ss_sold_date_sk#199 IN dynamicpruning#5..., PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_pro...\n      :     :           +- SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n      :     :              +- AdaptiveSparkPlan isFinalPlan=false\n      :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1149]\n      :     :                    +- Project [d_date_sk#453]\n      :     :                       +- Filter ((((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND (d_year#459 = 2000)) AND (d_moy#461 = 12)) AND isnotnull(d_date_sk#453))\n      :     :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_year#459,d_moy#461] Batched: true, DataFilters: [isnotnull(d_year#459), isnotnull(d_moy#461), (d_year#459 = 2000), (d_moy#461 = 12), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- BroadcastQueryStage 6\n      :        +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n      +- BroadcastQueryStage 7\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=626]\n            +- *(6) Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n               +- *(6) Filter (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201))\n                  +- *(6) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#201,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_returned_date_sk#219] Batched: true, DataFilters: [isnotnull(sr_return_amt#210), (sr_return_amt#210 > 10000.00), isnotnull(sr_ticket_number#208L), ..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2240493472,
        "inputRowCount" : 61263951
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 43,
        "FinishedTasksTotalTimeInMs" : 16115.0,
        "FinishedTasksDistributionInMs" : [ 165.0, 323.0, 369.0, 426.0, 551.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 3501,
        "TotalTasksDurationInMs" : 15927,
        "IOBytes" : {
          "Total" : 126806866,
          "Details" : {
            "IR" : 126685679,
            "IW" : 0,
            "SR" : 0,
            "SW" : 121187
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1579508043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 5600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1891450840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 565182495,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], true\n      +- Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n         +- Union false, false\n            :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n            :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n            :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n            :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n            :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n            :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n            :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n            :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n            :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n            :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n            :                    :     :     :  +- Project [d_date_sk#88]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n            :                    :     +- Project [d_date_sk#88]\n            :                    :        +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n            :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n            :                    +- Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n            :                       +- Filter ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65)))\n            :                          +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#64,wr_item_sk#65,wr_refunded_customer_sk#66,wr_refunded_cdemo_sk#67,wr_refunded_hdemo_sk#68,wr_refunded_addr_sk#69,wr_returning_customer_sk#70,wr_returning_cdemo_sk#71,wr_returning_hdemo_sk#72,wr_returning_addr_sk#73,wr_web_page_sk#74,wr_reason_sk#75,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_return_tax#79,wr_return_amt_inc_tax#80,wr_fee#81,wr_return_ship_cost#82,wr_refunded_cash#83,wr_reversed_charge#84,wr_account_credit#85,wr_net_loss#86,wr_returned_date_sk#87] parquet\n            :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n            :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n            :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n            :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n            :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n            :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n            :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n            :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n            :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n            :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n            :                    :     :     :  +- Project [d_date_sk#425]\n            :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n            :                    :     +- Project [d_date_sk#425]\n            :                    :        +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n            :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n            :                    +- Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n            :                       +- Filter ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151)))\n            :                          +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#150,cr_item_sk#151,cr_refunded_customer_sk#152,cr_refunded_cdemo_sk#153,cr_refunded_hdemo_sk#154,cr_refunded_addr_sk#155,cr_returning_customer_sk#156,cr_returning_cdemo_sk#157,cr_returning_hdemo_sk#158,cr_returning_addr_sk#159,cr_call_center_sk#160,cr_catalog_page_sk#161,cr_ship_mode_sk#162,cr_warehouse_sk#163,cr_reason_sk#164,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_return_tax#168,cr_return_amt_inc_tax#169,cr_fee#170,cr_return_ship_cost#171,cr_refunded_cash#172,cr_reversed_charge#173,... 3 more fields] parquet\n            +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n               +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                  +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                     +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409]\n                           +- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                              +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n                                 :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                 :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#453)\n                                 :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                 :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199])\n                                 :     :     :  +- Project [d_date_sk#453]\n                                 :     :     :     +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                                 :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n                                 :     +- Project [d_date_sk#453]\n                                 :        +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                                 +- Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                                    +- Filter ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201)))\n                                       +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#200,sr_item_sk#201,sr_customer_sk#202,sr_cdemo_sk#203,sr_hdemo_sk#204,sr_addr_sk#205,sr_store_sk#206,sr_reason_sk#207,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_return_tax#211,sr_return_amt_inc_tax#212,sr_fee#213,sr_return_ship_cost#214,sr_refunded_cash#215,sr_reversed_charge#216,sr_store_credit#217,sr_net_loss#218,sr_returned_date_sk#219] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1493387456,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Arguments: 100, [channel#400 ASC NULLS FIRST, return_rank#398 ASC NULLS FIRST, currency_rank#399 ASC NULLS FIRST], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "1" : {
            "sign" : -1026869637,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 9432,
            "rowCount" : 131,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Keys [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Functions: [] Aggregate Attributes: [] Results [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "2" : {
            "sign" : 1774744582,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[channel#400 ASC NULLS FIRST,return_rank#398 ASC NULLS FIRST,currency_rank#399 ASC NULLS FIRST], output=[channel#400,item#395,return_ratio#396,return_rank#398,currency_rank#399])\n+- HashAggregate(keys=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], functions=[], output=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399])\n   +- ShuffleQueryStage 14\n      +- Exchange hashpartitioning(channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399, 200), ENSURE_REQUIREMENTS, [plan_id=2438]\n         +- *(22) HashAggregate(keys=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], functions=[], output=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399])\n            +- Union\n               :- *(15) Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n               :  +- *(15) Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n               :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n               :        +- *(14) Sort [currency_ratio#397 ASC NULLS FIRST], false, 0\n               :           +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n               :              +- *(13) Sort [return_ratio#396 ASC NULLS FIRST], false, 0\n               :                 +- ShuffleQueryStage 12\n               :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2085]\n               :                       +- *(11) HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[item#395, return_ratio#396, currency_ratio#397])\n               :                          +- AQEShuffleRead coalesced\n               :                             +- ShuffleQueryStage 9\n               :                                +- Exchange hashpartitioning(ws_item_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1500]\n               :                                   +- *(8) HashAggregate(keys=[ws_item_sk#32], functions=[partial_sum(coalesce(wr_return_quantity#77, 0)), partial_sum(coalesce(ws_quantity#47, 0)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586])\n               :                                      +- *(8) Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n               :                                         +- *(8) BroadcastHashJoin [ws_order_number#46L, ws_item_sk#32], [wr_order_number#76L, wr_item_sk#65], Inner, BuildRight, false\n               :                                            :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n               :                                            :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#63], [d_date_sk#88], Inner, BuildRight, false\n               :                                            :     :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n               :                                            :     :  +- *(8) Filter (((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32))\n               :                                            :     :     +- *(8) ColumnarToRow\n               :                                            :     :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#32,ws_order_number#46L,ws_quantity#47,ws_net_paid#58,ws_net_profit#62,ws_sold_date_sk#63] Batched: true, DataFilters: [isnotnull(ws_net_profit#62), isnotnull(ws_net_paid#58), isnotnull(ws_quantity#47), (ws_net_profi..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#63), dynamicpruningexpression(ws_sold_date_sk#63 IN dynamicpruning#574)], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_prof...\n               :                                            :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n               :                                            :     +- BroadcastQueryStage 0\n               :                                            :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n               :                                            :           +- *(1) Project [d_date_sk#88]\n               :                                            :              +- *(1) Filter ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88))\n               :                                            :                 +- *(1) ColumnarToRow\n               :                                            :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_year#94,d_moy#96] Batched: true, DataFilters: [isnotnull(d_year#94), isnotnull(d_moy#96), (d_year#94 = 2000), (d_moy#96 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :                                            +- BroadcastQueryStage 1\n               :                                               +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=518]\n               :                                                  +- *(2) Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n               :                                                     +- *(2) Filter (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65))\n               :                                                        +- *(2) ColumnarToRow\n               :                                                           +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#65,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_returned_date_sk#87] Batched: true, DataFilters: [isnotnull(wr_return_amt#78), (wr_return_amt#78 > 10000.00), isnotnull(wr_order_number#76L), isno..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>\n               :- *(18) Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n               :  +- *(18) Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n               :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n               :        +- *(17) Sort [currency_ratio#403 ASC NULLS FIRST], false, 0\n               :           +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n               :              +- *(16) Sort [return_ratio#402 ASC NULLS FIRST], false, 0\n               :                 +- ShuffleQueryStage 13\n               :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2206]\n               :                       +- *(12) HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[item#401, return_ratio#402, currency_ratio#403])\n               :                          +- AQEShuffleRead coalesced\n               :                             +- ShuffleQueryStage 10\n               :                                +- Exchange hashpartitioning(cs_item_sk#130, 200), ENSURE_REQUIREMENTS, [plan_id=1740]\n               :                                   +- *(9) HashAggregate(keys=[cs_item_sk#130], functions=[partial_sum(coalesce(cr_return_quantity#166, 0)), partial_sum(coalesce(cs_quantity#133, 0)), partial_sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598])\n               :                                      +- *(9) Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n               :                                         +- *(9) BroadcastHashJoin [cs_order_number#132L, cs_item_sk#130], [cr_order_number#165L, cr_item_sk#151], Inner, BuildRight, false\n               :                                            :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n               :                                            :  +- *(9) BroadcastHashJoin [cs_sold_date_sk#149], [d_date_sk#425], Inner, BuildRight, false\n               :                                            :     :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n               :                                            :     :  +- *(9) Filter (((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130))\n               :                                            :     :     +- *(9) ColumnarToRow\n               :                                            :     :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#130,cs_order_number#132L,cs_quantity#133,cs_net_paid#144,cs_net_profit#148,cs_sold_date_sk#149] Batched: true, DataFilters: [isnotnull(cs_net_profit#148), isnotnull(cs_net_paid#144), isnotnull(cs_quantity#133), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#149), dynamicpruningexpression(cs_sold_date_sk#149 IN dynamicpruning#5..., PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_prof...\n               :                                            :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n               :                                            :     +- BroadcastQueryStage 3\n               :                                            :        +- ReusedExchange [d_date_sk#425], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n               :                                            +- BroadcastQueryStage 4\n               :                                               +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=572]\n               :                                                  +- *(4) Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n               :                                                     +- *(4) Filter (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151))\n               :                                                        +- *(4) ColumnarToRow\n               :                                                           +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#151,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_returned_date_sk#176] Batched: true, DataFilters: [isnotnull(cr_return_amount#167), (cr_return_amount#167 > 10000.00), isnotnull(cr_order_number#16..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>\n               +- *(21) Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n                  +- *(21) Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n                     +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n                        +- *(20) Sort [currency_ratio#409 ASC NULLS FIRST], false, 0\n                           +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                              +- *(19) Sort [return_ratio#408 ASC NULLS FIRST], false, 0\n                                 +- ShuffleQueryStage 11\n                                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1883]\n                                       +- *(10) HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[item#407, return_ratio#408, currency_ratio#409])\n                                          +- AQEShuffleRead coalesced\n                                             +- ShuffleQueryStage 8\n                                                +- Exchange hashpartitioning(ss_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=1199]\n                                                   +- *(7) HashAggregate(keys=[ss_item_sk#178], functions=[partial_sum(coalesce(sr_return_quantity#209, 0)), partial_sum(coalesce(ss_quantity#186, 0)), partial_sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610])\n                                                      +- *(7) Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                                                         +- *(7) BroadcastHashJoin [ss_ticket_number#185L, ss_item_sk#178], [sr_ticket_number#208L, sr_item_sk#201], Inner, BuildRight, false\n                                                            :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                                            :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#199], [d_date_sk#453], Inner, BuildRight, false\n                                                            :     :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                                            :     :  +- *(7) Filter (((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178))\n                                                            :     :     +- *(7) ColumnarToRow\n                                                            :     :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#178,ss_ticket_number#185L,ss_quantity#186,ss_net_paid#196,ss_net_profit#198,ss_sold_date_sk#199] Batched: true, DataFilters: [isnotnull(ss_net_profit#198), isnotnull(ss_net_paid#196), isnotnull(ss_quantity#186), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#199), dynamicpruningexpression(ss_sold_date_sk#199 IN dynamicpruning#5..., PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_pro...\n                                                            :     :              +- SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n                                                            :     :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          BroadcastQueryStage 1\n                                                                                          +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n                                                                                       +- == Initial Plan ==\n                                                                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1149]\n                                                                                          +- Project [d_date_sk#453]\n                                                                                             +- Filter ((((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND (d_year#459 = 2000)) AND (d_moy#461 = 12)) AND isnotnull(d_date_sk#453))\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_year#459,d_moy#461] Batched: true, DataFilters: [isnotnull(d_year#459), isnotnull(d_moy#461), (d_year#459 = 2000), (d_moy#461 = 12), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                                            :     +- BroadcastQueryStage 6\n                                                            :        +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n                                                            +- BroadcastQueryStage 7\n                                                               +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=626]\n                                                                  +- *(6) Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                                                                     +- *(6) Filter (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201))\n                                                                        +- *(6) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#201,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_returned_date_sk#219] Batched: true, DataFilters: [isnotnull(sr_return_amt#210), (sr_return_amt#210 > 10000.00), isnotnull(sr_ticket_number#208L), ..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9432,
        "inputRowCount" : 131
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 0, 0, 203, 117, 106, 106, 0, 0, 97, 106, 0, 106, 97, 106, 0, 0, 97, 262, 0, 0, 0, 0, 97, 106, 97, 106, 0, 0, 0, 0, 0, 117, 0, 106, 97, 97, 214, 0, 106, 0, 129, 235, 0, 106, 0, 0, 156, 0, 117, 0, 106, 0, 0, 0, 0, 0, 0, 106, 214, 106, 0, 97, 0, 0, 106, 106, 0, 0, 97, 106, 0, 106, 331, 0, 97, 0, 295, 106, 0, 97, 97, 106, 0, 106, 142, 194, 97, 0, 0, 117, 97, 0, 0, 97, 106, 0, 0, 106, 97, 97, 97, 106, 97, 194, 0, 0, 0, 106, 0, 0, 0, 106, 0, 117, 340, 0, 97, 203, 0, 203, 0, 106, 106, 97, 117, 0, 0, 0, 0, 106, 97, 0, 106, 97, 0, 0, 106, 106, 0, 0, 235, 0, 0, 0, 106, 117, 117, 117, 0, 0, 203, 0, 97, 106, 0, 117, 97, 106, 0, 129, 0, 106, 0, 0, 0, 203, 106, 226, 0, 0, 0, 0, 129, 0, 0, 0, 0, 203, 0, 106, 0, 0, 106, 106, 106, 0, 0, 0, 0, 117, 0, 0, 0, 97, 0, 0, 0, 0, 0, 97 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 33 ],
      "Objectives" : {
        "DurationInMs" : 148,
        "TotalTasksDurationInMs" : 139,
        "IOBytes" : {
          "Total" : 12299,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12299,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1335585864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 352992,
                "rowCount" : 3677
              },
              "compileTime" : {
                "sizeInBytes" : 8930812,
                "rowCount" : 202973
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403], HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1054446440,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 352992,
            "rowCount" : 3677,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598] Keys [1]: [cs_item_sk#130] Functions [4]: [sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))] Aggregate Attributes [4]: [sum(coalesce(cr_return_quantity#166, 0))#487L, sum(coalesce(cs_quantity#133, 0))#488L, sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00))#489, sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))#490] Results [3]: [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0))#487L as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0))#488L as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00))#489 as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))#490 as decimal(15,4))) AS currency_ratio#403] "
          },
          "1" : {
            "sign" : 2075825549,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[item#401, return_ratio#402, currency_ratio#403])\n+- ShuffleQueryStage 10\n   +- Exchange hashpartitioning(cs_item_sk#130, 200), ENSURE_REQUIREMENTS, [plan_id=1740]\n      +- *(9) HashAggregate(keys=[cs_item_sk#130], functions=[partial_sum(coalesce(cr_return_quantity#166, 0)), partial_sum(coalesce(cs_quantity#133, 0)), partial_sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598])\n         +- *(9) Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n            +- *(9) BroadcastHashJoin [cs_order_number#132L, cs_item_sk#130], [cr_order_number#165L, cr_item_sk#151], Inner, BuildRight, false\n               :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n               :  +- *(9) BroadcastHashJoin [cs_sold_date_sk#149], [d_date_sk#425], Inner, BuildRight, false\n               :     :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n               :     :  +- *(9) Filter (((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130))\n               :     :     +- *(9) ColumnarToRow\n               :     :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#130,cs_order_number#132L,cs_quantity#133,cs_net_paid#144,cs_net_profit#148,cs_sold_date_sk#149] Batched: true, DataFilters: [isnotnull(cs_net_profit#148), isnotnull(cs_net_paid#144), isnotnull(cs_quantity#133), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#149), dynamicpruningexpression(cs_sold_date_sk#149 IN dynamicpruning#5..., PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_prof...\n               :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n               :     +- BroadcastQueryStage 3\n               :        +- ReusedExchange [d_date_sk#425], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n               +- BroadcastQueryStage 4\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=572]\n                     +- *(4) Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n                        +- *(4) Filter (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151))\n                           +- *(4) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#151,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_returned_date_sk#176] Batched: true, DataFilters: [isnotnull(cr_return_amount#167), (cr_return_amount#167 > 10000.00), isnotnull(cr_order_number#16..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 352992,
        "inputRowCount" : 3677
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 1371, 1489, 1449, 1521, 1468, 1221, 1302, 1444, 1164, 1880, 1338, 1741, 1668, 1365, 1868, 1398, 1783, 1560, 1645, 1357, 1446, 1584, 1672, 1381, 1399, 1705, 1444, 1427, 1458, 1820, 1705, 1351, 1942, 1371, 1924, 1716, 1566, 1210, 1326, 1362, 1429, 1315, 1445, 1339, 1449, 2002, 1527, 1944, 1942, 1929, 1952, 1511, 1125, 1530, 1093, 1818, 1454, 1605, 1473, 1409, 1680, 1460, 2151, 1120, 1983, 1950, 1940, 1449, 1595, 1786, 1750, 1518, 1360, 1232, 2000, 1900, 1371, 1962, 1510, 1733, 1109, 1667, 1995, 1555, 1638, 1738, 1488, 1915, 1445, 1554, 1961, 1109, 1315, 1185, 1944, 1705, 1956, 1995, 1597, 1087, 1603, 1254, 1638, 1670, 1331, 1320, 1605, 1423, 1387, 1026, 1293, 1203, 1459, 1875, 1840, 1059, 1053, 1197, 1419, 1941, 1654, 1483, 1416, 1420, 1857, 1482, 2262, 1319, 1352, 1649, 2083, 1894, 1160, 1108, 1755, 1738, 936, 1891, 1840, 1652, 964, 1588, 1655, 1288, 1766, 1584, 1739, 1666, 1164, 1968, 1276, 1838, 1623, 1246, 1333, 1599, 1405, 1110, 1576, 1527, 1033, 2277, 1774, 1687, 1329, 1628, 967, 1471, 1532, 1666, 1584, 1644, 1800, 1878, 1847, 1848, 1890, 1465, 1441, 1853, 1572, 2017, 1672, 1563, 1686, 1869, 1405, 1728, 1790, 1799, 1504, 1578, 1500, 1397, 1727, 1510, 1233, 1204, 1578, 1320 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 258,
        "TotalTasksDurationInMs" : 250,
        "IOBytes" : {
          "Total" : 378322,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 297882,
            "SW" : 80440
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 53745241,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#63 = d_date_sk#88) "
          },
          "5" : {
            "sign" : -1197702607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1000282752,
                "rowCount" : 27785632
              },
              "compileTime" : {
                "sizeInBytes" : 1000282752,
                "rowCount" : 27785632
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] "
          },
          "6" : {
            "sign" : 693295207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5779411456,
                "rowCount" : 27785632
              },
              "compileTime" : {
                "sizeInBytes" : 5779411456,
                "rowCount" : 27785632
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63]) "
          },
          "1" : {
            "sign" : 2102049581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3119422680,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 3119422680,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] "
          },
          "0" : {
            "sign" : -686464078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8909120,
                "rowCount" : 202480
              },
              "compileTime" : {
                "sizeInBytes" : 8909120,
                "rowCount" : 202480
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397] "
          },
          "2" : {
            "sign" : -1480450470,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4852435280,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 4852435280,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65)) "
          },
          "7" : {
            "sign" : -2098628888,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#30, ws_ship_date_sk#31, ws_item_sk#32, ws_bill_customer_sk#33, ws_bill_cdemo_sk#34, ws_bill_hdemo_sk#35, ws_bill_addr_sk#36, ws_ship_customer_sk#37, ws_ship_cdemo_sk#38, ws_ship_hdemo_sk#39, ws_ship_addr_sk#40, ws_web_page_sk#41, ws_web_site_sk#42, ws_ship_mode_sk#43, ws_warehouse_sk#44, ws_promo_sk#45, ws_order_number#46L, ws_quantity#47, ws_wholesale_cost#48, ws_list_price#49, ws_sales_price#50, ws_ext_discount_amt#51, ws_ext_sales_price#52, ws_ext_wholesale_cost#53, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -937015126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n+- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n   +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n      :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n      :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n      :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n      :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n      :     :     :  +- Project [d_date_sk#88]\n      :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n      :     +- Project [d_date_sk#88]\n      :        +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n      +- Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n         +- Filter ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65)))\n            +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#64,wr_item_sk#65,wr_refunded_customer_sk#66,wr_refunded_cdemo_sk#67,wr_refunded_hdemo_sk#68,wr_refunded_addr_sk#69,wr_returning_customer_sk#70,wr_returning_cdemo_sk#71,wr_returning_hdemo_sk#72,wr_returning_addr_sk#73,wr_web_page_sk#74,wr_reason_sk#75,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_return_tax#79,wr_return_amt_inc_tax#80,wr_fee#81,wr_return_ship_cost#82,wr_refunded_cash#83,wr_reversed_charge#84,wr_account_credit#85,wr_net_loss#86,wr_returned_date_sk#87] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1341410174,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#88] Arguments: 0 "
          },
          "4" : {
            "sign" : 676710910,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2779824200,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#63] Right keys [1]: [d_date_sk#88] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : -1179920229,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 35651584,
            "rowCount" : 60729,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78] Arguments: 1 "
          },
          "5" : {
            "sign" : -289063273,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63] Input [6]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_net_profit#62, ws_sold_date_sk#63] "
          },
          "6" : {
            "sign" : 328785233,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_net_profit#62, ws_sold_date_sk#63] Condition : (((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) "
          },
          "1" : {
            "sign" : 1032195919,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3119422680,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] Input [8]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78] "
          },
          "0" : {
            "sign" : -58709886,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8909120,
            "rowCount" : 202480,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78] Keys [1]: [ws_item_sk#32] Functions [4]: [partial_sum(coalesce(wr_return_quantity#77, 0)), partial_sum(coalesce(ws_quantity#47, 0)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))] Aggregate Attributes [6]: [sum#575L, sum#576L, sum#577, isEmpty#578, sum#579, isEmpty#580] Results [7]: [ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586] "
          },
          "2" : {
            "sign" : -1192393956,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4852435280,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [ws_order_number#46L, ws_item_sk#32] Right keys [2]: [wr_order_number#76L, wr_item_sk#65] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 524655473,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1000282752,
            "rowCount" : 27785632,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [6]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_net_profit#62, ws_sold_date_sk#63] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#63), dynamicpruningexpression(ws_sold_date_sk#63 IN dynamicpruning#574)] PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_profit,1.00), GreaterThan(ws_net_paid,0.00), GreaterThan(ws_quantity,0), IsNotNull(ws_order_number), IsNotNull(ws_item_sk)] ReadSchema: struct<ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_profit:decimal(7,2)> "
          },
          "3" : {
            "sign" : -365305497,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58] Input [6]: [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63, d_date_sk#88] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ws_item_sk#32], functions=[partial_sum(coalesce(wr_return_quantity#77, 0)), partial_sum(coalesce(ws_quantity#47, 0)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586])\n+- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n   +- BroadcastHashJoin [ws_order_number#46L, ws_item_sk#32], [wr_order_number#76L, wr_item_sk#65], Inner, BuildRight, false\n      :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n      :  +- BroadcastHashJoin [ws_sold_date_sk#63], [d_date_sk#88], Inner, BuildRight, false\n      :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n      :     :  +- Filter (((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32))\n      :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#32,ws_order_number#46L,ws_quantity#47,ws_net_paid#58,ws_net_profit#62,ws_sold_date_sk#63] Batched: true, DataFilters: [isnotnull(ws_net_profit#62), isnotnull(ws_net_paid#58), isnotnull(ws_quantity#47), (ws_net_profi..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#63), dynamicpruningexpression(ws_sold_date_sk#63 IN dynamicpruning#574)], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_prof...\n      :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n      :     +- BroadcastQueryStage 0\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n      :           +- *(1) Project [d_date_sk#88]\n      :              +- *(1) Filter ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88))\n      :                 +- *(1) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_year#94,d_moy#96] Batched: true, DataFilters: [isnotnull(d_year#94), isnotnull(d_moy#96), (d_year#94 = 2000), (d_moy#96 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      +- BroadcastQueryStage 1\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=518]\n            +- *(2) Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n               +- *(2) Filter (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65))\n                  +- *(2) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#65,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_returned_date_sk#87] Batched: true, DataFilters: [isnotnull(wr_return_amt#78), (wr_return_amt#78 > 10000.00), isnotnull(wr_order_number#76L), isno..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1036983160,
        "inputRowCount" : 27846392
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 1747.0,
        "FinishedTasksDistributionInMs" : [ 331.0, 335.0, 348.0, 357.0, 376.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 6170,
        "TotalTasksDurationInMs" : 14561,
        "IOBytes" : {
          "Total" : 33548907,
          "Details" : {
            "IR" : 33376715,
            "IW" : 0,
            "SR" : 0,
            "SW" : 172192
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : 634849960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10535044,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10535044,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -519842394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10554596,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10554596,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : 250321388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10528960,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10528960,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "11" : {
            "sign" : 904877678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10535044,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10535044,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "9" : {
            "sign" : -1441453670,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9742704,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9742704,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "13" : {
            "sign" : -1312467147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9724656,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9724656,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "5" : {
            "sign" : 1162572354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9719040,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9719040,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "10" : {
            "sign" : 1624409687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11345432,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 11345432,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] "
          },
          "6" : {
            "sign" : -951433898,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11366488,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 11366488,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] "
          },
          "1" : {
            "sign" : -911494193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "0" : {
            "sign" : -1032138332,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 34050800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "2" : {
            "sign" : 649239119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11338880,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 11338880,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "7" : {
            "sign" : 234638336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10554596,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10554596,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "3" : {
            "sign" : 147092776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10528960,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 10528960,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Window",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Union",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n+- Union false, false\n   :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n   :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n   :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n   :        +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n   :           +- Aggregate [ws_item_sk#32], [ws_item_sk#32 AS item#395, (cast(sum(coalesce(wr_return_quantity#77, 0)) as decimal(15,4)) / cast(sum(coalesce(ws_quantity#47, 0)) as decimal(15,4))) AS return_ratio#396, (cast(sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#397]\n   :              +- Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n   :                 +- Join Inner, ((ws_order_number#46L = wr_order_number#76L) AND (ws_item_sk#32 = wr_item_sk#65))\n   :                    :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n   :                    :  +- Join Inner, (ws_sold_date_sk#63 = d_date_sk#88)\n   :                    :     :- Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n   :                    :     :  +- Filter (((((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32)) AND isnotnull(ws_sold_date_sk#63)) AND dynamicpruning#572 [ws_sold_date_sk#63])\n   :                    :     :     :  +- Project [d_date_sk#88]\n   :                    :     :     :     +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n   :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n   :                    :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#30,ws_ship_date_sk#31,ws_item_sk#32,ws_bill_customer_sk#33,ws_bill_cdemo_sk#34,ws_bill_hdemo_sk#35,ws_bill_addr_sk#36,ws_ship_customer_sk#37,ws_ship_cdemo_sk#38,ws_ship_hdemo_sk#39,ws_ship_addr_sk#40,ws_web_page_sk#41,ws_web_site_sk#42,ws_ship_mode_sk#43,ws_warehouse_sk#44,ws_promo_sk#45,ws_order_number#46L,ws_quantity#47,ws_wholesale_cost#48,ws_list_price#49,ws_sales_price#50,ws_ext_discount_amt#51,ws_ext_sales_price#52,ws_ext_wholesale_cost#53,... 10 more fields] parquet\n   :                    :     +- Project [d_date_sk#88]\n   :                    :        +- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n   :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n   :                    +- Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n   :                       +- Filter ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65)))\n   :                          +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#64,wr_item_sk#65,wr_refunded_customer_sk#66,wr_refunded_cdemo_sk#67,wr_refunded_hdemo_sk#68,wr_refunded_addr_sk#69,wr_returning_customer_sk#70,wr_returning_cdemo_sk#71,wr_returning_hdemo_sk#72,wr_returning_addr_sk#73,wr_web_page_sk#74,wr_reason_sk#75,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_return_tax#79,wr_return_amt_inc_tax#80,wr_fee#81,wr_return_ship_cost#82,wr_refunded_cash#83,wr_reversed_charge#84,wr_account_credit#85,wr_net_loss#86,wr_returned_date_sk#87] parquet\n   :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n   :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n   :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n   :        +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n   :           +- Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n   :              +- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n   :                 +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n   :                    :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n   :                    :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n   :                    :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n   :                    :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n   :                    :     :     :  +- Project [d_date_sk#425]\n   :                    :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n   :                    :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n   :                    :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n   :                    :     +- Project [d_date_sk#425]\n   :                    :        +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n   :                    :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n   :                    +- Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n   :                       +- Filter ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151)))\n   :                          +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#150,cr_item_sk#151,cr_refunded_customer_sk#152,cr_refunded_cdemo_sk#153,cr_refunded_hdemo_sk#154,cr_refunded_addr_sk#155,cr_returning_customer_sk#156,cr_returning_cdemo_sk#157,cr_returning_hdemo_sk#158,cr_returning_addr_sk#159,cr_call_center_sk#160,cr_catalog_page_sk#161,cr_ship_mode_sk#162,cr_warehouse_sk#163,cr_reason_sk#164,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_return_tax#168,cr_return_amt_inc_tax#169,cr_fee#170,cr_return_ship_cost#171,cr_refunded_cash#172,cr_reversed_charge#173,... 3 more fields] parquet\n   +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n      +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n         +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n            +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n               +- Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409]\n                  +- Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                     +- Join Inner, ((ss_ticket_number#185L = sr_ticket_number#208L) AND (ss_item_sk#178 = sr_item_sk#201))\n                        :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                        :  +- Join Inner, (ss_sold_date_sk#199 = d_date_sk#453)\n                        :     :- Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                        :     :  +- Filter (((((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178)) AND isnotnull(ss_sold_date_sk#199)) AND dynamicpruning#574 [ss_sold_date_sk#199])\n                        :     :     :  +- Project [d_date_sk#453]\n                        :     :     :     +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#177,ss_item_sk#178,ss_customer_sk#179,ss_cdemo_sk#180,ss_hdemo_sk#181,ss_addr_sk#182,ss_store_sk#183,ss_promo_sk#184,ss_ticket_number#185L,ss_quantity#186,ss_wholesale_cost#187,ss_list_price#188,ss_sales_price#189,ss_ext_discount_amt#190,ss_ext_sales_price#191,ss_ext_wholesale_cost#192,ss_ext_list_price#193,ss_ext_tax#194,ss_coupon_amt#195,ss_net_paid#196,ss_net_paid_inc_tax#197,ss_net_profit#198,ss_sold_date_sk#199] parquet\n                        :     +- Project [d_date_sk#453]\n                        :        +- Filter (((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND ((d_year#459 = 2000) AND (d_moy#461 = 12))) AND isnotnull(d_date_sk#453))\n                        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_date_id#454,d_date#455,d_month_seq#456,d_week_seq#457,d_quarter_seq#458,d_year#459,d_dow#460,d_moy#461,d_dom#462,d_qoy#463,d_fy_year#464,d_fy_quarter_seq#465,d_fy_week_seq#466,d_day_name#467,d_quarter_name#468,d_holiday#469,d_weekend#470,d_following_holiday#471,d_first_dom#472,d_last_dom#473,d_same_day_ly#474,d_same_day_lq#475,d_current_day#476,... 4 more fields] parquet\n                        +- Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                           +- Filter ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201)))\n                              +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#200,sr_item_sk#201,sr_customer_sk#202,sr_cdemo_sk#203,sr_hdemo_sk#204,sr_addr_sk#205,sr_store_sk#206,sr_reason_sk#207,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_return_tax#211,sr_return_amt_inc_tax#212,sr_fee#213,sr_return_ship_cost#214,sr_refunded_cash#215,sr_reversed_charge#216,sr_store_credit#217,sr_net_loss#218,sr_returned_date_sk#219] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -1704724530,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item#401, return_ratio#402, currency_ratio#403, return_rank#404] Arguments: [currency_ratio#403 ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 971131985,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 118720,
            "rowCount" : 1855,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [item#395, return_ratio#396, currency_ratio#397] Arguments: 12 "
          },
          "19" : {
            "sign" : -1454339313,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item#407, return_ratio#408, currency_ratio#409, return_rank#410] Arguments: [currency_ratio#409 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -1551587087,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item#395, return_ratio#396, currency_ratio#397, return_rank#398] Arguments: [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST] "
          },
          "15" : {
            "sign" : 744600208,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 231808,
            "rowCount" : 3622,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [item#401, return_ratio#402, currency_ratio#403] Arguments: 13 "
          },
          "11" : {
            "sign" : 618502640,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item#401, return_ratio#402, currency_ratio#403, return_rank#404] Arguments: [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -1419047808,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11366488,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405] Input [5]: [item#401, return_ratio#402, currency_ratio#403, return_rank#404, currency_rank#405] "
          },
          "22" : {
            "sign" : 277894948,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 80384,
            "rowCount" : 1256,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [item#407, return_ratio#408, currency_ratio#409] Arguments: 11 "
          },
          "13" : {
            "sign" : -896778933,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 9742704,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [3]: [item#401, return_ratio#402, currency_ratio#403] Arguments: [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST] "
          },
          "16" : {
            "sign" : -379014893,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11345432,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411] Input [5]: [item#407, return_ratio#408, currency_ratio#409, return_rank#410, currency_rank#411] "
          },
          "5" : {
            "sign" : -1145262837,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item#395, return_ratio#396, currency_ratio#397, return_rank#398] Arguments: [currency_ratio#397 ASC NULLS FIRST], false, 0 "
          },
          "10" : {
            "sign" : 272876148,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 10554596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [item#401, return_ratio#402, currency_ratio#403, return_rank#404, currency_rank#405] Condition : ((return_rank#404 <= 10) OR (currency_rank#405 <= 10)) "
          },
          "21" : {
            "sign" : 1115950243,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [item#407, return_ratio#408, currency_ratio#409] Arguments: [return_ratio#408 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1876934170,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 9719040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [3]: [item#395, return_ratio#396, currency_ratio#397] Arguments: [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST] "
          },
          "1" : {
            "sign" : -1734389648,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "17" : {
            "sign" : -2019069880,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [item#407, return_ratio#408, currency_ratio#409, return_rank#410, currency_rank#411] Condition : ((return_rank#410 <= 10) OR (currency_rank#411 <= 10)) "
          },
          "14" : {
            "sign" : -1335045569,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [item#401, return_ratio#402, currency_ratio#403] Arguments: [return_ratio#402 ASC NULLS FIRST], false, 0 "
          },
          "0" : {
            "sign" : 49081107,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 34050800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Keys [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Functions: [] Aggregate Attributes: [] Results [5]: [channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] "
          },
          "20" : {
            "sign" : -2028512198,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 9724656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [3]: [item#407, return_ratio#408, currency_ratio#409] Arguments: [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST] "
          },
          "2" : {
            "sign" : 1697373268,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11338880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399] Input [5]: [item#395, return_ratio#396, currency_ratio#397, return_rank#398, currency_rank#399] "
          },
          "18" : {
            "sign" : 564616996,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 10535044,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item#407, return_ratio#408, currency_ratio#409, return_rank#410] Arguments: [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST] "
          },
          "7" : {
            "sign" : -2023500778,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [item#395, return_ratio#396, currency_ratio#397] Arguments: [return_ratio#396 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1440716517,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 10528960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [item#395, return_ratio#396, currency_ratio#397, return_rank#398, currency_rank#399] Condition : ((return_rank#398 <= 10) OR (currency_rank#399 <= 10)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Sort",
          "toId" : 6,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Window",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "ShuffleQueryStage",
          "toId" : 14,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Sort",
          "toId" : 13,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Window",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "ShuffleQueryStage",
          "toId" : 21,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Sort",
          "toId" : 20,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Window",
          "toId" : 19,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Sort",
          "toId" : 18,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Window",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Union",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399], functions=[], output=[channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399])\n+- Union\n   :- Project [web AS channel#400, item#395, return_ratio#396, return_rank#398, currency_rank#399]\n   :  +- Filter ((return_rank#398 <= 10) OR (currency_rank#399 <= 10))\n   :     +- Window [rank(currency_ratio#397) windowspecdefinition(currency_ratio#397 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#399], [currency_ratio#397 ASC NULLS FIRST]\n   :        +- Sort [currency_ratio#397 ASC NULLS FIRST], false, 0\n   :           +- Window [rank(return_ratio#396) windowspecdefinition(return_ratio#396 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#398], [return_ratio#396 ASC NULLS FIRST]\n   :              +- Sort [return_ratio#396 ASC NULLS FIRST], false, 0\n   :                 +- ShuffleQueryStage 12\n   :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2085]\n   :                       +- *(11) HashAggregate(keys=[ws_item_sk#32], functions=[sum(coalesce(wr_return_quantity#77, 0)), sum(coalesce(ws_quantity#47, 0)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[item#395, return_ratio#396, currency_ratio#397])\n   :                          +- AQEShuffleRead coalesced\n   :                             +- ShuffleQueryStage 9\n   :                                +- Exchange hashpartitioning(ws_item_sk#32, 200), ENSURE_REQUIREMENTS, [plan_id=1500]\n   :                                   +- *(8) HashAggregate(keys=[ws_item_sk#32], functions=[partial_sum(coalesce(wr_return_quantity#77, 0)), partial_sum(coalesce(ws_quantity#47, 0)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#58 as decimal(12,2)), 0.00))], output=[ws_item_sk#32, sum#581L, sum#582L, sum#583, isEmpty#584, sum#585, isEmpty#586])\n   :                                      +- *(8) Project [ws_item_sk#32, ws_quantity#47, ws_net_paid#58, wr_return_quantity#77, wr_return_amt#78]\n   :                                         +- *(8) BroadcastHashJoin [ws_order_number#46L, ws_item_sk#32], [wr_order_number#76L, wr_item_sk#65], Inner, BuildRight, false\n   :                                            :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58]\n   :                                            :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#63], [d_date_sk#88], Inner, BuildRight, false\n   :                                            :     :- *(8) Project [ws_item_sk#32, ws_order_number#46L, ws_quantity#47, ws_net_paid#58, ws_sold_date_sk#63]\n   :                                            :     :  +- *(8) Filter (((((((isnotnull(ws_net_profit#62) AND isnotnull(ws_net_paid#58)) AND isnotnull(ws_quantity#47)) AND (ws_net_profit#62 > 1.00)) AND (ws_net_paid#58 > 0.00)) AND (ws_quantity#47 > 0)) AND isnotnull(ws_order_number#46L)) AND isnotnull(ws_item_sk#32))\n   :                                            :     :     +- *(8) ColumnarToRow\n   :                                            :     :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#32,ws_order_number#46L,ws_quantity#47,ws_net_paid#58,ws_net_profit#62,ws_sold_date_sk#63] Batched: true, DataFilters: [isnotnull(ws_net_profit#62), isnotnull(ws_net_paid#58), isnotnull(ws_quantity#47), (ws_net_profi..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#63), dynamicpruningexpression(ws_sold_date_sk#63 IN dynamicpruning#574)], PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_pro..., ReadSchema: struct<ws_item_sk:int,ws_order_number:bigint,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_prof...\n   :                                            :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n   :                                            :     +- BroadcastQueryStage 0\n   :                                            :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n   :                                            :           +- *(1) Project [d_date_sk#88]\n   :                                            :              +- *(1) Filter ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88))\n   :                                            :                 +- *(1) ColumnarToRow\n   :                                            :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_year#94,d_moy#96] Batched: true, DataFilters: [isnotnull(d_year#94), isnotnull(d_moy#96), (d_year#94 = 2000), (d_moy#96 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :                                            +- BroadcastQueryStage 1\n   :                                               +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=518]\n   :                                                  +- *(2) Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n   :                                                     +- *(2) Filter (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65))\n   :                                                        +- *(2) ColumnarToRow\n   :                                                           +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#65,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_returned_date_sk#87] Batched: true, DataFilters: [isnotnull(wr_return_amt#78), (wr_return_amt#78 > 10000.00), isnotnull(wr_order_number#76L), isno..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>\n   :- Project [catalog AS channel#406, item#401, return_ratio#402, return_rank#404, currency_rank#405]\n   :  +- Filter ((return_rank#404 <= 10) OR (currency_rank#405 <= 10))\n   :     +- Window [rank(currency_ratio#403) windowspecdefinition(currency_ratio#403 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#405], [currency_ratio#403 ASC NULLS FIRST]\n   :        +- Sort [currency_ratio#403 ASC NULLS FIRST], false, 0\n   :           +- Window [rank(return_ratio#402) windowspecdefinition(return_ratio#402 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#404], [return_ratio#402 ASC NULLS FIRST]\n   :              +- Sort [return_ratio#402 ASC NULLS FIRST], false, 0\n   :                 +- ShuffleQueryStage 13\n   :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2206]\n   :                       +- *(12) HashAggregate(keys=[cs_item_sk#130], functions=[sum(coalesce(cr_return_quantity#166, 0)), sum(coalesce(cs_quantity#133, 0)), sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[item#401, return_ratio#402, currency_ratio#403])\n   :                          +- AQEShuffleRead coalesced\n   :                             +- ShuffleQueryStage 10\n   :                                +- Exchange hashpartitioning(cs_item_sk#130, 200), ENSURE_REQUIREMENTS, [plan_id=1740]\n   :                                   +- *(9) HashAggregate(keys=[cs_item_sk#130], functions=[partial_sum(coalesce(cr_return_quantity#166, 0)), partial_sum(coalesce(cs_quantity#133, 0)), partial_sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598])\n   :                                      +- *(9) Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n   :                                         +- *(9) BroadcastHashJoin [cs_order_number#132L, cs_item_sk#130], [cr_order_number#165L, cr_item_sk#151], Inner, BuildRight, false\n   :                                            :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n   :                                            :  +- *(9) BroadcastHashJoin [cs_sold_date_sk#149], [d_date_sk#425], Inner, BuildRight, false\n   :                                            :     :- *(9) Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n   :                                            :     :  +- *(9) Filter (((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130))\n   :                                            :     :     +- *(9) ColumnarToRow\n   :                                            :     :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#130,cs_order_number#132L,cs_quantity#133,cs_net_paid#144,cs_net_profit#148,cs_sold_date_sk#149] Batched: true, DataFilters: [isnotnull(cs_net_profit#148), isnotnull(cs_net_paid#144), isnotnull(cs_quantity#133), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#149), dynamicpruningexpression(cs_sold_date_sk#149 IN dynamicpruning#5..., PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_prof...\n   :                                            :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n   :                                            :     +- BroadcastQueryStage 3\n   :                                            :        +- ReusedExchange [d_date_sk#425], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n   :                                            +- BroadcastQueryStage 4\n   :                                               +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=572]\n   :                                                  +- *(4) Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n   :                                                     +- *(4) Filter (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151))\n   :                                                        +- *(4) ColumnarToRow\n   :                                                           +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#151,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_returned_date_sk#176] Batched: true, DataFilters: [isnotnull(cr_return_amount#167), (cr_return_amount#167 > 10000.00), isnotnull(cr_order_number#16..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>\n   +- Project [store AS channel#412, item#407, return_ratio#408, return_rank#410, currency_rank#411]\n      +- Filter ((return_rank#410 <= 10) OR (currency_rank#411 <= 10))\n         +- Window [rank(currency_ratio#409) windowspecdefinition(currency_ratio#409 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#411], [currency_ratio#409 ASC NULLS FIRST]\n            +- Sort [currency_ratio#409 ASC NULLS FIRST], false, 0\n               +- Window [rank(return_ratio#408) windowspecdefinition(return_ratio#408 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#410], [return_ratio#408 ASC NULLS FIRST]\n                  +- Sort [return_ratio#408 ASC NULLS FIRST], false, 0\n                     +- ShuffleQueryStage 11\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1883]\n                           +- *(10) HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[item#407, return_ratio#408, currency_ratio#409])\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 8\n                                    +- Exchange hashpartitioning(ss_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=1199]\n                                       +- *(7) HashAggregate(keys=[ss_item_sk#178], functions=[partial_sum(coalesce(sr_return_quantity#209, 0)), partial_sum(coalesce(ss_quantity#186, 0)), partial_sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610])\n                                          +- *(7) Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n                                             +- *(7) BroadcastHashJoin [ss_ticket_number#185L, ss_item_sk#178], [sr_ticket_number#208L, sr_item_sk#201], Inner, BuildRight, false\n                                                :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n                                                :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#199], [d_date_sk#453], Inner, BuildRight, false\n                                                :     :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n                                                :     :  +- *(7) Filter (((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178))\n                                                :     :     +- *(7) ColumnarToRow\n                                                :     :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#178,ss_ticket_number#185L,ss_quantity#186,ss_net_paid#196,ss_net_profit#198,ss_sold_date_sk#199] Batched: true, DataFilters: [isnotnull(ss_net_profit#198), isnotnull(ss_net_paid#196), isnotnull(ss_quantity#186), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#199), dynamicpruningexpression(ss_sold_date_sk#199 IN dynamicpruning#5..., PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_pro...\n                                                :     :              +- SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n                                                :     :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                                                           +- == Final Plan ==\n                                                                              BroadcastQueryStage 1\n                                                                              +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n                                                                           +- == Initial Plan ==\n                                                                              BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1149]\n                                                                              +- Project [d_date_sk#453]\n                                                                                 +- Filter ((((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND (d_year#459 = 2000)) AND (d_moy#461 = 12)) AND isnotnull(d_date_sk#453))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_year#459,d_moy#461] Batched: true, DataFilters: [isnotnull(d_year#459), isnotnull(d_moy#461), (d_year#459 = 2000), (d_moy#461 = 12), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                                :     +- BroadcastQueryStage 6\n                                                :        +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n                                                +- BroadcastQueryStage 7\n                                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=626]\n                                                      +- *(6) Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                                                         +- *(6) Filter (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201))\n                                                            +- *(6) ColumnarToRow\n                                                               +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#201,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_returned_date_sk#219] Batched: true, DataFilters: [isnotnull(sr_return_amt#210), (sr_return_amt#210 > 10000.00), isnotnull(sr_ticket_number#208L), ..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 430912,
        "inputRowCount" : 6733
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "5" : [ 84280 ],
        "4" : [ 43249 ],
        "3" : [ 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 646,
        "TotalTasksDurationInMs" : 1657,
        "IOBytes" : {
          "Total" : 160481,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 148182,
            "SW" : 12299
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -847655785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#149 = d_date_sk#425) "
          },
          "5" : {
            "sign" : -1695174233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1971502164,
                "rowCount" : 54763949
              },
              "compileTime" : {
                "sizeInBytes" : 1971502164,
                "rowCount" : 54763949
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] "
          },
          "6" : {
            "sign" : 1243613055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11390901392,
                "rowCount" : 54763949
              },
              "compileTime" : {
                "sizeInBytes" : 11390901392,
                "rowCount" : 54763949
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149]) "
          },
          "1" : {
            "sign" : 267784853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4678371936,
                "rowCount" : 129954776
              },
              "compileTime" : {
                "sizeInBytes" : 4678371936,
                "rowCount" : 129954776
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] "
          },
          "0" : {
            "sign" : 115583072,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8930812,
                "rowCount" : 202973
              },
              "compileTime" : {
                "sizeInBytes" : 8930812,
                "rowCount" : 202973
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403] "
          },
          "2" : {
            "sign" : -1540588099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7277467456,
                "rowCount" : 129954776
              },
              "compileTime" : {
                "sizeInBytes" : 7277467456,
                "rowCount" : 129954776
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151)) "
          },
          "7" : {
            "sign" : 2057503892,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#116, cs_ship_date_sk#117, cs_bill_customer_sk#118, cs_bill_cdemo_sk#119, cs_bill_hdemo_sk#120, cs_bill_addr_sk#121, cs_ship_customer_sk#122, cs_ship_cdemo_sk#123, cs_ship_hdemo_sk#124, cs_ship_addr_sk#125, cs_call_center_sk#126, cs_catalog_page_sk#127, cs_ship_mode_sk#128, cs_warehouse_sk#129, cs_item_sk#130, cs_promo_sk#131, cs_order_number#132L, cs_quantity#133, cs_wholesale_cost#134, cs_list_price#135, cs_sales_price#136, cs_ext_discount_amt#137, cs_ext_sales_price#138, cs_ext_wholesale_cost#139, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -791515101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cs_item_sk#130], [cs_item_sk#130 AS item#401, (cast(sum(coalesce(cr_return_quantity#166, 0)) as decimal(15,4)) / cast(sum(coalesce(cs_quantity#133, 0)) as decimal(15,4))) AS return_ratio#402, (cast(sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#403]\n+- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n   +- Join Inner, ((cs_order_number#132L = cr_order_number#165L) AND (cs_item_sk#130 = cr_item_sk#151))\n      :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n      :  +- Join Inner, (cs_sold_date_sk#149 = d_date_sk#425)\n      :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n      :     :  +- Filter (((((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) AND isnotnull(cs_sold_date_sk#149)) AND dynamicpruning#573 [cs_sold_date_sk#149])\n      :     :     :  +- Project [d_date_sk#425]\n      :     :     :     +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#116,cs_ship_date_sk#117,cs_bill_customer_sk#118,cs_bill_cdemo_sk#119,cs_bill_hdemo_sk#120,cs_bill_addr_sk#121,cs_ship_customer_sk#122,cs_ship_cdemo_sk#123,cs_ship_hdemo_sk#124,cs_ship_addr_sk#125,cs_call_center_sk#126,cs_catalog_page_sk#127,cs_ship_mode_sk#128,cs_warehouse_sk#129,cs_item_sk#130,cs_promo_sk#131,cs_order_number#132L,cs_quantity#133,cs_wholesale_cost#134,cs_list_price#135,cs_sales_price#136,cs_ext_discount_amt#137,cs_ext_sales_price#138,cs_ext_wholesale_cost#139,... 10 more fields] parquet\n      :     +- Project [d_date_sk#425]\n      :        +- Filter (((isnotnull(d_year#431) AND isnotnull(d_moy#433)) AND ((d_year#431 = 2000) AND (d_moy#433 = 12))) AND isnotnull(d_date_sk#425))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#425,d_date_id#426,d_date#427,d_month_seq#428,d_week_seq#429,d_quarter_seq#430,d_year#431,d_dow#432,d_moy#433,d_dom#434,d_qoy#435,d_fy_year#436,d_fy_quarter_seq#437,d_fy_week_seq#438,d_day_name#439,d_quarter_name#440,d_holiday#441,d_weekend#442,d_following_holiday#443,d_first_dom#444,d_last_dom#445,d_same_day_ly#446,d_same_day_lq#447,d_current_day#448,... 4 more fields] parquet\n      +- Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n         +- Filter ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151)))\n            +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#150,cr_item_sk#151,cr_refunded_customer_sk#152,cr_refunded_cdemo_sk#153,cr_refunded_hdemo_sk#154,cr_refunded_addr_sk#155,cr_returning_customer_sk#156,cr_returning_cdemo_sk#157,cr_returning_hdemo_sk#158,cr_returning_addr_sk#159,cr_call_center_sk#160,cr_catalog_page_sk#161,cr_ship_mode_sk#162,cr_warehouse_sk#163,cr_reason_sk#164,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_return_tax#168,cr_return_amt_inc_tax#169,cr_fee#170,cr_return_ship_cost#171,cr_refunded_cash#172,cr_reversed_charge#173,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1942608837,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#425] Arguments: 3 "
          },
          "4" : {
            "sign" : 2105169829,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#149] Right keys [1]: [d_date_sk#425] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : 760798228,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 37748736,
            "rowCount" : 123540,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167] Arguments: 4 "
          },
          "5" : {
            "sign" : 2122326229,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149] Input [6]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_net_profit#148, cs_sold_date_sk#149] "
          },
          "6" : {
            "sign" : -2081685851,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_net_profit#148, cs_sold_date_sk#149] Condition : (((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130)) "
          },
          "1" : {
            "sign" : 693980161,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4678371936,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] Input [8]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167] "
          },
          "0" : {
            "sign" : -1526526146,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8930812,
            "rowCount" : 202973,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167] Keys [1]: [cs_item_sk#130] Functions [4]: [partial_sum(coalesce(cr_return_quantity#166, 0)), partial_sum(coalesce(cs_quantity#133, 0)), partial_sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))] Aggregate Attributes [6]: [sum#587L, sum#588L, sum#589, isEmpty#590, sum#591, isEmpty#592] Results [7]: [cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598] "
          },
          "2" : {
            "sign" : 1854821289,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7277467456,
            "rowCount" : 129954776,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [cs_order_number#132L, cs_item_sk#130] Right keys [2]: [cr_order_number#165L, cr_item_sk#151] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 1066985944,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1971502164,
            "rowCount" : 54763949,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [6]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_net_profit#148, cs_sold_date_sk#149] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#149), dynamicpruningexpression(cs_sold_date_sk#149 IN dynamicpruning#574)] PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_profit,1.00), GreaterThan(cs_net_paid,0.00), GreaterThan(cs_quantity,0), IsNotNull(cs_order_number), IsNotNull(cs_item_sk)] ReadSchema: struct<cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_profit:decimal(7,2)> "
          },
          "3" : {
            "sign" : 1925637485,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144] Input [6]: [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149, d_date_sk#425] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cs_item_sk#130], functions=[partial_sum(coalesce(cr_return_quantity#166, 0)), partial_sum(coalesce(cs_quantity#133, 0)), partial_sum(coalesce(cast(cr_return_amount#167 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#144 as decimal(12,2)), 0.00))], output=[cs_item_sk#130, sum#593L, sum#594L, sum#595, isEmpty#596, sum#597, isEmpty#598])\n+- Project [cs_item_sk#130, cs_quantity#133, cs_net_paid#144, cr_return_quantity#166, cr_return_amount#167]\n   +- BroadcastHashJoin [cs_order_number#132L, cs_item_sk#130], [cr_order_number#165L, cr_item_sk#151], Inner, BuildRight, false\n      :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144]\n      :  +- BroadcastHashJoin [cs_sold_date_sk#149], [d_date_sk#425], Inner, BuildRight, false\n      :     :- Project [cs_item_sk#130, cs_order_number#132L, cs_quantity#133, cs_net_paid#144, cs_sold_date_sk#149]\n      :     :  +- Filter (((((((isnotnull(cs_net_profit#148) AND isnotnull(cs_net_paid#144)) AND isnotnull(cs_quantity#133)) AND (cs_net_profit#148 > 1.00)) AND (cs_net_paid#144 > 0.00)) AND (cs_quantity#133 > 0)) AND isnotnull(cs_order_number#132L)) AND isnotnull(cs_item_sk#130))\n      :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#130,cs_order_number#132L,cs_quantity#133,cs_net_paid#144,cs_net_profit#148,cs_sold_date_sk#149] Batched: true, DataFilters: [isnotnull(cs_net_profit#148), isnotnull(cs_net_paid#144), isnotnull(cs_quantity#133), (cs_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#149), dynamicpruningexpression(cs_sold_date_sk#149 IN dynamicpruning#5..., PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_pro..., ReadSchema: struct<cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_prof...\n      :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n      :     +- BroadcastQueryStage 3\n      :        +- ReusedExchange [d_date_sk#425], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n      +- BroadcastQueryStage 4\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=572]\n            +- *(4) Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n               +- *(4) Filter (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151))\n                  +- *(4) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#151,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_returned_date_sk#176] Batched: true, DataFilters: [isnotnull(cr_return_amount#167), (cr_return_amount#167 > 10000.00), isnotnull(cr_order_number#16..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2010299724,
        "inputRowCount" : 54887520
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4829,
        "TotalTasksDurationInMs" : 17749,
        "IOBytes" : {
          "Total" : 69514384,
          "Details" : {
            "IR" : 69216502,
            "IW" : 0,
            "SR" : 0,
            "SW" : 297882
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 860665384,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1964832,
                "rowCount" : 61401
              },
              "compileTime" : {
                "sizeInBytes" : 1964832,
                "rowCount" : 61401
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78] "
          },
          "1" : {
            "sign" : 539304457,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8841744,
                "rowCount" : 61401
              },
              "compileTime" : {
                "sizeInBytes" : 8841744,
                "rowCount" : 61401
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65))) "
          },
          "2" : {
            "sign" : -548910500,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#64, wr_item_sk#65, wr_refunded_customer_sk#66, wr_refunded_cdemo_sk#67, wr_refunded_hdemo_sk#68, wr_refunded_addr_sk#69, wr_returning_customer_sk#70, wr_returning_cdemo_sk#71, wr_returning_hdemo_sk#72, wr_returning_addr_sk#73, wr_web_page_sk#74, wr_reason_sk#75, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78, wr_return_tax#79, wr_return_amt_inc_tax#80, wr_fee#81, wr_return_ship_cost#82, wr_refunded_cash#83, wr_reversed_charge#84, wr_account_credit#85, wr_net_loss#86, wr_returned_date_sk#87], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n+- Filter ((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND (isnotnull(wr_order_number#76L) AND isnotnull(wr_item_sk#65)))\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#64,wr_item_sk#65,wr_refunded_customer_sk#66,wr_refunded_cdemo_sk#67,wr_refunded_hdemo_sk#68,wr_refunded_addr_sk#69,wr_returning_customer_sk#70,wr_returning_cdemo_sk#71,wr_returning_hdemo_sk#72,wr_returning_addr_sk#73,wr_web_page_sk#74,wr_reason_sk#75,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_return_tax#79,wr_return_amt_inc_tax#80,wr_fee#81,wr_return_ship_cost#82,wr_refunded_cash#83,wr_reversed_charge#84,wr_account_credit#85,wr_net_loss#86,wr_returned_date_sk#87] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -467254953,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1964832,
            "rowCount" : 61401,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78] Input [5]: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78, wr_returned_date_sk#87] "
          },
          "1" : {
            "sign" : -1346175974,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1964832,
            "rowCount" : 61401,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78, wr_returned_date_sk#87] Condition : (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65)) "
          },
          "2" : {
            "sign" : 650488741,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1964832,
            "rowCount" : 61401,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [5]: [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78, wr_returned_date_sk#87] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNotNull(wr_item_sk)] ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#65, wr_order_number#76L, wr_return_quantity#77, wr_return_amt#78]\n+- Filter (((isnotnull(wr_return_amt#78) AND (wr_return_amt#78 > 10000.00)) AND isnotnull(wr_order_number#76L)) AND isnotnull(wr_item_sk#65))\n   +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#65,wr_order_number#76L,wr_return_quantity#77,wr_return_amt#78,wr_returned_date_sk#87] Batched: true, DataFilters: [isnotnull(wr_return_amt#78), (wr_return_amt#78 > 10000.00), isnotnull(wr_order_number#76L), isno..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNot..., ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1964832,
        "inputRowCount" : 61401
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 3495,
        "TotalTasksDurationInMs" : 26510,
        "IOBytes" : {
          "Total" : 122441256,
          "Details" : {
            "IR" : 122441256,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1668918259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#88] "
          },
          "1" : {
            "sign" : -1507908187,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88)) "
          },
          "2" : {
            "sign" : 850338322,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#88, d_date_id#89, d_date#90, d_month_seq#91, d_week_seq#92, d_quarter_seq#93, d_year#94, d_dow#95, d_moy#96, d_dom#97, d_qoy#98, d_fy_year#99, d_fy_quarter_seq#100, d_fy_week_seq#101, d_day_name#102, d_quarter_name#103, d_holiday#104, d_weekend#105, d_following_holiday#106, d_first_dom#107, d_last_dom#108, d_same_day_ly#109, d_same_day_lq#110, d_current_day#111, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#88]\n+- Filter (((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND ((d_year#94 = 2000) AND (d_moy#96 = 12))) AND isnotnull(d_date_sk#88))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_date_id#89,d_date#90,d_month_seq#91,d_week_seq#92,d_quarter_seq#93,d_year#94,d_dow#95,d_moy#96,d_dom#97,d_qoy#98,d_fy_year#99,d_fy_quarter_seq#100,d_fy_week_seq#101,d_day_name#102,d_quarter_name#103,d_holiday#104,d_weekend#105,d_following_holiday#106,d_first_dom#107,d_last_dom#108,d_same_day_ly#109,d_same_day_lq#110,d_current_day#111,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 886381581,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#88] Input [3]: [d_date_sk#88, d_year#94, d_moy#96] "
          },
          "1" : {
            "sign" : 580879863,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#88, d_year#94, d_moy#96] Condition : ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88)) "
          },
          "2" : {
            "sign" : 1928399324,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#88, d_year#94, d_moy#96] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#88]\n+- Filter ((((isnotnull(d_year#94) AND isnotnull(d_moy#96)) AND (d_year#94 = 2000)) AND (d_moy#96 = 12)) AND isnotnull(d_date_sk#88))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#88,d_year#94,d_moy#96] Batched: true, DataFilters: [isnotnull(d_year#94), isnotnull(d_moy#96), (d_year#94 = 2000), (d_moy#96 = 12), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 600,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2078,
        "TotalTasksDurationInMs" : 2067,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 228881872,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3997344,
                "rowCount" : 124917
              },
              "compileTime" : {
                "sizeInBytes" : 3997344,
                "rowCount" : 124917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167] "
          },
          "1" : {
            "sign" : 1494584532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19487052,
                "rowCount" : 124917
              },
              "compileTime" : {
                "sizeInBytes" : 19487052,
                "rowCount" : 124917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151))) "
          },
          "2" : {
            "sign" : -1542094344,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#150, cr_item_sk#151, cr_refunded_customer_sk#152, cr_refunded_cdemo_sk#153, cr_refunded_hdemo_sk#154, cr_refunded_addr_sk#155, cr_returning_customer_sk#156, cr_returning_cdemo_sk#157, cr_returning_hdemo_sk#158, cr_returning_addr_sk#159, cr_call_center_sk#160, cr_catalog_page_sk#161, cr_ship_mode_sk#162, cr_warehouse_sk#163, cr_reason_sk#164, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167, cr_return_tax#168, cr_return_amt_inc_tax#169, cr_fee#170, cr_return_ship_cost#171, cr_refunded_cash#172, cr_reversed_charge#173, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n+- Filter ((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND (isnotnull(cr_order_number#165L) AND isnotnull(cr_item_sk#151)))\n   +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#150,cr_item_sk#151,cr_refunded_customer_sk#152,cr_refunded_cdemo_sk#153,cr_refunded_hdemo_sk#154,cr_refunded_addr_sk#155,cr_returning_customer_sk#156,cr_returning_cdemo_sk#157,cr_returning_hdemo_sk#158,cr_returning_addr_sk#159,cr_call_center_sk#160,cr_catalog_page_sk#161,cr_ship_mode_sk#162,cr_warehouse_sk#163,cr_reason_sk#164,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_return_tax#168,cr_return_amt_inc_tax#169,cr_fee#170,cr_return_ship_cost#171,cr_refunded_cash#172,cr_reversed_charge#173,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 154790225,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167] Input [5]: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167, cr_returned_date_sk#176] "
          },
          "1" : {
            "sign" : -1527088571,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167, cr_returned_date_sk#176] Condition : (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151)) "
          },
          "2" : {
            "sign" : -1456478095,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3997344,
            "rowCount" : 124917,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [5]: [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167, cr_returned_date_sk#176] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns] PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number), IsNotNull(cr_item_sk)] ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#151, cr_order_number#165L, cr_return_quantity#166, cr_return_amount#167]\n+- Filter (((isnotnull(cr_return_amount#167) AND (cr_return_amount#167 > 10000.00)) AND isnotnull(cr_order_number#165L)) AND isnotnull(cr_item_sk#151))\n   +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#151,cr_order_number#165L,cr_return_quantity#166,cr_return_amount#167,cr_returned_date_sk#176] Batched: true, DataFilters: [isnotnull(cr_return_amount#167), (cr_return_amount#167 > 10000.00), isnotnull(cr_order_number#16..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number),..., ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint,cr_return_quantity:int,cr_return_amount:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3997344,
        "inputRowCount" : 124917
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 4970,
        "TotalTasksDurationInMs" : 23059,
        "IOBytes" : {
          "Total" : 219952099,
          "Details" : {
            "IR" : 219952099,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -626866452,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 121248,
                "rowCount" : 1263
              },
              "compileTime" : {
                "sizeInBytes" : 8914268,
                "rowCount" : 202597
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_item_sk#178], [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0)) as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0)) as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)) as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00)) as decimal(15,4))) AS currency_ratio#409], HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -50766090,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 121248,
            "rowCount" : 1263,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610] Keys [1]: [ss_item_sk#178] Functions [4]: [sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))] Aggregate Attributes [4]: [sum(coalesce(sr_return_quantity#209, 0))#491L, sum(coalesce(ss_quantity#186, 0))#492L, sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00))#493, sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))#494] Results [3]: [ss_item_sk#178 AS item#407, (cast(sum(coalesce(sr_return_quantity#209, 0))#491L as decimal(15,4)) / cast(sum(coalesce(ss_quantity#186, 0))#492L as decimal(15,4))) AS return_ratio#408, (cast(sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00))#493 as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))#494 as decimal(15,4))) AS currency_ratio#409] "
          },
          "1" : {
            "sign" : -2091618585,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 8914268,
            "rowCount" : 202597,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_item_sk#178], functions=[sum(coalesce(sr_return_quantity#209, 0)), sum(coalesce(ss_quantity#186, 0)), sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[item#407, return_ratio#408, currency_ratio#409])\n+- ShuffleQueryStage 8\n   +- Exchange hashpartitioning(ss_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=1199]\n      +- *(7) HashAggregate(keys=[ss_item_sk#178], functions=[partial_sum(coalesce(sr_return_quantity#209, 0)), partial_sum(coalesce(ss_quantity#186, 0)), partial_sum(coalesce(cast(sr_return_amt#210 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#196 as decimal(12,2)), 0.00))], output=[ss_item_sk#178, sum#605L, sum#606L, sum#607, isEmpty#608, sum#609, isEmpty#610])\n         +- *(7) Project [ss_item_sk#178, ss_quantity#186, ss_net_paid#196, sr_return_quantity#209, sr_return_amt#210]\n            +- *(7) BroadcastHashJoin [ss_ticket_number#185L, ss_item_sk#178], [sr_ticket_number#208L, sr_item_sk#201], Inner, BuildRight, false\n               :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196]\n               :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#199], [d_date_sk#453], Inner, BuildRight, false\n               :     :- *(7) Project [ss_item_sk#178, ss_ticket_number#185L, ss_quantity#186, ss_net_paid#196, ss_sold_date_sk#199]\n               :     :  +- *(7) Filter (((((((isnotnull(ss_net_profit#198) AND isnotnull(ss_net_paid#196)) AND isnotnull(ss_quantity#186)) AND (ss_net_profit#198 > 1.00)) AND (ss_net_paid#196 > 0.00)) AND (ss_quantity#186 > 0)) AND isnotnull(ss_ticket_number#185L)) AND isnotnull(ss_item_sk#178))\n               :     :     +- *(7) ColumnarToRow\n               :     :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#178,ss_ticket_number#185L,ss_quantity#186,ss_net_paid#196,ss_net_profit#198,ss_sold_date_sk#199] Batched: true, DataFilters: [isnotnull(ss_net_profit#198), isnotnull(ss_net_paid#196), isnotnull(ss_quantity#186), (ss_net_pr..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#199), dynamicpruningexpression(ss_sold_date_sk#199 IN dynamicpruning#5..., PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_pro..., ReadSchema: struct<ss_item_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_pro...\n               :     :              +- SubqueryBroadcast dynamicpruning#574, 0, [d_date_sk#453], [id=#1152]\n               :     :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1149]\n                                             +- Project [d_date_sk#453]\n                                                +- Filter ((((isnotnull(d_year#459) AND isnotnull(d_moy#461)) AND (d_year#459 = 2000)) AND (d_moy#461 = 12)) AND isnotnull(d_date_sk#453))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#453,d_year#459,d_moy#461] Batched: true, DataFilters: [isnotnull(d_year#459), isnotnull(d_moy#461), (d_year#459 = 2000), (d_moy#461 = 12), isnotnull(d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,12), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :     +- BroadcastQueryStage 6\n               :        +- ReusedExchange [d_date_sk#453], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=497]\n               +- BroadcastQueryStage 7\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true], input[0, int, true]),false), [plan_id=626]\n                     +- *(6) Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n                        +- *(6) Filter (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201))\n                           +- *(6) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#201,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_returned_date_sk#219] Batched: true, DataFilters: [isnotnull(sr_return_amt#210), (sr_return_amt#210 > 10000.00), isnotnull(sr_ticket_number#208L), ..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 121248,
        "inputRowCount" : 1263
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 579, 273, 769, 613, 981, 507, 663, 329, 758, 468, 468, 780, 351, 507, 808, 897, 574, 496, 786, 780, 156, 1018, 663, 468, 858, 574, 457, 1474, 624, 446, 741, 780, 833, 468, 329, 574, 441, 953, 117, 423, 847, 808, 468, 691, 106, 468, 340, 468, 457, 496, 624, 234, 780, 741, 730, 914, 808, 680, 574, 964, 930, 234, 507, 574, 730, 703, 969, 649, 485, 273, 819, 390, 992, 351, 909, 507, 741, 663, 485, 730, 430, 468, 719, 1003, 702, 546, 351, 897, 887, 446, 716, 351, 574, 624, 769, 1000, 1061, 468, 390, 117, 468, 774, 774, 574, 708, 340, 485, 597, 613, 0, 719, 936, 769, 1299, 975, 730, 568, 825, 602, 485, 568, 1003, 808, 234, 351, 964, 909, 457, 730, 507, 719, 646, 390, 507, 680, 468, 964, 507, 819, 585, 390, 1086, 423, 770, 457, 769, 574, 897, 457, 1120, 602, 641, 613, 351, 624, 780, 696, 496, 468, 696, 273, 563, 1131, 624, 624, 324, 624, 563, 1003, 351, 390, 834, 1042, 691, 702, 1393, 457, 1107, 234, 769, 780, 624, 117, 234, 897, 897, 496, 809, 953, 390, 819, 897, 507, 808, 610, 691, 1036, 298, 273, 696 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 7880.0,
        "FinishedTasksDistributionInMs" : [ 135.0, 226.0, 316.0, 381.0, 1269.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 236,
        "TotalTasksDurationInMs" : 227,
        "IOBytes" : {
          "Total" : 147382,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 121187,
            "SW" : 26195
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1855459122,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3020736,
                "rowCount" : 94398
              },
              "compileTime" : {
                "sizeInBytes" : 3020736,
                "rowCount" : 94398
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210] "
          },
          "1" : {
            "sign" : -1845221019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12082944,
                "rowCount" : 94398
              },
              "compileTime" : {
                "sizeInBytes" : 12082944,
                "rowCount" : 94398
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201))) "
          },
          "2" : {
            "sign" : 630062237,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#200, sr_item_sk#201, sr_customer_sk#202, sr_cdemo_sk#203, sr_hdemo_sk#204, sr_addr_sk#205, sr_store_sk#206, sr_reason_sk#207, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210, sr_return_tax#211, sr_return_amt_inc_tax#212, sr_fee#213, sr_return_ship_cost#214, sr_refunded_cash#215, sr_reversed_charge#216, sr_store_credit#217, sr_net_loss#218, sr_returned_date_sk#219], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n+- Filter ((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND (isnotnull(sr_ticket_number#208L) AND isnotnull(sr_item_sk#201)))\n   +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#200,sr_item_sk#201,sr_customer_sk#202,sr_cdemo_sk#203,sr_hdemo_sk#204,sr_addr_sk#205,sr_store_sk#206,sr_reason_sk#207,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_return_tax#211,sr_return_amt_inc_tax#212,sr_fee#213,sr_return_ship_cost#214,sr_refunded_cash#215,sr_reversed_charge#216,sr_store_credit#217,sr_net_loss#218,sr_returned_date_sk#219] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 340262019,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3020736,
            "rowCount" : 94398,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210] Input [5]: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210, sr_returned_date_sk#219] "
          },
          "1" : {
            "sign" : -1121339520,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3020736,
            "rowCount" : 94398,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210, sr_returned_date_sk#219] Condition : (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201)) "
          },
          "2" : {
            "sign" : -99383616,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3020736,
            "rowCount" : 94398,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [5]: [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210, sr_returned_date_sk#219] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns] PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)] ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#201, sr_ticket_number#208L, sr_return_quantity#209, sr_return_amt#210]\n+- Filter (((isnotnull(sr_return_amt#210) AND (sr_return_amt#210 > 10000.00)) AND isnotnull(sr_ticket_number#208L)) AND isnotnull(sr_item_sk#201))\n   +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#201,sr_ticket_number#208L,sr_return_quantity#209,sr_return_amt#210,sr_returned_date_sk#219] Batched: true, DataFilters: [isnotnull(sr_return_amt#210), (sr_return_amt#210 > 10000.00), isnotnull(sr_ticket_number#208L), ..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNo..., ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3020736,
        "inputRowCount" : 94398
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 8295,
        "TotalTasksDurationInMs" : 68226,
        "IOBytes" : {
          "Total" : 413179059,
          "Details" : {
            "IR" : 413179059,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227018086,
  "SQLEndTimeInMs" : 1702227041245,
  "Objectives" : {
    "DurationInMs" : 23159,
    "IOBytes" : {
      "Total" : 986448744,
      "Details" : {
        "IR" : 984945260,
        "IW" : 0,
        "SR" : 751742,
        "SW" : 751742
      }
    }
  }
}
