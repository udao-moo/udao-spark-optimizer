{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : 963186173,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6432,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#105 = i_item_sk#36) "
        },
        "8" : {
          "sign" : 1391912490,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1080,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
        },
        "19" : {
          "sign" : -1208260960,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#125 = cs_sold_date_sk#124) "
        },
        "23" : {
          "sign" : 1918970034,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1080,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#125] "
        },
        "4" : {
          "sign" : -1914564065,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
        },
        "15" : {
          "sign" : -1494117967,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1655427295,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5360,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#89] "
        },
        "9" : {
          "sign" : -1344689365,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 22140,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
        },
        "22" : {
          "sign" : -68407761,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#91, cs_ship_date_sk#92, cs_bill_customer_sk#93, cs_bill_cdemo_sk#94, cs_bill_hdemo_sk#95, cs_bill_addr_sk#96, cs_ship_customer_sk#97, cs_ship_cdemo_sk#98, cs_ship_hdemo_sk#99, cs_ship_addr_sk#100, cs_call_center_sk#101, cs_catalog_page_sk#102, cs_ship_mode_sk#103, cs_warehouse_sk#104, cs_item_sk#105, cs_promo_sk#106, cs_order_number#107L, cs_quantity#108, cs_wholesale_cost#109, cs_list_price#110, cs_sales_price#111, cs_ext_discount_amt#112, cs_ext_sales_price#113, cs_ext_wholesale_cost#114, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 1971993811,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#158] "
        },
        "13" : {
          "sign" : 1027109379,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3216,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
        },
        "24" : {
          "sign" : -1340545092,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 22140,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125)) "
        },
        "16" : {
          "sign" : 1480875155,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3978820,
          "rowCount" : 198941,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#89) "
        },
        "5" : {
          "sign" : -1434073370,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3421352112,
          "rowCount" : 142556338,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
        },
        "10" : {
          "sign" : -246181910,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : -1993356771,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#124) AND isnotnull(cs_item_sk#105)) AND dynamicpruning#156 [cs_sold_date_sk#124]) AND might_contain(scalar-subquery#159 [], xxhash64(cs_item_sk#105, 42))) "
        },
        "6" : {
          "sign" : -1095088295,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651718304,
          "rowCount" : 142556338,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#155 [cs_sold_date_sk#35]) "
        },
        "1" : {
          "sign" : 566759904,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2301991248,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
        },
        "17" : {
          "sign" : -398448311,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3978820,
          "rowCount" : 198941,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#105], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#112)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#89, cs_item_sk#105] "
        },
        "25" : {
          "sign" : -1386512826,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#125, d_date_id#126, d_date#127, d_month_seq#128, d_week_seq#129, d_quarter_seq#130, d_year#131, d_dow#132, d_moy#133, d_dom#134, d_qoy#135, d_fy_year#136, d_fy_quarter_seq#137, d_fy_week_seq#138, d_day_name#139, d_quarter_name#140, d_holiday#141, d_weekend#142, d_following_holiday#143, d_first_dom#144, d_last_dom#145, d_same_day_ly#146, d_same_day_lq#147, d_current_day#148, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -538144002,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 114168,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
        },
        "0" : {
          "sign" : -1734156254,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#0] "
        },
        "20" : {
          "sign" : 683982717,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3438552408,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#105, cs_ext_discount_amt#112, cs_sold_date_sk#124] "
        },
        "2" : {
          "sign" : -1853154232,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4603982496,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#89)) "
        },
        "18" : {
          "sign" : -1983779893,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#105, cs_ext_discount_amt#112] "
        },
        "7" : {
          "sign" : 119021198,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 1136922818,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
        }
      },
      "links" : [ {
        "fromId" : 7,
        "fromName" : "LogicalRelation",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "LogicalRelation",
        "toId" : 9,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 6,
        "fromName" : "Filter",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Aggregate",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#0]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#89))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#155 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- Project [d_date_sk#58]\n      :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#89]\n         +- Join Inner, (cs_item_sk#105 = i_item_sk#36)\n            :- Project [i_item_sk#36]\n            :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n            :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#89)\n               +- Aggregate [cs_item_sk#105], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#112)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#89, cs_item_sk#105]\n                  +- Project [cs_item_sk#105, cs_ext_discount_amt#112]\n                     +- Join Inner, (d_date_sk#125 = cs_sold_date_sk#124)\n                        :- Project [cs_item_sk#105, cs_ext_discount_amt#112, cs_sold_date_sk#124]\n                        :  +- Filter (((isnotnull(cs_sold_date_sk#124) AND isnotnull(cs_item_sk#105)) AND dynamicpruning#156 [cs_sold_date_sk#124]) AND might_contain(scalar-subquery#159 [], xxhash64(cs_item_sk#105, 42)))\n                        :     :  :- Project [d_date_sk#125]\n                        :     :  :  +- Filter ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#125,d_date_id#126,d_date#127,d_month_seq#128,d_week_seq#129,d_quarter_seq#130,d_year#131,d_dow#132,d_moy#133,d_dom#134,d_qoy#135,d_fy_year#136,d_fy_quarter_seq#137,d_fy_week_seq#138,d_day_name#139,d_quarter_name#140,d_holiday#141,d_weekend#142,d_following_holiday#143,d_first_dom#144,d_last_dom#145,d_same_day_ly#146,d_same_day_lq#147,d_current_day#148,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#158]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#91,cs_ship_date_sk#92,cs_bill_customer_sk#93,cs_bill_cdemo_sk#94,cs_bill_hdemo_sk#95,cs_bill_addr_sk#96,cs_ship_customer_sk#97,cs_ship_cdemo_sk#98,cs_ship_hdemo_sk#99,cs_ship_addr_sk#100,cs_call_center_sk#101,cs_catalog_page_sk#102,cs_ship_mode_sk#103,cs_warehouse_sk#104,cs_item_sk#105,cs_promo_sk#106,cs_order_number#107L,cs_quantity#108,cs_wholesale_cost#109,cs_list_price#110,cs_sales_price#111,cs_ext_discount_amt#112,cs_ext_sales_price#113,cs_ext_wholesale_cost#114,... 10 more fields] parquet\n                        +- Project [d_date_sk#125]\n                           +- Filter ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125))\n                              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#125,d_date_id#126,d_date#127,d_month_seq#128,d_week_seq#129,d_quarter_seq#130,d_year#131,d_dow#132,d_moy#133,d_dom#134,d_qoy#135,d_fy_year#136,d_fy_quarter_seq#137,d_fy_week_seq#138,d_day_name#139,d_quarter_name#140,d_holiday#141,d_weekend#142,d_following_holiday#143,d_first_dom#144,d_last_dom#145,d_same_day_ly#146,d_same_day_lq#147,d_current_day#148,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 59724419180,
      "inputRowCount" : 286896132
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 339584608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1336883520,
            "rowCount" : 66844176,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : 821030829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 363233549224,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 658258652,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "13" : {
            "sign" : 1382015193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1604260224,
            "rowCount" : 66844176,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#178 = i_item_sk#36) "
          },
          "16" : {
            "sign" : -1712796285,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178], HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))]) "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651718304,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 392624424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13874312739104982528,
            "rowCount" : 867144546194061408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -235964175,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "2" : {
            "sign" : -1917724942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27748625478209965056,
            "rowCount" : 867144546194061408,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1055882344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 259452535160,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n         +- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n               +- LogicalQueryStage Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178], HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29806880620,
        "inputRowCount" : 143472385
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226867290,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8155,
        "IOBytes" : {
          "Total" : 69036401,
          "Details" : {
            "IR" : 68758485,
            "IW" : 0,
            "SR" : 138958,
            "SW" : 138958
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 339584608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16941120,
            "rowCount" : 847056,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : 821030829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 363233549224,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 658258652,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 50420,
            "rowCount" : 2521,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "13" : {
            "sign" : 1382015193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20329344,
            "rowCount" : 847056,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#178 = i_item_sk#36) "
          },
          "16" : {
            "sign" : -1712796285,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80672,
            "rowCount" : 2521,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178], HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))]) "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651718304,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 392624424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 175816661297991168,
            "rowCount" : 10988541331124448,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -235964175,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "2" : {
            "sign" : -1917724942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 351633322595982336,
            "rowCount" : 10988541331124448,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1055882344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 259452535160,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n         +- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n               +- LogicalQueryStage Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178], HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29802982472,
        "inputRowCount" : 143275965
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226874446,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 999,
        "IOBytes" : {
          "Total" : 34521285,
          "Details" : {
            "IR" : 34381383,
            "IW" : 0,
            "SR" : 138958,
            "SW" : 944
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1338534772,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056768,
            "rowCount" : 166,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163], BroadcastQueryStage 5 "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : 821030829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 363233549224,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651718304,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : -185080556,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 34455296669248,
            "rowCount" : 2153456041828,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "0" : {
            "sign" : 1339967859,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "2" : {
            "sign" : -1144529804,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68910593338496,
            "rowCount" : 2153456041828,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1055882344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 259452535160,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- LogicalQueryStage Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29802893608,
        "inputRowCount" : 143273274
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226874798,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 647,
        "IOBytes" : {
          "Total" : 34383271,
          "Details" : {
            "IR" : 34381383,
            "IW" : 0,
            "SR" : 944,
            "SW" : 944
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -42787906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6720,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "19" : {
            "sign" : -1732323473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197] "
          },
          "23" : {
            "sign" : 1062009442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198)) "
          },
          "4" : {
            "sign" : 821030829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 1466045634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "22" : {
            "sign" : -67360436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#198] "
          },
          "26" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "13" : {
            "sign" : -1438471717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8064,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#178 = i_item_sk#36) "
          },
          "24" : {
            "sign" : -1200914412,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#198, d_date_id#199, d_date#200, d_month_seq#201, d_week_seq#202, d_quarter_seq#203, d_year#204, d_dow#205, d_moy#206, d_dom#207, d_qoy#208, d_fy_year#209, d_fy_quarter_seq#210, d_fy_week_seq#211, d_day_name#212, d_quarter_name#213, d_holiday#214, d_weekend#215, d_following_holiday#216, d_first_dom#217, d_last_dom#218, d_same_day_ly#219, d_same_day_lq#220, d_current_day#221, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -3201339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : 312335268,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#164, cs_ship_date_sk#165, cs_bill_customer_sk#166, cs_bill_cdemo_sk#167, cs_bill_hdemo_sk#168, cs_bill_addr_sk#169, cs_ship_customer_sk#170, cs_ship_cdemo_sk#171, cs_ship_hdemo_sk#172, cs_ship_addr_sk#173, cs_call_center_sk#174, cs_catalog_page_sk#175, cs_ship_mode_sk#176, cs_warehouse_sk#177, cs_item_sk#178, cs_promo_sk#179, cs_order_number#180L, cs_quantity#181, cs_wholesale_cost#182, cs_list_price#183, cs_sales_price#184, cs_ext_discount_amt#185, cs_ext_sales_price#186, cs_ext_wholesale_cost#187, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651718304,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 163806710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 744663424512,
            "rowCount" : 46541464032,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "17" : {
            "sign" : 1310459344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185] "
          },
          "25" : {
            "sign" : 176705871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -399893901,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "20" : {
            "sign" : 2097627599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42))) "
          },
          "27" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 114168,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : 2121667572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1489326849024,
            "rowCount" : 46541464032,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "18" : {
            "sign" : -1151504781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#198 = cs_sold_date_sk#197) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "29" : {
            "sign" : 1911698313,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#198], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : 1055882344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          },
          "28" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n         +- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n               +- Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178]\n                  +- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                     +- Join Inner, (d_date_sk#198 = cs_sold_date_sk#197)\n                        :- Project [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197]\n                        :  +- Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42)))\n                        :     :  :- Project [d_date_sk#198]\n                        :     :  :  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#164,cs_ship_date_sk#165,cs_bill_customer_sk#166,cs_bill_cdemo_sk#167,cs_bill_hdemo_sk#168,cs_bill_addr_sk#169,cs_ship_customer_sk#170,cs_ship_cdemo_sk#171,cs_ship_hdemo_sk#172,cs_ship_addr_sk#173,cs_call_center_sk#174,cs_catalog_page_sk#175,cs_ship_mode_sk#176,cs_warehouse_sk#177,cs_item_sk#178,cs_promo_sk#179,cs_order_number#180L,cs_quantity#181,cs_wholesale_cost#182,cs_list_price#183,cs_sales_price#184,cs_ext_discount_amt#185,cs_ext_sales_price#186,cs_ext_wholesale_cost#187,... 10 more fields] parquet\n                        +- LogicalQueryStage Project [d_date_sk#198], BroadcastQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 59602642192,
        "inputRowCount" : 286546550
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226864571,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10874,
        "IOBytes" : {
          "Total" : 70342763,
          "Details" : {
            "IR" : 70062191,
            "IW" : 0,
            "SR" : 140286,
            "SW" : 140286
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -42787906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6720,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "19" : {
            "sign" : -1732323473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197] "
          },
          "23" : {
            "sign" : 1062009442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198)) "
          },
          "4" : {
            "sign" : 821030829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 363233549224,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 1466045634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 4115440,
            "rowCount" : 205772,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "22" : {
            "sign" : -67360436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#198] "
          },
          "26" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "13" : {
            "sign" : -1438471717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8064,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#178 = i_item_sk#36) "
          },
          "24" : {
            "sign" : -1200914412,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#198, d_date_id#199, d_date#200, d_month_seq#201, d_week_seq#202, d_quarter_seq#203, d_year#204, d_dow#205, d_moy#206, d_dom#207, d_qoy#208, d_fy_year#209, d_fy_quarter_seq#210, d_fy_week_seq#211, d_day_name#212, d_quarter_name#213, d_holiday#214, d_weekend#215, d_following_holiday#216, d_first_dom#217, d_last_dom#218, d_same_day_ly#219, d_same_day_lq#220, d_current_day#221, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -3201339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4115440,
            "rowCount" : 205772,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : 312335268,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#164, cs_ship_date_sk#165, cs_bill_customer_sk#166, cs_bill_cdemo_sk#167, cs_bill_hdemo_sk#168, cs_bill_addr_sk#169, cs_ship_customer_sk#170, cs_ship_cdemo_sk#171, cs_ship_hdemo_sk#172, cs_ship_addr_sk#173, cs_call_center_sk#174, cs_catalog_page_sk#175, cs_ship_mode_sk#176, cs_warehouse_sk#177, cs_item_sk#178, cs_promo_sk#179, cs_order_number#180L, cs_quantity#181, cs_wholesale_cost#182, cs_list_price#183, cs_sales_price#184, cs_ext_discount_amt#185, cs_ext_sales_price#186, cs_ext_wholesale_cost#187, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651718304,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 163806710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69740841451008,
            "rowCount" : 4358802590688,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "17" : {
            "sign" : 1310459344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 260756890940,
            "rowCount" : 13037844547,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185] "
          },
          "25" : {
            "sign" : 176705871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -399893901,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "20" : {
            "sign" : 2097627599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42))) "
          },
          "27" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 114168,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : 2121667572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 139481682902016,
            "rowCount" : 4358802590688,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "18" : {
            "sign" : -1151504781,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 365059647316,
            "rowCount" : 13037844547,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#198 = cs_sold_date_sk#197) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "29" : {
            "sign" : 1911698313,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#198], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : 1055882344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 259452535160,
            "rowCount" : 12972626758,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          },
          "28" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n         +- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n               +- Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178]\n                  +- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                     +- Join Inner, (d_date_sk#198 = cs_sold_date_sk#197)\n                        :- Project [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197]\n                        :  +- Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42)))\n                        :     :  :- Project [d_date_sk#198]\n                        :     :  :  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#164,cs_ship_date_sk#165,cs_bill_customer_sk#166,cs_bill_cdemo_sk#167,cs_bill_hdemo_sk#168,cs_bill_addr_sk#169,cs_ship_customer_sk#170,cs_ship_cdemo_sk#171,cs_ship_hdemo_sk#172,cs_ship_addr_sk#173,cs_call_center_sk#174,cs_catalog_page_sk#175,cs_ship_mode_sk#176,cs_warehouse_sk#177,cs_item_sk#178,cs_promo_sk#179,cs_order_number#180L,cs_quantity#181,cs_wholesale_cost#182,cs_list_price#183,cs_sales_price#184,cs_ext_discount_amt#185,cs_ext_sales_price#186,cs_ext_wholesale_cost#187,... 10 more fields] parquet\n                        +- LogicalQueryStage Project [d_date_sk#198], BroadcastQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 59604738640,
        "inputRowCount" : 286546552
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226864942,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10503,
        "IOBytes" : {
          "Total" : 70171025,
          "Details" : {
            "IR" : 69890453,
            "IW" : 0,
            "SR" : 140286,
            "SW" : 140286
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1757093709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 256,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#23))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#23))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 16
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226875261,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 184,
        "IOBytes" : {
          "Total" : 944,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 944,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1911362612,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4760,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4760,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226866624,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8821,
        "IOBytes" : {
          "Total" : 69037729,
          "Details" : {
            "IR" : 68758485,
            "IW" : 0,
            "SR" : 140286,
            "SW" : 138958
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 2097627599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42))) "
          },
          "5" : {
            "sign" : 312335268,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#164, cs_ship_date_sk#165, cs_bill_customer_sk#166, cs_bill_cdemo_sk#167, cs_bill_hdemo_sk#168, cs_bill_addr_sk#169, cs_ship_customer_sk#170, cs_ship_cdemo_sk#171, cs_ship_hdemo_sk#172, cs_ship_addr_sk#173, cs_call_center_sk#174, cs_catalog_page_sk#175, cs_ship_mode_sk#176, cs_warehouse_sk#177, cs_item_sk#178, cs_promo_sk#179, cs_order_number#180L, cs_quantity#181, cs_wholesale_cost#182, cs_list_price#183, cs_sales_price#184, cs_ext_discount_amt#185, cs_ext_sales_price#186, cs_ext_wholesale_cost#187, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1717339219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185] "
          },
          "0" : {
            "sign" : -1230532564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3978820,
                "rowCount" : 198941
              },
              "compileTime" : {
                "sizeInBytes" : 3978820,
                "rowCount" : 198941
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] "
          },
          "2" : {
            "sign" : 2075965018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#198 = cs_sold_date_sk#197) "
          },
          "3" : {
            "sign" : -1732323473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3438552408,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 3438552408,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178]\n+- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n   +- Join Inner, (d_date_sk#198 = cs_sold_date_sk#197)\n      :- Project [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197]\n      :  +- Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42)))\n      :     :  :- Project [d_date_sk#198]\n      :     :  :  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n      :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n      :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n      :     :     +- Project [i_item_sk#36]\n      :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n      :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#164,cs_ship_date_sk#165,cs_bill_customer_sk#166,cs_bill_cdemo_sk#167,cs_bill_hdemo_sk#168,cs_bill_addr_sk#169,cs_ship_customer_sk#170,cs_ship_cdemo_sk#171,cs_ship_hdemo_sk#172,cs_ship_addr_sk#173,cs_call_center_sk#174,cs_catalog_page_sk#175,cs_ship_mode_sk#176,cs_warehouse_sk#177,cs_item_sk#178,cs_promo_sk#179,cs_order_number#180L,cs_quantity#181,cs_wholesale_cost#182,cs_list_price#183,cs_sales_price#184,cs_ext_discount_amt#185,cs_ext_sales_price#186,cs_ext_wholesale_cost#187,... 10 more fields] parquet\n      +- Project [d_date_sk#198]\n         +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 411882011,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [3]: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#197), dynamicpruningexpression(cs_sold_date_sk#197 IN dynamicpruning#229)] PushedFilters: [IsNotNull(cs_item_sk)] ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)> "
          },
          "5" : {
            "sign" : 1456281294,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#198] Arguments: 3 "
          },
          "1" : {
            "sign" : 916848763,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cs_item_sk#178, cs_ext_discount_amt#185] Input [4]: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197, d_date_sk#198] "
          },
          "0" : {
            "sign" : 2045520007,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [cs_item_sk#178, cs_ext_discount_amt#185] Keys [1]: [cs_item_sk#178] Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#185))] Aggregate Attributes [2]: [sum#235, count#236L] Results [3]: [cs_item_sk#178, sum#237, count#238L] "
          },
          "2" : {
            "sign" : 941531876,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#197] Right keys [1]: [d_date_sk#198] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 999094391,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197] Condition : (isnotnull(cs_item_sk#178) AND might_contain(Subquery subquery#232, [id=#110], xxhash64(cs_item_sk#178, 42))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cs_item_sk#178], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#185))], output=[cs_item_sk#178, sum#237, count#238L])\n+- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n   +- BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#198], Inner, BuildRight, false\n      :- Filter (isnotnull(cs_item_sk#178) AND might_contain(Subquery subquery#232, [id=#110], xxhash64(cs_item_sk#178, 42)))\n      :  :  +- Subquery subquery#232, [id=#110]\n      :  :     +- AdaptiveSparkPlan isFinalPlan=false\n      :  :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n      :  :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n      :  :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n      :  :                 +- Project [i_item_sk#36]\n      :  :                    +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      :  :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n      :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#178,cs_ext_discount_amt#185,cs_sold_date_sk#197] Batched: true, DataFilters: [isnotnull(cs_item_sk#178)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#197), dynamicpruningexpression(cs_sold_date_sk#197 IN dynamicpruning#2..., PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n      :        +- SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n      :           +- AdaptiveSparkPlan isFinalPlan=false\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n      :                 +- Project [d_date_sk#198]\n      :                    +- Filter (((isnotnull(d_date#200) AND (d_date#200 >= 1998-03-18)) AND (d_date#200 <= 1998-06-16)) AND isnotnull(d_date_sk#198))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date#200] Batched: true, DataFilters: [isnotnull(d_date#200), (d_date#200 >= 1998-03-18), (d_date#200 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 3\n         +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3439601712,
        "inputRowCount" : 143273108
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 7156,
        "TotalTasksDurationInMs" : 31597,
        "IOBytes" : {
          "Total" : 34515116,
          "Details" : {
            "IR" : 34377102,
            "IW" : 0,
            "SR" : 0,
            "SW" : 138014
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1427690654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5360,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 5360,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "1" : {
            "sign" : -491439159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6432,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 6432,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#178 = i_item_sk#36) "
          },
          "2" : {
            "sign" : 714161861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3978820,
                "rowCount" : 198941
              },
              "compileTime" : {
                "sizeInBytes" : 3978820,
                "rowCount" : 198941
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n+- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n   :- Project [i_item_sk#36]\n   :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n   +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n      +- Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178]\n         +- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n            +- Join Inner, (d_date_sk#198 = cs_sold_date_sk#197)\n               :- Project [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197]\n               :  +- Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42)))\n               :     :  :- Project [d_date_sk#198]\n               :     :  :  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n               :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n               :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n               :     :     +- Project [i_item_sk#36]\n               :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n               :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#164,cs_ship_date_sk#165,cs_bill_customer_sk#166,cs_bill_cdemo_sk#167,cs_bill_hdemo_sk#168,cs_bill_addr_sk#169,cs_ship_customer_sk#170,cs_ship_cdemo_sk#171,cs_ship_hdemo_sk#172,cs_ship_addr_sk#173,cs_call_center_sk#174,cs_catalog_page_sk#175,cs_ship_mode_sk#176,cs_warehouse_sk#177,cs_item_sk#178,cs_promo_sk#179,cs_order_number#180L,cs_quantity#181,cs_wholesale_cost#182,cs_list_price#183,cs_sales_price#184,cs_ext_discount_amt#185,cs_ext_sales_price#186,cs_ext_wholesale_cost#187,... 10 more fields] parquet\n               +- Project [d_date_sk#198]\n                  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n                     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 796152009,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 80672,
            "rowCount" : 2521,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_item_sk#178, sum#237, count#238L] Keys [1]: [cs_item_sk#178] Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#185))] Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#185))#162] Results [2]: [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185))#162 / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] "
          },
          "5" : {
            "sign" : 274746176,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cs_item_sk#178, sum#237, count#238L] Arguments: 4 "
          },
          "1" : {
            "sign" : 380668293,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6432,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [i_item_sk#36] Right keys [1]: [cs_item_sk#178] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 607856904,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5360,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] Input [3]: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] "
          },
          "2" : {
            "sign" : 458704075,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#36] Arguments: 1 "
          },
          "3" : {
            "sign" : 535219420,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3978820,
            "rowCount" : 198941,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [(1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178] Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#163) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "HashAggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n+- BroadcastHashJoin [i_item_sk#36], [cs_item_sk#178], Inner, BuildLeft, false\n   :- BroadcastQueryStage 1\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n   :     +- *(2) Project [i_item_sk#36]\n   :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   :           +- *(2) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n   +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n      +- HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))], output=[(1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178])\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(cs_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n               +- *(4) HashAggregate(keys=[cs_item_sk#178], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#185))], output=[cs_item_sk#178, sum#237, count#238L])\n                  +- *(4) Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                     +- *(4) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#198], Inner, BuildRight, false\n                        :- *(4) Filter (isnotnull(cs_item_sk#178) AND might_contain(Subquery subquery#232, [id=#110], xxhash64(cs_item_sk#178, 42)))\n                        :  :  +- Subquery subquery#232, [id=#110]\n                        :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                       +- ShuffleQueryStage 0\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                                +- *(1) Project [i_item_sk#36]\n                                                   +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                      +- *(1) ColumnarToRow\n                                                         +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                    +- == Initial Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                             +- Project [i_item_sk#36]\n                                                +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                        :  +- *(4) ColumnarToRow\n                        :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#178,cs_ext_discount_amt#185,cs_sold_date_sk#197] Batched: true, DataFilters: [isnotnull(cs_item_sk#178)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#197), dynamicpruningexpression(cs_sold_date_sk#197 IN dynamicpruning#2..., PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n                        :           +- SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n                        :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                             +- Project [d_date_sk#198]\n                                                +- Filter (((isnotnull(d_date#200) AND (d_date#200 >= 1998-03-18)) AND (d_date#200 <= 1998-06-16)) AND isnotnull(d_date_sk#198))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date#200] Batched: true, DataFilters: [isnotnull(d_date#200), (d_date#200 >= 1998-03-18), (d_date#200 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                        +- BroadcastQueryStage 3\n                           +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1145632,
        "inputRowCount" : 2857
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 1080, 1008, 1360, 1080, 1080, 1008, 1008, 1008, 1649, 1405, 1008, 1380, 1080, 0, 0, 0, 0, 1477, 0, 0, 1452, 1080, 1303, 1080, 1008, 0, 1080, 0, 0, 1080, 1527, 1080, 936, 1008, 1080, 0, 2240, 0, 936, 0, 1527, 1768, 0, 1452, 1796, 1380, 0, 1353, 0, 0, 0, 1152, 1502, 792, 1152, 1430, 1405, 1008, 1080, 1452, 0, 1080, 0, 0, 0, 1152, 1002, 864, 1080, 0, 1080, 0, 864, 1502, 0, 0, 1080, 1799, 0, 1080, 0, 936, 0, 0, 1008, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 1152, 1008, 936, 1405, 0, 936, 0, 1823, 2013, 1008, 1080, 1080, 1686, 1734, 0, 1330, 0, 1527, 2035, 0, 0, 0, 1080, 0, 1080, 1080, 0, 0, 1152, 1080, 0, 936, 0, 0, 0, 1008, 1080, 1008, 1080, 0, 792, 1008, 1080, 0, 0, 0, 864, 1080, 0, 0, 936, 1008, 0, 0, 864, 1767, 1502, 0, 0, 1430, 936, 1008, 1380, 1779, 0, 1477, 1493, 1008, 0, 1080, 1008, 0, 1455, 0, 1750, 1080, 0, 0, 1008, 0, 0, 1455, 0, 0, 1080, 0, 0, 0, 0, 1747, 1008, 936, 0, 0, 0, 0, 1477, 0, 1477, 0, 936, 0, 936, 1080 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 209,
        "TotalTasksDurationInMs" : 202,
        "IOBytes" : {
          "Total" : 138014,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 138014,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -734038504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = cs_sold_date_sk#35) "
          },
          "5" : {
            "sign" : -201035507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3421352112,
                "rowCount" : 142556338
              },
              "compileTime" : {
                "sizeInBytes" : 3421352112,
                "rowCount" : 142556338
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] "
          },
          "6" : {
            "sign" : -1669221376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651718304,
                "rowCount" : 142556338
              },
              "compileTime" : {
                "sizeInBytes" : 29651718304,
                "rowCount" : 142556338
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 2064944299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2301991248,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 2301991248,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_discount_amt#23] "
          },
          "0" : {
            "sign" : -484730480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160] "
          },
          "2" : {
            "sign" : -188715281,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4603982496,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 4603982496,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163)) "
          },
          "7" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 415568489,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160]\n+- Project [cs_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = cs_item_sk#16) AND (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163))\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = cs_sold_date_sk#35)\n      :     :- Project [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#228 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- Project [d_date_sk#58]\n      :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      +- Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n         +- Join Inner, (cs_item_sk#178 = i_item_sk#36)\n            :- Project [i_item_sk#36]\n            :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n            :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n            +- Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n               +- Aggregate [cs_item_sk#178], [(1.3 * cast((avg(UnscaledValue(cs_ext_discount_amt#185)) / 100.0) as decimal(11,6))) AS (1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178]\n                  +- Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                     +- Join Inner, (d_date_sk#198 = cs_sold_date_sk#197)\n                        :- Project [cs_item_sk#178, cs_ext_discount_amt#185, cs_sold_date_sk#197]\n                        :  +- Filter (((isnotnull(cs_sold_date_sk#197) AND isnotnull(cs_item_sk#178)) AND dynamicpruning#229 [cs_sold_date_sk#197]) AND might_contain(scalar-subquery#232 [], xxhash64(cs_item_sk#178, 42)))\n                        :     :  :- Project [d_date_sk#198]\n                        :     :  :  +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#164,cs_ship_date_sk#165,cs_bill_customer_sk#166,cs_bill_cdemo_sk#167,cs_bill_hdemo_sk#168,cs_bill_addr_sk#169,cs_ship_customer_sk#170,cs_ship_cdemo_sk#171,cs_ship_hdemo_sk#172,cs_ship_addr_sk#173,cs_call_center_sk#174,cs_catalog_page_sk#175,cs_ship_mode_sk#176,cs_warehouse_sk#177,cs_item_sk#178,cs_promo_sk#179,cs_order_number#180L,cs_quantity#181,cs_wholesale_cost#182,cs_list_price#183,cs_sales_price#184,cs_ext_discount_amt#185,cs_ext_sales_price#186,cs_ext_wholesale_cost#187,... 10 more fields] parquet\n                        +- Project [d_date_sk#198]\n                           +- Filter ((isnotnull(d_date#200) AND ((d_date#200 >= 1998-03-18) AND (d_date#200 <= 1998-06-16))) AND isnotnull(d_date_sk#198))\n                              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date_id#199,d_date#200,d_month_seq#201,d_week_seq#202,d_quarter_seq#203,d_year#204,d_dow#205,d_moy#206,d_dom#207,d_qoy#208,d_fy_year#209,d_fy_quarter_seq#210,d_fy_week_seq#211,d_day_name#212,d_quarter_name#213,d_holiday#214,d_weekend#215,d_following_holiday#216,d_first_dom#217,d_last_dom#218,d_same_day_ly#219,d_same_day_lq#220,d_current_day#221,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -344278502,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056768,
            "rowCount" : 166,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] Arguments: 5 "
          },
          "4" : {
            "sign" : 82688171,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#35] Right keys [1]: [d_date_sk#58] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : 1779167333,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] Condition : (isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23)) "
          },
          "6" : {
            "sign" : 1085174505,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3421352112,
            "rowCount" : 142556338,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [3]: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#229)] PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)] ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)> "
          },
          "1" : {
            "sign" : 594698838,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2301991248,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cs_ext_discount_amt#23] Input [4]: [cs_item_sk#16, cs_ext_discount_amt#23, i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163] "
          },
          "0" : {
            "sign" : 2139317390,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [cs_ext_discount_amt#23] Keys: [] Functions [1]: [partial_sum(UnscaledValue(cs_ext_discount_amt#23))] Aggregate Attributes [1]: [sum#233L] Results [1]: [sum#234L] "
          },
          "2" : {
            "sign" : -1799268420,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4603982496,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_item_sk#16] Right keys [1]: [i_item_sk#36] Join type: Inner Join condition: (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163) "
          },
          "7" : {
            "sign" : 1318181539,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#58] Arguments: 0 "
          },
          "3" : {
            "sign" : 712060358,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cs_item_sk#16, cs_ext_discount_amt#23] Input [4]: [cs_item_sk#16, cs_ext_discount_amt#23, cs_sold_date_sk#35, d_date_sk#58] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#23))], output=[sum#234L])\n+- Project [cs_ext_discount_amt#23]\n   +- BroadcastHashJoin [cs_item_sk#16], [i_item_sk#36], Inner, BuildRight, (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163), false\n      :- Project [cs_item_sk#16, cs_ext_discount_amt#23]\n      :  +- BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n      :     :- Filter (isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23))\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_discount_amt#23,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16), isnotnull(cs_ext_discount_amt#23)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#229)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n      :     +- BroadcastQueryStage 0\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n      :           +- *(1) Project [d_date_sk#58]\n      :              +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n      :                 +- *(1) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 5\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n            +- *(5) Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n               +- *(5) BroadcastHashJoin [i_item_sk#36], [cs_item_sk#178], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 1\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n                  :     +- *(2) Project [i_item_sk#36]\n                  :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                  :           +- *(2) ColumnarToRow\n                  :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                  +- *(5) Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n                     +- *(5) HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))], output=[(1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178])\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 4\n                              +- Exchange hashpartitioning(cs_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n                                 +- *(4) HashAggregate(keys=[cs_item_sk#178], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#185))], output=[cs_item_sk#178, sum#237, count#238L])\n                                    +- *(4) Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                                       +- *(4) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#198], Inner, BuildRight, false\n                                          :- *(4) Filter (isnotnull(cs_item_sk#178) AND might_contain(Subquery subquery#232, [id=#110], xxhash64(cs_item_sk#178, 42)))\n                                          :  :  +- Subquery subquery#232, [id=#110]\n                                          :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                                         +- ShuffleQueryStage 0\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                                                  +- *(1) Project [i_item_sk#36]\n                                                                     +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                        +- *(1) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                      +- == Initial Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                                               +- Project [i_item_sk#36]\n                                                                  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                          :  +- *(4) ColumnarToRow\n                                          :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#178,cs_ext_discount_amt#185,cs_sold_date_sk#197] Batched: true, DataFilters: [isnotnull(cs_item_sk#178)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#197), dynamicpruningexpression(cs_sold_date_sk#197 IN dynamicpruning#2..., PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n                                          :           +- SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n                                          :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                                               +- Project [d_date_sk#198]\n                                                                  +- Filter (((isnotnull(d_date#200) AND (d_date#200 >= 1998-03-18)) AND (d_date#200 <= 1998-06-16)) AND isnotnull(d_date_sk#198))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date#200] Batched: true, DataFilters: [isnotnull(d_date#200), (d_date#200 >= 1998-03-18), (d_date#200 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                          +- BroadcastQueryStage 3\n                                             +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3423458184,
        "inputRowCount" : 142556595
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 337,
        "TotalTasksDurationInMs" : 3707,
        "IOBytes" : {
          "Total" : 34382327,
          "Details" : {
            "IR" : 34381383,
            "IW" : 0,
            "SR" : 0,
            "SW" : 944
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3216,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 3216,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "1" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 114168,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 114168,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36]\n+- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2094672209,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#36] Input [2]: [i_item_sk#36, i_manufact_id#49] "
          },
          "1" : {
            "sign" : 433299092,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#36, i_manufact_id#49] Condition : ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : -948372543,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#36, i_manufact_id#49] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_manufact_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36]\n+- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3216,
        "inputRowCount" : 268
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1464,
        "TotalTasksDurationInMs" : 6268,
        "IOBytes" : {
          "Total" : 1131968,
          "Details" : {
            "IR" : 1131968,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1080,
                "rowCount" : 90
              },
              "compileTime" : {
                "sizeInBytes" : 1080,
                "rowCount" : 90
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "1" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22140,
                "rowCount" : 90
              },
              "compileTime" : {
                "sizeInBytes" : 22140,
                "rowCount" : 90
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1390573792,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#58] Input [2]: [d_date_sk#58, d_date#60] "
          },
          "1" : {
            "sign" : 417999667,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#58, d_date#60] Condition : (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : -73421510,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#58, d_date#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1080,
        "inputRowCount" : 90
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1890,
        "TotalTasksDurationInMs" : 1878,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 176705871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231]\n+- Project [i_item_sk#36]\n   +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1586838298,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#36] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)] Aggregate Attributes [1]: [buf#239] Results [1]: [buf#240] "
          },
          "1" : {
            "sign" : -2094672209,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#36] Input [2]: [i_item_sk#36, i_manufact_id#49] "
          },
          "2" : {
            "sign" : 433299092,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#36, i_manufact_id#49] Condition : ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "3" : {
            "sign" : -948372543,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#36, i_manufact_id#49] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_manufact_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n+- Project [i_item_sk#36]\n   +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3216,
        "inputRowCount" : 268
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1534,
        "TotalTasksDurationInMs" : 5474,
        "IOBytes" : {
          "Total" : 1133296,
          "Details" : {
            "IR" : 1131968,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1328
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1757093709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 256,
                "rowCount" : 16
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#23))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23)),17,2) AS excess discount amount#160], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#23))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -961309685,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 256,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [sum#234L] Keys: [] Functions [1]: [sum(UnscaledValue(cs_ext_discount_amt#23))] Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_discount_amt#23))#226L] Results [1]: [MakeDecimal(sum(UnscaledValue(cs_ext_discount_amt#23))#226L,17,2) AS excess discount amount#160] "
          },
          "1" : {
            "sign" : -403438354,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [sum#234L] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_discount_amt#23))], output=[excess discount amount#160])\n+- ShuffleQueryStage 6\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=929]\n      +- *(6) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#23))], output=[sum#234L])\n         +- *(6) Project [cs_ext_discount_amt#23]\n            +- *(6) BroadcastHashJoin [cs_item_sk#16], [i_item_sk#36], Inner, BuildRight, (cast(cs_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#163), false\n               :- *(6) Project [cs_item_sk#16, cs_ext_discount_amt#23]\n               :  +- *(6) BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n               :     :- *(6) Filter (isnotnull(cs_item_sk#16) AND isnotnull(cs_ext_discount_amt#23))\n               :     :  +- *(6) ColumnarToRow\n               :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_discount_amt#23,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16), isnotnull(cs_ext_discount_amt#23)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#229)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n               :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n               :     +- BroadcastQueryStage 0\n               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n               :           +- *(1) Project [d_date_sk#58]\n               :              +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n               :                 +- *(1) ColumnarToRow\n               :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n               +- BroadcastQueryStage 5\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                     +- *(5) Project [i_item_sk#36, (1.3 * avg(cs_ext_discount_amt))#163]\n                        +- *(5) BroadcastHashJoin [i_item_sk#36], [cs_item_sk#178], Inner, BuildLeft, false\n                           :- BroadcastQueryStage 1\n                           :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n                           :     +- *(2) Project [i_item_sk#36]\n                           :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                           :           +- *(2) ColumnarToRow\n                           :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                           +- *(5) Filter isnotnull((1.3 * avg(cs_ext_discount_amt))#163)\n                              +- *(5) HashAggregate(keys=[cs_item_sk#178], functions=[avg(UnscaledValue(cs_ext_discount_amt#185))], output=[(1.3 * avg(cs_ext_discount_amt))#163, cs_item_sk#178])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 4\n                                       +- Exchange hashpartitioning(cs_item_sk#178, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n                                          +- *(4) HashAggregate(keys=[cs_item_sk#178], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#185))], output=[cs_item_sk#178, sum#237, count#238L])\n                                             +- *(4) Project [cs_item_sk#178, cs_ext_discount_amt#185]\n                                                +- *(4) BroadcastHashJoin [cs_sold_date_sk#197], [d_date_sk#198], Inner, BuildRight, false\n                                                   :- *(4) Filter (isnotnull(cs_item_sk#178) AND might_contain(Subquery subquery#232, [id=#110], xxhash64(cs_item_sk#178, 42)))\n                                                   :  :  +- Subquery subquery#232, [id=#110]\n                                                   :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                                                  +- ShuffleQueryStage 0\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                                                           +- *(1) Project [i_item_sk#36]\n                                                                              +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                                 +- *(1) ColumnarToRow\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                               +- == Initial Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n                                                                        +- Project [i_item_sk#36]\n                                                                           +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                   :  +- *(4) ColumnarToRow\n                                                   :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#178,cs_ext_discount_amt#185,cs_sold_date_sk#197] Batched: true, DataFilters: [isnotnull(cs_item_sk#178)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#197), dynamicpruningexpression(cs_sold_date_sk#197 IN dynamicpruning#2..., PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>\n                                                   :           +- SubqueryBroadcast dynamicpruning#229, 0, [d_date_sk#198], [id=#550]\n                                                   :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        BroadcastQueryStage 1\n                                                                        +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                                                     +- == Initial Plan ==\n                                                                        BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                                                        +- Project [d_date_sk#198]\n                                                                           +- Filter (((isnotnull(d_date#200) AND (d_date#200 >= 1998-03-18)) AND (d_date#200 <= 1998-06-16)) AND isnotnull(d_date_sk#198))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#198,d_date#200] Batched: true, DataFilters: [isnotnull(d_date#200), (d_date#200 >= 1998-03-18), (d_date#200 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                   +- BroadcastQueryStage 3\n                                                      +- ReusedExchange [d_date_sk#198], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 16
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 960 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 113,
        "TotalTasksDurationInMs" : 109,
        "IOBytes" : {
          "Total" : 944,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 944,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1911362612,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4760,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#231], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -953100178,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 4760,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#240] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)#230] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)#230 AS bloomFilter#231] "
          },
          "1" : {
            "sign" : -1601975477,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#240] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#231])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#240])\n         +- *(1) Project [i_item_sk#36]\n            +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4760,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 1403 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 422,
        "TotalTasksDurationInMs" : 402,
        "IOBytes" : {
          "Total" : 1328,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1328,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226862484,
  "SQLEndTimeInMs" : 1702226875445,
  "Objectives" : {
    "DurationInMs" : 12961,
    "IOBytes" : {
      "Total" : 71474731,
      "Details" : {
        "IR" : 71194159,
        "IW" : 0,
        "SR" : 140286,
        "SW" : 140286
      }
    }
  }
}
