{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : 609093312,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 862585440,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
        },
        "8" : {
          "sign" : 989723009,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1186054980,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#3 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#103) AND (ctr_store_sk#2 = ctr_store_sk#2#107)) "
        },
        "19" : {
          "sign" : 1135835687,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 5236,
          "rowCount" : 187,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#103) "
        },
        "23" : {
          "sign" : -449868920,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 862585440,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
        },
        "4" : {
          "sign" : 2144503334,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2523637028,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#2) "
        },
        "15" : {
          "sign" : 709283783,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#4, sr_item_sk#5, sr_customer_sk#6, sr_cdemo_sk#7, sr_hdemo_sk#8, sr_addr_sk#9, sr_store_sk#10, sr_reason_sk#11, sr_ticket_number#12L, sr_return_quantity#13, sr_return_amt#14, sr_return_tax#15, sr_return_amt_inc_tax#16, sr_fee#17, sr_return_ship_cost#18, sr_refunded_cash#19, sr_reversed_charge#20, sr_store_credit#21, sr_net_loss#22, sr_returned_date_sk#23], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1316122610,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 646939080,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
        },
        "9" : {
          "sign" : -607442464,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 646939080,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#3) "
        },
        "22" : {
          "sign" : 983540678,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 646939080,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
        },
        "26" : {
          "sign" : 490384968,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 80000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#81, c_customer_id#82] "
        },
        "13" : {
          "sign" : -484781068,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 724747828,
          "rowCount" : 25883851,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
        },
        "24" : {
          "sign" : -865573892,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 751031540,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
        },
        "16" : {
          "sign" : 1280728153,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6912,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#24] "
        },
        "5" : {
          "sign" : 459476134,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1110883560,
          "rowCount" : 27772089,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ctr_store_sk#2, c_customer_id#82] "
        },
        "10" : {
          "sign" : -1189293504,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 646939080,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#1, sr_store_sk#10 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#3] "
        },
        "21" : {
          "sign" : 1463646597,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 539115900,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#3] "
        },
        "6" : {
          "sign" : -157838215,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1333060272,
          "rowCount" : 27772089,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#1 = c_customer_sk#81) "
        },
        "1" : {
          "sign" : 1340910719,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 2064793932,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -219930167,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24)) "
        },
        "25" : {
          "sign" : -469375773,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433287040,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#109 [sr_returned_date_sk#23]) "
        },
        "14" : {
          "sign" : 972007451,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3313132928,
          "rowCount" : 25883851,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#108 [sr_returned_date_sk#23]) "
        },
        "31" : {
          "sign" : 987316,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#52, s_store_id#53, s_rec_start_date#54, s_rec_end_date#55, s_closed_date_sk#56, s_store_name#57, s_number_employees#58, s_floor_space#59, s_hours#60, s_manager#61, s_market_id#62, s_geography_class#63, s_market_desc#64, s_market_manager#65, s_division_id#66, s_division_name#67, s_company_id#68, s_company_name#69, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : 985822064,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 2800,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1060797351,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 5236,
          "rowCount" : 187,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#2], [(avg(ctr_total_return#3) * 1.2) AS (avg(ctr_total_return) * 1.2)#103, ctr_store_sk#2 AS ctr_store_sk#2#107] "
        },
        "27" : {
          "sign" : -313267243,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(c_customer_sk#81) "
        },
        "2" : {
          "sign" : -96488230,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 2064793932,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -1634850698,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#24, d_date_id#25, d_date#26, d_month_seq#27, d_week_seq#28, d_quarter_seq#29, d_year#30, d_dow#31, d_moy#32, d_dom#33, d_qoy#34, d_fy_year#35, d_fy_quarter_seq#36, d_fy_week_seq#37, d_day_name#38, d_quarter_name#39, d_holiday#40, d_weekend#41, d_following_holiday#42, d_first_dom#43, d_last_dom#44, d_same_day_ly#45, d_same_day_lq#46, d_current_day#47, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "30" : {
          "sign" : 1290694935,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 21555,
          "rowCount" : 45,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52)) "
        },
        "7" : {
          "sign" : 916125022,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 431292720,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#1, ctr_store_sk#2] "
        },
        "29" : {
          "sign" : -981457042,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 540,
          "rowCount" : 45,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#52] "
        },
        "3" : {
          "sign" : -966074274,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2064793932,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
        },
        "28" : {
          "sign" : 1090226711,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#81, c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_current_addr_sk#85, c_first_shipto_date_sk#86, c_first_sales_date_sk#87, c_salutation#88, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_day#92, c_birth_month#93, c_birth_year#94, c_birth_country#95, c_login#96, c_email_address#97, c_last_review_date#98], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Aggregate",
        "toId" : 9,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Join",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 20,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Aggregate",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#2)\n            :- Project [ctr_store_sk#2, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#1 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#1, ctr_store_sk#2]\n            :     :  +- Join Inner, ((cast(ctr_total_return#3 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#103) AND (ctr_store_sk#2 = ctr_store_sk#2#107))\n            :     :     :- Filter isnotnull(ctr_total_return#3)\n            :     :     :  +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#1, sr_store_sk#10 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#3]\n            :     :     :     +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :     :        +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :     :           :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :     :           :  +- Filter (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#108 [sr_returned_date_sk#23])\n            :     :     :           :     :  +- Project [d_date_sk#24]\n            :     :     :           :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :     :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :     :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :     :           +- Project [d_date_sk#24]\n            :     :     :              +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#103)\n            :     :        +- Aggregate [ctr_store_sk#2], [(avg(ctr_total_return#3) * 1.2) AS (avg(ctr_total_return) * 1.2)#103, ctr_store_sk#2 AS ctr_store_sk#2#107]\n            :     :           +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#2, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#3]\n            :     :              +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :                 +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :                    :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :                    :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#109 [sr_returned_date_sk#23])\n            :     :                    :     :  +- Project [d_date_sk#24]\n            :     :                    :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :                    :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :                    :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :                    +- Project [d_date_sk#24]\n            :     :                       +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :                          +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     +- Project [c_customer_sk#81, c_customer_id#82]\n            :        +- Filter isnotnull(c_customer_sk#81)\n            :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet\n            +- Project [s_store_sk#52]\n               +- Filter ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52))\n                  +- Relation spark_catalog.tpcds_100.store[s_store_sk#52,s_store_id#53,s_rec_start_date#54,s_rec_end_date#55,s_closed_date_sk#56,s_store_name#57,s_number_employees#58,s_floor_space#59,s_hours#60,s_manager#61,s_market_id#62,s_geography_class#63,s_market_desc#64,s_market_manager#65,s_division_id#66,s_division_name#67,s_company_id#68,s_company_name#69,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,... 5 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 7651345722,
      "inputRowCount" : 57734102
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "4" : {
            "sign" : 19161969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6095750400000000,
            "rowCount" : 169326400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "9" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -1285051128,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135461120000000,
            "rowCount" : 4233160000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "6" : {
            "sign" : -1259069939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 169326400000000,
            "rowCount" : 4233160000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : 1470237488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4741139200000000,
            "rowCount" : 169326400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -313764037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -378562843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4741139200000000,
            "rowCount" : 169326400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1516807558,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 50797920,
            "rowCount" : 2116580,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ctr_customer_sk#111, ctr_store_sk#112], ShuffleQueryStage 9 "
          },
          "3" : {
            "sign" : 761041231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4741139200000000,
            "rowCount" : 169326400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- LogicalQueryStage Project [ctr_customer_sk#111, ctr_store_sk#112], ShuffleQueryStage 9\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 131849632,
        "inputRowCount" : 4116620
      },
      "PD" : {
        "4" : [ 116773, 116773, 113819, 116773, 116773, 113819, 113819, 113819, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 106158, 113819, 109112, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 109112, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 106158, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 113819, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 106158, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 113819, 116773, 106158, 116773, 116773, 113819, 116773, 113819, 116773, 116773, 113819, 116773, 116773, 113819, 113819, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 109112, 116773, 113819, 116773, 116773, 113819, 116773, 113819 ],
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226519718,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2278,
        "IOBytes" : {
          "Total" : 44213626,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 44213626,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -230959575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 243368160,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          },
          "8" : {
            "sign" : 1931005801,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 890307240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : -1249793725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21791343876796416000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "15" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "11" : {
            "sign" : -710071393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 243368160,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : 1636049185,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 173834400,
            "rowCount" : 5432325,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "5" : {
            "sign" : -1649032784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20719877568000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : -260947299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25899846960000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : 833768454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 16948823015286101333333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : -141871303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 532553103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 16948823015286101333333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1097397118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 323748087,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : 1840981831,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16948823015286101333333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n            :     :           +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 901825192,
        "inputRowCount" : 34388160
      },
      "PD" : {
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 12,
        "FinishedTasksTotalTimeInMs" : 119394.0,
        "FinishedTasksDistributionInMs" : [ 1760.0, 9115.0, 10328.0, 13236.0, 13344.0 ]
      },
      "StartTimeInMs" : 1702226512793,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9203,
        "IOBytes" : {
          "Total" : 381425183,
          "Details" : {
            "IR" : 51680877,
            "IW" : 0,
            "SR" : 220075018,
            "SW" : 109669288
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -282677615,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19296,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118], HashAggregate(keys=[ctr_store_sk#112], functions=[avg(ctr_total_return#113)]) "
          },
          "8" : {
            "sign" : 502430929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 476794101960,
            "rowCount" : 10836229590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : -1866224383,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31208341219200000000,
            "rowCount" : 866898367200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "11" : {
            "sign" : 921998259,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11256,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : -1246987426,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 693518693760000000,
            "rowCount" : 21672459180000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : 1381614123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 866898367200000000,
            "rowCount" : 21672459180000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : -425795138,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 24273154281600000000,
            "rowCount" : 866898367200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 2007935179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -487192971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 24273154281600000000,
            "rowCount" : 866898367200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1772393198,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 173379673440,
            "rowCount" : 10836229590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : -1374031617,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24273154281600000000,
            "rowCount" : 866898367200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- LogicalQueryStage Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118], HashAggregate(keys=[ctr_store_sk#112], functions=[avg(ctr_total_return#113)])\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 728010088,
        "inputRowCount" : 28956237
      },
      "PD" : {
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 153374.0,
        "FinishedTasksDistributionInMs" : [ 1760.0, 9115.0, 10499.0, 13319.0, 16990.0 ]
      },
      "StartTimeInMs" : 1702226516348,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5648,
        "IOBytes" : {
          "Total" : 293456192,
          "Details" : {
            "IR" : 51680877,
            "IW" : 0,
            "SR" : 132129837,
            "SW" : 109645478
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : 592609878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44670708852,
            "rowCount" : 1015243383,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : 1539811958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2923900943040000000,
            "rowCount" : 81219470640000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "11" : {
            "sign" : 670610588,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter isnotnull((avg(ctr_total_return) * 1.2)#116), BroadcastQueryStage 8 "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 130298616,
            "rowCount" : 5429109,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -3298975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64975576512000000,
            "rowCount" : 2030486766000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 173731488,
            "rowCount" : 5429109,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : 944988368,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 81219470640000000,
            "rowCount" : 2030486766000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : -1489429631,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2274145177920000000,
            "rowCount" : 81219470640000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1711389292,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2090711870,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2274145177920000000,
            "rowCount" : 81219470640000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -791939397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16243894128,
            "rowCount" : 1015243383,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : 34781954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2274145177920000000,
            "rowCount" : 81219470640000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- LogicalQueryStage Filter isnotnull((avg(ctr_total_return) * 1.2)#116), BroadcastQueryStage 8\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 254788436,
        "inputRowCount" : 7429336
      },
      "PD" : {
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226516382,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5614,
        "IOBytes" : {
          "Total" : 153882914,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 132129837,
            "SW" : 21753077
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2115260343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 303151662912,
            "rowCount" : 9473489466,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
          },
          "8" : {
            "sign" : -702105702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 13545298800,
            "rowCount" : 307847700,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "19" : {
            "sign" : -1548963222,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#24], BroadcastQueryStage 0 "
          },
          "23" : {
            "sign" : -3414394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 235609323120,
            "rowCount" : 9817055130,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
          },
          "4" : {
            "sign" : -727443364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2523637028,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "15" : {
            "sign" : 709283783,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#4, sr_item_sk#5, sr_customer_sk#6, sr_cdemo_sk#7, sr_hdemo_sk#8, sr_addr_sk#9, sr_store_sk#10, sr_reason_sk#11, sr_ticket_number#12L, sr_return_quantity#13, sr_return_amt#14, sr_return_tax#15, sr_return_amt_inc_tax#16, sr_fee#17, sr_return_ship_cost#18, sr_refunded_cash#19, sr_reversed_charge#20, sr_store_credit#21, sr_net_loss#22, sr_returned_date_sk#23], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1431060363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 227363747184,
            "rowCount" : 9473489466,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
          },
          "9" : {
            "sign" : -58945501,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7388344800,
            "rowCount" : 307847700,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "22" : {
            "sign" : 1127127543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 6628368340,
            "rowCount" : 331418417,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113] "
          },
          "26" : {
            "sign" : 690082062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23]) "
          },
          "13" : {
            "sign" : 878763988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 724747828,
            "rowCount" : 25883851,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
          },
          "24" : {
            "sign" : -2089479276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 314145764160,
            "rowCount" : 9817055130,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
          },
          "16" : {
            "sign" : 1280728153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#24] "
          },
          "5" : {
            "sign" : 891516575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1110883560,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : -512986071,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7388344800,
            "rowCount" : 307847700,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113] "
          },
          "21" : {
            "sign" : 1237250837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          },
          "6" : {
            "sign" : -1399990780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1333060272,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : -906181603,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2064793932,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -219930167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24)) "
          },
          "25" : {
            "sign" : 453273511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 751031540,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
          },
          "14" : {
            "sign" : 1509983227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3313132928,
            "rowCount" : 25883851,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23]) "
          },
          "0" : {
            "sign" : 205585830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1512615047,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "27" : {
            "sign" : -1548963160,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#24], BroadcastQueryStage 2 "
          },
          "2" : {
            "sign" : 1348603152,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2064793932,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1634850698,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#24, d_date_id#25, d_date#26, d_month_seq#27, d_week_seq#28, d_quarter_seq#29, d_year#30, d_dow#31, d_moy#32, d_dom#33, d_qoy#34, d_fy_year#35, d_fy_quarter_seq#36, d_fy_week_seq#37, d_day_name#38, d_quarter_name#39, d_holiday#40, d_weekend#41, d_following_holiday#42, d_first_dom#43, d_last_dom#44, d_same_day_ly#45, d_same_day_lq#46, d_current_day#47, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : -1755311807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4925563200,
            "rowCount" : 307847700,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "29" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "3" : {
            "sign" : -194864644,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2064793932,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          },
          "28" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n            :     :     :     +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :     :        +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :     :           :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :     :           :  +- Filter (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23])\n            :     :     :           :     :  +- Project [d_date_sk#24]\n            :     :     :           :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :     :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :     :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :     :           +- LogicalQueryStage Project [d_date_sk#24], BroadcastQueryStage 0\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n            :     :           +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n            :     :              +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :                 +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :                    :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :                    :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n            :     :                    :     :  +- Project [d_date_sk#24]\n            :     :                    :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :                    :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :                    :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :                    +- LogicalQueryStage Project [d_date_sk#24], BroadcastQueryStage 2\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7197316604,
        "inputRowCount" : 57588379
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 20634.0,
        "FinishedTasksDistributionInMs" : [ 1337.0, 1347.0, 1354.0, 1374.0, 1474.0 ]
      },
      "StartTimeInMs" : 1702226498916,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23080,
        "IOBytes" : {
          "Total" : 561603388,
          "Details" : {
            "IR" : 121453352,
            "IW" : 0,
            "SR" : 220075018,
            "SW" : 220075018
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -230959575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          },
          "8" : {
            "sign" : 1931005801,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1186054980,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : -1249793725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 48878876640,
            "rowCount" : 1110883560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "15" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "11" : {
            "sign" : -710071393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : 1636049185,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 539115900,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "5" : {
            "sign" : -1649032784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1110883560,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : -260947299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1333060272,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : 833768454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 39991808160,
            "rowCount" : 1110883560,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : -141871303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 532553103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 39991808160,
            "rowCount" : 1110883560,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1097397118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 431292720,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : 1840981831,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39991808160,
            "rowCount" : 1110883560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n            :     :           +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1267106692,
        "inputRowCount" : 55911630
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 20634.0,
        "FinishedTasksDistributionInMs" : [ 1337.0, 1347.0, 1354.0, 1374.0, 1474.0 ]
      },
      "StartTimeInMs" : 1702226499482,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22514,
        "IOBytes" : {
          "Total" : 561588935,
          "Details" : {
            "IR" : 121438899,
            "IW" : 0,
            "SR" : 220075018,
            "SW" : 220075018
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : 592609878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 48015039996,
            "rowCount" : 1091250909,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : 1539811958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3142802617920000000,
            "rowCount" : 87300072720000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "11" : {
            "sign" : 670610588,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter isnotnull((avg(ctr_total_return) * 1.2)#116), BroadcastQueryStage 8 "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 130298616,
            "rowCount" : 5429109,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -3298975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69840058176000000,
            "rowCount" : 2182501818000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 173731488,
            "rowCount" : 5429109,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : 944988368,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87300072720000000,
            "rowCount" : 2182501818000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : -1489429631,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2444402036160000000,
            "rowCount" : 87300072720000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1711389292,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2090711870,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2444402036160000000,
            "rowCount" : 87300072720000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -791939397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17460014544,
            "rowCount" : 1091250909,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : 34781954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2444402036160000000,
            "rowCount" : 87300072720000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- LogicalQueryStage Filter isnotnull((avg(ctr_total_return) * 1.2)#116), BroadcastQueryStage 8\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 255834976,
        "inputRowCount" : 7429350
      },
      "PD" : {
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226516532,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5464,
        "IOBytes" : {
          "Total" : 153859104,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 132106027,
            "SW" : 21753077
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -230959575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          },
          "8" : {
            "sign" : 1931005801,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1186054980,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "4" : {
            "sign" : -1249793725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77632689600000000,
            "rowCount" : 2156463600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "15" : {
            "sign" : -521240635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#52], BroadcastQueryStage 4 "
          },
          "11" : {
            "sign" : -710071393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "9" : {
            "sign" : -1298963926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          },
          "13" : {
            "sign" : 1636049185,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 539115900,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "5" : {
            "sign" : -1649032784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1725170880000000,
            "rowCount" : 53911590000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "10" : {
            "sign" : 1849612518,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))]) "
          },
          "6" : {
            "sign" : -260947299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2156463600000000,
            "rowCount" : 53911590000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : 833768454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 60380980800000000,
            "rowCount" : 2156463600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -788555498,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : -141871303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 532553103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 60380980800000000,
            "rowCount" : 2156463600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1097397118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 431292720,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "3" : {
            "sign" : 1840981831,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60380980800000000,
            "rowCount" : 2156463600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n            :     :           +- LogicalQueryStage Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113], HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))])\n            :     +- LogicalQueryStage Project [c_customer_sk#81, c_customer_id#82], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [s_store_sk#52], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1267106692,
        "inputRowCount" : 55911630
      },
      "PD" : {
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226499916,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22080,
        "IOBytes" : {
          "Total" : 521041581,
          "Details" : {
            "IR" : 103352094,
            "IW" : 0,
            "SR" : 220075018,
            "SW" : 197614469
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 769276687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2523637028,
                "rowCount" : 57355387
              },
              "compileTime" : {
                "sizeInBytes" : 2523637028,
                "rowCount" : 57355387
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#52 = ctr_store_sk#112) "
          },
          "5" : {
            "sign" : 1133060993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1110883560,
                "rowCount" : 27772089
              },
              "compileTime" : {
                "sizeInBytes" : 1110883560,
                "rowCount" : 27772089
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_store_sk#112, c_customer_id#82] "
          },
          "6" : {
            "sign" : 1542998256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1333060272,
                "rowCount" : 27772089
              },
              "compileTime" : {
                "sizeInBytes" : 1333060272,
                "rowCount" : 27772089
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ctr_customer_sk#111 = c_customer_sk#81) "
          },
          "1" : {
            "sign" : -568162310,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              },
              "compileTime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1032338727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2800,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 2800,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2129124477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              },
              "compileTime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_customer_id#82 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 2028096025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              },
              "compileTime" : {
                "sizeInBytes" : 2064793932,
                "rowCount" : 57355387
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_customer_id#82 ASC NULLS FIRST], true\n      +- Project [c_customer_id#82]\n         +- Join Inner, (s_store_sk#52 = ctr_store_sk#112)\n            :- Project [ctr_store_sk#112, c_customer_id#82]\n            :  +- Join Inner, (ctr_customer_sk#111 = c_customer_sk#81)\n            :     :- Project [ctr_customer_sk#111, ctr_store_sk#112]\n            :     :  +- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n            :     :     :- Filter isnotnull(ctr_total_return#113)\n            :     :     :  +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n            :     :     :     +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :     :        +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :     :           :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :     :           :  +- Filter (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23])\n            :     :     :           :     :  +- Project [d_date_sk#24]\n            :     :     :           :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :     :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :     :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :     :           +- Project [d_date_sk#24]\n            :     :     :              +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :     +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            :     :        +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n            :     :           +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n            :     :              +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n            :     :                 +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :     :                    :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :     :                    :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n            :     :                    :     :  +- Project [d_date_sk#24]\n            :     :                    :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :                    :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     :                    :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            :     :                    +- Project [d_date_sk#24]\n            :     :                       +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :                          +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     +- Project [c_customer_sk#81, c_customer_id#82]\n            :        +- Filter isnotnull(c_customer_sk#81)\n            :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet\n            +- Project [s_store_sk#52]\n               +- Filter ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52))\n                  +- Relation spark_catalog.tpcds_100.store[s_store_sk#52,s_store_id#53,s_rec_start_date#54,s_rec_end_date#55,s_closed_date_sk#56,s_store_name#57,s_number_employees#58,s_floor_space#59,s_hours#60,s_manager#61,s_market_id#62,s_geography_class#63,s_market_desc#64,s_market_manager#65,s_division_id#66,s_division_name#67,s_company_id#68,s_company_name#69,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1086915187,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_customer_sk#81, c_customer_id#82] Arguments: 3 "
          },
          "4" : {
            "sign" : 1419305129,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 1333060272,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ctr_customer_sk#111] Right keys [1]: [c_customer_sk#81] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : -1107617750,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051712,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [s_store_sk#52] Arguments: 4 "
          },
          "5" : {
            "sign" : -1012784714,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ctr_customer_sk#111, ctr_store_sk#112] Arguments: [ctr_customer_sk#111 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 903738621,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 50797920,
            "rowCount" : 2116580,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ctr_customer_sk#111, ctr_store_sk#112] Arguments: 9 "
          },
          "1" : {
            "sign" : -234147658,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2064793932,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [c_customer_id#82] Input [3]: [ctr_store_sk#112, c_customer_id#82, s_store_sk#52] "
          },
          "0" : {
            "sign" : 667684373,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 2800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [1]: [c_customer_id#82] Arguments: 100, [c_customer_id#82 ASC NULLS FIRST], [c_customer_id#82] "
          },
          "2" : {
            "sign" : 218701084,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2523637028,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ctr_store_sk#112] Right keys [1]: [s_store_sk#52] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -317988564,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [c_customer_sk#81, c_customer_id#82] Arguments: [c_customer_sk#81 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 762596922,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1110883560,
            "rowCount" : 27772089,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ctr_store_sk#112, c_customer_id#82] Input [4]: [ctr_customer_sk#111, ctr_store_sk#112, c_customer_sk#81, c_customer_id#82] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST], output=[c_customer_id#82])\n+- Project [c_customer_id#82]\n   +- BroadcastHashJoin [ctr_store_sk#112], [s_store_sk#52], Inner, BuildRight, false\n      :- Project [ctr_store_sk#112, c_customer_id#82]\n      :  +- SortMergeJoin [ctr_customer_sk#111], [c_customer_sk#81], Inner\n      :     :- Sort [ctr_customer_sk#111 ASC NULLS FIRST], false, 0\n      :     :  +- ShuffleQueryStage 9\n      :     :     +- Exchange hashpartitioning(ctr_customer_sk#111, 200), ENSURE_REQUIREMENTS, [plan_id=1115]\n      :     :        +- *(9) Project [ctr_customer_sk#111, ctr_store_sk#112]\n      :     :           +- *(9) BroadcastHashJoin [ctr_store_sk#112], [ctr_store_sk#112#118], Inner, BuildRight, (cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116), false\n      :     :              :- *(9) Filter isnotnull(ctr_total_return#113)\n      :     :              :  +- *(9) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_customer_sk#111, ctr_store_sk#112, ctr_total_return#113])\n      :     :              :     +- AQEShuffleRead coalesced\n      :     :              :        +- ShuffleQueryStage 5\n      :     :              :           +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=604]\n      :     :              :              +- *(5) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#122L])\n      :     :              :                 +- *(5) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n      :     :              :                    +- *(5) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n      :     :              :                       :- *(5) Filter (isnotnull(sr_store_sk#10) AND isnotnull(sr_customer_sk#6))\n      :     :              :                       :  +- *(5) ColumnarToRow\n      :     :              :                       :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10), isnotnull(sr_customer_sk#6)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n      :     :              :                       :           +- SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n      :     :              :                       :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        BroadcastQueryStage 1\n                                                                        +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n                                                                     +- == Initial Plan ==\n                                                                        BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=570]\n                                                                        +- Project [d_date_sk#24]\n                                                                           +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :              :                       +- BroadcastQueryStage 0\n      :     :              :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n      :     :              :                             +- *(1) Project [d_date_sk#24]\n      :     :              :                                +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n      :     :              :                                   +- *(1) ColumnarToRow\n      :     :              :                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :              +- BroadcastQueryStage 8\n      :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=999]\n      :     :                    +- *(8) Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n      :     :                       +- *(8) HashAggregate(keys=[ctr_store_sk#112], functions=[avg(ctr_total_return#113)], output=[(avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118])\n      :     :                          +- AQEShuffleRead coalesced\n      :     :                             +- ShuffleQueryStage 7\n      :     :                                +- Exchange hashpartitioning(ctr_store_sk#112, 200), ENSURE_REQUIREMENTS, [plan_id=911]\n      :     :                                   +- *(7) HashAggregate(keys=[ctr_store_sk#112], functions=[partial_avg(ctr_total_return#113)], output=[ctr_store_sk#112, sum#125, count#126L])\n      :     :                                      +- *(7) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_store_sk#112, ctr_total_return#113])\n      :     :                                         +- AQEShuffleRead coalesced\n      :     :                                            +- ShuffleQueryStage 6\n      :     :                                               +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=662]\n      :     :                                                  +- *(6) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#128L])\n      :     :                                                     +- *(6) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n      :     :                                                        +- *(6) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n      :     :                                                           :- *(6) Filter isnotnull(sr_store_sk#10)\n      :     :                                                           :  +- *(6) ColumnarToRow\n      :     :                                                           :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n      :     :                                                           :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n      :     :                                                           +- BroadcastQueryStage 2\n      :     :                                                              +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n      :     +- Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0\n      :        +- ShuffleQueryStage 3\n      :           +- Exchange hashpartitioning(c_customer_sk#81, 200), ENSURE_REQUIREMENTS, [plan_id=355]\n      :              +- *(3) Filter isnotnull(c_customer_sk#81)\n      :                 +- *(3) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#81,c_customer_id#82] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>\n      +- BroadcastQueryStage 4\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=382]\n            +- *(4) Project [s_store_sk#52]\n               +- *(4) Filter ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52))\n                  +- *(4) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = SD), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,SD), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 131849632,
        "inputRowCount" : 4116620
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "4" : [ 116773, 116773, 113819, 116773, 116773, 113819, 113819, 113819, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 106158, 113819, 109112, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 109112, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 106158, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 113819, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 106158, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 113819, 116773, 106158, 116773, 116773, 113819, 116773, 113819, 116773, 116773, 113819, 116773, 116773, 113819, 113819, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 113819, 113819, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 116773, 109112, 116773, 113819, 116773, 116773, 113819, 116773, 113819 ],
        "0" : [ 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 112177, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 112177, 123395, 123395, 123395, 112177, 112177, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 112177, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 2089,
        "TotalTasksDurationInMs" : 2080,
        "IOBytes" : {
          "Total" : 44213626,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 44213626,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 690082062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23]) "
          },
          "5" : {
            "sign" : 709283783,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#4, sr_item_sk#5, sr_customer_sk#6, sr_cdemo_sk#7, sr_hdemo_sk#8, sr_addr_sk#9, sr_store_sk#10, sr_reason_sk#11, sr_ticket_number#12L, sr_return_quantity#13, sr_return_amt#14, sr_return_tax#15, sr_return_amt_inc_tax#16, sr_fee#17, sr_return_ship_cost#18, sr_refunded_cash#19, sr_reversed_charge#20, sr_store_credit#21, sr_net_loss#22, sr_returned_date_sk#23], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 272356603,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
          },
          "0" : {
            "sign" : 258256752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 539115900,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 539115900,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113] "
          },
          "2" : {
            "sign" : 478372659,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
          },
          "3" : {
            "sign" : 453273511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 751031540,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 751031540,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n+- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n      :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n      :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n      :     :  +- Project [d_date_sk#24]\n      :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n      +- Project [d_date_sk#24]\n         +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 821020130,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 751031540,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [4]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpruning#119)] PushedFilters: [IsNotNull(sr_store_sk)] ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)> "
          },
          "5" : {
            "sign" : 983927570,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#24] Arguments: 2 "
          },
          "1" : {
            "sign" : 1354196668,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] Input [5]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23, d_date_sk#24] "
          },
          "0" : {
            "sign" : -42237174,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 539115900,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] Keys [2]: [sr_customer_sk#6, sr_store_sk#10] Functions [1]: [partial_sum(UnscaledValue(sr_fee#17))] Aggregate Attributes [1]: [sum#127L] Results [3]: [sr_customer_sk#6, sr_store_sk#10, sum#128L] "
          },
          "2" : {
            "sign" : 293216116,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#23] Right keys [1]: [d_date_sk#24] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1531124045,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 751031540,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] Condition : isnotnull(sr_store_sk#10) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#128L])\n+- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   +- BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n      :- Filter isnotnull(sr_store_sk#10)\n      :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n      :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n      +- BroadcastQueryStage 2\n         +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 752083044,
        "inputRowCount" : 26822921
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 20634.0,
        "FinishedTasksDistributionInMs" : [ 1337.0, 1347.0, 1354.0, 1374.0, 1474.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 13324,
        "TotalTasksDurationInMs" : 35363,
        "IOBytes" : {
          "Total" : 139616398,
          "Details" : {
            "IR" : 51671217,
            "IW" : 0,
            "SR" : 0,
            "SW" : 87945181
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1528820044,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5236,
                "rowCount" : 187
              },
              "compileTime" : {
                "sizeInBytes" : 5236,
                "rowCount" : 187
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n+- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n   +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n      +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n         :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n         :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n         :     :  +- Project [d_date_sk#24]\n         :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n         :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n         :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n         +- Project [d_date_sk#24]\n            +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n               +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -509191118,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ctr_store_sk#112, ctr_total_return#113] Keys [1]: [ctr_store_sk#112] Functions [1]: [partial_avg(ctr_total_return#113)] Aggregate Attributes [2]: [sum#123, count#124L] Results [3]: [ctr_store_sk#112, sum#125, count#126L] "
          },
          "1" : {
            "sign" : -1067638912,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 173834400,
            "rowCount" : 5432325,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [sr_customer_sk#6, sr_store_sk#10, sum#128L] Keys [2]: [sr_customer_sk#6, sr_store_sk#10] Functions [1]: [sum(UnscaledValue(sr_fee#17))] Aggregate Attributes [1]: [sum(UnscaledValue(sr_fee#17))#114L] Results [2]: [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17))#114L,17,2) AS ctr_total_return#113] "
          },
          "2" : {
            "sign" : -1498576367,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 539115900,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [sr_customer_sk#6, sr_store_sk#10, sum#128L] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ctr_store_sk#112], functions=[partial_avg(ctr_total_return#113)], output=[ctr_store_sk#112, sum#125, count#126L])\n+- HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_store_sk#112, ctr_total_return#113])\n   +- ShuffleQueryStage 6\n      +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=662]\n         +- *(6) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#128L])\n            +- *(6) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n               +- *(6) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n                  :- *(6) Filter isnotnull(sr_store_sk#10)\n                  :  +- *(6) ColumnarToRow\n                  :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n                  :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n                  +- BroadcastQueryStage 2\n                     +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 173834400,
        "inputRowCount" : 5432325
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 465783, 462505, 464560, 458635, 468003, 466870, 472640, 461744, 462020, 459151, 457633, 467490, 447479, 465595, 456523, 460042, 463262, 453085, 454458, 464405, 457412, 459255, 458790, 454651, 457901, 460421, 458766, 455983, 453273, 456744, 464161, 459820, 454383, 450588, 460783, 457633, 450588, 456847, 453893, 466625, 470444, 459853, 466862, 464429, 457981, 454572, 459956, 461555, 471972, 467759, 450485, 455192, 462364, 458715, 461076, 459255, 461885, 457877, 462020, 459255, 465392, 456570, 465270, 463671, 463940, 461636, 464373, 455155, 462538, 467631, 461123, 459816, 464081, 462364, 467490, 463427, 455540, 465318, 463468, 459712, 457412, 461979, 460610, 455192, 463671, 458766, 465049, 465444, 458080, 463874, 466160, 450809, 461451, 467759, 461688, 456424, 459151, 468003, 461555, 459255, 463098, 457633, 463916, 457901, 463427, 459994, 468003, 461799, 468797, 457068, 466640, 457877, 460717, 465727, 460421, 460097, 462016, 467190, 452996, 462073, 457736, 465049, 460097, 463671, 465655, 463916, 463051, 457420, 459782, 463516, 465318, 466112, 463051, 459848, 462364, 460366, 463616, 463003, 462829, 459773, 460986, 457412, 463916, 464429, 460986, 458790, 463671, 457934, 462101, 456570, 455681, 462538, 463579, 470740, 463131, 462209, 465614, 457068, 454553, 461414, 462153, 457877, 466557, 463916, 459372, 460986, 459524, 463964, 457901, 460587, 464805, 460097, 457901, 458344, 463272, 464805, 462114, 465938, 467482, 463892, 456899, 461979, 460177, 467190, 460610, 460986, 463051, 457051, 454303, 457901, 466112, 460503, 459255, 454170, 457877, 466381, 455516, 463892, 460986, 460097 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 12,
        "FinishedTasksTotalTimeInMs" : 119394.0,
        "FinishedTasksDistributionInMs" : [ 1760.0, 9115.0, 10328.0, 13236.0, 13344.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 3424,
        "TotalTasksDurationInMs" : 5058,
        "IOBytes" : {
          "Total" : 87968991,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 87945181,
            "SW" : 23810
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1069029266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5236,
                "rowCount" : 187
              },
              "compileTime" : {
                "sizeInBytes" : 5236,
                "rowCount" : 187
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((avg(ctr_total_return) * 1.2)#116) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n+- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n   +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n      +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n         +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n            :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n            :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n            :     :  +- Project [d_date_sk#24]\n            :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n            +- Project [d_date_sk#24]\n               +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1354915709,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [(avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118] Condition : isnotnull((avg(ctr_total_return) * 1.2)#116) "
          },
          "1" : {
            "sign" : 1166383489,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 19296,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ctr_store_sk#112, sum#125, count#126L] Keys [1]: [ctr_store_sk#112] Functions [1]: [avg(ctr_total_return#113)] Aggregate Attributes [1]: [avg(ctr_total_return#113)#115] Results [2]: [(avg(ctr_total_return#113)#115 * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118] "
          },
          "2" : {
            "sign" : -519262914,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 5236,
            "rowCount" : 187,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ctr_store_sk#112, sum#125, count#126L] Arguments: 7 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n+- HashAggregate(keys=[ctr_store_sk#112], functions=[avg(ctr_total_return#113)], output=[(avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118])\n   +- ShuffleQueryStage 7\n      +- Exchange hashpartitioning(ctr_store_sk#112, 200), ENSURE_REQUIREMENTS, [plan_id=911]\n         +- *(7) HashAggregate(keys=[ctr_store_sk#112], functions=[partial_avg(ctr_total_return#113)], output=[ctr_store_sk#112, sum#125, count#126L])\n            +- *(7) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_store_sk#112, ctr_total_return#113])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 6\n                     +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=662]\n                        +- *(6) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#128L])\n                           +- *(6) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n                              +- *(6) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n                                 :- *(6) Filter isnotnull(sr_store_sk#10)\n                                 :  +- *(6) ColumnarToRow\n                                 :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n                                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n                                 +- BroadcastQueryStage 2\n                                    +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19296,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 176, 176, 176, 176, 0, 0, 234, 176, 176, 0, 0, 312, 176, 176, 168, 0, 0, 0, 176, 212, 0, 212, 176, 212, 176, 176, 176, 176, 0, 0, 212, 258, 258, 212, 176, 0, 176, 176, 176, 212, 0, 168, 176, 212, 176, 176, 176, 176, 271, 212, 176, 212, 212, 258, 176, 223, 212, 212, 0, 0, 176, 0, 0, 176, 0, 176, 212, 0, 0, 223, 176, 0, 0, 176, 0, 176, 0, 176, 176, 176, 0, 0, 176, 0, 168, 271, 176, 0, 212, 0, 0, 212, 0, 176, 0, 0, 0, 176, 176, 234, 258, 258, 234, 258, 0, 0, 258, 176, 271, 176, 212, 0, 176, 258, 176, 176, 223, 0, 0, 0, 0, 0, 212, 0, 176, 0, 0, 0, 234, 271, 176, 258, 212, 0, 0, 176, 176, 212, 0, 0, 0, 176, 0, 176, 0, 212, 223, 0, 0, 0, 160, 176, 176, 176, 176, 312, 258, 0, 0, 176, 176, 212, 212, 0, 176, 258, 0, 176, 176, 212, 212, 312, 176, 176, 212, 0, 0, 0, 176, 176, 0, 0, 258, 0, 212, 0, 0, 0, 176, 0, 0, 0, 0, 176, 176, 168, 0, 0, 212, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 153374.0,
        "FinishedTasksDistributionInMs" : [ 1760.0, 9115.0, 10499.0, 13319.0, 16990.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 84,
        "TotalTasksDurationInMs" : 76,
        "IOBytes" : {
          "Total" : 23810,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23810,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -981457042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 540,
                "rowCount" : 45
              },
              "compileTime" : {
                "sizeInBytes" : 540,
                "rowCount" : 45
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#52] "
          },
          "1" : {
            "sign" : 1290694935,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21555,
                "rowCount" : 45
              },
              "compileTime" : {
                "sizeInBytes" : 21555,
                "rowCount" : 45
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52)) "
          },
          "2" : {
            "sign" : 987316,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#52, s_store_id#53, s_rec_start_date#54, s_rec_end_date#55, s_closed_date_sk#56, s_store_name#57, s_number_employees#58, s_floor_space#59, s_hours#60, s_manager#61, s_market_id#62, s_geography_class#63, s_market_desc#64, s_market_manager#65, s_division_id#66, s_division_name#67, s_company_id#68, s_company_name#69, s_street_number#70, s_street_name#71, s_street_type#72, s_suite_number#73, s_city#74, s_county#75, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#52]\n+- Filter ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#52,s_store_id#53,s_rec_start_date#54,s_rec_end_date#55,s_closed_date_sk#56,s_store_name#57,s_number_employees#58,s_floor_space#59,s_hours#60,s_manager#61,s_market_id#62,s_geography_class#63,s_market_desc#64,s_market_manager#65,s_division_id#66,s_division_name#67,s_company_id#68,s_company_name#69,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -885579661,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#52] Input [2]: [s_store_sk#52, s_state#76] "
          },
          "1" : {
            "sign" : 827463836,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#52, s_state#76] Condition : ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52)) "
          },
          "2" : {
            "sign" : -1582896967,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#52, s_state#76] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_state), EqualTo(s_state,SD), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#52]\n+- Filter ((isnotnull(s_state#76) AND (s_state#76 = SD)) AND isnotnull(s_store_sk#52))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = SD), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,SD), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 540,
        "inputRowCount" : 45
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1938,
        "TotalTasksDurationInMs" : 617,
        "IOBytes" : {
          "Total" : 14453,
          "Details" : {
            "IR" : 14453,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1280728153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6912,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 6912,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#24] "
          },
          "1" : {
            "sign" : -219930167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24)) "
          },
          "2" : {
            "sign" : -1634850698,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#24, d_date_id#25, d_date#26, d_month_seq#27, d_week_seq#28, d_quarter_seq#29, d_year#30, d_dow#31, d_moy#32, d_dom#33, d_qoy#34, d_fy_year#35, d_fy_quarter_seq#36, d_fy_week_seq#37, d_day_name#38, d_quarter_name#39, d_holiday#40, d_weekend#41, d_following_holiday#42, d_first_dom#43, d_last_dom#44, d_same_day_ly#45, d_same_day_lq#46, d_current_day#47, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#24]\n+- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 75284794,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#24] Input [2]: [d_date_sk#24, d_year#30] "
          },
          "1" : {
            "sign" : -407335254,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#24, d_year#30] Condition : ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24)) "
          },
          "2" : {
            "sign" : -1111391529,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#24, d_year#30] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#24]\n+- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6912,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1745,
        "TotalTasksDurationInMs" : 449,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 490384968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 80000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#81, c_customer_id#82] "
          },
          "1" : {
            "sign" : -313267243,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(c_customer_sk#81) "
          },
          "2" : {
            "sign" : 1090226711,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#81, c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_current_addr_sk#85, c_first_shipto_date_sk#86, c_first_sales_date_sk#87, c_salutation#88, c_first_name#89, c_last_name#90, c_preferred_cust_flag#91, c_birth_day#92, c_birth_month#93, c_birth_year#94, c_birth_country#95, c_login#96, c_email_address#97, c_last_review_date#98], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#81, c_customer_id#82]\n+- Filter isnotnull(c_customer_sk#81)\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -379799562,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [c_customer_sk#81, c_customer_id#82] Condition : isnotnull(c_customer_sk#81) "
          },
          "1" : {
            "sign" : -241840712,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 80000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [2]: [c_customer_sk#81, c_customer_id#82] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk)] ReadSchema: struct<c_customer_sk:int,c_customer_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(c_customer_sk#81)\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#81,c_customer_id#82] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 80000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2941,
        "TotalTasksDurationInMs" : 23505,
        "IOBytes" : {
          "Total" : 40547354,
          "Details" : {
            "IR" : 18086805,
            "IW" : 0,
            "SR" : 0,
            "SW" : 22460549
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1592539811,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431292720,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 431292720,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ctr_customer_sk#111, ctr_store_sk#112] "
          },
          "1" : {
            "sign" : -1126087912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1186054980,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 1186054980,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118)) "
          },
          "2" : {
            "sign" : -527396736,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ctr_total_return#113) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ctr_customer_sk#111, ctr_store_sk#112]\n+- Join Inner, ((cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) AND (ctr_store_sk#112 = ctr_store_sk#112#118))\n   :- Filter isnotnull(ctr_total_return#113)\n   :  +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n   :     +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   :        +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n   :           :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n   :           :  +- Filter (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23])\n   :           :     :  +- Project [d_date_sk#24]\n   :           :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n   :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n   :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n   :           +- Project [d_date_sk#24]\n   :              +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n   :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n   +- Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n      +- Aggregate [ctr_store_sk#112], [(avg(ctr_total_return#113) * 1.2) AS (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112 AS ctr_store_sk#112#118]\n         +- Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n            +- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n               +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n                  :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n                  :  +- Filter ((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND dynamicpruning#120 [sr_returned_date_sk#23])\n                  :     :  +- Project [d_date_sk#24]\n                  :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n                  :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n                  +- Project [d_date_sk#24]\n                     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1009556076,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [sr_customer_sk#6, sr_store_sk#10, sum#122L] Arguments: 5 "
          },
          "5" : {
            "sign" : -475662115,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [(avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118] Arguments: 8 "
          },
          "1" : {
            "sign" : 1689652557,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1186054980,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ctr_store_sk#112] Right keys [1]: [ctr_store_sk#112#118] Join type: Inner Join condition: (cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116) "
          },
          "0" : {
            "sign" : -2114439932,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 431292720,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ctr_customer_sk#111, ctr_store_sk#112] Input [5]: [ctr_customer_sk#111, ctr_store_sk#112, ctr_total_return#113, (avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118] "
          },
          "2" : {
            "sign" : -1787686488,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ctr_customer_sk#111, ctr_store_sk#112, ctr_total_return#113] Condition : isnotnull(ctr_total_return#113) "
          },
          "3" : {
            "sign" : 1551450192,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 173731488,
            "rowCount" : 5429109,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [sr_customer_sk#6, sr_store_sk#10, sum#122L] Keys [2]: [sr_customer_sk#6, sr_store_sk#10] Functions [1]: [sum(UnscaledValue(sr_fee#17))] Aggregate Attributes [1]: [sum(UnscaledValue(sr_fee#17))#114L] Results [3]: [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17))#114L,17,2) AS ctr_total_return#113] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ctr_customer_sk#111, ctr_store_sk#112]\n+- BroadcastHashJoin [ctr_store_sk#112], [ctr_store_sk#112#118], Inner, BuildRight, (cast(ctr_total_return#113 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#116), false\n   :- Filter isnotnull(ctr_total_return#113)\n   :  +- HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_customer_sk#111, ctr_store_sk#112, ctr_total_return#113])\n   :     +- ShuffleQueryStage 5\n   :        +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=604]\n   :           +- *(5) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#122L])\n   :              +- *(5) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   :                 +- *(5) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n   :                    :- *(5) Filter (isnotnull(sr_store_sk#10) AND isnotnull(sr_customer_sk#6))\n   :                    :  +- *(5) ColumnarToRow\n   :                    :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10), isnotnull(sr_customer_sk#6)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n   :                    :           +- SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n   :                    :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=570]\n                                             +- Project [d_date_sk#24]\n                                                +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   :                    +- BroadcastQueryStage 0\n   :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n   :                          +- *(1) Project [d_date_sk#24]\n   :                             +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n   :                                +- *(1) ColumnarToRow\n   :                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 8\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=999]\n         +- *(8) Filter isnotnull((avg(ctr_total_return) * 1.2)#116)\n            +- *(8) HashAggregate(keys=[ctr_store_sk#112], functions=[avg(ctr_total_return#113)], output=[(avg(ctr_total_return) * 1.2)#116, ctr_store_sk#112#118])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 7\n                     +- Exchange hashpartitioning(ctr_store_sk#112, 200), ENSURE_REQUIREMENTS, [plan_id=911]\n                        +- *(7) HashAggregate(keys=[ctr_store_sk#112], functions=[partial_avg(ctr_total_return#113)], output=[ctr_store_sk#112, sum#125, count#126L])\n                           +- *(7) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[sum(UnscaledValue(sr_fee#17))], output=[ctr_store_sk#112, ctr_total_return#113])\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 6\n                                    +- Exchange hashpartitioning(sr_customer_sk#6, sr_store_sk#10, 200), ENSURE_REQUIREMENTS, [plan_id=662]\n                                       +- *(6) HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#128L])\n                                          +- *(6) Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n                                             +- *(6) BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n                                                :- *(6) Filter isnotnull(sr_store_sk#10)\n                                                :  +- *(6) ColumnarToRow\n                                                :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n                                                :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n                                                +- BroadcastQueryStage 2\n                                                   +- ReusedExchange [d_date_sk#24], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 174783264,
        "inputRowCount" : 5429310
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 465783, 462505, 464560, 458635, 468003, 466870, 469066, 461744, 462020, 459151, 457633, 467490, 447479, 465595, 456523, 460042, 463262, 453085, 454458, 464405, 457412, 459255, 458790, 454651, 457901, 460421, 458766, 455983, 453273, 456744, 464161, 459820, 454383, 450588, 460783, 457633, 450588, 456847, 453893, 466625, 470444, 459853, 466862, 464429, 457981, 454572, 459956, 461555, 471972, 467759, 450485, 455192, 462364, 458715, 461076, 459255, 461885, 457877, 462020, 459255, 465392, 456570, 465270, 463671, 463940, 461636, 464373, 455155, 462538, 466253, 461123, 459816, 464081, 462364, 467490, 459853, 455540, 465318, 463468, 459712, 457412, 461979, 460610, 455192, 463671, 458766, 465049, 465444, 458080, 463874, 466160, 450809, 461451, 467759, 461688, 456424, 459151, 468003, 461555, 459255, 461720, 457633, 461899, 457901, 463427, 459994, 468003, 461799, 468797, 457068, 466640, 457877, 460717, 462153, 457736, 460097, 462016, 467190, 452996, 462073, 457736, 465049, 460097, 463671, 465655, 463916, 463051, 457420, 459782, 459942, 465318, 460097, 463051, 459848, 462364, 460366, 463616, 463003, 462829, 459773, 460986, 457412, 463916, 464429, 460986, 456570, 461451, 457934, 462101, 456570, 455681, 462538, 463579, 470740, 463131, 462209, 462364, 457068, 454553, 459579, 460318, 457877, 466557, 463916, 459372, 460986, 459524, 463964, 457901, 460587, 464805, 458262, 457901, 458344, 463272, 464805, 462114, 465938, 467482, 463892, 456899, 461979, 460177, 467190, 460610, 460986, 463051, 457051, 454303, 457901, 466112, 460503, 459255, 454170, 457877, 466381, 455516, 463892, 460986, 460097 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 3114,
        "TotalTasksDurationInMs" : 4610,
        "IOBytes" : {
          "Total" : 109645478,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 87892401,
            "SW" : 21753077
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1509983227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3313132928,
                "rowCount" : 25883851
              },
              "compileTime" : {
                "sizeInBytes" : 3313132928,
                "rowCount" : 25883851
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23]) "
          },
          "5" : {
            "sign" : 709283783,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#4, sr_item_sk#5, sr_customer_sk#6, sr_cdemo_sk#7, sr_hdemo_sk#8, sr_addr_sk#9, sr_store_sk#10, sr_reason_sk#11, sr_ticket_number#12L, sr_return_quantity#13, sr_return_amt#14, sr_return_tax#15, sr_return_amt_inc_tax#16, sr_fee#17, sr_return_ship_cost#18, sr_refunded_cash#19, sr_reversed_charge#20, sr_store_credit#21, sr_net_loss#22, sr_returned_date_sk#23], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1577005102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] "
          },
          "0" : {
            "sign" : 276343552,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 646939080,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113] "
          },
          "2" : {
            "sign" : -856386912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#23 = d_date_sk#24) "
          },
          "3" : {
            "sign" : 878763988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 724747828,
                "rowCount" : 25883851
              },
              "compileTime" : {
                "sizeInBytes" : 724747828,
                "rowCount" : 25883851
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [sr_customer_sk#6, sr_store_sk#10], [sr_customer_sk#6 AS ctr_customer_sk#111, sr_store_sk#10 AS ctr_store_sk#112, MakeDecimal(sum(UnscaledValue(sr_fee#17)),17,2) AS ctr_total_return#113]\n+- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   +- Join Inner, (sr_returned_date_sk#23 = d_date_sk#24)\n      :- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23]\n      :  +- Filter (((isnotnull(sr_returned_date_sk#23) AND isnotnull(sr_store_sk#10)) AND isnotnull(sr_customer_sk#6)) AND dynamicpruning#119 [sr_returned_date_sk#23])\n      :     :  +- Project [d_date_sk#24]\n      :     :     +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#4,sr_item_sk#5,sr_customer_sk#6,sr_cdemo_sk#7,sr_hdemo_sk#8,sr_addr_sk#9,sr_store_sk#10,sr_reason_sk#11,sr_ticket_number#12L,sr_return_quantity#13,sr_return_amt#14,sr_return_tax#15,sr_return_amt_inc_tax#16,sr_fee#17,sr_return_ship_cost#18,sr_refunded_cash#19,sr_reversed_charge#20,sr_store_credit#21,sr_net_loss#22,sr_returned_date_sk#23] parquet\n      +- Project [d_date_sk#24]\n         +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 984886300,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 724747828,
            "rowCount" : 25883851,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [4]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpruning#119)] PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)] ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)> "
          },
          "5" : {
            "sign" : -72960436,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#24] Arguments: 0 "
          },
          "1" : {
            "sign" : -659333875,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] Input [5]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23, d_date_sk#24] "
          },
          "0" : {
            "sign" : -1897383131,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 646939080,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17] Keys [2]: [sr_customer_sk#6, sr_store_sk#10] Functions [1]: [partial_sum(UnscaledValue(sr_fee#17))] Aggregate Attributes [1]: [sum#121L] Results [3]: [sr_customer_sk#6, sr_store_sk#10, sum#122L] "
          },
          "2" : {
            "sign" : -1358448823,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#23] Right keys [1]: [d_date_sk#24] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1404217522,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 724747828,
            "rowCount" : 25883851,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [sr_customer_sk#6, sr_store_sk#10, sr_fee#17, sr_returned_date_sk#23] Condition : (isnotnull(sr_store_sk#10) AND isnotnull(sr_customer_sk#6)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[sr_customer_sk#6, sr_store_sk#10], functions=[partial_sum(UnscaledValue(sr_fee#17))], output=[sr_customer_sk#6, sr_store_sk#10, sum#122L])\n+- Project [sr_customer_sk#6, sr_store_sk#10, sr_fee#17]\n   +- BroadcastHashJoin [sr_returned_date_sk#23], [d_date_sk#24], Inner, BuildRight, false\n      :- Filter (isnotnull(sr_store_sk#10) AND isnotnull(sr_customer_sk#6))\n      :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_customer_sk#6,sr_store_sk#10,sr_fee#17,sr_returned_date_sk#23] Batched: true, DataFilters: [isnotnull(sr_store_sk#10), isnotnull(sr_customer_sk#6)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpru..., PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_fee:decimal(7,2)>\n      :        +- SubqueryBroadcast dynamicpruning#119, 0, [d_date_sk#24], [id=#573]\n      :           +- AdaptiveSparkPlan isFinalPlan=false\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=570]\n      :                 +- Project [d_date_sk#24]\n      :                    +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      +- BroadcastQueryStage 0\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n            +- *(1) Project [d_date_sk#24]\n               +- *(1) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))\n                  +- *(1) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 725799332,
        "inputRowCount" : 25884217
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 20634.0,
        "FinishedTasksDistributionInMs" : [ 1337.0, 1347.0, 1354.0, 1374.0, 1474.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 17024,
        "TotalTasksDurationInMs" : 187391,
        "IOBytes" : {
          "Total" : 139573278,
          "Details" : {
            "IR" : 51680877,
            "IW" : 0,
            "SR" : 0,
            "SW" : 87892401
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226496188,
  "SQLEndTimeInMs" : 1702226521996,
  "Objectives" : {
    "DurationInMs" : 25808,
    "IOBytes" : {
      "Total" : 561696950,
      "Details" : {
        "IR" : 121546914,
        "IW" : 0,
        "SR" : 220075018,
        "SW" : 220075018
      }
    }
  }
}
