{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -158841582,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#83 [ss_sold_date_sk#50]) "
        },
        "8" : {
          "sign" : -728831919,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 800,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#0, d_year#6] "
        },
        "4" : {
          "sign" : 916436690,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12064832682,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] "
        },
        "15" : {
          "sign" : 56848849,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1706982,
          "rowCount" : 4007,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51)) "
        },
        "11" : {
          "sign" : 1624076413,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6601088472,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] "
        },
        "9" : {
          "sign" : -334082582,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0)) "
        },
        "13" : {
          "sign" : 1724783564,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36L, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : -1173795299,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#51, i_item_id#52, i_rec_start_date#53, i_rec_end_date#54, i_item_desc#55, i_current_price#56, i_wholesale_cost#57, i_brand_id#58, i_brand#59, i_class_id#60, i_class#61, i_category_id#62, i_category#63, i_manufact_id#64, i_manufact#65, i_size#66, i_formulation#67, i_color#68, i_units#69, i_container#70, i_manager_id#71, i_product_name#72], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 238670671,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14362896050,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#29 = i_item_sk#51) "
        },
        "10" : {
          "sign" : -442926262,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#0, d_date_id#1, d_date#2, d_month_seq#3, d_week_seq#4, d_quarter_seq#5, d_year#6, d_dow#7, d_moy#8, d_dom#9, d_qoy#10, d_fy_year#11, d_fy_quarter_seq#12, d_fy_week_seq#13, d_day_name#14, d_quarter_name#15, d_holiday#16, d_weekend#17, d_following_holiday#18, d_first_dom#19, d_last_dom#20, d_same_day_ly#21, d_same_day_lq#22, d_current_day#23, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -1309817488,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42] "
        },
        "1" : {
          "sign" : 2011709959,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 168,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "14" : {
          "sign" : 1127279042,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 136238,
          "rowCount" : 4007,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#51, i_category_id#62, i_category#63] "
        },
        "0" : {
          "sign" : 382762534,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 176,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "2" : {
          "sign" : -436116528,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 168,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [sum(ss_ext_sales_price)#74 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true "
        },
        "7" : {
          "sign" : -1988384715,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#0 = ss_sold_date_sk#50) "
        },
        "3" : {
          "sign" : 1036753275,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 168,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#74] "
        }
      },
      "links" : [ {
        "fromId" : 10,
        "fromName" : "LogicalRelation",
        "toId" : 9,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "LogicalRelation",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 12,
        "fromName" : "Filter",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [sum(ss_ext_sales_price)#74 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true\n      +- Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#74]\n         +- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n            +- Join Inner, (ss_item_sk#29 = i_item_sk#51)\n               :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n               :  +- Join Inner, (d_date_sk#0 = ss_sold_date_sk#50)\n               :     :- Project [d_date_sk#0, d_year#6]\n               :     :  +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :     :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :     +- Project [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50]\n               :        +- Filter ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#83 [ss_sold_date_sk#50])\n               :           :  +- Project [d_date_sk#0, d_year#6]\n               :           :     +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :           :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#28,ss_item_sk#29,ss_customer_sk#30,ss_cdemo_sk#31,ss_hdemo_sk#32,ss_addr_sk#33,ss_store_sk#34,ss_promo_sk#35,ss_ticket_number#36L,ss_quantity#37,ss_wholesale_cost#38,ss_list_price#39,ss_sales_price#40,ss_ext_discount_amt#41,ss_ext_sales_price#42,ss_ext_wholesale_cost#43,ss_ext_list_price#44,ss_ext_tax#45,ss_coupon_amt#46,ss_net_paid#47,ss_net_paid_inc_tax#48,ss_net_profit#49,ss_sold_date_sk#50] parquet\n               +- Project [i_item_sk#51, i_category_id#62, i_category#63]\n                  +- Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n                     +- Relation spark_catalog.tpcds_100.item[i_item_sk#51,i_item_id#52,i_rec_start_date#53,i_rec_end_date#54,i_item_desc#55,i_current_price#56,i_wholesale_cost#57,i_brand_id#58,i_brand#59,i_class_id#60,i_class#61,i_category_id#62,i_category#63,i_manufact_id#64,i_manufact#65,i_size#66,i_formulation#67,i_color#68,i_units#69,i_container#70,i_manager_id#71,i_product_name#72] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 41911767710,
      "inputRowCount" : 275322402
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1000986419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 4400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -2104175516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 8448,
            "rowCount" : 176,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1034633245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 8448,
            "rowCount" : 176,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1894208112,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8448,
            "rowCount" : 176,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85], HashAggregate(keys=[d_year#6, i_category_id#62, i_category#63], functions=[sum(UnscaledValue(ss_ext_sales_price#42))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85], HashAggregate(keys=[d_year#6, i_category_id#62, i_category#63], functions=[sum(UnscaledValue(ss_ext_sales_price#42))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8448,
        "inputRowCount" : 176
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226978121,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 467,
        "IOBytes" : {
          "Total" : 13714,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13714,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -728831919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#0, d_year#6] "
          },
          "8" : {
            "sign" : 142685133,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#0, d_year#6], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : -2094257725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12064832682,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] "
          },
          "15" : {
            "sign" : -1968140148,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 136238,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#51, i_category_id#62, i_category#63], BroadcastQueryStage 1 "
          },
          "11" : {
            "sign" : 1724783564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36L, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : 881297562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] "
          },
          "13" : {
            "sign" : -334082582,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0)) "
          },
          "5" : {
            "sign" : 1145527144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14362896050,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#29 = i_item_sk#51) "
          },
          "10" : {
            "sign" : 494395567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50]) "
          },
          "6" : {
            "sign" : -994381367,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 204633742632,
            "rowCount" : 8526405943,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42] "
          },
          "1" : {
            "sign" : 1510718000,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 12064832682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -442926262,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#0, d_date_id#1, d_date#2, d_month_seq#3, d_week_seq#4, d_quarter_seq#5, d_year#6, d_dow#7, d_moy#8, d_dom#9, d_qoy#10, d_fy_year#11, d_fy_quarter_seq#12, d_fy_week_seq#13, d_day_name#14, d_quarter_name#15, d_holiday#16, d_weekend#17, d_following_holiday#18, d_first_dom#19, d_last_dom#20, d_same_day_ly#21, d_same_day_lq#22, d_current_day#23, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 838384815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 4400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 51790981,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12064832682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 684567954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272844990176,
            "rowCount" : 8526405943,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#0 = ss_sold_date_sk#50) "
          },
          "3" : {
            "sign" : 2138886172,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 12064832682,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true\n      +- Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85]\n         +- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n            +- Join Inner, (ss_item_sk#29 = i_item_sk#51)\n               :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n               :  +- Join Inner, (d_date_sk#0 = ss_sold_date_sk#50)\n               :     :- LogicalQueryStage Project [d_date_sk#0, d_year#6], BroadcastQueryStage 0\n               :     +- Project [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50]\n               :        +- Filter ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50])\n               :           :  +- Project [d_date_sk#0, d_year#6]\n               :           :     +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :           :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#28,ss_item_sk#29,ss_customer_sk#30,ss_cdemo_sk#31,ss_hdemo_sk#32,ss_addr_sk#33,ss_store_sk#34,ss_promo_sk#35,ss_ticket_number#36L,ss_quantity#37,ss_wholesale_cost#38,ss_list_price#39,ss_sales_price#40,ss_ext_discount_amt#41,ss_ext_sales_price#42,ss_ext_wholesale_cost#43,ss_ext_list_price#44,ss_ext_tax#45,ss_coupon_amt#46,ss_net_paid#47,ss_net_paid_inc_tax#48,ss_net_profit#49,ss_sold_date_sk#50] parquet\n               +- LogicalQueryStage Project [i_item_sk#51, i_category_id#62, i_category#63], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41808078718,
        "inputRowCount" : 275049391
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226973254,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5334,
        "IOBytes" : {
          "Total" : 74501431,
          "Details" : {
            "IR" : 74474003,
            "IW" : 0,
            "SR" : 13714,
            "SW" : 13714
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -728831919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#0, d_year#6] "
          },
          "8" : {
            "sign" : 142685133,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#0, d_year#6], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : -2094257725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1405356333149032,
            "rowCount" : 31939916662478,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] "
          },
          "15" : {
            "sign" : -1968140148,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1179648,
            "rowCount" : 3746,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#51, i_category_id#62, i_category#63], BroadcastQueryStage 1 "
          },
          "11" : {
            "sign" : 1724783564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36L, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : 881297562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] "
          },
          "13" : {
            "sign" : -334082582,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0)) "
          },
          "5" : {
            "sign" : 1145527144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1660875666448856,
            "rowCount" : 31939916662478,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#29 = i_item_sk#51) "
          },
          "10" : {
            "sign" : 494395567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50]) "
          },
          "6" : {
            "sign" : -994381367,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 204633742632,
            "rowCount" : 8526405943,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42] "
          },
          "1" : {
            "sign" : 1510718000,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1405356333149032,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -442926262,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#0, d_date_id#1, d_date#2, d_month_seq#3, d_week_seq#4, d_quarter_seq#5, d_year#6, d_dow#7, d_moy#8, d_dom#9, d_qoy#10, d_fy_year#11, d_fy_quarter_seq#12, d_fy_week_seq#13, d_day_name#14, d_quarter_name#15, d_holiday#16, d_weekend#17, d_following_holiday#18, d_first_dom#19, d_last_dom#20, d_same_day_ly#21, d_same_day_lq#22, d_current_day#23, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 838384815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 4400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 51790981,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1405356333149032,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 684567954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272844990176,
            "rowCount" : 8526405943,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#0 = ss_sold_date_sk#50) "
          },
          "3" : {
            "sign" : 2138886172,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1405356333149032,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true\n      +- Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85]\n         +- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n            +- Join Inner, (ss_item_sk#29 = i_item_sk#51)\n               :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n               :  +- Join Inner, (d_date_sk#0 = ss_sold_date_sk#50)\n               :     :- LogicalQueryStage Project [d_date_sk#0, d_year#6], BroadcastQueryStage 0\n               :     +- Project [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50]\n               :        +- Filter ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50])\n               :           :  +- Project [d_date_sk#0, d_year#6]\n               :           :     +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :           :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#28,ss_item_sk#29,ss_customer_sk#30,ss_cdemo_sk#31,ss_hdemo_sk#32,ss_addr_sk#33,ss_store_sk#34,ss_promo_sk#35,ss_ticket_number#36L,ss_quantity#37,ss_wholesale_cost#38,ss_list_price#39,ss_sales_price#40,ss_ext_discount_amt#41,ss_ext_sales_price#42,ss_ext_wholesale_cost#43,ss_ext_list_price#44,ss_ext_tax#45,ss_coupon_amt#46,ss_net_paid#47,ss_net_paid_inc_tax#48,ss_net_profit#49,ss_sold_date_sk#50] parquet\n               +- LogicalQueryStage Project [i_item_sk#51, i_category_id#62, i_category#63], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41809122128,
        "inputRowCount" : 275049130
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226973282,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5306,
        "IOBytes" : {
          "Total" : 74501431,
          "Details" : {
            "IR" : 74474003,
            "IW" : 0,
            "SR" : 13714,
            "SW" : 13714
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -728831919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 800,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 800,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#0, d_year#6] "
          },
          "1" : {
            "sign" : -334082582,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0)) "
          },
          "2" : {
            "sign" : -442926262,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#0, d_date_id#1, d_date#2, d_month_seq#3, d_week_seq#4, d_quarter_seq#5, d_year#6, d_dow#7, d_moy#8, d_dom#9, d_qoy#10, d_fy_year#11, d_fy_quarter_seq#12, d_fy_week_seq#13, d_day_name#14, d_quarter_name#15, d_holiday#16, d_weekend#17, d_following_holiday#18, d_first_dom#19, d_last_dom#20, d_same_day_ly#21, d_same_day_lq#22, d_current_day#23, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#0, d_year#6]\n+- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -186784759,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [d_date_sk#0, d_year#6] Input [3]: [d_date_sk#0, d_year#6, d_moy#8] "
          },
          "1" : {
            "sign" : -91899342,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#0, d_year#6, d_moy#8] Condition : ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0)) "
          },
          "2" : {
            "sign" : -1510970486,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#0, d_year#6, d_moy#8] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#0, d_year#6]\n+- Filter ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_year#6,d_moy#8] Batched: true, DataFilters: [isnotnull(d_moy#8), isnotnull(d_year#6), (d_moy#8 = 12), (d_year#6 = 1998), isnotnull(d_date_sk#0)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 800,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1284,
        "TotalTasksDurationInMs" : 1273,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1127279042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 136238,
                "rowCount" : 4007
              },
              "compileTime" : {
                "sizeInBytes" : 136238,
                "rowCount" : 4007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#51, i_category_id#62, i_category#63] "
          },
          "1" : {
            "sign" : 56848849,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1706982,
                "rowCount" : 4007
              },
              "compileTime" : {
                "sizeInBytes" : 1706982,
                "rowCount" : 4007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51)) "
          },
          "2" : {
            "sign" : -1173795299,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#51, i_item_id#52, i_rec_start_date#53, i_rec_end_date#54, i_item_desc#55, i_current_price#56, i_wholesale_cost#57, i_brand_id#58, i_brand#59, i_class_id#60, i_class#61, i_category_id#62, i_category#63, i_manufact_id#64, i_manufact#65, i_size#66, i_formulation#67, i_color#68, i_units#69, i_container#70, i_manager_id#71, i_product_name#72], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#51, i_category_id#62, i_category#63]\n+- Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#51,i_item_id#52,i_rec_start_date#53,i_rec_end_date#54,i_item_desc#55,i_current_price#56,i_wholesale_cost#57,i_brand_id#58,i_brand#59,i_class_id#60,i_class#61,i_category_id#62,i_category#63,i_manufact_id#64,i_manufact#65,i_size#66,i_formulation#67,i_color#68,i_units#69,i_container#70,i_manager_id#71,i_product_name#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 12871530,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 136238,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [i_item_sk#51, i_category_id#62, i_category#63] Input [4]: [i_item_sk#51, i_category_id#62, i_category#63, i_manager_id#71] "
          },
          "1" : {
            "sign" : 1638972217,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 136238,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [i_item_sk#51, i_category_id#62, i_category#63, i_manager_id#71] Condition : ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51)) "
          },
          "2" : {
            "sign" : -209171835,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 136238,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [4]: [i_item_sk#51, i_category_id#62, i_category#63, i_manager_id#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#51, i_category_id#62, i_category#63]\n+- Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#51,i_category_id#62,i_category#63,i_manager_id#71] Batched: true, DataFilters: [isnotnull(i_manager_id#71), (i_manager_id#71 = 1), isnotnull(i_item_sk#51)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136238,
        "inputRowCount" : 4007
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1311,
        "TotalTasksDurationInMs" : 5273,
        "IOBytes" : {
          "Total" : 1258201,
          "Details" : {
            "IR" : 1258201,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -475431726,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#0 = ss_sold_date_sk#50) "
          },
          "5" : {
            "sign" : 881297562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6601088472,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 6601088472,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] "
          },
          "6" : {
            "sign" : 494395567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50]) "
          },
          "1" : {
            "sign" : -298220753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12064832682,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 12064832682,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] "
          },
          "0" : {
            "sign" : 1153907998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85] "
          },
          "2" : {
            "sign" : 1509451474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14362896050,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 14362896050,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#29 = i_item_sk#51) "
          },
          "7" : {
            "sign" : 1724783564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#28, ss_item_sk#29, ss_customer_sk#30, ss_cdemo_sk#31, ss_hdemo_sk#32, ss_addr_sk#33, ss_store_sk#34, ss_promo_sk#35, ss_ticket_number#36L, ss_quantity#37, ss_wholesale_cost#38, ss_list_price#39, ss_sales_price#40, ss_ext_discount_amt#41, ss_ext_sales_price#42, ss_ext_wholesale_cost#43, ss_ext_list_price#44, ss_ext_tax#45, ss_coupon_amt#46, ss_net_paid#47, ss_net_paid_inc_tax#48, ss_net_profit#49, ss_sold_date_sk#50], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -128412019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85]\n+- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n   +- Join Inner, (ss_item_sk#29 = i_item_sk#51)\n      :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n      :  +- Join Inner, (d_date_sk#0 = ss_sold_date_sk#50)\n      :     :- Project [d_date_sk#0, d_year#6]\n      :     :  +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n      :     :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n      :     +- Project [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50]\n      :        +- Filter ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50])\n      :           :  +- Project [d_date_sk#0, d_year#6]\n      :           :     +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n      :           :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n      :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#28,ss_item_sk#29,ss_customer_sk#30,ss_cdemo_sk#31,ss_hdemo_sk#32,ss_addr_sk#33,ss_store_sk#34,ss_promo_sk#35,ss_ticket_number#36L,ss_quantity#37,ss_wholesale_cost#38,ss_list_price#39,ss_sales_price#40,ss_ext_discount_amt#41,ss_ext_sales_price#42,ss_ext_wholesale_cost#43,ss_ext_list_price#44,ss_ext_tax#45,ss_coupon_amt#46,ss_net_paid#47,ss_net_paid_inc_tax#48,ss_net_profit#49,ss_sold_date_sk#50] parquet\n      +- Project [i_item_sk#51, i_category_id#62, i_category#63]\n         +- Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n            +- Relation spark_catalog.tpcds_100.item[i_item_sk#51,i_item_id#52,i_rec_start_date#53,i_rec_end_date#54,i_item_desc#55,i_current_price#56,i_wholesale_cost#57,i_brand_id#58,i_brand#59,i_class_id#60,i_class#61,i_category_id#62,i_category#63,i_manufact_id#64,i_manufact#65,i_size#66,i_formulation#67,i_color#68,i_units#69,i_container#70,i_manager_id#71,i_product_name#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -194579320,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1179648,
            "rowCount" : 3746,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [i_item_sk#51, i_category_id#62, i_category#63] Arguments: 1 "
          },
          "4" : {
            "sign" : -1074954128,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [d_date_sk#0] Right keys [1]: [ss_sold_date_sk#50] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : -1773152118,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#0, d_year#6] Arguments: 0 "
          },
          "6" : {
            "sign" : 494360968,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] Condition : isnotnull(ss_item_sk#29) "
          },
          "1" : {
            "sign" : 1112645021,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12064832682,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] Input [6]: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42, i_item_sk#51, i_category_id#62, i_category#63] "
          },
          "0" : {
            "sign" : -1258496225,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 168,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63] Keys [3]: [d_year#6, i_category_id#62, i_category#63] Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#42))] Aggregate Attributes [1]: [sum#92L] Results [4]: [d_year#6, i_category_id#62, i_category#63, sum#93L] "
          },
          "2" : {
            "sign" : 720617968,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14362896050,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#29] Right keys [1]: [i_item_sk#51] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -199126466,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#50), dynamicpruningexpression(ss_sold_date_sk#50 IN dynamicpruning#91)] PushedFilters: [IsNotNull(ss_item_sk)] ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)> "
          },
          "3" : {
            "sign" : -1121143379,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [d_year#6, ss_item_sk#29, ss_ext_sales_price#42] Input [5]: [d_date_sk#0, d_year#6, ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_year#6, i_category_id#62, i_category#63], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#42))], output=[d_year#6, i_category_id#62, i_category#63, sum#93L])\n+- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n   +- BroadcastHashJoin [ss_item_sk#29], [i_item_sk#51], Inner, BuildRight, false\n      :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n      :  +- BroadcastHashJoin [d_date_sk#0], [ss_sold_date_sk#50], Inner, BuildLeft, false\n      :     :- BroadcastQueryStage 0\n      :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130]\n      :     :     +- *(1) Project [d_date_sk#0, d_year#6]\n      :     :        +- *(1) Filter ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0))\n      :     :           +- *(1) ColumnarToRow\n      :     :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_year#6,d_moy#8] Batched: true, DataFilters: [isnotnull(d_moy#8), isnotnull(d_year#6), (d_moy#8 = 12), (d_year#6 = 1998), isnotnull(d_date_sk#0)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- Filter isnotnull(ss_item_sk#29)\n      :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#29,ss_ext_sales_price#42,ss_sold_date_sk#50] Batched: true, DataFilters: [isnotnull(ss_item_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#50), dynamicpruningexpression(ss_sold_date_sk#50 IN dynamicpruning#91)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>\n      :              +- SubqueryBroadcast dynamicpruning#91, 0, [d_date_sk#0], [id=#276]\n      :                 +- AdaptiveSparkPlan isFinalPlan=false\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=273]\n      :                       +- Project [d_date_sk#0, d_year#6]\n      :                          +- Filter ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0))\n      :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_year#6,d_moy#8] Batched: true, DataFilters: [isnotnull(d_moy#8), isnotnull(d_year#6), (d_moy#8 = 12), (d_year#6 = 1998), isnotnull(d_date_sk#0)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      +- BroadcastQueryStage 1\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=151]\n            +- *(2) Project [i_item_sk#51, i_category_id#62, i_category#63]\n               +- *(2) Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n                  +- *(2) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#51,i_category_id#62,i_category#63,i_manager_id#71] Batched: true, DataFilters: [isnotnull(i_manager_id#71), (i_manager_id#71 = 1), isnotnull(i_item_sk#51)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6603316944,
        "inputRowCount" : 275049130
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4508,
        "TotalTasksDurationInMs" : 30821,
        "IOBytes" : {
          "Total" : 74487717,
          "Details" : {
            "IR" : 74474003,
            "IW" : 0,
            "SR" : 0,
            "SW" : 13714
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 384154051,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 176,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 176,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -382858742,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1304659027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 168,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], true\n      +- Aggregate [d_year#6, i_category_id#62, i_category#63], [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42)),17,2) AS sum(ss_ext_sales_price)#85]\n         +- Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n            +- Join Inner, (ss_item_sk#29 = i_item_sk#51)\n               :- Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n               :  +- Join Inner, (d_date_sk#0 = ss_sold_date_sk#50)\n               :     :- Project [d_date_sk#0, d_year#6]\n               :     :  +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :     :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :     +- Project [ss_item_sk#29, ss_ext_sales_price#42, ss_sold_date_sk#50]\n               :        +- Filter ((isnotnull(ss_sold_date_sk#50) AND isnotnull(ss_item_sk#29)) AND dynamicpruning#91 [ss_sold_date_sk#50])\n               :           :  +- Project [d_date_sk#0, d_year#6]\n               :           :     +- Filter (((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND ((d_moy#8 = 12) AND (d_year#6 = 1998))) AND isnotnull(d_date_sk#0))\n               :           :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_date_id#1,d_date#2,d_month_seq#3,d_week_seq#4,d_quarter_seq#5,d_year#6,d_dow#7,d_moy#8,d_dom#9,d_qoy#10,d_fy_year#11,d_fy_quarter_seq#12,d_fy_week_seq#13,d_day_name#14,d_quarter_name#15,d_holiday#16,d_weekend#17,d_following_holiday#18,d_first_dom#19,d_last_dom#20,d_same_day_ly#21,d_same_day_lq#22,d_current_day#23,... 4 more fields] parquet\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#28,ss_item_sk#29,ss_customer_sk#30,ss_cdemo_sk#31,ss_hdemo_sk#32,ss_addr_sk#33,ss_store_sk#34,ss_promo_sk#35,ss_ticket_number#36L,ss_quantity#37,ss_wholesale_cost#38,ss_list_price#39,ss_sales_price#40,ss_ext_discount_amt#41,ss_ext_sales_price#42,ss_ext_wholesale_cost#43,ss_ext_list_price#44,ss_ext_tax#45,ss_coupon_amt#46,ss_net_paid#47,ss_net_paid_inc_tax#48,ss_net_profit#49,ss_sold_date_sk#50] parquet\n               +- Project [i_item_sk#51, i_category_id#62, i_category#63]\n                  +- Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n                     +- Relation spark_catalog.tpcds_100.item[i_item_sk#51,i_item_id#52,i_rec_start_date#53,i_rec_end_date#54,i_item_desc#55,i_current_price#56,i_wholesale_cost#57,i_brand_id#58,i_brand#59,i_class_id#60,i_class#61,i_category_id#62,i_category#63,i_manufact_id#64,i_manufact#65,i_size#66,i_formulation#67,i_color#68,i_units#69,i_container#70,i_manager_id#71,i_product_name#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -680419456,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 176,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [4]: [d_year#6, i_category_id#62, i_category#63, sum(ss_ext_sales_price)#85] Arguments: 100, [sum(ss_ext_sales_price)#85 DESC NULLS LAST, d_year#6 ASC NULLS FIRST, i_category_id#62 ASC NULLS FIRST, i_category#63 ASC NULLS FIRST], [d_year#6, i_category_id#62, i_category#63, sum(ss_ext_sales_price)#85] "
          },
          "1" : {
            "sign" : -1597273810,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8448,
            "rowCount" : 176,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [4]: [d_year#6, i_category_id#62, i_category#63, sum#93L] Keys [3]: [d_year#6, i_category_id#62, i_category#63] Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#42))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#42))#84L] Results [4]: [d_year#6, i_category_id#62, i_category#63, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#42))#84L,17,2) AS sum(ss_ext_sales_price)#85] "
          },
          "2" : {
            "sign" : -1225925701,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 168,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [d_year#6, i_category_id#62, i_category#63, sum#93L] Arguments: 2 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[sum(ss_ext_sales_price)#85 DESC NULLS LAST,d_year#6 ASC NULLS FIRST,i_category_id#62 ASC NULLS FIRST,i_category#63 ASC NULLS FIRST], output=[d_year#6,i_category_id#62,i_category#63,sum(ss_ext_sales_price)#85])\n+- HashAggregate(keys=[d_year#6, i_category_id#62, i_category#63], functions=[sum(UnscaledValue(ss_ext_sales_price#42))], output=[d_year#6, i_category_id#62, i_category#63, sum(ss_ext_sales_price)#85])\n   +- ShuffleQueryStage 2\n      +- Exchange hashpartitioning(d_year#6, i_category_id#62, i_category#63, 200), ENSURE_REQUIREMENTS, [plan_id=318]\n         +- *(3) HashAggregate(keys=[d_year#6, i_category_id#62, i_category#63], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#42))], output=[d_year#6, i_category_id#62, i_category#63, sum#93L])\n            +- *(3) Project [d_year#6, ss_ext_sales_price#42, i_category_id#62, i_category#63]\n               +- *(3) BroadcastHashJoin [ss_item_sk#29], [i_item_sk#51], Inner, BuildRight, false\n                  :- *(3) Project [d_year#6, ss_item_sk#29, ss_ext_sales_price#42]\n                  :  +- *(3) BroadcastHashJoin [d_date_sk#0], [ss_sold_date_sk#50], Inner, BuildLeft, false\n                  :     :- BroadcastQueryStage 0\n                  :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130]\n                  :     :     +- *(1) Project [d_date_sk#0, d_year#6]\n                  :     :        +- *(1) Filter ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0))\n                  :     :           +- *(1) ColumnarToRow\n                  :     :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_year#6,d_moy#8] Batched: true, DataFilters: [isnotnull(d_moy#8), isnotnull(d_year#6), (d_moy#8 = 12), (d_year#6 = 1998), isnotnull(d_date_sk#0)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :     +- *(3) Filter isnotnull(ss_item_sk#29)\n                  :        +- *(3) ColumnarToRow\n                  :           +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#29,ss_ext_sales_price#42,ss_sold_date_sk#50] Batched: true, DataFilters: [isnotnull(ss_item_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#50), dynamicpruningexpression(ss_sold_date_sk#50 IN dynamicpruning#91)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>\n                  :                 +- SubqueryBroadcast dynamicpruning#91, 0, [d_date_sk#0], [id=#276]\n                  :                    +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#0, d_year#6], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=130]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=273]\n                                             +- Project [d_date_sk#0, d_year#6]\n                                                +- Filter ((((isnotnull(d_moy#8) AND isnotnull(d_year#6)) AND (d_moy#8 = 12)) AND (d_year#6 = 1998)) AND isnotnull(d_date_sk#0))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#0,d_year#6,d_moy#8] Batched: true, DataFilters: [isnotnull(d_moy#8), isnotnull(d_year#6), (d_moy#8 = 12), (d_year#6 = 1998), isnotnull(d_date_sk#0)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  +- BroadcastQueryStage 1\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=151]\n                        +- *(2) Project [i_item_sk#51, i_category_id#62, i_category#63]\n                           +- *(2) Filter ((isnotnull(i_manager_id#71) AND (i_manager_id#71 = 1)) AND isnotnull(i_item_sk#51))\n                              +- *(2) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#51,i_category_id#62,i_category#63,i_manager_id#71] Batched: true, DataFilters: [isnotnull(i_manager_id#71), (i_manager_id#71 = 1), isnotnull(i_item_sk#51)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_category_id:int,i_category:string,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8448,
        "inputRowCount" : 176
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1872, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1408, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 267,
        "TotalTasksDurationInMs" : 253,
        "IOBytes" : {
          "Total" : 13714,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13714,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226970964,
  "SQLEndTimeInMs" : 1702226978588,
  "Objectives" : {
    "DurationInMs" : 7624,
    "IOBytes" : {
      "Total" : 75853582,
      "Details" : {
        "IR" : 75826154,
        "IW" : 0,
        "SR" : 13714,
        "SW" : 13714
      }
    }
  }
}
