{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 88832547,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3628926,
          "rowCount" : 28801,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(t_time#258) AND ((t_time#258 >= 49530) AND (t_time#258 <= 78330))) AND isnotnull(t_time_sk#256)) "
        },
        "34" : {
          "sign" : -1379392975,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6094715528,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#234, d_moy#236] "
        },
        "12" : {
          "sign" : -1564545847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2838886160,
          "rowCount" : 70972154,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
        },
        "51" : {
          "sign" : 700011054,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#214) "
        },
        "8" : {
          "sign" : -658670410,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3312426200,
          "rowCount" : 82810655,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
        },
        "19" : {
          "sign" : 1645566502,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 2091784090,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 36,
          "rowCount" : 3,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sm_ship_mode_sk#174] "
        },
        "4" : {
          "sign" : 649998031,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 140745600,
          "rowCount" : 259200,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "40" : {
          "sign" : 1710308556,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "15" : {
          "sign" : 740350382,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14961301680,
          "rowCount" : 71929335,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#410 [ws_sold_date_sk#121]) "
        },
        "11" : {
          "sign" : -1882608034,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3613771460,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
        },
        "9" : {
          "sign" : 1384406102,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3974911440,
          "rowCount" : 82810655,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
        },
        "44" : {
          "sign" : -6466629,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 345612,
          "rowCount" : 28801,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [t_time_sk#256] "
        },
        "33" : {
          "sign" : 1387808513,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7911502224,
          "rowCount" : 164822963,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#266) "
        },
        "22" : {
          "sign" : 870064768,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 10886400,
          "rowCount" : 86400,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [t_time_sk#164, t_time_id#165, t_time#166, t_hour#167, t_minute#168, t_second#169, t_am_pm#170, t_shift#171, t_sub_shift#172, t_meal_time#173], `spark_catalog`.`tpcds_100`.`time_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -1131398949,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1905,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] "
        },
        "50" : {
          "sign" : -608879237,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1905,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#214, w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226] "
        },
        "37" : {
          "sign" : -885817172,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6780717936,
          "rowCount" : 141264957,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#256) "
        },
        "13" : {
          "sign" : 1262488592,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3406663392,
          "rowCount" : 70972154,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
        },
        "46" : {
          "sign" : -1468714120,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 10886400,
          "rowCount" : 86400,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [t_time_sk#256, t_time_id#257, t_time#258, t_hour#259, t_minute#260, t_second#261, t_am_pm#262, t_shift#263, t_sub_shift#264, t_meal_time#265], `spark_catalog`.`tpcds_100`.`time_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "24" : {
          "sign" : -949908670,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 354,
          "rowCount" : 3,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174)) "
        },
        "35" : {
          "sign" : -788478466,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7202845624,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#228) "
        },
        "16" : {
          "sign" : -1898548450,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 781967029,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 70372800,
          "rowCount" : 129600,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#0, d_year#142 AS year#1, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#2, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#3, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#4, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#5, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#6, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#7, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#8, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#9, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#10, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#11, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#12, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#13, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#14, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#15, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#16, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#17, ... 8 more fields] "
        },
        "10" : {
          "sign" : 853666531,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3057806620,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
        },
        "48" : {
          "sign" : 238440423,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 354,
          "rowCount" : 3,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (sm_carrier#270 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#266)) "
        },
        "21" : {
          "sign" : -838400325,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3628926,
          "rowCount" : 28801,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164)) "
        },
        "43" : {
          "sign" : 1628433880,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#228, d_date_id#229, d_date#230, d_month_seq#231, d_week_seq#232, d_quarter_seq#233, d_year#234, d_dow#235, d_moy#236, d_dom#237, d_qoy#238, d_fy_year#239, d_fy_quarter_seq#240, d_fy_week_seq#241, d_day_name#242, d_quarter_name#243, d_holiday#244, d_weekend#245, d_following_holiday#246, d_first_dom#247, d_last_dom#248, d_same_day_ly#249, d_same_day_lq#250, d_current_day#251, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "32" : {
          "sign" : 1600977663,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6592918520,
          "rowCount" : 164822963,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#234, d_moy#236] "
        },
        "49" : {
          "sign" : 1154392524,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2360,
          "rowCount" : 20,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sm_ship_mode_sk#266, sm_ship_mode_id#267, sm_type#268, sm_code#269, sm_carrier#270, sm_contract#271], `spark_catalog`.`tpcds_100`.`ship_mode`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -1257015228,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12069768693,
          "rowCount" : 79932243,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
        },
        "36" : {
          "sign" : -9374503,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5650598280,
          "rowCount" : 141264957,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
        },
        "1" : {
          "sign" : -211427183,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 192713206,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -232576168,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29355630096,
          "rowCount" : 141132837,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#411 [cs_sold_date_sk#213]) "
        },
        "17" : {
          "sign" : -739818797,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11520,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
        },
        "25" : {
          "sign" : -1845930134,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2360,
          "rowCount" : 20,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sm_ship_mode_sk#174, sm_ship_mode_id#175, sm_type#176, sm_code#177, sm_carrier#178, sm_contract#179], `spark_catalog`.`tpcds_100`.`ship_mode`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 1612574256,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3164890740,
          "rowCount" : 71929335,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
        },
        "47" : {
          "sign" : 86428853,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 36,
          "rowCount" : 3,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sm_ship_mode_sk#266] "
        },
        "31" : {
          "sign" : -1092126044,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 25296005943,
          "rowCount" : 159094377,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#214) "
        },
        "42" : {
          "sign" : 947226377,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#234) AND (d_year#234 = 2002)) AND isnotnull(d_date_sk#228)) "
        },
        "0" : {
          "sign" : -245617906,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 71200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -920249713,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 345612,
          "rowCount" : 28801,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [t_time_sk#164] "
        },
        "27" : {
          "sign" : -2114175198,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#122) "
        },
        "2" : {
          "sign" : -923595164,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 192713206,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 1294870511,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6209844828,
          "rowCount" : 141132837,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
        },
        "18" : {
          "sign" : 79716147,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
        },
        "30" : {
          "sign" : 2089057739,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24023250927,
          "rowCount" : 159094377,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, d_year#234, d_moy#236] "
        },
        "7" : {
          "sign" : -1343102641,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12709226637,
          "rowCount" : 79932243,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
        },
        "29" : {
          "sign" : 1892959042,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 70372800,
          "rowCount" : 129600,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, d_year#234], [w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, DIAMOND,AIRBORNE AS ship_carriers#26, d_year#234 AS year#27, sum(CASE WHEN (d_moy#236 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#28, sum(CASE WHEN (d_moy#236 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#29, sum(CASE WHEN (d_moy#236 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#30, sum(CASE WHEN (d_moy#236 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#31, sum(CASE WHEN (d_moy#236 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#32, sum(CASE WHEN (d_moy#236 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#33, sum(CASE WHEN (d_moy#236 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#34, sum(CASE WHEN (d_moy#236 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#35, sum(CASE WHEN (d_moy#236 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#36, sum(CASE WHEN (d_moy#236 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#37, sum(CASE WHEN (d_moy#236 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#38, sum(CASE WHEN (d_moy#236 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#39, sum(CASE WHEN (d_moy#236 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#40, sum(CASE WHEN (d_moy#236 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#41, sum(CASE WHEN (d_moy#236 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#42, sum(CASE WHEN (d_moy#236 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#43, ... 8 more fields] "
        },
        "41" : {
          "sign" : 1077530117,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11520,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#228, d_year#234, d_moy#236] "
        },
        "3" : {
          "sign" : -460162610,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 192713206,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#0, year#1], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#0, year#1, sum(jan_sales#2) AS jan_sales#52, sum(feb_sales#3) AS feb_sales#53, sum(mar_sales#4) AS mar_sales#54, sum(apr_sales#5) AS apr_sales#55, sum(may_sales#6) AS may_sales#56, sum(jun_sales#7) AS jun_sales#57, sum(jul_sales#8) AS jul_sales#58, sum(aug_sales#9) AS aug_sales#59, sum(sep_sales#10) AS sep_sales#60, sum(oct_sales#11) AS oct_sales#61, sum(nov_sales#12) AS nov_sales#62, sum(dec_sales#13) AS dec_sales#63, sum((jan_sales#2 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#64, sum((feb_sales#3 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#65, sum((mar_sales#4 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#66, sum((apr_sales#5 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#67, ... 20 more fields] "
        },
        "52" : {
          "sign" : 1214868669,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#214, w_warehouse_id#215, w_warehouse_name#216, w_warehouse_sq_ft#217, w_street_number#218, w_street_name#219, w_street_type#220, w_suite_number#221, w_city#222, w_county#223, w_state#224, w_zip#225, w_country#226, w_gmt_offset#227], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "28" : {
          "sign" : -2027293611,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#122, w_warehouse_id#123, w_warehouse_name#124, w_warehouse_sq_ft#125, w_street_number#126, w_street_name#127, w_street_type#128, w_suite_number#129, w_city#130, w_county#131, w_state#132, w_zip#133, w_country#134, w_gmt_offset#135], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "LogicalRelation",
        "toId" : 39,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "LogicalRelation",
        "toId" : 42,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Filter",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 39,
        "fromName" : "Filter",
        "toId" : 38,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "LogicalRelation",
        "toId" : 45,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Filter",
        "toId" : 44,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Join",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Join",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 33,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "LogicalRelation",
        "toId" : 48,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Filter",
        "toId" : 47,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Project",
        "toId" : 33,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Join",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "LogicalRelation",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Filter",
        "toId" : 50,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Join",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Union",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#0, year#1], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#0, year#1, sum(jan_sales#2) AS jan_sales#52, sum(feb_sales#3) AS feb_sales#53, sum(mar_sales#4) AS mar_sales#54, sum(apr_sales#5) AS apr_sales#55, sum(may_sales#6) AS may_sales#56, sum(jun_sales#7) AS jun_sales#57, sum(jul_sales#8) AS jul_sales#58, sum(aug_sales#9) AS aug_sales#59, sum(sep_sales#10) AS sep_sales#60, sum(oct_sales#11) AS oct_sales#61, sum(nov_sales#12) AS nov_sales#62, sum(dec_sales#13) AS dec_sales#63, sum((jan_sales#2 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#64, sum((feb_sales#3 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#65, sum((mar_sales#4 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#66, sum((apr_sales#5 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#67, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#0, d_year#142 AS year#1, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#2, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#3, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#4, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#5, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#6, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#7, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#8, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#9, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#10, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#11, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#12, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#13, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#14, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#15, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#16, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#17, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#410 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- Project [t_time_sk#164]\n            :        :     :     :        +- Filter ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164))\n            :        :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time_id#165,t_time#166,t_hour#167,t_minute#168,t_second#169,t_am_pm#170,t_shift#171,t_sub_shift#172,t_meal_time#173] parquet\n            :        :     :     +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :        +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     +- Project [sm_ship_mode_sk#174]\n            :        :        +- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n            :        :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_ship_mode_id#175,sm_type#176,sm_code#177,sm_carrier#178,sm_contract#179] parquet\n            :        +- Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134]\n            :           +- Filter isnotnull(w_warehouse_sk#122)\n            :              +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_id#123,w_warehouse_name#124,w_warehouse_sq_ft#125,w_street_number#126,w_street_name#127,w_street_type#128,w_suite_number#129,w_city#130,w_county#131,w_state#132,w_zip#133,w_country#134,w_gmt_offset#135] parquet\n            +- Aggregate [w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, d_year#234], [w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, DIAMOND,AIRBORNE AS ship_carriers#26, d_year#234 AS year#27, sum(CASE WHEN (d_moy#236 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#28, sum(CASE WHEN (d_moy#236 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#29, sum(CASE WHEN (d_moy#236 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#30, sum(CASE WHEN (d_moy#236 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#31, sum(CASE WHEN (d_moy#236 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#32, sum(CASE WHEN (d_moy#236 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#33, sum(CASE WHEN (d_moy#236 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#34, sum(CASE WHEN (d_moy#236 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#35, sum(CASE WHEN (d_moy#236 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#36, sum(CASE WHEN (d_moy#236 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#37, sum(CASE WHEN (d_moy#236 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#38, sum(CASE WHEN (d_moy#236 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#39, sum(CASE WHEN (d_moy#236 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#40, sum(CASE WHEN (d_moy#236 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#41, sum(CASE WHEN (d_moy#236 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#42, sum(CASE WHEN (d_moy#236 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#43, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, d_year#234, d_moy#236]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#214)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#234, d_moy#236]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#266)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#234, d_moy#236]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#228)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#256)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#411 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#228, d_year#234, d_moy#236]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#234) AND (d_year#234 = 2002)) AND isnotnull(d_date_sk#228))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#228,d_date_id#229,d_date#230,d_month_seq#231,d_week_seq#232,d_quarter_seq#233,d_year#234,d_dow#235,d_moy#236,d_dom#237,d_qoy#238,d_fy_year#239,d_fy_quarter_seq#240,d_fy_week_seq#241,d_day_name#242,d_quarter_name#243,d_holiday#244,d_weekend#245,d_following_holiday#246,d_first_dom#247,d_last_dom#248,d_same_day_ly#249,d_same_day_lq#250,d_current_day#251,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- Project [t_time_sk#256]\n                     :     :     :        +- Filter ((isnotnull(t_time#258) AND ((t_time#258 >= 49530) AND (t_time#258 <= 78330))) AND isnotnull(t_time_sk#256))\n                     :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#256,t_time_id#257,t_time#258,t_hour#259,t_minute#260,t_second#261,t_am_pm#262,t_shift#263,t_sub_shift#264,t_meal_time#265] parquet\n                     :     :     +- Project [d_date_sk#228, d_year#234, d_moy#236]\n                     :     :        +- Filter ((isnotnull(d_year#234) AND (d_year#234 = 2002)) AND isnotnull(d_date_sk#228))\n                     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#228,d_date_id#229,d_date#230,d_month_seq#231,d_week_seq#232,d_quarter_seq#233,d_year#234,d_dow#235,d_moy#236,d_dom#237,d_qoy#238,d_fy_year#239,d_fy_quarter_seq#240,d_fy_week_seq#241,d_day_name#242,d_quarter_name#243,d_holiday#244,d_weekend#245,d_following_holiday#246,d_first_dom#247,d_last_dom#248,d_same_day_ly#249,d_same_day_lq#250,d_current_day#251,... 4 more fields] parquet\n                     :     +- Project [sm_ship_mode_sk#266]\n                     :        +- Filter (sm_carrier#270 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#266))\n                     :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#266,sm_ship_mode_id#267,sm_type#268,sm_code#269,sm_carrier#270,sm_contract#271] parquet\n                     +- Project [w_warehouse_sk#214, w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226]\n                        +- Filter isnotnull(w_warehouse_sk#214)\n                           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#214,w_warehouse_id#215,w_warehouse_name#216,w_warehouse_sq_ft#217,w_street_number#218,w_street_name#219,w_street_type#220,w_suite_number#221,w_city#222,w_county#223,w_state#224,w_zip#225,w_country#226,w_gmt_offset#227] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 44831106576,
      "inputRowCount" : 215575609
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2057514814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29355630096,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213]) "
          },
          "12" : {
            "sign" : 1369394952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82865471093400,
            "rowCount" : 2071636777335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "8" : {
            "sign" : 649792535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60491793898182000,
            "rowCount" : 1512294847454550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "19" : {
            "sign" : 1645566502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1508646418,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -207005779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 34940682188205768000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 1750217599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7 "
          },
          "15" : {
            "sign" : 1236667944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14961301680,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121]) "
          },
          "11" : {
            "sign" : -1767537035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39319666033818300,
            "rowCount" : 756147423727275,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
          },
          "9" : {
            "sign" : -1256858549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72590152677818400,
            "rowCount" : 1512294847454550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
          },
          "33" : {
            "sign" : -1102885419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "22" : {
            "sign" : 1920354980,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#174], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : -1751930296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6587361138371002200,
            "rowCount" : 44509196880885150,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500) "
          },
          "37" : {
            "sign" : -1316862839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514)) "
          },
          "13" : {
            "sign" : -2055724317,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 99438565312080,
            "rowCount" : 2071636777335,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
          },
          "24" : {
            "sign" : -816898586,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23144782378060278000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields] "
          },
          "35" : {
            "sign" : 1710308556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1898548450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 293210843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11795899810145490000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields] "
          },
          "10" : {
            "sign" : 1898595486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33270486644000100,
            "rowCount" : 756147423727275,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "21" : {
            "sign" : -1248990847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : -1742434250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 195108808244976,
            "rowCount" : 4064766838437,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#542) "
          },
          "6" : {
            "sign" : 469023704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3175819179654555000,
            "rowCount" : 22684422711818250,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
          },
          "36" : {
            "sign" : 2047752293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#514, d_year#520, d_moy#522] "
          },
          "1" : {
            "sign" : 279845477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47841857150004820800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -275907629,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#542], BroadcastQueryStage 5 "
          },
          "17" : {
            "sign" : -739818797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
          },
          "25" : {
            "sign" : 1216744553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6231287563323921000,
            "rowCount" : 44509196880885150,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] "
          },
          "14" : {
            "sign" : 234240938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "31" : {
            "sign" : 476332015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 162590673537480,
            "rowCount" : 4064766838437,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "42" : {
            "sign" : -1293090707,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11 "
          },
          "0" : {
            "sign" : -1655218136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1566661252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#164], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : -116475209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 118691191682360400,
            "rowCount" : 2967279792059010,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "2" : {
            "sign" : -100884462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47841857150004820800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 790125624,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#514, d_date_id#515, d_date#516, d_month_seq#517, d_week_seq#518, d_quarter_seq#519, d_year#520, d_dow#521, d_moy#522, d_dom#523, d_qoy#524, d_fy_year#525, d_fy_quarter_seq#526, d_fy_week_seq#527, d_day_name#528, d_quarter_name#529, d_holiday#530, d_weekend#531, d_following_holiday#532, d_first_dom#533, d_last_dom#534, d_same_day_ly#535, d_same_day_lq#536, d_current_day#537, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 79716147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "30" : {
            "sign" : -1280007906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77149274593534260,
            "rowCount" : 1483639896029505,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#514) "
          },
          "7" : {
            "sign" : 1894693185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3357294561349101000,
            "rowCount" : 22684422711818250,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
          },
          "29" : {
            "sign" : -1557144425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 65280155425298220,
            "rowCount" : 1483639896029505,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "41" : {
            "sign" : -1083858631,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#552], BroadcastQueryStage 9 "
          },
          "3" : {
            "sign" : 1301642184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47841857150004820800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "28" : {
            "sign" : 1418507487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 142429430018832480,
            "rowCount" : 2967279792059010,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- LogicalQueryStage Project [t_time_sk#164], BroadcastQueryStage 0\n            :        :     :     +- LogicalQueryStage Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1\n            :        :     +- LogicalQueryStage Project [sm_ship_mode_sk#174], BroadcastQueryStage 2\n            :        +- LogicalQueryStage Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3\n            +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- LogicalQueryStage Project [t_time_sk#542], BroadcastQueryStage 5\n                     :     :     +- LogicalQueryStage Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7\n                     :     +- LogicalQueryStage Project [sm_ship_mode_sk#552], BroadcastQueryStage 9\n                     +- LogicalQueryStage Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 44782237056,
        "inputRowCount" : 215315007
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227232537,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18553,
        "IOBytes" : {
          "Total" : 471874634,
          "Details" : {
            "IR" : 471281716,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 296459
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 774221226,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 70750912,
            "rowCount" : 130020,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "5" : {
            "sign" : 1796906303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 70372800,
            "rowCount" : 129600,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)]) "
          },
          "6" : {
            "sign" : -2026856279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 378112,
            "rowCount" : 420,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)]) "
          },
          "1" : {
            "sign" : -105716016,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 96874325,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1203782875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1669017295,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 96874325,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -2014485901,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 96874325,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- LogicalQueryStage Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)])\n            +- LogicalQueryStage Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 70750912,
        "inputRowCount" : 130020
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 97322.0,
        "FinishedTasksDistributionInMs" : [ 648.0, 5269.0, 6364.0, 8658.0, 9196.0 ]
      },
      "StartTimeInMs" : 1702227244892,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6198,
        "IOBytes" : {
          "Total" : 145033912,
          "Details" : {
            "IR" : 144601523,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 135930
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 774221226,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 634688,
            "rowCount" : 705,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "5" : {
            "sign" : 1796906303,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 256576,
            "rowCount" : 285,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)]) "
          },
          "6" : {
            "sign" : -2026856279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 378112,
            "rowCount" : 420,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)]) "
          },
          "1" : {
            "sign" : -105716016,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 869034,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1203782875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1669017295,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 869034,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -2014485901,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 869034,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- LogicalQueryStage Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)])\n            +- LogicalQueryStage Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields], HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 634688,
        "inputRowCount" : 705
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227249508,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1582,
        "IOBytes" : {
          "Total" : 319709,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 23250
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2057514814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29355630096,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213]) "
          },
          "12" : {
            "sign" : 1369394952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2838886160,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "8" : {
            "sign" : 649792535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3312426200,
            "rowCount" : 82810655,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "19" : {
            "sign" : 1645566502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1508646418,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -207005779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 134059787159,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 1750217599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7 "
          },
          "15" : {
            "sign" : 1236667944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14961301680,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121]) "
          },
          "11" : {
            "sign" : -1767537035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1347051482920,
            "rowCount" : 25904836210,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
          },
          "9" : {
            "sign" : -1256858549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3974911440,
            "rowCount" : 82810655,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
          },
          "33" : {
            "sign" : -1102885419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "22" : {
            "sign" : 1920354980,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36,
            "rowCount" : 3,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#174], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : -1751930296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25296005943,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500) "
          },
          "37" : {
            "sign" : -1316862839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514)) "
          },
          "13" : {
            "sign" : -2055724317,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3406663392,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
          },
          "24" : {
            "sign" : -816898586,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 89229217728,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields] "
          },
          "35" : {
            "sign" : 1710308556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1898548450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 293210843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 44830569431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields] "
          },
          "10" : {
            "sign" : 1898595486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1139812793240,
            "rowCount" : 25904836210,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "21" : {
            "sign" : -1248990847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : -1742434250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6780717936,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#542) "
          },
          "6" : {
            "sign" : 469023704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12069768693,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
          },
          "36" : {
            "sign" : 2047752293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#514, d_year#520, d_moy#522] "
          },
          "1" : {
            "sign" : 279845477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -275907629,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#542], BroadcastQueryStage 5 "
          },
          "17" : {
            "sign" : -739818797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
          },
          "25" : {
            "sign" : 1216744553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023250927,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] "
          },
          "14" : {
            "sign" : 234240938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "31" : {
            "sign" : 476332015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5650598280,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "42" : {
            "sign" : -1293090707,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11 "
          },
          "0" : {
            "sign" : -1655218136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1566661252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#164], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : -116475209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6592918520,
            "rowCount" : 164822963,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "2" : {
            "sign" : -100884462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 790125624,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#514, d_date_id#515, d_date#516, d_month_seq#517, d_week_seq#518, d_quarter_seq#519, d_year#520, d_dow#521, d_moy#522, d_dom#523, d_qoy#524, d_fy_year#525, d_fy_quarter_seq#526, d_fy_week_seq#527, d_day_name#528, d_quarter_name#529, d_holiday#530, d_weekend#531, d_following_holiday#532, d_first_dom#533, d_last_dom#534, d_same_day_ly#535, d_same_day_lq#536, d_current_day#537, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 79716147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "30" : {
            "sign" : -1280007906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2681208883860,
            "rowCount" : 51561709305,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#514) "
          },
          "7" : {
            "sign" : 1894693185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12709226637,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
          },
          "29" : {
            "sign" : -1557144425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2268715209420,
            "rowCount" : 51561709305,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "41" : {
            "sign" : -1083858631,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36,
            "rowCount" : 3,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#552], BroadcastQueryStage 9 "
          },
          "3" : {
            "sign" : 1301642184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "28" : {
            "sign" : 1418507487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7911502224,
            "rowCount" : 164822963,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- LogicalQueryStage Project [t_time_sk#164], BroadcastQueryStage 0\n            :        :     :     +- LogicalQueryStage Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1\n            :        :     +- LogicalQueryStage Project [sm_ship_mode_sk#174], BroadcastQueryStage 2\n            :        +- LogicalQueryStage Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3\n            +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- LogicalQueryStage Project [t_time_sk#542], BroadcastQueryStage 5\n                     :     :     +- LogicalQueryStage Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7\n                     :     +- LogicalQueryStage Project [sm_ship_mode_sk#552], BroadcastQueryStage 9\n                     +- LogicalQueryStage Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 44776179426,
        "inputRowCount" : 215315009
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227232218,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18872,
        "IOBytes" : {
          "Total" : 472206268,
          "Details" : {
            "IR" : 471613350,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 296459
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2057514814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29355630096,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213]) "
          },
          "12" : {
            "sign" : 1369394952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2838886160,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "8" : {
            "sign" : 649792535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2072386896800,
            "rowCount" : 51809672420,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "19" : {
            "sign" : 1645566502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1508646418,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -207005779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 134059787159,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 1750217599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7 "
          },
          "15" : {
            "sign" : 1236667944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14961301680,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121]) "
          },
          "11" : {
            "sign" : -1767537035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1347051482920,
            "rowCount" : 25904836210,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
          },
          "9" : {
            "sign" : -1256858549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2486864276160,
            "rowCount" : 51809672420,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
          },
          "33" : {
            "sign" : -1102885419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "22" : {
            "sign" : 1920354980,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#174], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : -1751930296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25296005943,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500) "
          },
          "37" : {
            "sign" : -1316862839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514)) "
          },
          "13" : {
            "sign" : -2055724317,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3406663392,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
          },
          "24" : {
            "sign" : -816898586,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 89229217728,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields] "
          },
          "35" : {
            "sign" : 1710308556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1898548450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 293210843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 44830569431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields] "
          },
          "10" : {
            "sign" : 1898595486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1139812793240,
            "rowCount" : 25904836210,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "21" : {
            "sign" : -1248990847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : -1742434250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6780717936,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#542) "
          },
          "6" : {
            "sign" : 469023704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12069768693,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
          },
          "36" : {
            "sign" : 2047752293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#514, d_year#520, d_moy#522] "
          },
          "1" : {
            "sign" : 279845477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -275907629,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#542], BroadcastQueryStage 5 "
          },
          "17" : {
            "sign" : -739818797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
          },
          "25" : {
            "sign" : 1216744553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023250927,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] "
          },
          "14" : {
            "sign" : 234240938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "31" : {
            "sign" : 476332015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5650598280,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "42" : {
            "sign" : -1293090707,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11 "
          },
          "0" : {
            "sign" : -1655218136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1566661252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#164], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : -116475209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4124936744400,
            "rowCount" : 103123418610,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "2" : {
            "sign" : -100884462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 790125624,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#514, d_date_id#515, d_date#516, d_month_seq#517, d_week_seq#518, d_quarter_seq#519, d_year#520, d_dow#521, d_moy#522, d_dom#523, d_qoy#524, d_fy_year#525, d_fy_quarter_seq#526, d_fy_week_seq#527, d_day_name#528, d_quarter_name#529, d_holiday#530, d_weekend#531, d_following_holiday#532, d_first_dom#533, d_last_dom#534, d_same_day_ly#535, d_same_day_lq#536, d_current_day#537, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 79716147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "30" : {
            "sign" : -1280007906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2681208883860,
            "rowCount" : 51561709305,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#514) "
          },
          "7" : {
            "sign" : 1894693185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12709226637,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
          },
          "29" : {
            "sign" : -1557144425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2268715209420,
            "rowCount" : 51561709305,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "41" : {
            "sign" : -1083858631,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#552], BroadcastQueryStage 9 "
          },
          "3" : {
            "sign" : 1301642184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "28" : {
            "sign" : 1418507487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4949924093280,
            "rowCount" : 103123418610,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- LogicalQueryStage Project [t_time_sk#164], BroadcastQueryStage 0\n            :        :     :     +- LogicalQueryStage Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1\n            :        :     +- LogicalQueryStage Project [sm_ship_mode_sk#174], BroadcastQueryStage 2\n            :        +- LogicalQueryStage Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3\n            +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- LogicalQueryStage Project [t_time_sk#542], BroadcastQueryStage 5\n                     :     :     +- LogicalQueryStage Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7\n                     :     +- LogicalQueryStage Project [sm_ship_mode_sk#552], BroadcastQueryStage 9\n                     +- LogicalQueryStage Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 44778276730,
        "inputRowCount" : 215315007
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227232326,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18764,
        "IOBytes" : {
          "Total" : 472206268,
          "Details" : {
            "IR" : 471613350,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 296459
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -803352824,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 21360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1464385015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 39488,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1727171166,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 39488,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 301830060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 39488,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], functions=[sum(jan_sales#414), sum(feb_sales#415), sum(mar_sales#416), sum(apr_sales#417), sum(may_sales#418), sum(jun_sales#419), sum(jul_sales#420), sum(aug_sales#421), sum(sep_sales#422), sum(oct_sales#423), sum(nov_sales#424), sum(dec_sales#425), sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), ... 12 more fields]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields], HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], functions=[sum(jan_sales#414), sum(feb_sales#415), sum(mar_sales#416), sum(apr_sales#417), sum(may_sales#418), sum(jun_sales#419), sum(jul_sales#420), sum(aug_sales#421), sum(sep_sales#422), sum(oct_sales#423), sum(nov_sales#424), sum(dec_sales#425), sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), ... 12 more fields])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39488,
        "inputRowCount" : 30
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227250376,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 714,
        "IOBytes" : {
          "Total" : 23250,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23250,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2057514814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29355630096,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213]) "
          },
          "12" : {
            "sign" : 1369394952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82865471093400,
            "rowCount" : 2071636777335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "8" : {
            "sign" : 649792535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60491793898182000,
            "rowCount" : 1512294847454550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "19" : {
            "sign" : 1645566502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -1508646418,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -207005779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 134059787159,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "40" : {
            "sign" : 1750217599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7 "
          },
          "15" : {
            "sign" : 1236667944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14961301680,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121]) "
          },
          "11" : {
            "sign" : -1767537035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39319666033818300,
            "rowCount" : 756147423727275,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
          },
          "9" : {
            "sign" : -1256858549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72590152677818400,
            "rowCount" : 1512294847454550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
          },
          "33" : {
            "sign" : -1102885419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "22" : {
            "sign" : 1920354980,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#174], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : -1751930296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25296005943,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500) "
          },
          "37" : {
            "sign" : -1316862839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514)) "
          },
          "13" : {
            "sign" : -2055724317,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 99438565312080,
            "rowCount" : 2071636777335,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
          },
          "24" : {
            "sign" : -816898586,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 89229217728,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields] "
          },
          "35" : {
            "sign" : 1710308556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1898548450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 293210843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 44830569431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields] "
          },
          "10" : {
            "sign" : 1898595486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33270486644000100,
            "rowCount" : 756147423727275,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "21" : {
            "sign" : -1248990847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : -1742434250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 195108808244976,
            "rowCount" : 4064766838437,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#542) "
          },
          "6" : {
            "sign" : 469023704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12069768693,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
          },
          "36" : {
            "sign" : 2047752293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#514, d_year#520, d_moy#522] "
          },
          "1" : {
            "sign" : 279845477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -275907629,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#542], BroadcastQueryStage 5 "
          },
          "17" : {
            "sign" : -739818797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
          },
          "25" : {
            "sign" : 1216744553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023250927,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] "
          },
          "14" : {
            "sign" : 234240938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "31" : {
            "sign" : 476332015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 162590673537480,
            "rowCount" : 4064766838437,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "42" : {
            "sign" : -1293090707,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11 "
          },
          "0" : {
            "sign" : -1655218136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1566661252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#164], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : -116475209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 118691191682360400,
            "rowCount" : 2967279792059010,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "2" : {
            "sign" : -100884462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 790125624,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#514, d_date_id#515, d_date#516, d_month_seq#517, d_week_seq#518, d_quarter_seq#519, d_year#520, d_dow#521, d_moy#522, d_dom#523, d_qoy#524, d_fy_year#525, d_fy_quarter_seq#526, d_fy_week_seq#527, d_day_name#528, d_quarter_name#529, d_holiday#530, d_weekend#531, d_following_holiday#532, d_first_dom#533, d_last_dom#534, d_same_day_ly#535, d_same_day_lq#536, d_current_day#537, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 79716147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "30" : {
            "sign" : -1280007906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77149274593534260,
            "rowCount" : 1483639896029505,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#514) "
          },
          "7" : {
            "sign" : 1894693185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12709226637,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
          },
          "29" : {
            "sign" : -1557144425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 65280155425298220,
            "rowCount" : 1483639896029505,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "41" : {
            "sign" : -1083858631,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sm_ship_mode_sk#552], BroadcastQueryStage 9 "
          },
          "3" : {
            "sign" : 1301642184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 183558785494,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "28" : {
            "sign" : 1418507487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 142429430018832480,
            "rowCount" : 2967279792059010,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- LogicalQueryStage Project [t_time_sk#164], BroadcastQueryStage 0\n            :        :     :     +- LogicalQueryStage Project [d_date_sk#136, d_year#142, d_moy#144], BroadcastQueryStage 1\n            :        :     +- LogicalQueryStage Project [sm_ship_mode_sk#174], BroadcastQueryStage 2\n            :        +- LogicalQueryStage Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134], BroadcastQueryStage 3\n            +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- LogicalQueryStage Project [t_time_sk#542], BroadcastQueryStage 5\n                     :     :     +- LogicalQueryStage Project [d_date_sk#514, d_year#520, d_moy#522], BroadcastQueryStage 7\n                     :     +- LogicalQueryStage Project [sm_ship_mode_sk#552], BroadcastQueryStage 9\n                     +- LogicalQueryStage Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 44780143474,
        "inputRowCount" : 215315007
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227232477,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18613,
        "IOBytes" : {
          "Total" : 471874634,
          "Details" : {
            "IR" : 471281716,
            "IW" : 0,
            "SR" : 296459,
            "SW" : 296459
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -887953962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3406663392,
                "rowCount" : 70972154
              },
              "compileTime" : {
                "sizeInBytes" : 3406663392,
                "rowCount" : 70972154
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_time_sk#88 = t_time_sk#164) "
          },
          "4" : {
            "sign" : 1966377808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3974911440,
                "rowCount" : 82810655
              },
              "compileTime" : {
                "sizeInBytes" : 3974911440,
                "rowCount" : 82810655
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174) "
          },
          "11" : {
            "sign" : -1898548450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#88, ws_ship_date_sk#89, ws_item_sk#90, ws_bill_customer_sk#91, ws_bill_cdemo_sk#92, ws_bill_hdemo_sk#93, ws_bill_addr_sk#94, ws_ship_customer_sk#95, ws_ship_cdemo_sk#96, ws_ship_hdemo_sk#97, ws_ship_addr_sk#98, ws_web_page_sk#99, ws_web_site_sk#100, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_promo_sk#103, ws_order_number#104L, ws_quantity#105, ws_wholesale_cost#106, ws_list_price#107, ws_sales_price#108, ws_ext_discount_amt#109, ws_ext_sales_price#110, ws_ext_wholesale_cost#111, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : 234240938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3164890740,
                "rowCount" : 71929335
              },
              "compileTime" : {
                "sizeInBytes" : 3164890740,
                "rowCount" : 71929335
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "5" : {
            "sign" : -94671779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3057806620,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 3057806620,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          },
          "10" : {
            "sign" : 1236667944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14961301680,
                "rowCount" : 71929335
              },
              "compileTime" : {
                "sizeInBytes" : 14961301680,
                "rowCount" : 71929335
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121]) "
          },
          "6" : {
            "sign" : -1937563304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3613771460,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 3613771460,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#121 = d_date_sk#136) "
          },
          "1" : {
            "sign" : 919620798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12069768693,
                "rowCount" : 79932243
              },
              "compileTime" : {
                "sizeInBytes" : 12069768693,
                "rowCount" : 79932243
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] "
          },
          "0" : {
            "sign" : 1725891695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 70372800,
                "rowCount" : 129600
              },
              "compileTime" : {
                "sizeInBytes" : 70372800,
                "rowCount" : 129600
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields] "
          },
          "2" : {
            "sign" : 1287344585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12709226637,
                "rowCount" : 79932243
              },
              "compileTime" : {
                "sizeInBytes" : 12709226637,
                "rowCount" : 79932243
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122) "
          },
          "7" : {
            "sign" : 13372099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2838886160,
                "rowCount" : 70972154
              },
              "compileTime" : {
                "sizeInBytes" : 2838886160,
                "rowCount" : 70972154
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] "
          },
          "3" : {
            "sign" : -2070755204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3312426200,
                "rowCount" : 82810655
              },
              "compileTime" : {
                "sizeInBytes" : 3312426200,
                "rowCount" : 82810655
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] "
          }
        },
        "links" : [ {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n+- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n   +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n      :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n      :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n      :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n      :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n      :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n      :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n      :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n      :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n      :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n      :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n      :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n      :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n      :     :     :     +- Project [t_time_sk#164]\n      :     :     :        +- Filter ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164))\n      :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time_id#165,t_time#166,t_hour#167,t_minute#168,t_second#169,t_am_pm#170,t_shift#171,t_sub_shift#172,t_meal_time#173] parquet\n      :     :     +- Project [d_date_sk#136, d_year#142, d_moy#144]\n      :     :        +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n      :     +- Project [sm_ship_mode_sk#174]\n      :        +- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n      :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_ship_mode_id#175,sm_type#176,sm_code#177,sm_carrier#178,sm_contract#179] parquet\n      +- Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134]\n         +- Filter isnotnull(w_warehouse_sk#122)\n            +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_id#123,w_warehouse_name#124,w_warehouse_sq_ft#125,w_street_number#126,w_street_name#127,w_street_type#128,w_suite_number#129,w_city#130,w_county#131,w_state#132,w_zip#133,w_country#134,w_gmt_offset#135] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 313560418,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [d_date_sk#136, d_year#142, d_moy#144] Arguments: 1 "
          },
          "8" : {
            "sign" : 1023260807,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3406663392,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_time_sk#88] Right keys [1]: [t_time_sk#164] Join type: Inner Join condition: None "
          },
          "4" : {
            "sign" : 787296556,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3974911440,
            "rowCount" : 82810655,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_ship_mode_sk#101] Right keys [1]: [sm_ship_mode_sk#174] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -988554563,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [t_time_sk#164] Arguments: 0 "
          },
          "9" : {
            "sign" : -3958307,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] Condition : ((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) "
          },
          "13" : {
            "sign" : -976676024,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [sm_ship_mode_sk#174] Arguments: 2 "
          },
          "5" : {
            "sign" : -2045383179,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3057806620,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] Input [9]: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121, d_date_sk#136, d_year#142, d_moy#144] "
          },
          "10" : {
            "sign" : 595164523,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3164890740,
            "rowCount" : 71929335,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [7]: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#690)] PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_ship_mode_sk)] ReadSchema: struct<ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2)> "
          },
          "6" : {
            "sign" : -1713751956,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3613771460,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#121] Right keys [1]: [d_date_sk#136] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 1886502639,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12069768693,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] Input [13]: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144, w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] "
          },
          "14" : {
            "sign" : -366904316,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [7]: [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] Arguments: 3 "
          },
          "0" : {
            "sign" : -517089617,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 70372800,
            "rowCount" : 129600,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144] Keys [7]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142] Functions [24]: [partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)] Aggregate Attributes [48]: [sum#836, isEmpty#837, sum#838, isEmpty#839, sum#840, isEmpty#841, sum#842, isEmpty#843, sum#844, isEmpty#845, sum#846, isEmpty#847, sum#848, isEmpty#849, sum#850, isEmpty#851, sum#852, isEmpty#853, sum#854, isEmpty#855, sum#856, isEmpty#857, sum#858, isEmpty#859, sum#860, isEmpty#861, sum#862, isEmpty#863, sum#864, isEmpty#865, sum#866, isEmpty#867, sum#868, isEmpty#869, sum#870, isEmpty#871, sum#872, isEmpty#873, sum#874, isEmpty#875, sum#876, isEmpty#877, sum#878, isEmpty#879, sum#880, isEmpty#881, sum#882, isEmpty#883] Results [55]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, isEmpty#901, sum#902, isEmpty#903, sum#904, isEmpty#905, sum#906, isEmpty#907, sum#908, isEmpty#909, sum#910, isEmpty#911, sum#912, isEmpty#913, sum#914, isEmpty#915, sum#916, isEmpty#917, sum#918, isEmpty#919, sum#920, isEmpty#921, sum#922, isEmpty#923, sum#924, isEmpty#925, sum#926, isEmpty#927, sum#928, isEmpty#929, sum#930, isEmpty#931] "
          },
          "2" : {
            "sign" : 60389210,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12709226637,
            "rowCount" : 79932243,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_warehouse_sk#102] Right keys [1]: [w_warehouse_sk#122] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -255325910,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2838886160,
            "rowCount" : 70972154,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121] Input [8]: [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121, t_time_sk#164] "
          },
          "3" : {
            "sign" : -1087857362,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3312426200,
            "rowCount" : 82810655,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144] Input [8]: [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144, sm_ship_mode_sk#174] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, ... 31 more fields])\n+- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n   +- BroadcastHashJoin [ws_warehouse_sk#102], [w_warehouse_sk#122], Inner, BuildRight, false\n      :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n      :  +- BroadcastHashJoin [ws_ship_mode_sk#101], [sm_ship_mode_sk#174], Inner, BuildRight, false\n      :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n      :     :  +- BroadcastHashJoin [ws_sold_date_sk#121], [d_date_sk#136], Inner, BuildRight, false\n      :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n      :     :     :  +- BroadcastHashJoin [ws_sold_time_sk#88], [t_time_sk#164], Inner, BuildRight, false\n      :     :     :     :- Filter ((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101))\n      :     :     :     :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_quantity#105,ws_sales_price#108,ws_net_paid_inc_tax#117,ws_sold_date_sk#121] Batched: true, DataFilters: [isnotnull(ws_warehouse_sk#102), isnotnull(ws_sold_time_sk#88), isnotnull(ws_ship_mode_sk#101)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_ship_mode_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantity:int,ws_sales_price...\n      :     :     :     :        +- SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n      :     :     :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :     :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1240]\n      :     :     :     :                 +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n      :     :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :     :     +- BroadcastQueryStage 0\n      :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n      :     :     :           +- *(1) Project [t_time_sk#164]\n      :     :     :              +- *(1) Filter (((isnotnull(t_time#166) AND (t_time#166 >= 49530)) AND (t_time#166 <= 78330)) AND isnotnull(t_time_sk#164))\n      :     :     :                 +- *(1) ColumnarToRow\n      :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time#166] Batched: true, DataFilters: [isnotnull(t_time#166), (t_time#166 >= 49530), (t_time#166 <= 78330), isnotnull(t_time_sk#164)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,49530), LessThanOrEqual(t_time,78330), IsNotNull(t_..., ReadSchema: struct<t_time_sk:int,t_time:int>\n      :     :     +- BroadcastQueryStage 1\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n      :     :           +- *(2) Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n      :     :              +- *(2) ColumnarToRow\n      :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- BroadcastQueryStage 2\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n      :           +- *(3) Project [sm_ship_mode_sk#174]\n      :              +- *(3) Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n      :                 +- *(3) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_carrier#178] Batched: true, DataFilters: [sm_carrier#178 IN (DIAMOND,AIRBORNE), isnotnull(sm_ship_mode_sk#174)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/ship_mode], PartitionFilters: [], PushedFilters: [In(sm_carrier, [AIRBORNE,DIAMOND]), IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>\n      +- BroadcastQueryStage 3\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n            +- *(4) Filter isnotnull(w_warehouse_sk#122)\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_name#124,w_warehouse_sq_ft#125,w_city#130,w_county#131,w_state#132,w_country#134] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:st...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3169318604,
        "inputRowCount" : 71958518
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 16339,
        "TotalTasksDurationInMs" : 146029,
        "IOBytes" : {
          "Total" : 144714203,
          "Details" : {
            "IR" : 144601523,
            "IW" : 0,
            "SR" : 0,
            "SW" : 112680
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1366219140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6780717936,
                "rowCount" : 141264957
              },
              "compileTime" : {
                "sizeInBytes" : 6780717936,
                "rowCount" : 141264957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_time_sk#180 = t_time_sk#542) "
          },
          "4" : {
            "sign" : 548984188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7911502224,
                "rowCount" : 164822963
              },
              "compileTime" : {
                "sizeInBytes" : 7911502224,
                "rowCount" : 164822963
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552) "
          },
          "11" : {
            "sign" : 1710308556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#180, cs_ship_date_sk#181, cs_bill_customer_sk#182, cs_bill_cdemo_sk#183, cs_bill_hdemo_sk#184, cs_bill_addr_sk#185, cs_ship_customer_sk#186, cs_ship_cdemo_sk#187, cs_ship_hdemo_sk#188, cs_ship_addr_sk#189, cs_call_center_sk#190, cs_catalog_page_sk#191, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_item_sk#194, cs_promo_sk#195, cs_order_number#196L, cs_quantity#197, cs_wholesale_cost#198, cs_list_price#199, cs_sales_price#200, cs_ext_discount_amt#201, cs_ext_sales_price#202, cs_ext_wholesale_cost#203, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -1102885419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6209844828,
                "rowCount" : 141132837
              },
              "compileTime" : {
                "sizeInBytes" : 6209844828,
                "rowCount" : 141132837
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "5" : {
            "sign" : -781004595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6094715528,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 6094715528,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          },
          "10" : {
            "sign" : 2057514814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29355630096,
                "rowCount" : 141132837
              },
              "compileTime" : {
                "sizeInBytes" : 29355630096,
                "rowCount" : 141132837
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213]) "
          },
          "6" : {
            "sign" : -194490770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7202845624,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 7202845624,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#213 = d_date_sk#514) "
          },
          "1" : {
            "sign" : 1553087590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24023250927,
                "rowCount" : 159094377
              },
              "compileTime" : {
                "sizeInBytes" : 24023250927,
                "rowCount" : 159094377
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] "
          },
          "0" : {
            "sign" : 2111324743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 70372800,
                "rowCount" : 129600
              },
              "compileTime" : {
                "sizeInBytes" : 70372800,
                "rowCount" : 129600
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields] "
          },
          "2" : {
            "sign" : 1728351785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25296005943,
                "rowCount" : 159094377
              },
              "compileTime" : {
                "sizeInBytes" : 25296005943,
                "rowCount" : 159094377
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500) "
          },
          "7" : {
            "sign" : 563335541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5650598280,
                "rowCount" : 141264957
              },
              "compileTime" : {
                "sizeInBytes" : 5650598280,
                "rowCount" : 141264957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] "
          },
          "3" : {
            "sign" : -1410319196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6592918520,
                "rowCount" : 164822963
              },
              "compileTime" : {
                "sizeInBytes" : 6592918520,
                "rowCount" : 164822963
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] "
          }
        },
        "links" : [ {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n+- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n   +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n      :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n      :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n      :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n      :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n      :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n      :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n      :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n      :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n      :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n      :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n      :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n      :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n      :     :     :     +- Project [t_time_sk#542]\n      :     :     :        +- Filter ((isnotnull(t_time#544) AND ((t_time#544 >= 49530) AND (t_time#544 <= 78330))) AND isnotnull(t_time_sk#542))\n      :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#542,t_time_id#543,t_time#544,t_hour#545,t_minute#546,t_second#547,t_am_pm#548,t_shift#549,t_sub_shift#550,t_meal_time#551] parquet\n      :     :     +- Project [d_date_sk#514, d_year#520, d_moy#522]\n      :     :        +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n      :     +- Project [sm_ship_mode_sk#552]\n      :        +- Filter (sm_carrier#556 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#552))\n      :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#552,sm_ship_mode_id#553,sm_type#554,sm_code#555,sm_carrier#556,sm_contract#557] parquet\n      +- Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512]\n         +- Filter isnotnull(w_warehouse_sk#500)\n            +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#500,w_warehouse_id#501,w_warehouse_name#502,w_warehouse_sq_ft#503,w_street_number#504,w_street_name#505,w_street_type#506,w_suite_number#507,w_city#508,w_county#509,w_state#510,w_zip#511,w_country#512,w_gmt_offset#513] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 2129174249,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [d_date_sk#514, d_year#520, d_moy#522] Arguments: 7 "
          },
          "8" : {
            "sign" : 1855965162,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6780717936,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_time_sk#180] Right keys [1]: [t_time_sk#542] Join type: Inner Join condition: None "
          },
          "4" : {
            "sign" : -1055458272,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7911502224,
            "rowCount" : 164822963,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_ship_mode_sk#192] Right keys [1]: [sm_ship_mode_sk#552] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1931308803,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1278984,
            "rowCount" : 28801,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [t_time_sk#542] Arguments: 5 "
          },
          "9" : {
            "sign" : 1618548889,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] Condition : ((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) "
          },
          "13" : {
            "sign" : 1525219024,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048688,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [sm_ship_mode_sk#552] Arguments: 9 "
          },
          "5" : {
            "sign" : 2074606907,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6094715528,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] Input [9]: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213, d_date_sk#514, d_year#520, d_moy#522] "
          },
          "10" : {
            "sign" : 1579607876,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6209844828,
            "rowCount" : 141132837,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [7]: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#213), dynamicpruningexpression(cs_sold_date_sk#213 IN dynamicpruning#690)] PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs_ship_mode_sk)] ReadSchema: struct<cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2)> "
          },
          "6" : {
            "sign" : 1232561414,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7202845624,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#213] Right keys [1]: [d_date_sk#514] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 222282333,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24023250927,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] Input [13]: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522, w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512] "
          },
          "14" : {
            "sign" : -2051425848,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [7]: [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512] Arguments: 11 "
          },
          "0" : {
            "sign" : -944391102,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 70372800,
            "rowCount" : 129600,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522] Keys [7]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520] Functions [24]: [partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)] Aggregate Attributes [48]: [sum#932, isEmpty#933, sum#934, isEmpty#935, sum#936, isEmpty#937, sum#938, isEmpty#939, sum#940, isEmpty#941, sum#942, isEmpty#943, sum#944, isEmpty#945, sum#946, isEmpty#947, sum#948, isEmpty#949, sum#950, isEmpty#951, sum#952, isEmpty#953, sum#954, isEmpty#955, sum#956, isEmpty#957, sum#958, isEmpty#959, sum#960, isEmpty#961, sum#962, isEmpty#963, sum#964, isEmpty#965, sum#966, isEmpty#967, sum#968, isEmpty#969, sum#970, isEmpty#971, sum#972, isEmpty#973, sum#974, isEmpty#975, sum#976, isEmpty#977, sum#978, isEmpty#979] Results [55]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, isEmpty#997, sum#998, isEmpty#999, sum#1000, isEmpty#1001, sum#1002, isEmpty#1003, sum#1004, isEmpty#1005, sum#1006, isEmpty#1007, sum#1008, isEmpty#1009, sum#1010, isEmpty#1011, sum#1012, isEmpty#1013, sum#1014, isEmpty#1015, sum#1016, isEmpty#1017, sum#1018, isEmpty#1019, sum#1020, isEmpty#1021, sum#1022, isEmpty#1023, sum#1024, isEmpty#1025, sum#1026, isEmpty#1027] "
          },
          "2" : {
            "sign" : 1492504982,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 25296005943,
            "rowCount" : 159094377,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_warehouse_sk#193] Right keys [1]: [w_warehouse_sk#500] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 1111514589,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5650598280,
            "rowCount" : 141264957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213] Input [8]: [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213, t_time_sk#542] "
          },
          "3" : {
            "sign" : -281508008,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6592918520,
            "rowCount" : 164822963,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522] Input [8]: [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522, sm_ship_mode_sk#552] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, ... 31 more fields])\n+- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n   +- BroadcastHashJoin [cs_warehouse_sk#193], [w_warehouse_sk#500], Inner, BuildRight, false\n      :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n      :  +- BroadcastHashJoin [cs_ship_mode_sk#192], [sm_ship_mode_sk#552], Inner, BuildRight, false\n      :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n      :     :  +- BroadcastHashJoin [cs_sold_date_sk#213], [d_date_sk#514], Inner, BuildRight, false\n      :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n      :     :     :  +- BroadcastHashJoin [cs_sold_time_sk#180], [t_time_sk#542], Inner, BuildRight, false\n      :     :     :     :- Filter ((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192))\n      :     :     :     :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_quantity#197,cs_ext_sales_price#202,cs_net_paid_inc_ship_tax#211,cs_sold_date_sk#213] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#193), isnotnull(cs_sold_time_sk#180), isnotnull(cs_ship_mode_sk#192)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#213), dynamicpruningexpression(cs_sold_date_sk#213 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs_ship_mode_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantity:int,cs_ext_sales_p...\n      :     :     :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n      :     :     :     +- BroadcastQueryStage 5\n      :     :     :        +- ReusedExchange [t_time_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n      :     :     +- BroadcastQueryStage 7\n      :     :        +- ReusedExchange [d_date_sk#514, d_year#520, d_moy#522], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n      :     +- BroadcastQueryStage 9\n      :        +- ReusedExchange [sm_ship_mode_sk#552], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n      +- BroadcastQueryStage 11\n         +- ReusedExchange [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6214272692,
        "inputRowCount" : 141162020
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 11518,
        "TotalTasksDurationInMs" : 37322,
        "IOBytes" : {
          "Total" : 326840722,
          "Details" : {
            "IR" : 326680193,
            "IW" : 0,
            "SR" : 0,
            "SW" : 160529
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1504248115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "1" : {
            "sign" : 1929421306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 140745600,
                "rowCount" : 259200
              },
              "compileTime" : {
                "sizeInBytes" : 140745600,
                "rowCount" : 259200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Union",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n+- Union false, false\n   :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n   :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n   :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n   :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n   :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n   :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n   :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n   :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n   :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n   :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n   :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n   :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n   :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n   :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n   :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n   :        :     :     :     +- Project [t_time_sk#164]\n   :        :     :     :        +- Filter ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164))\n   :        :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time_id#165,t_time#166,t_hour#167,t_minute#168,t_second#169,t_am_pm#170,t_shift#171,t_sub_shift#172,t_meal_time#173] parquet\n   :        :     :     +- Project [d_date_sk#136, d_year#142, d_moy#144]\n   :        :     :        +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n   :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n   :        :     +- Project [sm_ship_mode_sk#174]\n   :        :        +- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n   :        :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_ship_mode_id#175,sm_type#176,sm_code#177,sm_carrier#178,sm_contract#179] parquet\n   :        +- Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134]\n   :           +- Filter isnotnull(w_warehouse_sk#122)\n   :              +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_id#123,w_warehouse_name#124,w_warehouse_sq_ft#125,w_street_number#126,w_street_name#127,w_street_type#128,w_suite_number#129,w_city#130,w_county#131,w_state#132,w_zip#133,w_country#134,w_gmt_offset#135] parquet\n   +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n      +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n         +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n            :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n            :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n            :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n            :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n            :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n            :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n            :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n            :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n            :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n            :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n            :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n            :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n            :     :     :     +- Project [t_time_sk#542]\n            :     :     :        +- Filter ((isnotnull(t_time#544) AND ((t_time#544 >= 49530) AND (t_time#544 <= 78330))) AND isnotnull(t_time_sk#542))\n            :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#542,t_time_id#543,t_time#544,t_hour#545,t_minute#546,t_second#547,t_am_pm#548,t_shift#549,t_sub_shift#550,t_meal_time#551] parquet\n            :     :     +- Project [d_date_sk#514, d_year#520, d_moy#522]\n            :     :        +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n            :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n            :     +- Project [sm_ship_mode_sk#552]\n            :        +- Filter (sm_carrier#556 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#552))\n            :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#552,sm_ship_mode_id#553,sm_type#554,sm_code#555,sm_carrier#556,sm_contract#557] parquet\n            +- Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512]\n               +- Filter isnotnull(w_warehouse_sk#500)\n                  +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#500,w_warehouse_id#501,w_warehouse_name#502,w_warehouse_sq_ft#503,w_street_number#504,w_street_name#505,w_street_type#506,w_suite_number#507,w_city#508,w_county#509,w_state#510,w_zip#511,w_country#512,w_gmt_offset#513] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1610147794,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 378112,
            "rowCount" : 420,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [55]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, isEmpty#997, sum#998, isEmpty#999, sum#1000, isEmpty#1001, sum#1002, isEmpty#1003, sum#1004, isEmpty#1005, sum#1006, isEmpty#1007, sum#1008, isEmpty#1009, sum#1010, isEmpty#1011, sum#1012, isEmpty#1013, sum#1014, isEmpty#1015, sum#1016, isEmpty#1017, sum#1018, isEmpty#1019, sum#1020, isEmpty#1021, sum#1022, isEmpty#1023, sum#1024, isEmpty#1025, sum#1026, isEmpty#1027] Keys [7]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520] Functions [24]: [sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)] Aggregate Attributes [24]: [sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#586, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#587, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#588, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#589, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#590, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#591, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#592, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#593, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#594, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#595, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#596, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#597, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#598, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#599, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#600, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#601, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#602, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#603, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#604, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#605, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#606, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#607, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#608, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#609] Results [32]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#586 AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#587 AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#588 AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#589 AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#590 AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#591 AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#592 AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#593 AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#594 AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#595 AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#596 AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#597 AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#598 AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#599 AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#600 AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#601 AS apr_net#455, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#602 AS may_net#456, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#603 AS jun_net#457, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#604 AS jul_net#458, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#605 AS aug_net#459, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#606 AS sep_net#460, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#607 AS oct_net#461, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#608 AS nov_net#462, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)#609 AS dec_net#463] "
          },
          "5" : {
            "sign" : -1629953164,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 70372800,
            "rowCount" : 129600,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [55]: [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, isEmpty#997, sum#998, isEmpty#999, sum#1000, isEmpty#1001, sum#1002, isEmpty#1003, sum#1004, isEmpty#1005, sum#1006, isEmpty#1007, sum#1008, isEmpty#1009, sum#1010, isEmpty#1011, sum#1012, isEmpty#1013, sum#1014, isEmpty#1015, sum#1016, isEmpty#1017, sum#1018, isEmpty#1019, sum#1020, isEmpty#1021, sum#1022, isEmpty#1023, sum#1024, isEmpty#1025, sum#1026, isEmpty#1027] Arguments: 13 "
          },
          "1" : {
            "sign" : 2073066573,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 140745600,
            "rowCount" : 259200,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "0" : {
            "sign" : -2140991198,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 192713206,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [32]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#414, feb_sales#415, mar_sales#416, apr_sales#417, may_sales#418, jun_sales#419, jul_sales#420, aug_sales#421, sep_sales#422, oct_sales#423, nov_sales#424, dec_sales#425, jan_net#426, feb_net#427, mar_net#428, apr_net#429, may_net#430, jun_net#431, jul_net#432, aug_net#433, sep_net#434, oct_net#435, nov_net#436, dec_net#437] Keys [8]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413] Functions [36]: [partial_sum(jan_sales#414), partial_sum(feb_sales#415), partial_sum(mar_sales#416), partial_sum(apr_sales#417), partial_sum(may_sales#418), partial_sum(jun_sales#419), partial_sum(jul_sales#420), partial_sum(aug_sales#421), partial_sum(sep_sales#422), partial_sum(oct_sales#423), partial_sum(nov_sales#424), partial_sum(dec_sales#425), partial_sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum(jan_net#426), partial_sum(feb_net#427), partial_sum(mar_net#428), partial_sum(apr_net#429), partial_sum(may_net#430), partial_sum(jun_net#431), partial_sum(jul_net#432), partial_sum(aug_net#433), partial_sum(sep_net#434), partial_sum(oct_net#435), partial_sum(nov_net#436), partial_sum(dec_net#437)] Aggregate Attributes [72]: [sum#692, isEmpty#693, sum#694, isEmpty#695, sum#696, isEmpty#697, sum#698, isEmpty#699, sum#700, isEmpty#701, sum#702, isEmpty#703, sum#704, isEmpty#705, sum#706, isEmpty#707, sum#708, isEmpty#709, sum#710, isEmpty#711, sum#712, isEmpty#713, sum#714, isEmpty#715, sum#716, isEmpty#717, sum#718, isEmpty#719, sum#720, isEmpty#721, sum#722, isEmpty#723, sum#724, isEmpty#725, sum#726, isEmpty#727, sum#728, isEmpty#729, sum#730, isEmpty#731, sum#732, isEmpty#733, sum#734, isEmpty#735, sum#736, isEmpty#737, sum#738, isEmpty#739, sum#740, isEmpty#741, sum#742, isEmpty#743, sum#744, isEmpty#745, sum#746, isEmpty#747, sum#748, isEmpty#749, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755, sum#756, isEmpty#757, sum#758, isEmpty#759, sum#760, isEmpty#761, sum#762, isEmpty#763] Results [80]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum#764, isEmpty#765, sum#766, isEmpty#767, sum#768, isEmpty#769, sum#770, isEmpty#771, sum#772, isEmpty#773, sum#774, isEmpty#775, sum#776, isEmpty#777, sum#778, isEmpty#779, sum#780, isEmpty#781, sum#782, isEmpty#783, sum#784, isEmpty#785, sum#786, isEmpty#787, sum#788, isEmpty#789, sum#790, isEmpty#791, sum#792, isEmpty#793, sum#794, isEmpty#795, sum#796, isEmpty#797, sum#798, isEmpty#799, sum#800, isEmpty#801, sum#802, isEmpty#803, sum#804, isEmpty#805, sum#806, isEmpty#807, sum#808, isEmpty#809, sum#810, isEmpty#811, sum#812, isEmpty#813, sum#814, isEmpty#815, sum#816, isEmpty#817, sum#818, isEmpty#819, sum#820, isEmpty#821, sum#822, isEmpty#823, sum#824, isEmpty#825, sum#826, isEmpty#827, sum#828, isEmpty#829, sum#830, isEmpty#831, sum#832, isEmpty#833, sum#834, isEmpty#835] "
          },
          "2" : {
            "sign" : -292914131,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 256576,
            "rowCount" : 285,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [55]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, isEmpty#901, sum#902, isEmpty#903, sum#904, isEmpty#905, sum#906, isEmpty#907, sum#908, isEmpty#909, sum#910, isEmpty#911, sum#912, isEmpty#913, sum#914, isEmpty#915, sum#916, isEmpty#917, sum#918, isEmpty#919, sum#920, isEmpty#921, sum#922, isEmpty#923, sum#924, isEmpty#925, sum#926, isEmpty#927, sum#928, isEmpty#929, sum#930, isEmpty#931] Keys [7]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142] Functions [24]: [sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)] Aggregate Attributes [24]: [sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#562, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#563, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#564, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#565, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#566, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#567, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#568, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#569, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#570, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#571, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#572, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#573, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#574, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#575, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#576, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#577, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#578, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#579, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#580, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#581, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#582, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#583, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#584, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#585] Results [32]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#562 AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#563 AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#564 AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#565 AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#566 AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#567 AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#568 AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#569 AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#570 AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#571 AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#572 AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#573 AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#574 AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#575 AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#576 AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#577 AS apr_net#429, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#578 AS may_net#430, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#579 AS jun_net#431, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#580 AS jul_net#432, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#581 AS aug_net#433, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#582 AS sep_net#434, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#583 AS oct_net#435, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#584 AS nov_net#436, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)#585 AS dec_net#437] "
          },
          "3" : {
            "sign" : 602095469,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 70372800,
            "rowCount" : 129600,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [55]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, isEmpty#901, sum#902, isEmpty#903, sum#904, isEmpty#905, sum#906, isEmpty#907, sum#908, isEmpty#909, sum#910, isEmpty#911, sum#912, isEmpty#913, sum#914, isEmpty#915, sum#916, isEmpty#917, sum#918, isEmpty#919, sum#920, isEmpty#921, sum#922, isEmpty#923, sum#924, isEmpty#925, sum#926, isEmpty#927, sum#928, isEmpty#929, sum#930, isEmpty#931] Arguments: 12 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Union",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], functions=[partial_sum(jan_sales#414), partial_sum(feb_sales#415), partial_sum(mar_sales#416), partial_sum(apr_sales#417), partial_sum(may_sales#418), partial_sum(jun_sales#419), partial_sum(jul_sales#420), partial_sum(aug_sales#421), partial_sum(sep_sales#422), partial_sum(oct_sales#423), partial_sum(nov_sales#424), partial_sum(dec_sales#425), partial_sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), ... 12 more fields], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum#764, isEmpty#765, sum#766, isEmpty#767, sum#768, isEmpty#769, sum#770, isEmpty#771, sum#772, isEmpty#773, sum#774, isEmpty#775, sum#776, isEmpty#777, sum#778, isEmpty#779, ... 56 more fields])\n+- Union\n   :- HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#414, feb_sales#415, mar_sales#416, apr_sales#417, may_sales#418, jun_sales#419, jul_sales#420, aug_sales#421, sep_sales#422, oct_sales#423, nov_sales#424, dec_sales#425, jan_net#426, feb_net#427, mar_net#428, apr_net#429, ... 8 more fields])\n   :  +- ShuffleQueryStage 12\n   :     +- Exchange hashpartitioning(w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n   :        +- *(9) HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, ... 31 more fields])\n   :           +- *(9) Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n   :              +- *(9) BroadcastHashJoin [ws_warehouse_sk#102], [w_warehouse_sk#122], Inner, BuildRight, false\n   :                 :- *(9) Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n   :                 :  +- *(9) BroadcastHashJoin [ws_ship_mode_sk#101], [sm_ship_mode_sk#174], Inner, BuildRight, false\n   :                 :     :- *(9) Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n   :                 :     :  +- *(9) BroadcastHashJoin [ws_sold_date_sk#121], [d_date_sk#136], Inner, BuildRight, false\n   :                 :     :     :- *(9) Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n   :                 :     :     :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#88], [t_time_sk#164], Inner, BuildRight, false\n   :                 :     :     :     :- *(9) Filter ((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101))\n   :                 :     :     :     :  +- *(9) ColumnarToRow\n   :                 :     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_quantity#105,ws_sales_price#108,ws_net_paid_inc_tax#117,ws_sold_date_sk#121] Batched: true, DataFilters: [isnotnull(ws_warehouse_sk#102), isnotnull(ws_sold_time_sk#88), isnotnull(ws_ship_mode_sk#101)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_ship_mode_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantity:int,ws_sales_price...\n   :                 :     :     :     :           +- SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n   :                 :     :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#136, d_year#142, d_moy#144], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1240]\n                                                            +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :                 :     :     :     +- BroadcastQueryStage 0\n   :                 :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n   :                 :     :     :           +- *(1) Project [t_time_sk#164]\n   :                 :     :     :              +- *(1) Filter (((isnotnull(t_time#166) AND (t_time#166 >= 49530)) AND (t_time#166 <= 78330)) AND isnotnull(t_time_sk#164))\n   :                 :     :     :                 +- *(1) ColumnarToRow\n   :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time#166] Batched: true, DataFilters: [isnotnull(t_time#166), (t_time#166 >= 49530), (t_time#166 <= 78330), isnotnull(t_time_sk#164)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,49530), LessThanOrEqual(t_time,78330), IsNotNull(t_..., ReadSchema: struct<t_time_sk:int,t_time:int>\n   :                 :     :     +- BroadcastQueryStage 1\n   :                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n   :                 :     :           +- *(2) Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n   :                 :     :              +- *(2) ColumnarToRow\n   :                 :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :                 :     +- BroadcastQueryStage 2\n   :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n   :                 :           +- *(3) Project [sm_ship_mode_sk#174]\n   :                 :              +- *(3) Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n   :                 :                 +- *(3) ColumnarToRow\n   :                 :                    +- FileScan parquet spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_carrier#178] Batched: true, DataFilters: [sm_carrier#178 IN (DIAMOND,AIRBORNE), isnotnull(sm_ship_mode_sk#174)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/ship_mode], PartitionFilters: [], PushedFilters: [In(sm_carrier, [AIRBORNE,DIAMOND]), IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>\n   :                 +- BroadcastQueryStage 3\n   :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n   :                       +- *(4) Filter isnotnull(w_warehouse_sk#122)\n   :                          +- *(4) ColumnarToRow\n   :                             +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_name#124,w_warehouse_sq_ft#125,w_city#130,w_county#131,w_state#132,w_country#134] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:st...\n   +- HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, ship_carriers#438, year#439, jan_sales#440, feb_sales#441, mar_sales#442, apr_sales#443, may_sales#444, jun_sales#445, jul_sales#446, aug_sales#447, sep_sales#448, oct_sales#449, nov_sales#450, dec_sales#451, jan_net#452, feb_net#453, mar_net#454, apr_net#455, ... 8 more fields])\n      +- ShuffleQueryStage 13\n         +- Exchange hashpartitioning(w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, 200), ENSURE_REQUIREMENTS, [plan_id=1418]\n            +- *(10) HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, ... 31 more fields])\n               +- *(10) Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- *(10) BroadcastHashJoin [cs_warehouse_sk#193], [w_warehouse_sk#500], Inner, BuildRight, false\n                     :- *(10) Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- *(10) BroadcastHashJoin [cs_ship_mode_sk#192], [sm_ship_mode_sk#552], Inner, BuildRight, false\n                     :     :- *(10) Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- *(10) BroadcastHashJoin [cs_sold_date_sk#213], [d_date_sk#514], Inner, BuildRight, false\n                     :     :     :- *(10) Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- *(10) BroadcastHashJoin [cs_sold_time_sk#180], [t_time_sk#542], Inner, BuildRight, false\n                     :     :     :     :- *(10) Filter ((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192))\n                     :     :     :     :  +- *(10) ColumnarToRow\n                     :     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_quantity#197,cs_ext_sales_price#202,cs_net_paid_inc_ship_tax#211,cs_sold_date_sk#213] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#193), isnotnull(cs_sold_time_sk#180), isnotnull(cs_ship_mode_sk#192)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#213), dynamicpruningexpression(cs_sold_date_sk#213 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs_ship_mode_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantity:int,cs_ext_sales_p...\n                     :     :     :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n                     :     :     :     +- BroadcastQueryStage 5\n                     :     :     :        +- ReusedExchange [t_time_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n                     :     :     +- BroadcastQueryStage 7\n                     :     :        +- ReusedExchange [d_date_sk#514, d_year#520, d_moy#522], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n                     :     +- BroadcastQueryStage 9\n                     :        +- ReusedExchange [sm_ship_mode_sk#552], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n                     +- BroadcastQueryStage 11\n                        +- ReusedExchange [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 634688,
        "inputRowCount" : 705
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10944, 11219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11230, 0, 0, 11389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10981, 0, 0, 0, 10944, 0, 0, 0, 0, 0, 0, 0, 11219, 10981, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11344, 0, 0, 0, 0, 0, 0, 0, 10944, 0, 11474, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
        "0" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7697, 7855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7787, 0, 0, 7892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7697, 0, 0, 0, 7660, 0, 0, 0, 0, 0, 0, 0, 7844, 7697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8053, 0, 0, 0, 0, 0, 0, 0, 7742, 0, 8053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 474,
        "TotalTasksDurationInMs" : 849,
        "IOBytes" : {
          "Total" : 296459,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 273209,
            "SW" : 23250
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -739818797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11520,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 11520,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#136, d_year#142, d_moy#144] "
          },
          "1" : {
            "sign" : 79716147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "2" : {
            "sign" : 1645566502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#136, d_date_id#137, d_date#138, d_month_seq#139, d_week_seq#140, d_quarter_seq#141, d_year#142, d_dow#143, d_moy#144, d_dom#145, d_qoy#146, d_fy_year#147, d_fy_quarter_seq#148, d_fy_week_seq#149, d_day_name#150, d_quarter_name#151, d_holiday#152, d_weekend#153, d_following_holiday#154, d_first_dom#155, d_last_dom#156, d_same_day_ly#157, d_same_day_lq#158, d_current_day#159, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#136, d_year#142, d_moy#144]\n+- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1722679299,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#136, d_year#142, d_moy#144] Condition : ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136)) "
          },
          "1" : {
            "sign" : -824446742,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#136, d_year#142, d_moy#144] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11520,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1442,
        "TotalTasksDurationInMs" : 1430,
        "IOBytes" : {
          "Total" : 93822,
          "Details" : {
            "IR" : 93822,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -920249713,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 345612,
                "rowCount" : 28801
              },
              "compileTime" : {
                "sizeInBytes" : 345612,
                "rowCount" : 28801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [t_time_sk#164] "
          },
          "1" : {
            "sign" : -838400325,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3628926,
                "rowCount" : 28801
              },
              "compileTime" : {
                "sizeInBytes" : 3628926,
                "rowCount" : 28801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164)) "
          },
          "2" : {
            "sign" : 870064768,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10886400,
                "rowCount" : 86400
              },
              "compileTime" : {
                "sizeInBytes" : 10886400,
                "rowCount" : 86400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [t_time_sk#164, t_time_id#165, t_time#166, t_hour#167, t_minute#168, t_second#169, t_am_pm#170, t_shift#171, t_sub_shift#172, t_meal_time#173], `spark_catalog`.`tpcds_100`.`time_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [t_time_sk#164]\n+- Filter ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164))\n   +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time_id#165,t_time#166,t_hour#167,t_minute#168,t_second#169,t_am_pm#170,t_shift#171,t_sub_shift#172,t_meal_time#173] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1913767943,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [t_time_sk#164] Input [2]: [t_time_sk#164, t_time#166] "
          },
          "1" : {
            "sign" : 1844080917,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [t_time_sk#164, t_time#166] Condition : (((isnotnull(t_time#166) AND (t_time#166 >= 49530)) AND (t_time#166 <= 78330)) AND isnotnull(t_time_sk#164)) "
          },
          "2" : {
            "sign" : 1180951778,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 345612,
            "rowCount" : 28801,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.time_dim Output [2]: [t_time_sk#164, t_time#166] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim] PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,49530), LessThanOrEqual(t_time,78330), IsNotNull(t_time_sk)] ReadSchema: struct<t_time_sk:int,t_time:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.time_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [t_time_sk#164]\n+- Filter (((isnotnull(t_time#166) AND (t_time#166 >= 49530)) AND (t_time#166 <= 78330)) AND isnotnull(t_time_sk#164))\n   +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time#166] Batched: true, DataFilters: [isnotnull(t_time#166), (t_time#166 >= 49530), (t_time#166 <= 78330), isnotnull(t_time_sk#164)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,49530), LessThanOrEqual(t_time,78330), IsNotNull(t_..., ReadSchema: struct<t_time_sk:int,t_time:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 345612,
        "inputRowCount" : 28801
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1742,
        "TotalTasksDurationInMs" : 1737,
        "IOBytes" : {
          "Total" : 324717,
          "Details" : {
            "IR" : 324717,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2091784090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36,
                "rowCount" : 3
              },
              "compileTime" : {
                "sizeInBytes" : 36,
                "rowCount" : 3
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sm_ship_mode_sk#174] "
          },
          "1" : {
            "sign" : -949908670,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 354,
                "rowCount" : 3
              },
              "compileTime" : {
                "sizeInBytes" : 354,
                "rowCount" : 3
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174)) "
          },
          "2" : {
            "sign" : -1845930134,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2360,
                "rowCount" : 20
              },
              "compileTime" : {
                "sizeInBytes" : 2360,
                "rowCount" : 20
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sm_ship_mode_sk#174, sm_ship_mode_id#175, sm_type#176, sm_code#177, sm_carrier#178, sm_contract#179], `spark_catalog`.`tpcds_100`.`ship_mode`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sm_ship_mode_sk#174]\n+- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n   +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_ship_mode_id#175,sm_type#176,sm_code#177,sm_carrier#178,sm_contract#179] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 94188389,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 36,
            "rowCount" : 3,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [sm_ship_mode_sk#174] Input [2]: [sm_ship_mode_sk#174, sm_carrier#178] "
          },
          "1" : {
            "sign" : -920633587,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 36,
            "rowCount" : 3,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [sm_ship_mode_sk#174, sm_carrier#178] Condition : (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174)) "
          },
          "2" : {
            "sign" : -103603403,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 36,
            "rowCount" : 3,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.ship_mode Output [2]: [sm_ship_mode_sk#174, sm_carrier#178] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/ship_mode] PushedFilters: [In(sm_carrier, [AIRBORNE,DIAMOND]), IsNotNull(sm_ship_mode_sk)] ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.ship_mode",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sm_ship_mode_sk#174]\n+- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n   +- FileScan parquet spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_carrier#178] Batched: true, DataFilters: [sm_carrier#178 IN (DIAMOND,AIRBORNE), isnotnull(sm_ship_mode_sk#174)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/ship_mode], PartitionFilters: [], PushedFilters: [In(sm_carrier, [AIRBORNE,DIAMOND]), IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 36,
        "inputRowCount" : 3
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1547,
        "TotalTasksDurationInMs" : 1542,
        "IOBytes" : {
          "Total" : 3126,
          "Details" : {
            "IR" : 3126,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -358504609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 71200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 71200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1605425590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1915614645,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 192713206,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#124 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#124 ASC NULLS FIRST], true\n      +- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414) AS jan_sales#464, sum(feb_sales#415) AS feb_sales#465, sum(mar_sales#416) AS mar_sales#466, sum(apr_sales#417) AS apr_sales#467, sum(may_sales#418) AS may_sales#468, sum(jun_sales#419) AS jun_sales#469, sum(jul_sales#420) AS jul_sales#470, sum(aug_sales#421) AS aug_sales#471, sum(sep_sales#422) AS sep_sales#472, sum(oct_sales#423) AS oct_sales#473, sum(nov_sales#424) AS nov_sales#474, sum(dec_sales#425) AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))) AS apr_sales_per_sq_foot#479, ... 20 more fields]\n         +- Union false, false\n            :- Aggregate [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, DIAMOND,AIRBORNE AS ship_carriers#412, d_year#142 AS year#413, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#414, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#415, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#416, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#417, sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS may_sales#418, sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#419, sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#420, sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#421, sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#422, sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#423, sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#424, sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#425, sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS jan_net#426, sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS feb_net#427, sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS mar_net#428, sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END) AS apr_net#429, ... 8 more fields]\n            :  +- Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n            :     +- Join Inner, (ws_warehouse_sk#102 = w_warehouse_sk#122)\n            :        :- Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :  +- Join Inner, (ws_ship_mode_sk#101 = sm_ship_mode_sk#174)\n            :        :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n            :        :     :  +- Join Inner, (ws_sold_date_sk#121 = d_date_sk#136)\n            :        :     :     :- Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :  +- Join Inner, (ws_sold_time_sk#88 = t_time_sk#164)\n            :        :     :     :     :- Project [ws_sold_time_sk#88, ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n            :        :     :     :     :  +- Filter ((((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_date_sk#121)) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101)) AND dynamicpruning#690 [ws_sold_date_sk#121])\n            :        :     :     :     :     :  +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :     :     :     :     +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_date_sk#89,ws_item_sk#90,ws_bill_customer_sk#91,ws_bill_cdemo_sk#92,ws_bill_hdemo_sk#93,ws_bill_addr_sk#94,ws_ship_customer_sk#95,ws_ship_cdemo_sk#96,ws_ship_hdemo_sk#97,ws_ship_addr_sk#98,ws_web_page_sk#99,ws_web_site_sk#100,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_promo_sk#103,ws_order_number#104L,ws_quantity#105,ws_wholesale_cost#106,ws_list_price#107,ws_sales_price#108,ws_ext_discount_amt#109,ws_ext_sales_price#110,ws_ext_wholesale_cost#111,... 10 more fields] parquet\n            :        :     :     :     +- Project [t_time_sk#164]\n            :        :     :     :        +- Filter ((isnotnull(t_time#166) AND ((t_time#166 >= 49530) AND (t_time#166 <= 78330))) AND isnotnull(t_time_sk#164))\n            :        :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time_id#165,t_time#166,t_hour#167,t_minute#168,t_second#169,t_am_pm#170,t_shift#171,t_sub_shift#172,t_meal_time#173] parquet\n            :        :     :     +- Project [d_date_sk#136, d_year#142, d_moy#144]\n            :        :     :        +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n            :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_date_id#137,d_date#138,d_month_seq#139,d_week_seq#140,d_quarter_seq#141,d_year#142,d_dow#143,d_moy#144,d_dom#145,d_qoy#146,d_fy_year#147,d_fy_quarter_seq#148,d_fy_week_seq#149,d_day_name#150,d_quarter_name#151,d_holiday#152,d_weekend#153,d_following_holiday#154,d_first_dom#155,d_last_dom#156,d_same_day_ly#157,d_same_day_lq#158,d_current_day#159,... 4 more fields] parquet\n            :        :     +- Project [sm_ship_mode_sk#174]\n            :        :        +- Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n            :        :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_ship_mode_id#175,sm_type#176,sm_code#177,sm_carrier#178,sm_contract#179] parquet\n            :        +- Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134]\n            :           +- Filter isnotnull(w_warehouse_sk#122)\n            :              +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_id#123,w_warehouse_name#124,w_warehouse_sq_ft#125,w_street_number#126,w_street_name#127,w_street_type#128,w_suite_number#129,w_city#130,w_county#131,w_state#132,w_zip#133,w_country#134,w_gmt_offset#135] parquet\n            +- Aggregate [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], [w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, DIAMOND,AIRBORNE AS ship_carriers#438, d_year#520 AS year#439, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_sales#440, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_sales#441, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_sales#442, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_sales#443, sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS may_sales#444, sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jun_sales#445, sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jul_sales#446, sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS aug_sales#447, sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS sep_sales#448, sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS oct_sales#449, sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS nov_sales#450, sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS dec_sales#451, sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS jan_net#452, sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS feb_net#453, sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS mar_net#454, sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END) AS apr_net#455, ... 8 more fields]\n               +- Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                  +- Join Inner, (cs_warehouse_sk#193 = w_warehouse_sk#500)\n                     :- Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :  +- Join Inner, (cs_ship_mode_sk#192 = sm_ship_mode_sk#552)\n                     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                     :     :  +- Join Inner, (cs_sold_date_sk#213 = d_date_sk#514)\n                     :     :     :- Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :  +- Join Inner, (cs_sold_time_sk#180 = t_time_sk#542)\n                     :     :     :     :- Project [cs_sold_time_sk#180, cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                     :     :     :     :  +- Filter ((((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_date_sk#213)) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192)) AND dynamicpruning#691 [cs_sold_date_sk#213])\n                     :     :     :     :     :  +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :     :     :     :     +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_date_sk#181,cs_bill_customer_sk#182,cs_bill_cdemo_sk#183,cs_bill_hdemo_sk#184,cs_bill_addr_sk#185,cs_ship_customer_sk#186,cs_ship_cdemo_sk#187,cs_ship_hdemo_sk#188,cs_ship_addr_sk#189,cs_call_center_sk#190,cs_catalog_page_sk#191,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_item_sk#194,cs_promo_sk#195,cs_order_number#196L,cs_quantity#197,cs_wholesale_cost#198,cs_list_price#199,cs_sales_price#200,cs_ext_discount_amt#201,cs_ext_sales_price#202,cs_ext_wholesale_cost#203,... 10 more fields] parquet\n                     :     :     :     +- Project [t_time_sk#542]\n                     :     :     :        +- Filter ((isnotnull(t_time#544) AND ((t_time#544 >= 49530) AND (t_time#544 <= 78330))) AND isnotnull(t_time_sk#542))\n                     :     :     :           +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#542,t_time_id#543,t_time#544,t_hour#545,t_minute#546,t_second#547,t_am_pm#548,t_shift#549,t_sub_shift#550,t_meal_time#551] parquet\n                     :     :     +- Project [d_date_sk#514, d_year#520, d_moy#522]\n                     :     :        +- Filter ((isnotnull(d_year#520) AND (d_year#520 = 2002)) AND isnotnull(d_date_sk#514))\n                     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#514,d_date_id#515,d_date#516,d_month_seq#517,d_week_seq#518,d_quarter_seq#519,d_year#520,d_dow#521,d_moy#522,d_dom#523,d_qoy#524,d_fy_year#525,d_fy_quarter_seq#526,d_fy_week_seq#527,d_day_name#528,d_quarter_name#529,d_holiday#530,d_weekend#531,d_following_holiday#532,d_first_dom#533,d_last_dom#534,d_same_day_ly#535,d_same_day_lq#536,d_current_day#537,... 4 more fields] parquet\n                     :     +- Project [sm_ship_mode_sk#552]\n                     :        +- Filter (sm_carrier#556 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#552))\n                     :           +- Relation spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#552,sm_ship_mode_id#553,sm_type#554,sm_code#555,sm_carrier#556,sm_contract#557] parquet\n                     +- Project [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512]\n                        +- Filter isnotnull(w_warehouse_sk#500)\n                           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#500,w_warehouse_id#501,w_warehouse_name#502,w_warehouse_sq_ft#503,w_street_number#504,w_street_name#505,w_street_type#506,w_suite_number#507,w_city#508,w_county#509,w_state#510,w_zip#511,w_country#512,w_gmt_offset#513] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1142742024,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 71200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [44]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#464, feb_sales#465, mar_sales#466, apr_sales#467, may_sales#468, jun_sales#469, jul_sales#470, aug_sales#471, sep_sales#472, oct_sales#473, nov_sales#474, dec_sales#475, jan_sales_per_sq_foot#476, feb_sales_per_sq_foot#477, mar_sales_per_sq_foot#478, apr_sales_per_sq_foot#479, may_sales_per_sq_foot#480, jun_sales_per_sq_foot#481, jul_sales_per_sq_foot#482, aug_sales_per_sq_foot#483, sep_sales_per_sq_foot#484, oct_sales_per_sq_foot#485, nov_sales_per_sq_foot#486, dec_sales_per_sq_foot#487, jan_net#488, feb_net#489, mar_net#490, apr_net#491, may_net#492, jun_net#493, jul_net#494, aug_net#495, sep_net#496, oct_net#497, nov_net#498, dec_net#499] Arguments: 100, [w_warehouse_name#124 ASC NULLS FIRST], [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#464, feb_sales#465, mar_sales#466, apr_sales#467, may_sales#468, jun_sales#469, jul_sales#470, aug_sales#471, sep_sales#472, oct_sales#473, nov_sales#474, dec_sales#475, jan_sales_per_sq_foot#476, feb_sales_per_sq_foot#477, mar_sales_per_sq_foot#478, apr_sales_per_sq_foot#479, ... 20 more fields] "
          },
          "1" : {
            "sign" : 1467048903,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 39488,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [80]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum#764, isEmpty#765, sum#766, isEmpty#767, sum#768, isEmpty#769, sum#770, isEmpty#771, sum#772, isEmpty#773, sum#774, isEmpty#775, sum#776, isEmpty#777, sum#778, isEmpty#779, sum#780, isEmpty#781, sum#782, isEmpty#783, sum#784, isEmpty#785, sum#786, isEmpty#787, sum#788, isEmpty#789, sum#790, isEmpty#791, sum#792, isEmpty#793, sum#794, isEmpty#795, sum#796, isEmpty#797, sum#798, isEmpty#799, sum#800, isEmpty#801, sum#802, isEmpty#803, sum#804, isEmpty#805, sum#806, isEmpty#807, sum#808, isEmpty#809, sum#810, isEmpty#811, sum#812, isEmpty#813, sum#814, isEmpty#815, sum#816, isEmpty#817, sum#818, isEmpty#819, sum#820, isEmpty#821, sum#822, isEmpty#823, sum#824, isEmpty#825, sum#826, isEmpty#827, sum#828, isEmpty#829, sum#830, isEmpty#831, sum#832, isEmpty#833, sum#834, isEmpty#835] Keys [8]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413] Functions [36]: [sum(jan_sales#414), sum(feb_sales#415), sum(mar_sales#416), sum(apr_sales#417), sum(may_sales#418), sum(jun_sales#419), sum(jul_sales#420), sum(aug_sales#421), sum(sep_sales#422), sum(oct_sales#423), sum(nov_sales#424), sum(dec_sales#425), sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum(jan_net#426), sum(feb_net#427), sum(mar_net#428), sum(apr_net#429), sum(may_net#430), sum(jun_net#431), sum(jul_net#432), sum(aug_net#433), sum(sep_net#434), sum(oct_net#435), sum(nov_net#436), sum(dec_net#437)] Aggregate Attributes [36]: [sum(jan_sales#414)#610, sum(feb_sales#415)#611, sum(mar_sales#416)#612, sum(apr_sales#417)#613, sum(may_sales#418)#614, sum(jun_sales#419)#615, sum(jul_sales#420)#616, sum(aug_sales#421)#617, sum(sep_sales#422)#618, sum(oct_sales#423)#619, sum(nov_sales#424)#620, sum(dec_sales#425)#621, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#634, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#635, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#636, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#637, sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#638, sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#639, sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#640, sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#641, sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#642, sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#643, sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#644, sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#645, sum(jan_net#426)#622, sum(feb_net#427)#623, sum(mar_net#428)#624, sum(apr_net#429)#625, sum(may_net#430)#626, sum(jun_net#431)#627, sum(jul_net#432)#628, sum(aug_net#433)#629, sum(sep_net#434)#630, sum(oct_net#435)#631, sum(nov_net#436)#632, sum(dec_net#437)#633] Results [44]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum(jan_sales#414)#610 AS jan_sales#464, sum(feb_sales#415)#611 AS feb_sales#465, sum(mar_sales#416)#612 AS mar_sales#466, sum(apr_sales#417)#613 AS apr_sales#467, sum(may_sales#418)#614 AS may_sales#468, sum(jun_sales#419)#615 AS jun_sales#469, sum(jul_sales#420)#616 AS jul_sales#470, sum(aug_sales#421)#617 AS aug_sales#471, sum(sep_sales#422)#618 AS sep_sales#472, sum(oct_sales#423)#619 AS oct_sales#473, sum(nov_sales#424)#620 AS nov_sales#474, sum(dec_sales#425)#621 AS dec_sales#475, sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#634 AS jan_sales_per_sq_foot#476, sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#635 AS feb_sales_per_sq_foot#477, sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#636 AS mar_sales_per_sq_foot#478, sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#637 AS apr_sales_per_sq_foot#479, sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#638 AS may_sales_per_sq_foot#480, sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#639 AS jun_sales_per_sq_foot#481, sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#640 AS jul_sales_per_sq_foot#482, sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#641 AS aug_sales_per_sq_foot#483, sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#642 AS sep_sales_per_sq_foot#484, sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#643 AS oct_sales_per_sq_foot#485, sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#644 AS nov_sales_per_sq_foot#486, sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0))))#645 AS dec_sales_per_sq_foot#487, sum(jan_net#426)#622 AS jan_net#488, sum(feb_net#427)#623 AS feb_net#489, sum(mar_net#428)#624 AS mar_net#490, sum(apr_net#429)#625 AS apr_net#491, sum(may_net#430)#626 AS may_net#492, sum(jun_net#431)#627 AS jun_net#493, sum(jul_net#432)#628 AS jul_net#494, sum(aug_net#433)#629 AS aug_net#495, sum(sep_net#434)#630 AS sep_net#496, sum(oct_net#435)#631 AS oct_net#497, sum(nov_net#436)#632 AS nov_net#498, sum(dec_net#437)#633 AS dec_net#499] "
          },
          "2" : {
            "sign" : -1660941022,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 192713206,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [80]: [w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum#764, isEmpty#765, sum#766, isEmpty#767, sum#768, isEmpty#769, sum#770, isEmpty#771, sum#772, isEmpty#773, sum#774, isEmpty#775, sum#776, isEmpty#777, sum#778, isEmpty#779, sum#780, isEmpty#781, sum#782, isEmpty#783, sum#784, isEmpty#785, sum#786, isEmpty#787, sum#788, isEmpty#789, sum#790, isEmpty#791, sum#792, isEmpty#793, sum#794, isEmpty#795, sum#796, isEmpty#797, sum#798, isEmpty#799, sum#800, isEmpty#801, sum#802, isEmpty#803, sum#804, isEmpty#805, sum#806, isEmpty#807, sum#808, isEmpty#809, sum#810, isEmpty#811, sum#812, isEmpty#813, sum#814, isEmpty#815, sum#816, isEmpty#817, sum#818, isEmpty#819, sum#820, isEmpty#821, sum#822, isEmpty#823, sum#824, isEmpty#825, sum#826, isEmpty#827, sum#828, isEmpty#829, sum#830, isEmpty#831, sum#832, isEmpty#833, sum#834, isEmpty#835] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#124 ASC NULLS FIRST], output=[w_warehouse_name#124,w_warehouse_sq_ft#125,w_city#130,w_county#131,w_state#132,w_country#134,ship_carriers#412,year#413,jan_sales#464,feb_sales#465,mar_sales#466,apr_sales#467,may_sales#468,jun_sales#469,jul_sales#470,aug_sales#471,sep_sales#472,oct_sales#473,nov_sales#474,dec_sales#475,jan_sales_per_sq_foot#476,feb_sales_per_sq_foot#477,mar_sales_per_sq_foot#478,apr_sales_per_sq_foot#479,... 20 more fields])\n+- HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], functions=[sum(jan_sales#414), sum(feb_sales#415), sum(mar_sales#416), sum(apr_sales#417), sum(may_sales#418), sum(jun_sales#419), sum(jul_sales#420), sum(aug_sales#421), sum(sep_sales#422), sum(oct_sales#423), sum(nov_sales#424), sum(dec_sales#425), sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), ... 12 more fields], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#464, feb_sales#465, mar_sales#466, apr_sales#467, may_sales#468, jun_sales#469, jul_sales#470, aug_sales#471, sep_sales#472, oct_sales#473, nov_sales#474, dec_sales#475, jan_sales_per_sq_foot#476, feb_sales_per_sq_foot#477, mar_sales_per_sq_foot#478, apr_sales_per_sq_foot#479, ... 20 more fields])\n   +- ShuffleQueryStage 14\n      +- Exchange hashpartitioning(w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, 200), ENSURE_REQUIREMENTS, [plan_id=1530]\n         +- *(13) HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413], functions=[partial_sum(jan_sales#414), partial_sum(feb_sales#415), partial_sum(mar_sales#416), partial_sum(apr_sales#417), partial_sum(may_sales#418), partial_sum(jun_sales#419), partial_sum(jul_sales#420), partial_sum(aug_sales#421), partial_sum(sep_sales#422), partial_sum(oct_sales#423), partial_sum(nov_sales#424), partial_sum(dec_sales#425), partial_sum((jan_sales#414 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((feb_sales#415 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((mar_sales#416 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((apr_sales#417 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((may_sales#418 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jun_sales#419 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((jul_sales#420 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((aug_sales#421 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((sep_sales#422 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((oct_sales#423 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((nov_sales#424 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), partial_sum((dec_sales#425 / cast(w_warehouse_sq_ft#125 as decimal(10,0)))), ... 12 more fields], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, sum#764, isEmpty#765, sum#766, isEmpty#767, sum#768, isEmpty#769, sum#770, isEmpty#771, sum#772, isEmpty#773, sum#774, isEmpty#775, sum#776, isEmpty#777, sum#778, isEmpty#779, ... 56 more fields])\n            +- Union\n               :- *(11) HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#412, year#413, jan_sales#414, feb_sales#415, mar_sales#416, apr_sales#417, may_sales#418, jun_sales#419, jul_sales#420, aug_sales#421, sep_sales#422, oct_sales#423, nov_sales#424, dec_sales#425, jan_net#426, feb_net#427, mar_net#428, apr_net#429, ... 8 more fields])\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 12\n               :        +- Exchange hashpartitioning(w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n               :           +- *(9) HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_sales_price#108 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid_inc_tax#117 * cast(ws_quantity#105 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, sum#884, isEmpty#885, sum#886, isEmpty#887, sum#888, isEmpty#889, sum#890, isEmpty#891, sum#892, isEmpty#893, sum#894, isEmpty#895, sum#896, isEmpty#897, sum#898, isEmpty#899, sum#900, ... 31 more fields])\n               :              +- *(9) Project [ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142, d_moy#144]\n               :                 +- *(9) BroadcastHashJoin [ws_warehouse_sk#102], [w_warehouse_sk#122], Inner, BuildRight, false\n               :                    :- *(9) Project [ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n               :                    :  +- *(9) BroadcastHashJoin [ws_ship_mode_sk#101], [sm_ship_mode_sk#174], Inner, BuildRight, false\n               :                    :     :- *(9) Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, d_year#142, d_moy#144]\n               :                    :     :  +- *(9) BroadcastHashJoin [ws_sold_date_sk#121], [d_date_sk#136], Inner, BuildRight, false\n               :                    :     :     :- *(9) Project [ws_ship_mode_sk#101, ws_warehouse_sk#102, ws_quantity#105, ws_sales_price#108, ws_net_paid_inc_tax#117, ws_sold_date_sk#121]\n               :                    :     :     :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#88], [t_time_sk#164], Inner, BuildRight, false\n               :                    :     :     :     :- *(9) Filter ((isnotnull(ws_warehouse_sk#102) AND isnotnull(ws_sold_time_sk#88)) AND isnotnull(ws_ship_mode_sk#101))\n               :                    :     :     :     :  +- *(9) ColumnarToRow\n               :                    :     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#88,ws_ship_mode_sk#101,ws_warehouse_sk#102,ws_quantity#105,ws_sales_price#108,ws_net_paid_inc_tax#117,ws_sold_date_sk#121] Batched: true, DataFilters: [isnotnull(ws_warehouse_sk#102), isnotnull(ws_sold_time_sk#88), isnotnull(ws_ship_mode_sk#101)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_warehouse_sk), IsNotNull(ws_sold_time_sk), IsNotNull(ws_ship_mode_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_quantity:int,ws_sales_price...\n               :                    :     :     :     :           +- SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n               :                    :     :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#136, d_year#142, d_moy#144], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1240]\n                                                                           +- Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :                    :     :     :     +- BroadcastQueryStage 0\n               :                    :     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n               :                    :     :     :           +- *(1) Project [t_time_sk#164]\n               :                    :     :     :              +- *(1) Filter (((isnotnull(t_time#166) AND (t_time#166 >= 49530)) AND (t_time#166 <= 78330)) AND isnotnull(t_time_sk#164))\n               :                    :     :     :                 +- *(1) ColumnarToRow\n               :                    :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#164,t_time#166] Batched: true, DataFilters: [isnotnull(t_time#166), (t_time#166 >= 49530), (t_time#166 <= 78330), isnotnull(t_time_sk#164)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [IsNotNull(t_time), GreaterThanOrEqual(t_time,49530), LessThanOrEqual(t_time,78330), IsNotNull(t_..., ReadSchema: struct<t_time_sk:int,t_time:int>\n               :                    :     :     +- BroadcastQueryStage 1\n               :                    :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n               :                    :     :           +- *(2) Filter ((isnotnull(d_year#142) AND (d_year#142 = 2002)) AND isnotnull(d_date_sk#136))\n               :                    :     :              +- *(2) ColumnarToRow\n               :                    :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#136,d_year#142,d_moy#144] Batched: true, DataFilters: [isnotnull(d_year#142), (d_year#142 = 2002), isnotnull(d_date_sk#136)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :                    :     +- BroadcastQueryStage 2\n               :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n               :                    :           +- *(3) Project [sm_ship_mode_sk#174]\n               :                    :              +- *(3) Filter (sm_carrier#178 IN (DIAMOND,AIRBORNE) AND isnotnull(sm_ship_mode_sk#174))\n               :                    :                 +- *(3) ColumnarToRow\n               :                    :                    +- FileScan parquet spark_catalog.tpcds_100.ship_mode[sm_ship_mode_sk#174,sm_carrier#178] Batched: true, DataFilters: [sm_carrier#178 IN (DIAMOND,AIRBORNE), isnotnull(sm_ship_mode_sk#174)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/ship_mode], PartitionFilters: [], PushedFilters: [In(sm_carrier, [AIRBORNE,DIAMOND]), IsNotNull(sm_ship_mode_sk)], ReadSchema: struct<sm_ship_mode_sk:int,sm_carrier:string>\n               :                    +- BroadcastQueryStage 3\n               :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n               :                          +- *(4) Filter isnotnull(w_warehouse_sk#122)\n               :                             +- *(4) ColumnarToRow\n               :                                +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_name#124,w_warehouse_sq_ft#125,w_city#130,w_county#131,w_state#132,w_country#134] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:st...\n               +- *(12) HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, ship_carriers#438, year#439, jan_sales#440, feb_sales#441, mar_sales#442, apr_sales#443, may_sales#444, jun_sales#445, jul_sales#446, aug_sales#447, sep_sales#448, oct_sales#449, nov_sales#450, dec_sales#451, jan_net#452, feb_net#453, mar_net#454, apr_net#455, ... 8 more fields])\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 13\n                        +- Exchange hashpartitioning(w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, 200), ENSURE_REQUIREMENTS, [plan_id=1418]\n                           +- *(10) HashAggregate(keys=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520], functions=[partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_ext_sales_price#202 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 1) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 2) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 3) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 4) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 5) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 6) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 7) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 8) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 9) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 10) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 11) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#522 = 12) THEN (cs_net_paid_inc_ship_tax#211 * cast(cs_quantity#197 as decimal(10,0))) ELSE 0.00 END)], output=[w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, sum#980, isEmpty#981, sum#982, isEmpty#983, sum#984, isEmpty#985, sum#986, isEmpty#987, sum#988, isEmpty#989, sum#990, isEmpty#991, sum#992, isEmpty#993, sum#994, isEmpty#995, sum#996, ... 31 more fields])\n                              +- *(10) Project [cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512, d_year#520, d_moy#522]\n                                 +- *(10) BroadcastHashJoin [cs_warehouse_sk#193], [w_warehouse_sk#500], Inner, BuildRight, false\n                                    :- *(10) Project [cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                                    :  +- *(10) BroadcastHashJoin [cs_ship_mode_sk#192], [sm_ship_mode_sk#552], Inner, BuildRight, false\n                                    :     :- *(10) Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, d_year#520, d_moy#522]\n                                    :     :  +- *(10) BroadcastHashJoin [cs_sold_date_sk#213], [d_date_sk#514], Inner, BuildRight, false\n                                    :     :     :- *(10) Project [cs_ship_mode_sk#192, cs_warehouse_sk#193, cs_quantity#197, cs_ext_sales_price#202, cs_net_paid_inc_ship_tax#211, cs_sold_date_sk#213]\n                                    :     :     :  +- *(10) BroadcastHashJoin [cs_sold_time_sk#180], [t_time_sk#542], Inner, BuildRight, false\n                                    :     :     :     :- *(10) Filter ((isnotnull(cs_warehouse_sk#193) AND isnotnull(cs_sold_time_sk#180)) AND isnotnull(cs_ship_mode_sk#192))\n                                    :     :     :     :  +- *(10) ColumnarToRow\n                                    :     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#180,cs_ship_mode_sk#192,cs_warehouse_sk#193,cs_quantity#197,cs_ext_sales_price#202,cs_net_paid_inc_ship_tax#211,cs_sold_date_sk#213] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#193), isnotnull(cs_sold_time_sk#180), isnotnull(cs_ship_mode_sk#192)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#213), dynamicpruningexpression(cs_sold_date_sk#213 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_sold_time_sk), IsNotNull(cs_ship_mode_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_quantity:int,cs_ext_sales_p...\n                                    :     :     :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#690, 0, [d_date_sk#136], [id=#1243]\n                                    :     :     :     +- BroadcastQueryStage 5\n                                    :     :     :        +- ReusedExchange [t_time_sk#542], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=401]\n                                    :     :     +- BroadcastQueryStage 7\n                                    :     :        +- ReusedExchange [d_date_sk#514, d_year#520, d_moy#522], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=420]\n                                    :     +- BroadcastQueryStage 9\n                                    :        +- ReusedExchange [sm_ship_mode_sk#552], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=439]\n                                    +- BroadcastQueryStage 11\n                                       +- ReusedExchange [w_warehouse_sk#500, w_warehouse_name#502, w_warehouse_sq_ft#503, w_city#508, w_county#509, w_state#510, w_country#512], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=458]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39488,
        "inputRowCount" : 30
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 0, 0, 0, 1578, 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 1657, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 433,
        "TotalTasksDurationInMs" : 416,
        "IOBytes" : {
          "Total" : 23250,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23250,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1131398949,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1905,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 1905,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] "
          },
          "1" : {
            "sign" : -2114175198,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#122) "
          },
          "2" : {
            "sign" : -2027293611,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#122, w_warehouse_id#123, w_warehouse_name#124, w_warehouse_sq_ft#125, w_street_number#126, w_street_name#127, w_street_type#128, w_suite_number#129, w_city#130, w_county#131, w_state#132, w_zip#133, w_country#134, w_gmt_offset#135], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134]\n+- Filter isnotnull(w_warehouse_sk#122)\n   +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_id#123,w_warehouse_name#124,w_warehouse_sq_ft#125,w_street_number#126,w_street_name#127,w_street_type#128,w_suite_number#129,w_city#130,w_county#131,w_state#132,w_zip#133,w_country#134,w_gmt_offset#135] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1418203490,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] Condition : isnotnull(w_warehouse_sk#122) "
          },
          "1" : {
            "sign" : 403028565,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1905,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.warehouse Output [7]: [w_warehouse_sk#122, w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse] PushedFilters: [IsNotNull(w_warehouse_sk)] ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:string,w_state:string,w_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.warehouse",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(w_warehouse_sk#122)\n+- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#122,w_warehouse_name#124,w_warehouse_sq_ft#125,w_city#130,w_county#131,w_state#132,w_country#134] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string,w_warehouse_sq_ft:int,w_city:string,w_county:st...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1905,
        "inputRowCount" : 15
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1784,
        "TotalTasksDurationInMs" : 1780,
        "IOBytes" : {
          "Total" : 6917,
          "Details" : {
            "IR" : 6917,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227230016,
  "SQLEndTimeInMs" : 1702227251090,
  "Objectives" : {
    "DurationInMs" : 21074,
    "IOBytes" : {
      "Total" : 472303216,
      "Details" : {
        "IR" : 471710298,
        "IW" : 0,
        "SR" : 296459,
        "SW" : 296459
      }
    }
  }
}
