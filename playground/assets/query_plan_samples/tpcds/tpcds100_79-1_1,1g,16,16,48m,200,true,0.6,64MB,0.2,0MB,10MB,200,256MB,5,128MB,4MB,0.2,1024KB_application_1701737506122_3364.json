{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -604925231,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14870272760,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#24 = d_date_sk#25) "
        },
        "8" : {
          "sign" : -1714088431,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 40449712730,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#8 = s_store_sk#53) "
        },
        "19" : {
          "sign" : -604607614,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 60756,
          "rowCount" : 5063,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [hd_demo_sk#82] "
        },
        "23" : {
          "sign" : 141585101,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 182978,
          "rowCount" : 382,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53)) "
        },
        "4" : {
          "sign" : -1921684980,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 30529878561,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#111, ss_ticket_number#10L, amt#0, profit#1, s_city#75] "
        },
        "15" : {
          "sign" : 1393239333,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#2, ss_item_sk#3, ss_customer_sk#4, ss_cdemo_sk#5, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_promo_sk#9, ss_ticket_number#10L, ss_quantity#11, ss_wholesale_cost#12, ss_list_price#13, ss_sales_price#14, ss_ext_discount_amt#15, ss_ext_sales_price#16, ss_ext_wholesale_cost#17, ss_ext_list_price#18, ss_ext_tax#19, ss_coupon_amt#20, ss_net_paid#21, ss_net_paid_inc_tax#22, ss_net_profit#23, ss_sold_date_sk#24], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -709613127,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12745948080,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
        },
        "9" : {
          "sign" : -634022100,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11951747500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
        },
        "22" : {
          "sign" : -260207175,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12988,
          "rowCount" : 382,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#53, s_city#75] "
        },
        "26" : {
          "sign" : 125910025,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(c_customer_sk#87) "
        },
        "13" : {
          "sign" : 2033199780,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12457430284,
          "rowCount" : 239565967,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] "
        },
        "24" : {
          "sign" : -1367897490,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 1351758550,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1908,
          "rowCount" : 159,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#25] "
        },
        "5" : {
          "sign" : -409706437,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 27229351149,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
        },
        "10" : {
          "sign" : 460295244,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14124792500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#6 = hd_demo_sk#82) "
        },
        "21" : {
          "sign" : 961916025,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 316800,
          "rowCount" : 7200,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#82, hd_income_band_sk#83, hd_buy_potential#84, hd_dep_count#85, hd_vehicle_count#86], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -1025717642,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 33515476262,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#0, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#1] "
        },
        "1" : {
          "sign" : 926251807,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 24478911639,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -1208309537,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39114,
          "rowCount" : 159,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25)) "
        },
        "25" : {
          "sign" : 168669014,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 98000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#87, c_first_name#95, c_last_name#96] "
        },
        "14" : {
          "sign" : 1978168538,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 36414026984,
          "rowCount" : 239565967,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#119 [ss_sold_date_sk#24]) "
        },
        "0" : {
          "sign" : -353179118,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 9200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -21718733,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 222772,
          "rowCount" : 5063,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82)) "
        },
        "27" : {
          "sign" : -1197929343,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#87, c_customer_id#88, c_current_cdemo_sk#89, c_current_hdemo_sk#90, c_current_addr_sk#91, c_first_shipto_date_sk#92, c_first_sales_date_sk#93, c_salutation#94, c_first_name#95, c_last_name#96, c_preferred_cust_flag#97, c_birth_day#98, c_birth_month#99, c_birth_year#100, c_birth_country#101, c_login#102, c_email_address#103, c_last_review_date#104], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : 879785212,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24478911639,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#111, ss_ticket_number#10L, amt#0, profit#1] "
        },
        "18" : {
          "sign" : -885542230,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 2111482391,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 35826888418,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] "
        },
        "3" : {
          "sign" : 2054956065,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 30529878561,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#1 ASC NULLS FIRST], true "
        }
      },
      "links" : [ {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Sort",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#111, ss_ticket_number#10L, amt#0, profit#1]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#1 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#111, ss_ticket_number#10L, amt#0, profit#1, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#0, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#1]\n               :  +- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n               :     +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n               :        :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n               :        :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n               :        :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n               :        :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#119 [ss_sold_date_sk#24])\n               :        :     :     :     :  +- Project [d_date_sk#25]\n               :        :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n               :        :     :     +- Project [d_date_sk#25]\n               :        :     :        +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     +- Project [hd_demo_sk#82]\n               :        :        +- Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n               :        :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_income_band_sk#83,hd_buy_potential#84,hd_dep_count#85,hd_vehicle_count#86] parquet\n               :        +- Project [s_store_sk#53, s_city#75]\n               :           +- Filter ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53))\n               :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#53,s_store_id#54,s_rec_start_date#55,s_rec_end_date#56,s_closed_date_sk#57,s_store_name#58,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet\n               +- Project [c_customer_sk#87, c_first_name#95, c_last_name#96]\n                  +- Filter isnotnull(c_customer_sk#87)\n                     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#87,c_customer_id#88,c_current_cdemo_sk#89,c_current_hdemo_sk#90,c_current_addr_sk#91,c_first_shipto_date_sk#92,c_first_sales_date_sk#93,c_salutation#94,c_first_name#95,c_last_name#96,c_preferred_cust_flag#97,c_birth_day#98,c_birth_month#99,c_birth_year#100,c_birth_country#101,c_login#102,c_email_address#103,c_last_review_date#104] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42325373068,
      "inputRowCount" : 277126004
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 169836262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 131750492892000000,
            "rowCount" : 1155706078000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "5" : {
            "sign" : 1002078855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 117882019956000000,
            "rowCount" : 1155706078000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "6" : {
            "sign" : -91516280,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33515476262,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))]) "
          },
          "1" : {
            "sign" : -766801038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 106324959176000000,
            "rowCount" : 1155706078000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1280626693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 53469969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 106324959176000000,
            "rowCount" : 1155706078000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "7" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 96527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "3" : {
            "sign" : -665662256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 131750492892000000,
            "rowCount" : 1155706078000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- LogicalQueryStage Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))])\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33612004110,
        "inputRowCount" : 579853039
      },
      "PD" : {
        "0" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227359255,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10525,
        "IOBytes" : {
          "Total" : 433107154,
          "Details" : {
            "IR" : 199416337,
            "IW" : 0,
            "SR" : 142849313,
            "SW" : 90841504
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 169836262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 308150528000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "5" : {
            "sign" : 1002078855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 275134400000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "6" : {
            "sign" : -91516280,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 93540040,
            "rowCount" : 1375672,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))]) "
          },
          "1" : {
            "sign" : -766801038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 253123648000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1280626693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 53469969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253123648000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "7" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 96527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "3" : {
            "sign" : -665662256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 308150528000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- LogicalQueryStage Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))])\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 190067888,
        "inputRowCount" : 3375672
      },
      "PD" : {
        "0" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227365200,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4580,
        "IOBytes" : {
          "Total" : 184015156,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 142849313,
            "SW" : 41165843
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1716018698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 308150528000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "5" : {
            "sign" : 172408611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 275134400000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "6" : {
            "sign" : 545368548,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 82534664,
            "rowCount" : 1375672,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], ShuffleQueryStage 5 "
          },
          "1" : {
            "sign" : -1080451634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 253123648000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -490800801,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1804707573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253123648000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "7" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 96527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "3" : {
            "sign" : 589082028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 308150528000000,
            "rowCount" : 2751344000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- LogicalQueryStage Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 179062512,
        "inputRowCount" : 3375672
      },
      "PD" : {
        "2" : [ 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603 ],
        "0" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227367485,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2295,
        "IOBytes" : {
          "Total" : 93173652,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 93173652,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1273056792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#24 = d_date_sk#25) "
          },
          "8" : {
            "sign" : 1573302507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40449712730,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#8 = s_store_sk#53) "
          },
          "19" : {
            "sign" : -1517943415,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#25], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : 82084500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "15" : {
            "sign" : 1393239333,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#2, ss_item_sk#3, ss_customer_sk#4, ss_cdemo_sk#5, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_promo_sk#9, ss_ticket_number#10L, ss_quantity#11, ss_wholesale_cost#12, ss_list_price#13, ss_sales_price#14, ss_ext_discount_amt#15, ss_ext_sales_price#16, ss_ext_wholesale_cost#17, ss_ext_list_price#18, ss_ext_tax#19, ss_coupon_amt#20, ss_net_paid#21, ss_net_paid_inc_tax#22, ss_net_profit#23, ss_sold_date_sk#24], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 501062262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12745948080,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "9" : {
            "sign" : 1347839827,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 58886280129600,
            "rowCount" : 1338324548400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "22" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 98000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : -262993362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12457430284,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] "
          },
          "16" : {
            "sign" : 1351758550,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#25] "
          },
          "5" : {
            "sign" : 1542614409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27229351149,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "10" : {
            "sign" : -1732855321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 69592876516800,
            "rowCount" : 1338324548400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#6 = hd_demo_sk#82) "
          },
          "21" : {
            "sign" : 124359560,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12988,
            "rowCount" : 382,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2 "
          },
          "6" : {
            "sign" : -287334040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 33515476262,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121] "
          },
          "1" : {
            "sign" : 1320103678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 24478911639,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1208309537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39114,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25)) "
          },
          "14" : {
            "sign" : -83438748,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 36414026984,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24]) "
          },
          "0" : {
            "sign" : 1521433705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1215439270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 5040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#82], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -477170689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24478911639,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "18" : {
            "sign" : -885542230,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 56516569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35826888418,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] "
          },
          "3" : {
            "sign" : -2611296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121]\n               :  +- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n               :     +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n               :        :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n               :        :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n               :        :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n               :        :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24])\n               :        :     :     :     :  +- Project [d_date_sk#25]\n               :        :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n               :        :     :     +- LogicalQueryStage Project [d_date_sk#25], BroadcastQueryStage 0\n               :        :     +- LogicalQueryStage Project [hd_demo_sk#82], BroadcastQueryStage 1\n               :        +- LogicalQueryStage Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41906006088,
        "inputRowCount" : 277050934
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 21574.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1343.0, 1388.0, 1510.0, 1816.0 ]
      },
      "StartTimeInMs" : 1702227358247,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11533,
        "IOBytes" : {
          "Total" : 500004736,
          "Details" : {
            "IR" : 214306110,
            "IW" : 0,
            "SR" : 142849313,
            "SW" : 142849313
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1273056792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#24 = d_date_sk#25) "
          },
          "8" : {
            "sign" : 1573302507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34582306330656000,
            "rowCount" : 508563328392000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#8 = s_store_sk#53) "
          },
          "19" : {
            "sign" : -1517943415,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#25], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : 82084500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3125915011761131520000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "15" : {
            "sign" : 1393239333,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#2, ss_item_sk#3, ss_customer_sk#4, ss_cdemo_sk#5, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_promo_sk#9, ss_ticket_number#10L, ss_quantity#11, ss_wholesale_cost#12, ss_list_price#13, ss_sales_price#14, ss_ext_discount_amt#15, ss_ext_sales_price#16, ss_ext_wholesale_cost#17, ss_ext_list_price#18, ss_ext_tax#19, ss_coupon_amt#20, ss_net_paid#21, ss_net_paid_inc_tax#22, ss_net_profit#23, ss_sold_date_sk#24], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 501062262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12745948080,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "9" : {
            "sign" : 1347839827,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 58886280129600,
            "rowCount" : 1338324548400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "22" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 98000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : -262993362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12457430284,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] "
          },
          "16" : {
            "sign" : 1351758550,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#25] "
          },
          "5" : {
            "sign" : 1542614409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2790995546215296000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "10" : {
            "sign" : -1732855321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 69592876516800,
            "rowCount" : 1338324548400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#6 = hd_demo_sk#82) "
          },
          "21" : {
            "sign" : 124359560,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 380,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2 "
          },
          "6" : {
            "sign" : -287334040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28479546389952000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121] "
          },
          "1" : {
            "sign" : 1320103678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2567715902518072320000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1208309537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39114,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25)) "
          },
          "14" : {
            "sign" : -83438748,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 36414026984,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24]) "
          },
          "0" : {
            "sign" : 1521433705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1215439270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 5040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#82], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -477170689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2567715902518072320000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "18" : {
            "sign" : -885542230,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 56516569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30513799703520000,
            "rowCount" : 508563328392000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] "
          },
          "3" : {
            "sign" : -2611296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3125915011761131520000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121]\n               :  +- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n               :     +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n               :        :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n               :        :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n               :        :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n               :        :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24])\n               :        :     :     :     :  +- Project [d_date_sk#25]\n               :        :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n               :        :     :     +- LogicalQueryStage Project [d_date_sk#25], BroadcastQueryStage 0\n               :        :     +- LogicalQueryStage Project [hd_demo_sk#82], BroadcastQueryStage 1\n               :        +- LogicalQueryStage Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41907044892,
        "inputRowCount" : 277050932
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 21574.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1343.0, 1388.0, 1510.0, 1816.0 ]
      },
      "StartTimeInMs" : 1702227358542,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11238,
        "IOBytes" : {
          "Total" : 499894692,
          "Details" : {
            "IR" : 214196066,
            "IW" : 0,
            "SR" : 142849313,
            "SW" : 142849313
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1273056792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2092848287712,
            "rowCount" : 37372290852,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#24 = d_date_sk#25) "
          },
          "8" : {
            "sign" : 1573302507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4867127977903027200,
            "rowCount" : 71575411439750400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#8 = s_store_sk#53) "
          },
          "19" : {
            "sign" : -1517943415,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056768,
            "rowCount" : 156,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#25], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : 82084500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 439942560939112218624000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "15" : {
            "sign" : 1393239333,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#2, ss_item_sk#3, ss_customer_sk#4, ss_cdemo_sk#5, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_promo_sk#9, ss_ticket_number#10L, ss_quantity#11, ss_wholesale_cost#12, ss_list_price#13, ss_sales_price#14, ss_ext_discount_amt#15, ss_ext_sales_price#16, ss_ext_wholesale_cost#17, ss_ext_list_price#18, ss_ext_tax#19, ss_coupon_amt#20, ss_net_paid#21, ss_net_paid_inc_tax#22, ss_net_profit#23, ss_sold_date_sk#24], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 501062262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1793869960896,
            "rowCount" : 37372290852,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "9" : {
            "sign" : 1347839827,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8287679219339520,
            "rowCount" : 188356345894080,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "22" : {
            "sign" : 1035485664,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 98000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : -262993362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12457430284,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] "
          },
          "16" : {
            "sign" : 1351758550,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#25] "
          },
          "5" : {
            "sign" : 1542614409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 392805857981350195200000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "10" : {
            "sign" : -1732855321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9794529986492160,
            "rowCount" : 188356345894080,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#6 = hd_demo_sk#82) "
          },
          "21" : {
            "sign" : 124359560,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 380,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2 "
          },
          "6" : {
            "sign" : -287334040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4008223040626022400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121] "
          },
          "1" : {
            "sign" : 1320103678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 361381389342842179584000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1208309537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39114,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25)) "
          },
          "14" : {
            "sign" : -83438748,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 36414026984,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24]) "
          },
          "0" : {
            "sign" : 1521433705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1215439270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 5040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#82], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -477170689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 361381389342842179584000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "18" : {
            "sign" : -885542230,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 56516569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4294524686385024000,
            "rowCount" : 71575411439750400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] "
          },
          "3" : {
            "sign" : -2611296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 439942560939112218624000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121]\n               :  +- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n               :     +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n               :        :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n               :        :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n               :        :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n               :        :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24])\n               :        :     :     :     :  +- Project [d_date_sk#25]\n               :        :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n               :        :     :     +- LogicalQueryStage Project [d_date_sk#25], BroadcastQueryStage 0\n               :        :     +- LogicalQueryStage Project [hd_demo_sk#82], BroadcastQueryStage 1\n               :        +- LogicalQueryStage Project [s_store_sk#53, s_city#75], BroadcastQueryStage 2\n               +- LogicalQueryStage Project [c_customer_sk#87, c_first_name#95, c_last_name#96], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41908099752,
        "inputRowCount" : 277050929
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 21574.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1343.0, 1388.0, 1510.0, 1816.0 ]
      },
      "StartTimeInMs" : 1702227358582,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11198,
        "IOBytes" : {
          "Total" : 499894692,
          "Details" : {
            "IR" : 214196066,
            "IW" : 0,
            "SR" : 142849313,
            "SW" : 142849313
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -83438748,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36414026984,
                "rowCount" : 239565967
              },
              "compileTime" : {
                "sizeInBytes" : 36414026984,
                "rowCount" : 239565967
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24]) "
          },
          "4" : {
            "sign" : -1871337642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#6 = hd_demo_sk#82) "
          },
          "9" : {
            "sign" : 1393239333,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#2, ss_item_sk#3, ss_customer_sk#4, ss_cdemo_sk#5, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_promo_sk#9, ss_ticket_number#10L, ss_quantity#11, ss_wholesale_cost#12, ss_list_price#13, ss_sales_price#14, ss_ext_discount_amt#15, ss_ext_sales_price#16, ss_ext_wholesale_cost#17, ss_ext_list_price#18, ss_ext_tax#19, ss_coupon_amt#20, ss_net_paid#21, ss_net_paid_inc_tax#22, ss_net_profit#23, ss_sold_date_sk#24], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1897787325,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          },
          "6" : {
            "sign" : -426415609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#24 = d_date_sk#25) "
          },
          "1" : {
            "sign" : 590092833,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 35826888418,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 35826888418,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] "
          },
          "0" : {
            "sign" : 629830314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33515476262,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 33515476262,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121] "
          },
          "2" : {
            "sign" : -1785490105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40449712730,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 40449712730,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#8 = s_store_sk#53) "
          },
          "7" : {
            "sign" : -262993362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12457430284,
                "rowCount" : 239565967
              },
              "compileTime" : {
                "sizeInBytes" : 12457430284,
                "rowCount" : 239565967
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] "
          },
          "3" : {
            "sign" : -1628289866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11951747500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 11951747500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalRelation",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121]\n+- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n   +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n      :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n      :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n      :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n      :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24])\n      :     :     :     :  +- Project [d_date_sk#25]\n      :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n      :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n      :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n      :     :     +- Project [d_date_sk#25]\n      :     :        +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n      :     +- Project [hd_demo_sk#82]\n      :        +- Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n      :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_income_band_sk#83,hd_buy_potential#84,hd_dep_count#85,hd_vehicle_count#86] parquet\n      +- Project [s_store_sk#53, s_city#75]\n         +- Filter ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53))\n            +- Relation spark_catalog.tpcds_100.store[s_store_sk#53,s_store_id#54,s_rec_start_date#55,s_rec_end_date#56,s_closed_date_sk#57,s_store_name#58,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -2082384653,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12457430284,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [8]: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#131)] PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)> "
          },
          "4" : {
            "sign" : 709386825,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_hdemo_sk#6] Right keys [1]: [hd_demo_sk#82] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1845426874,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 380,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_store_sk#53, s_city#75] Arguments: 2 "
          },
          "9" : {
            "sign" : -1831478159,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056768,
            "rowCount" : 156,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#25] Arguments: 0 "
          },
          "5" : {
            "sign" : 61460987,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12745948080,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] Input [9]: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24, d_date_sk#25] "
          },
          "10" : {
            "sign" : 988880723,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1097536,
            "rowCount" : 5040,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [hd_demo_sk#82] Arguments: 1 "
          },
          "6" : {
            "sign" : -1134444019,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#24] Right keys [1]: [d_date_sk#25] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -694469883,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 35826888418,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] Input [8]: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_store_sk#53, s_city#75] "
          },
          "0" : {
            "sign" : 24204243,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 33515476262,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75] Keys [4]: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75] Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#20)), partial_sum(UnscaledValue(ss_net_profit#23))] Aggregate Attributes [2]: [sum#132L, sum#133L] Results [6]: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L] "
          },
          "2" : {
            "sign" : -932440995,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 40449712730,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#8] Right keys [1]: [s_store_sk#53] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1819385409,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12457430284,
            "rowCount" : 239565967,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24] Condition : ((isnotnull(ss_store_sk#8) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) "
          },
          "3" : {
            "sign" : 1906109375,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23] Input [8]: [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, hd_demo_sk#82] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[partial_sum(UnscaledValue(ss_coupon_amt#20)), partial_sum(UnscaledValue(ss_net_profit#23))], output=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L])\n+- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n   +- BroadcastHashJoin [ss_store_sk#8], [s_store_sk#53], Inner, BuildRight, false\n      :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :  +- BroadcastHashJoin [ss_hdemo_sk#6], [hd_demo_sk#82], Inner, BuildRight, false\n      :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :     :  +- BroadcastHashJoin [ss_sold_date_sk#24], [d_date_sk#25], Inner, BuildRight, false\n      :     :     :- Filter ((isnotnull(ss_store_sk#8) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4))\n      :     :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#4,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_ticket_number#10L,ss_coupon_amt#20,ss_net_profit#23,ss_sold_date_sk#24] Batched: true, DataFilters: [isnotnull(ss_store_sk#8), isnotnull(ss_hdemo_sk#6), isnotnull(ss_customer_sk#4)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#131)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n      :     :     :        +- SubqueryBroadcast dynamicpruning#131, 0, [d_date_sk#25], [id=#537]\n      :     :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=534]\n      :     :     :                 +- Project [d_date_sk#25]\n      :     :     :                    +- Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n      :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n      :     :     +- BroadcastQueryStage 0\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=196]\n      :     :           +- *(1) Project [d_date_sk#25]\n      :     :              +- *(1) Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n      :     :                 +- *(1) ColumnarToRow\n      :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n      :     +- BroadcastQueryStage 1\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=217]\n      :           +- *(2) Project [hd_demo_sk#82]\n      :              +- *(2) Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n      :                 +- *(2) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_dep_count#85,hd_vehicle_count#86] Batched: true, DataFilters: [((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)), isnotnull(hd_demo_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n      +- BroadcastQueryStage 2\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=238]\n            +- *(3) Project [s_store_sk#53, s_city#75]\n               +- *(3) Filter (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53))\n                  +- *(3) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#53,s_number_employees#59,s_city#75] Batched: true, DataFilters: [isnotnull(s_number_employees#59), (s_number_employees#59 >= 200), (s_number_employees#59 <= 295)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_num..., ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12460636380,
        "inputRowCount" : 239571543
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 21574.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1343.0, 1388.0, 1510.0, 1816.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 6230,
        "TotalTasksDurationInMs" : 53427,
        "IOBytes" : {
          "Total" : 249091998,
          "Details" : {
            "IR" : 199416337,
            "IW" : 0,
            "SR" : 0,
            "SW" : 49675661
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -91516280,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 93540040,
                "rowCount" : 1375672
              },
              "compileTime" : {
                "sizeInBytes" : 33515476262,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121], HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1342554301,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 93540040,
            "rowCount" : 1375672,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L] Keys [4]: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75] Functions [2]: [sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))] Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#20))#122L, sum(UnscaledValue(ss_net_profit#23))#123L] Results [5]: [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20))#122L,17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23))#123L,17,2) AS profit#121] "
          },
          "1" : {
            "sign" : 1666692098,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 33515476262,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L] Arguments: 4 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))], output=[ss_ticket_number#10L, ss_customer_sk#4, s_city#75, amt#120, profit#121])\n+- ShuffleQueryStage 4\n   +- Exchange hashpartitioning(ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, 200), ENSURE_REQUIREMENTS, [plan_id=590]\n      +- *(5) HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[partial_sum(UnscaledValue(ss_coupon_amt#20)), partial_sum(UnscaledValue(ss_net_profit#23))], output=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L])\n         +- *(5) Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n            +- *(5) BroadcastHashJoin [ss_store_sk#8], [s_store_sk#53], Inner, BuildRight, false\n               :- *(5) Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :  +- *(5) BroadcastHashJoin [ss_hdemo_sk#6], [hd_demo_sk#82], Inner, BuildRight, false\n               :     :- *(5) Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#24], [d_date_sk#25], Inner, BuildRight, false\n               :     :     :- *(5) Filter ((isnotnull(ss_store_sk#8) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4))\n               :     :     :  +- *(5) ColumnarToRow\n               :     :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#4,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_ticket_number#10L,ss_coupon_amt#20,ss_net_profit#23,ss_sold_date_sk#24] Batched: true, DataFilters: [isnotnull(ss_store_sk#8), isnotnull(ss_hdemo_sk#6), isnotnull(ss_customer_sk#4)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#131)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n               :     :     :           +- SubqueryBroadcast dynamicpruning#131, 0, [d_date_sk#25], [id=#537]\n               :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#25], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=196]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=534]\n                                                +- Project [d_date_sk#25]\n                                                   +- Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n               :     :     +- BroadcastQueryStage 0\n               :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=196]\n               :     :           +- *(1) Project [d_date_sk#25]\n               :     :              +- *(1) Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n               :     :                 +- *(1) ColumnarToRow\n               :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n               :     +- BroadcastQueryStage 1\n               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=217]\n               :           +- *(2) Project [hd_demo_sk#82]\n               :              +- *(2) Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n               :                 +- *(2) ColumnarToRow\n               :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_dep_count#85,hd_vehicle_count#86] Batched: true, DataFilters: [((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)), isnotnull(hd_demo_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n               +- BroadcastQueryStage 2\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=238]\n                     +- *(3) Project [s_store_sk#53, s_city#75]\n                        +- *(3) Filter (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53))\n                           +- *(3) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#53,s_number_employees#59,s_city#75] Batched: true, DataFilters: [isnotnull(s_number_employees#59), (s_number_employees#59 >= 200), (s_number_employees#59 <= 295)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_num..., ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 93540040,
        "inputRowCount" : 1375672
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 262165, 260148, 254072, 263250, 262604, 260109, 253894, 255739, 264207, 260148, 263068, 258367, 257228, 260744, 257228, 253322, 258313, 262861, 263650, 260562, 263857, 258017, 264207, 260937, 263122, 261308, 255211, 263122, 257342, 258545, 261815, 258659, 257406, 258185, 263625, 262886, 264439, 261940, 262051, 263793, 265010, 259630, 261958, 259216, 258713, 263832, 259630, 255768, 257756, 263107, 256410, 260355, 256350, 258370, 264207, 251334, 263443, 261472, 265278, 258274, 265931, 259046, 265963, 261590, 261440, 262372, 260562, 264025, 261287, 265667, 262540, 259852, 262861, 261401, 261929, 259384, 262718, 262540, 261751, 255739, 256878, 265085, 261776, 263068, 261815, 267334, 264207, 262372, 260216, 260937, 253904, 259866, 260730, 261401, 263712, 264207, 256087, 255714, 258688, 260537, 263918, 263975, 265085, 255168, 259684, 268109, 264621, 250920, 261544, 260262, 261469, 259734, 260873, 263354, 256464, 261287, 256878, 262604, 256410, 262229, 262540, 259705, 257771, 259123, 258367, 263122, 260523, 265278, 259566, 260676, 258688, 256503, 259655, 257963, 256118, 262718, 260394, 256996, 264621, 259684, 257603, 263971, 256878, 265460, 264735, 257642, 264064, 263418, 259566, 262397, 260537, 261701, 262136, 255211, 261206, 248509, 258856, 257474, 251135, 259941, 261637, 264132, 263304, 262886, 265139, 265385, 260581, 266945, 259562, 268780, 260212, 262693, 263300, 268841, 265988, 254875, 262229, 270747, 261465, 260498, 262372, 263443, 255675, 257292, 256182, 265139, 262954, 271743, 263250, 259355, 262718, 264489, 259177, 264725, 257934, 256901, 267295, 262051, 261612, 264971 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 2155,
        "TotalTasksDurationInMs" : 2145,
        "IOBytes" : {
          "Total" : 90841504,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 49675661,
            "SW" : 41165843
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 538866684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] "
          },
          "5" : {
            "sign" : -644428793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27229351149,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 27229351149,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#4 = c_customer_sk#87) "
          },
          "1" : {
            "sign" : 1225657650,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24478911639,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 24478911639,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 2103637959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 9200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1290852495,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24478911639,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 24478911639,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "3" : {
            "sign" : -1273827504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121]\n      +- Sort [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], true\n         +- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n            +- Join Inner, (ss_customer_sk#4 = c_customer_sk#87)\n               :- Aggregate [ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#20)),17,2) AS amt#120, MakeDecimal(sum(UnscaledValue(ss_net_profit#23)),17,2) AS profit#121]\n               :  +- Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n               :     +- Join Inner, (ss_store_sk#8 = s_store_sk#53)\n               :        :- Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :  +- Join Inner, (ss_hdemo_sk#6 = hd_demo_sk#82)\n               :        :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n               :        :     :  +- Join Inner, (ss_sold_date_sk#24 = d_date_sk#25)\n               :        :     :     :- Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, ss_sold_date_sk#24]\n               :        :     :     :  +- Filter ((((isnotnull(ss_sold_date_sk#24) AND isnotnull(ss_store_sk#8)) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4)) AND dynamicpruning#131 [ss_sold_date_sk#24])\n               :        :     :     :     :  +- Project [d_date_sk#25]\n               :        :     :     :     :     +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#2,ss_item_sk#3,ss_customer_sk#4,ss_cdemo_sk#5,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_promo_sk#9,ss_ticket_number#10L,ss_quantity#11,ss_wholesale_cost#12,ss_list_price#13,ss_sales_price#14,ss_ext_discount_amt#15,ss_ext_sales_price#16,ss_ext_wholesale_cost#17,ss_ext_list_price#18,ss_ext_tax#19,ss_coupon_amt#20,ss_net_paid#21,ss_net_paid_inc_tax#22,ss_net_profit#23,ss_sold_date_sk#24] parquet\n               :        :     :     +- Project [d_date_sk#25]\n               :        :     :        +- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n               :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n               :        :     +- Project [hd_demo_sk#82]\n               :        :        +- Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n               :        :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_income_band_sk#83,hd_buy_potential#84,hd_dep_count#85,hd_vehicle_count#86] parquet\n               :        +- Project [s_store_sk#53, s_city#75]\n               :           +- Filter ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53))\n               :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#53,s_store_id#54,s_rec_start_date#55,s_rec_end_date#56,s_closed_date_sk#57,s_store_name#58,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet\n               +- Project [c_customer_sk#87, c_first_name#95, c_last_name#96]\n                  +- Filter isnotnull(c_customer_sk#87)\n                     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#87,c_customer_id#88,c_current_cdemo_sk#89,c_current_hdemo_sk#90,c_current_addr_sk#91,c_first_shipto_date_sk#92,c_first_sales_date_sk#93,c_salutation#94,c_first_name#95,c_last_name#96,c_preferred_cust_flag#97,c_birth_day#98,c_birth_month#99,c_birth_year#100,c_birth_country#101,c_login#102,c_email_address#103,c_last_review_date#104] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 528742860,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 82534664,
            "rowCount" : 1375672,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, amt#120, profit#121] Arguments: 5 "
          },
          "5" : {
            "sign" : 349236653,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [c_customer_sk#87, c_first_name#95, c_last_name#96] Arguments: [c_customer_sk#87 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 2005914282,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 96527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [c_customer_sk#87, c_first_name#95, c_last_name#96] Arguments: 3 "
          },
          "1" : {
            "sign" : 1841283146,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] Input [8]: [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, amt#120, profit#121, c_customer_sk#87, c_first_name#95, c_last_name#96] "
          },
          "0" : {
            "sign" : 1763447814,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 9200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75] Arguments: 100, [c_last_name#96 ASC NULLS FIRST, c_first_name#95 ASC NULLS FIRST, substr(s_city#75, 1, 30) ASC NULLS FIRST, profit#121 ASC NULLS FIRST], [c_last_name#96, c_first_name#95, substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121] "
          },
          "2" : {
            "sign" : 337335777,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 27229351149,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#4] Right keys [1]: [c_customer_sk#87] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1504561941,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_ticket_number#10L, ss_customer_sk#4, s_city#75, amt#120, profit#121] Arguments: [ss_customer_sk#4 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[c_last_name#96 ASC NULLS FIRST,c_first_name#95 ASC NULLS FIRST,substr(s_city#75, 1, 30) ASC NULLS FIRST,profit#121 ASC NULLS FIRST], output=[c_last_name#96,c_first_name#95,substr(s_city, 1, 30)#124,ss_ticket_number#10L,amt#120,profit#121])\n+- Project [c_last_name#96, c_first_name#95, substr(s_city#75, 1, 30) AS substr(s_city, 1, 30)#124, ss_ticket_number#10L, amt#120, profit#121, s_city#75]\n   +- SortMergeJoin [ss_customer_sk#4], [c_customer_sk#87], Inner\n      :- Sort [ss_customer_sk#4 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 5\n      :     +- Exchange hashpartitioning(ss_customer_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=689]\n      :        +- *(6) HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[sum(UnscaledValue(ss_coupon_amt#20)), sum(UnscaledValue(ss_net_profit#23))], output=[ss_ticket_number#10L, ss_customer_sk#4, s_city#75, amt#120, profit#121])\n      :           +- AQEShuffleRead coalesced\n      :              +- ShuffleQueryStage 4\n      :                 +- Exchange hashpartitioning(ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, 200), ENSURE_REQUIREMENTS, [plan_id=590]\n      :                    +- *(5) HashAggregate(keys=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75], functions=[partial_sum(UnscaledValue(ss_coupon_amt#20)), partial_sum(UnscaledValue(ss_net_profit#23))], output=[ss_ticket_number#10L, ss_customer_sk#4, ss_addr_sk#7, s_city#75, sum#134L, sum#135L])\n      :                       +- *(5) Project [ss_customer_sk#4, ss_addr_sk#7, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23, s_city#75]\n      :                          +- *(5) BroadcastHashJoin [ss_store_sk#8], [s_store_sk#53], Inner, BuildRight, false\n      :                             :- *(5) Project [ss_customer_sk#4, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :                             :  +- *(5) BroadcastHashJoin [ss_hdemo_sk#6], [hd_demo_sk#82], Inner, BuildRight, false\n      :                             :     :- *(5) Project [ss_customer_sk#4, ss_hdemo_sk#6, ss_addr_sk#7, ss_store_sk#8, ss_ticket_number#10L, ss_coupon_amt#20, ss_net_profit#23]\n      :                             :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#24], [d_date_sk#25], Inner, BuildRight, false\n      :                             :     :     :- *(5) Filter ((isnotnull(ss_store_sk#8) AND isnotnull(ss_hdemo_sk#6)) AND isnotnull(ss_customer_sk#4))\n      :                             :     :     :  +- *(5) ColumnarToRow\n      :                             :     :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#4,ss_hdemo_sk#6,ss_addr_sk#7,ss_store_sk#8,ss_ticket_number#10L,ss_coupon_amt#20,ss_net_profit#23,ss_sold_date_sk#24] Batched: true, DataFilters: [isnotnull(ss_store_sk#8), isnotnull(ss_hdemo_sk#6), isnotnull(ss_customer_sk#4)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#131)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n      :                             :     :     :           +- SubqueryBroadcast dynamicpruning#131, 0, [d_date_sk#25], [id=#537]\n      :                             :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     BroadcastQueryStage 1\n                                                                     +- ReusedExchange [d_date_sk#25], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=196]\n                                                                  +- == Initial Plan ==\n                                                                     BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=534]\n                                                                     +- Project [d_date_sk#25]\n                                                                        +- Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n      :                             :     :     +- BroadcastQueryStage 0\n      :                             :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=196]\n      :                             :     :           +- *(1) Project [d_date_sk#25]\n      :                             :     :              +- *(1) Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n      :                             :     :                 +- *(1) ColumnarToRow\n      :                             :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n      :                             :     +- BroadcastQueryStage 1\n      :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=217]\n      :                             :           +- *(2) Project [hd_demo_sk#82]\n      :                             :              +- *(2) Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n      :                             :                 +- *(2) ColumnarToRow\n      :                             :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_dep_count#85,hd_vehicle_count#86] Batched: true, DataFilters: [((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)), isnotnull(hd_demo_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n      :                             +- BroadcastQueryStage 2\n      :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=238]\n      :                                   +- *(3) Project [s_store_sk#53, s_city#75]\n      :                                      +- *(3) Filter (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53))\n      :                                         +- *(3) ColumnarToRow\n      :                                            +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#53,s_number_employees#59,s_city#75] Batched: true, DataFilters: [isnotnull(s_number_employees#59), (s_number_employees#59 >= 200), (s_number_employees#59 <= 295)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_num..., ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>\n      +- Sort [c_customer_sk#87 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 3\n            +- Exchange hashpartitioning(c_customer_sk#87, 200), ENSURE_REQUIREMENTS, [plan_id=267]\n               +- *(4) Filter isnotnull(c_customer_sk#87)\n                  +- *(4) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#87,c_first_name#95,c_last_name#96] Batched: true, DataFilters: [isnotnull(c_customer_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 179062512,
        "inputRowCount" : 3375672
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 198730, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603, 218603 ],
        "0" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 2068,
        "TotalTasksDurationInMs" : 3152,
        "IOBytes" : {
          "Total" : 93173652,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 93173652,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -604607614,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 60756,
                "rowCount" : 5063
              },
              "compileTime" : {
                "sizeInBytes" : 60756,
                "rowCount" : 5063
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [hd_demo_sk#82] "
          },
          "1" : {
            "sign" : -21718733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 222772,
                "rowCount" : 5063
              },
              "compileTime" : {
                "sizeInBytes" : 222772,
                "rowCount" : 5063
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82)) "
          },
          "2" : {
            "sign" : 961916025,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              },
              "compileTime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#82, hd_income_band_sk#83, hd_buy_potential#84, hd_dep_count#85, hd_vehicle_count#86], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#82]\n+- Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n   +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_income_band_sk#83,hd_buy_potential#84,hd_dep_count#85,hd_vehicle_count#86] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1919720364,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 60756,
            "rowCount" : 5063,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [hd_demo_sk#82] Input [3]: [hd_demo_sk#82, hd_dep_count#85, hd_vehicle_count#86] "
          },
          "1" : {
            "sign" : -649203683,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 60756,
            "rowCount" : 5063,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [hd_demo_sk#82, hd_dep_count#85, hd_vehicle_count#86] Condition : (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82)) "
          },
          "2" : {
            "sign" : 787809251,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 60756,
            "rowCount" : 5063,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.household_demographics Output [3]: [hd_demo_sk#82, hd_dep_count#85, hd_vehicle_count#86] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household_demographics] PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)] ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.household_demographics",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#82]\n+- Filter (((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)) AND isnotnull(hd_demo_sk#82))\n   +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#82,hd_dep_count#85,hd_vehicle_count#86] Batched: true, DataFilters: [((hd_dep_count#85 = 8) OR (hd_vehicle_count#86 > 0)), isnotnull(hd_demo_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 60756,
        "inputRowCount" : 5063
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1949,
        "TotalTasksDurationInMs" : 713,
        "IOBytes" : {
          "Total" : 31739,
          "Details" : {
            "IR" : 31739,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1351758550,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1908,
                "rowCount" : 159
              },
              "compileTime" : {
                "sizeInBytes" : 1908,
                "rowCount" : 159
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#25] "
          },
          "1" : {
            "sign" : -1208309537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39114,
                "rowCount" : 159
              },
              "compileTime" : {
                "sizeInBytes" : 39114,
                "rowCount" : 159
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25)) "
          },
          "2" : {
            "sign" : -885542230,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#25, d_date_id#26, d_date#27, d_month_seq#28, d_week_seq#29, d_quarter_seq#30, d_year#31, d_dow#32, d_moy#33, d_dom#34, d_qoy#35, d_fy_year#36, d_fy_quarter_seq#37, d_fy_week_seq#38, d_day_name#39, d_quarter_name#40, d_holiday#41, d_weekend#42, d_following_holiday#43, d_first_dom#44, d_last_dom#45, d_same_day_ly#46, d_same_day_lq#47, d_current_day#48, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#25]\n+- Filter ((isnotnull(d_dow#32) AND ((d_dow#32 = 1) AND d_year#31 IN (1998,1999,2000))) AND isnotnull(d_date_sk#25))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_date_id#26,d_date#27,d_month_seq#28,d_week_seq#29,d_quarter_seq#30,d_year#31,d_dow#32,d_moy#33,d_dom#34,d_qoy#35,d_fy_year#36,d_fy_quarter_seq#37,d_fy_week_seq#38,d_day_name#39,d_quarter_name#40,d_holiday#41,d_weekend#42,d_following_holiday#43,d_first_dom#44,d_last_dom#45,d_same_day_ly#46,d_same_day_lq#47,d_current_day#48,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -975741286,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#25] Input [3]: [d_date_sk#25, d_year#31, d_dow#32] "
          },
          "1" : {
            "sign" : -953556293,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#25, d_year#31, d_dow#32] Condition : (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25)) "
          },
          "2" : {
            "sign" : -342357542,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1908,
            "rowCount" : 159,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#25, d_year#31, d_dow#32] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#25]\n+- Filter (((isnotnull(d_dow#32) AND (d_dow#32 = 1)) AND d_year#31 IN (1998,1999,2000)) AND isnotnull(d_date_sk#25))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#25,d_year#31,d_dow#32] Batched: true, DataFilters: [isnotnull(d_dow#32), (d_dow#32 = 1), d_year#31 IN (1998,1999,2000), isnotnull(d_date_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1908,
        "inputRowCount" : 159
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2289,
        "TotalTasksDurationInMs" : 987,
        "IOBytes" : {
          "Total" : 94192,
          "Details" : {
            "IR" : 94192,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -260207175,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12988,
                "rowCount" : 382
              },
              "compileTime" : {
                "sizeInBytes" : 12988,
                "rowCount" : 382
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#53, s_city#75] "
          },
          "1" : {
            "sign" : 141585101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182978,
                "rowCount" : 382
              },
              "compileTime" : {
                "sizeInBytes" : 182978,
                "rowCount" : 382
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53)) "
          },
          "2" : {
            "sign" : -1367897490,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#53, s_store_id#54, s_rec_start_date#55, s_rec_end_date#56, s_closed_date_sk#57, s_store_name#58, s_number_employees#59, s_floor_space#60, s_hours#61, s_manager#62, s_market_id#63, s_geography_class#64, s_market_desc#65, s_market_manager#66, s_division_id#67, s_division_name#68, s_company_id#69, s_company_name#70, s_street_number#71, s_street_name#72, s_street_type#73, s_suite_number#74, s_city#75, s_county#76, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#53, s_city#75]\n+- Filter ((isnotnull(s_number_employees#59) AND ((s_number_employees#59 >= 200) AND (s_number_employees#59 <= 295))) AND isnotnull(s_store_sk#53))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#53,s_store_id#54,s_rec_start_date#55,s_rec_end_date#56,s_closed_date_sk#57,s_store_name#58,s_number_employees#59,s_floor_space#60,s_hours#61,s_manager#62,s_market_id#63,s_geography_class#64,s_market_desc#65,s_market_manager#66,s_division_id#67,s_division_name#68,s_company_id#69,s_company_name#70,s_street_number#71,s_street_name#72,s_street_type#73,s_suite_number#74,s_city#75,s_county#76,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -351326204,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12988,
            "rowCount" : 382,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [s_store_sk#53, s_city#75] Input [3]: [s_store_sk#53, s_number_employees#59, s_city#75] "
          },
          "1" : {
            "sign" : -1034000312,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12988,
            "rowCount" : 382,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#53, s_number_employees#59, s_city#75] Condition : (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53)) "
          },
          "2" : {
            "sign" : -1841143077,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12988,
            "rowCount" : 382,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#53, s_number_employees#59, s_city#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#53, s_city#75]\n+- Filter (((isnotnull(s_number_employees#59) AND (s_number_employees#59 >= 200)) AND (s_number_employees#59 <= 295)) AND isnotnull(s_store_sk#53))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#53,s_number_employees#59,s_city#75] Batched: true, DataFilters: [isnotnull(s_number_employees#59), (s_number_employees#59 >= 200), (s_number_employees#59 <= 295)..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_num..., ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12988,
        "inputRowCount" : 382
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2282,
        "TotalTasksDurationInMs" : 971,
        "IOBytes" : {
          "Total" : 15852,
          "Details" : {
            "IR" : 15852,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 168669014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 98000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 98000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#87, c_first_name#95, c_last_name#96] "
          },
          "1" : {
            "sign" : 125910025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(c_customer_sk#87) "
          },
          "2" : {
            "sign" : -1197929343,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#87, c_customer_id#88, c_current_cdemo_sk#89, c_current_hdemo_sk#90, c_current_addr_sk#91, c_first_shipto_date_sk#92, c_first_sales_date_sk#93, c_salutation#94, c_first_name#95, c_last_name#96, c_preferred_cust_flag#97, c_birth_day#98, c_birth_month#99, c_birth_year#100, c_birth_country#101, c_login#102, c_email_address#103, c_last_review_date#104], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#87, c_first_name#95, c_last_name#96]\n+- Filter isnotnull(c_customer_sk#87)\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#87,c_customer_id#88,c_current_cdemo_sk#89,c_current_hdemo_sk#90,c_current_addr_sk#91,c_first_shipto_date_sk#92,c_first_sales_date_sk#93,c_salutation#94,c_first_name#95,c_last_name#96,c_preferred_cust_flag#97,c_birth_day#98,c_birth_month#99,c_birth_year#100,c_birth_country#101,c_login#102,c_email_address#103,c_last_review_date#104] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 821377165,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 98000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [c_customer_sk#87, c_first_name#95, c_last_name#96] Condition : isnotnull(c_customer_sk#87) "
          },
          "1" : {
            "sign" : 664787733,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 98000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [3]: [c_customer_sk#87, c_first_name#95, c_last_name#96] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk)] ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(c_customer_sk#87)\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#87,c_first_name#95,c_last_name#96] Batched: true, DataFilters: [isnotnull(c_customer_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 98000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 3065,
        "TotalTasksDurationInMs" : 24595,
        "IOBytes" : {
          "Total" : 66787538,
          "Details" : {
            "IR" : 14779729,
            "IW" : 0,
            "SR" : 0,
            "SW" : 52007809
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227355261,
  "SQLEndTimeInMs" : 1702227369780,
  "Objectives" : {
    "DurationInMs" : 14519,
    "IOBytes" : {
      "Total" : 500036475,
      "Details" : {
        "IR" : 214337849,
        "IW" : 0,
        "SR" : 142849313,
        "SW" : 142849313
      }
    }
  }
}
