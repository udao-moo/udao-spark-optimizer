{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -45593592,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#98, c_customer_id#99, c_current_cdemo_sk#100, c_current_hdemo_sk#101, c_current_addr_sk#102, c_first_shipto_date_sk#103, c_first_sales_date_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 1608590622,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13L, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26, ss_sold_date_sk#27], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : 1246126948,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5310811700,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26] "
        },
        "19" : {
          "sign" : 1613840169,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 28000000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ca_zip#0], [ca_zip#0] "
        },
        "23" : {
          "sign" : -274132109,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 1314748826,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 375543648714315789,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
        },
        "15" : {
          "sign" : -1601037564,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#28, d_date_id#29, d_date#30, d_month_seq#31, d_week_seq#32, d_quarter_seq#33, d_year#34, d_dow#35, d_moy#36, d_dom#37, d_qoy#38, d_fy_year#39, d_fy_quarter_seq#40, d_fy_week_seq#41, d_day_name#42, d_quarter_name#43, d_holiday#44, d_weekend#45, d_following_holiday#46, d_first_dom#47, d_last_dom#48, d_same_day_ly#49, d_same_day_lq#50, d_current_day#51, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -107675987,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926379296,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#139 [ss_sold_date_sk#27]) "
        },
        "9" : {
          "sign" : -187357081,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7435136380,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#27 = d_date_sk#28) "
        },
        "33" : {
          "sign" : 1776952613,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 241260000,
          "rowCount" : 965040,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102)) "
        },
        "22" : {
          "sign" : 742892370,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
        },
        "26" : {
          "sign" : -2024201340,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 296496,
          "rowCount" : 8236,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ca_zip#125], [substr(ca_zip#125, 1, 5) AS ca_zip#1, count(1) AS cnt#2L] "
        },
        "13" : {
          "sign" : 1600638119,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1740,
          "rowCount" : 145,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#28] "
        },
        "24" : {
          "sign" : -248120799,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 230608,
          "rowCount" : 8236,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_zip#1] "
        },
        "16" : {
          "sign" : -1449022886,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 18090,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#56, s_store_name#61, s_zip#81] "
        },
        "5" : {
          "sign" : 740901502,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 792814369508000000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#0, 1, 2)) "
        },
        "10" : {
          "sign" : 1001362535,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6304165152,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] "
        },
        "21" : {
          "sign" : -1119372956,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 28000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#0] "
        },
        "32" : {
          "sign" : 1288826358,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11580480,
          "rowCount" : 965040,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_current_addr_sk#102] "
        },
        "6" : {
          "sign" : 324419892,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 28314798911,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61, s_zip#81] "
        },
        "1" : {
          "sign" : -193794681,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 375543648714315789,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -1657566357,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81)) "
        },
        "25" : {
          "sign" : -2144983204,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 296496,
          "rowCount" : 8236,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (cnt#2L > 10) "
        },
        "14" : {
          "sign" : -1835433505,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 35670,
          "rowCount" : 145,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28)) "
        },
        "31" : {
          "sign" : -1402152345,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#116, ca_address_id#117, ca_street_number#118, ca_street_name#119, ca_street_type#120, ca_suite_number#121, ca_city#122, ca_county#123, ca_state#124, ca_zip#125, ca_country#126, ca_gmt_offset#127, ca_location_type#128], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : 1908725228,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 3600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 352408572,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 28000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#0 <=> ca_zip#1) "
        },
        "27" : {
          "sign" : 1918681228,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 50254000,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_zip#125] "
        },
        "2" : {
          "sign" : 996035842,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 375543648714315789,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -874626872,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "30" : {
          "sign" : 526949837,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(ca_address_sk#116) "
        },
        "7" : {
          "sign" : -471134639,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 32937623223,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#11 = s_store_sk#56) "
        },
        "29" : {
          "sign" : 1876230630,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 29000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#116, ca_zip#125] "
        },
        "3" : {
          "sign" : -641829482,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 375543648714315789,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#136] "
        },
        "28" : {
          "sign" : 1741321816,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 66335280,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#116 = c_current_addr_sk#102) "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Join",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Aggregate",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Join",
        "toId" : 19,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#136]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#0, 1, 2))\n               :- Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n               :  +- Join Inner, (ss_store_sk#11 = s_store_sk#56)\n               :     :- Project [ss_store_sk#11, ss_net_profit#26]\n               :     :  +- Join Inner, (ss_sold_date_sk#27 = d_date_sk#28)\n               :     :     :- Project [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27]\n               :     :     :  +- Filter ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#139 [ss_sold_date_sk#27])\n               :     :     :     :  +- Project [d_date_sk#28]\n               :     :     :     :     +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n               :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n               :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#5,ss_item_sk#6,ss_customer_sk#7,ss_cdemo_sk#8,ss_hdemo_sk#9,ss_addr_sk#10,ss_store_sk#11,ss_promo_sk#12,ss_ticket_number#13L,ss_quantity#14,ss_wholesale_cost#15,ss_list_price#16,ss_sales_price#17,ss_ext_discount_amt#18,ss_ext_sales_price#19,ss_ext_wholesale_cost#20,ss_ext_list_price#21,ss_ext_tax#22,ss_coupon_amt#23,ss_net_paid#24,ss_net_paid_inc_tax#25,ss_net_profit#26,ss_sold_date_sk#27] parquet\n               :     :     +- Project [d_date_sk#28]\n               :     :        +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n               :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n               :     +- Project [s_store_sk#56, s_store_name#61, s_zip#81]\n               :        +- Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n               :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#56,s_store_id#57,s_rec_start_date#58,s_rec_end_date#59,s_closed_date_sk#60,s_store_name#61,s_number_employees#62,s_floor_space#63,s_hours#64,s_manager#65,s_market_id#66,s_geography_class#67,s_market_desc#68,s_market_manager#69,s_division_id#70,s_division_name#71,s_company_id#72,s_company_name#73,s_street_number#74,s_street_name#75,s_street_type#76,s_suite_number#77,s_city#78,s_county#79,... 5 more fields] parquet\n               +- Aggregate [ca_zip#0], [ca_zip#0]\n                  +- Join LeftSemi, (ca_zip#0 <=> ca_zip#1)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#0]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#1]\n                        +- Filter (cnt#2L > 10)\n                           +- Aggregate [ca_zip#125], [substr(ca_zip#125, 1, 5) AS ca_zip#1, count(1) AS cnt#2L]\n                              +- Project [ca_zip#125]\n                                 +- Join Inner, (ca_address_sk#116 = c_current_addr_sk#102)\n                                    :- Project [ca_address_sk#116, ca_zip#125]\n                                    :  +- Filter isnotnull(ca_address_sk#116)\n                                    :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#116,ca_address_id#117,ca_street_number#118,ca_street_name#119,ca_street_type#120,ca_suite_number#121,ca_city#122,ca_county#123,ca_state#124,ca_zip#125,ca_country#126,ca_gmt_offset#127,ca_location_type#128] parquet\n                                    +- Project [c_current_addr_sk#102]\n                                       +- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                          +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#98,c_customer_id#99,c_current_cdemo_sk#100,c_current_hdemo_sk#101,c_current_addr_sk#102,c_first_shipto_date_sk#103,c_first_sales_date_sk#104,c_salutation#105,c_first_name#106,c_last_name#107,c_preferred_cust_flag#108,c_birth_day#109,c_birth_month#110,c_birth_year#111,c_birth_country#112,c_login#113,c_email_address#114,c_last_review_date#115] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42817056268,
      "inputRowCount" : 279118804
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 911499290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3824298504,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "5" : {
            "sign" : -2138433848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8073519064,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 392235744,
            "rowCount" : 8171578,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 9043098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 572050037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -65686197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1658114249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 312,
            "rowCount" : 13,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[]) "
          },
          "3" : {
            "sign" : 640534185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 392236056,
        "inputRowCount" : 8171591
      },
      "PD" : {
        "2" : [ 0, 0, 0, 652129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940701, 3667503, 286003, 659544, 0, 636759, 646089, 0, 0, 1435179, 0, 0, 0, 0, 0, 1426750, 0, 0, 0, 3393762, 0, 0, 1031268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1782084, 0, 1776850, 0, 0, 0, 285074, 0, 0, 0, 1396945, 1798266, 0, 0, 0, 636748, 0, 0, 0, 1397906, 0, 0, 0, 1794322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2534503, 0, 0, 0, 0, 2164807, 0, 643321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5624985, 0, 646640, 0, 0, 278085, 0, 0, 0, 0, 0, 0, 625751, 0, 0, 0, 0, 0, 638060, 0, 0, 0, 0, 0, 2556704, 0, 0, 0, 0, 0, 6134209, 0, 0, 0, 0, 0, 0, 0, 0, 1397117, 0, 0, 1725860, 0, 0, 0, 0, 1413975, 0, 0, 0, 0, 0, 633185, 0, 1777870, 0, 0, 0, 3303620, 0, 0, 0, 0, 640770, 1030692, 0, 0, 3914077, 0, 669323, 0, 0, 0, 0, 0, 0, 0, 2131653, 0, 0, 998518, 0, 0, 0, 0, 0, 0, 0, 1046294, 0, 0, 0, 0, 0, 0, 0, 1405567, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226573483,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2785,
        "IOBytes" : {
          "Total" : 68293931,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 68292412,
            "SW" : 1519
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -691460336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26481924000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "8" : {
            "sign" : -710596676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "4" : {
            "sign" : 525501984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "15" : {
            "sign" : 1641842703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26481924000000,
            "rowCount" : 945783000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#154] "
          },
          "11" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "13" : {
            "sign" : -1543454500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34048188000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          },
          "16" : {
            "sign" : -1266657993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34048188000000,
            "rowCount" : 945783000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#145 = c_current_addr_sk#102) "
          },
          "5" : {
            "sign" : -2134765698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792814369508000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 1443894608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1379298137,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31758904,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : -631728057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 34048188000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L] "
          },
          "0" : {
            "sign" : -2039820891,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -873651633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 841313912,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15132528,
            "rowCount" : 945783,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_addr_sk#102], ShuffleQueryStage 3 "
          },
          "7" : {
            "sign" : -1128077167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "3" : {
            "sign" : -1137743969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#141]\n                        +- Filter (cnt#142L > 10)\n                           +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n                              +- Project [ca_zip#154]\n                                 +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n                                    :- LogicalQueryStage Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2\n                                    +- LogicalQueryStage Project [c_current_addr_sk#102], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28607690343,
        "inputRowCount" : 580798822
      },
      "PD" : {
        "1" : [ 26854, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 26854, 24413, 24413, 26854, 26854, 26854, 24413, 24413, 26854 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 5903.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 442.0, 1034.0, 1053.0, 1056.0 ]
      },
      "StartTimeInMs" : 1702226569489,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6779,
        "IOBytes" : {
          "Total" : 189806839,
          "Details" : {
            "IR" : 38139793,
            "IW" : 0,
            "SR" : 83277539,
            "SW" : 68389507
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -2105392128,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3824298504,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "5" : {
            "sign" : 1920690450,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8073519064,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 392235744,
            "rowCount" : 8171578,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 1457960832,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 741800965,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1860418031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1150344143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33555456,
            "rowCount" : 13,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[]), BroadcastQueryStage 8 "
          },
          "3" : {
            "sign" : -277067183,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- LogicalQueryStage LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[]), BroadcastQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 425791200,
        "inputRowCount" : 8171591
      },
      "PD" : {
        "2" : [ 0, 0, 0, 652129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940701, 3667503, 286003, 659544, 0, 636759, 646089, 0, 0, 1435179, 0, 0, 0, 0, 0, 1426750, 0, 0, 0, 3393762, 0, 0, 1031268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1782084, 0, 1776850, 0, 0, 0, 285074, 0, 0, 0, 1396945, 1798266, 0, 0, 0, 636748, 0, 0, 0, 1397906, 0, 0, 0, 1794322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2534503, 0, 0, 0, 0, 2164807, 0, 643321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5624985, 0, 646640, 0, 0, 278085, 0, 0, 0, 0, 0, 0, 625751, 0, 0, 0, 0, 0, 638060, 0, 0, 0, 0, 0, 2556704, 0, 0, 0, 0, 0, 6134209, 0, 0, 0, 0, 0, 0, 0, 0, 1397117, 0, 0, 1725860, 0, 0, 0, 0, 1413975, 0, 0, 0, 0, 0, 633185, 0, 1777870, 0, 0, 0, 3303620, 0, 0, 0, 0, 640770, 1030692, 0, 0, 3914077, 0, 669323, 0, 0, 0, 0, 0, 0, 0, 2131653, 0, 0, 998518, 0, 0, 0, 0, 0, 0, 0, 1046294, 0, 0, 0, 0, 0, 0, 0, 1405567, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226573900,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2368,
        "IOBytes" : {
          "Total" : 68293105,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 68291586,
            "SW" : 1519
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 232058907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 191688,
            "rowCount" : 6846,
            "isRuntime" : true,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "8" : {
            "sign" : -342930177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "4" : {
            "sign" : 1257943083,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "11" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "13" : {
            "sign" : 1951174559,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246456,
            "rowCount" : 6846,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          },
          "5" : {
            "sign" : 1416234817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792814369508000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : -1596715501,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -1017284014,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 219064,
            "rowCount" : 6846,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L], HashAggregate(keys=[ca_zip#154], functions=[count(1)]) "
          },
          "0" : {
            "sign" : 1949897776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1876491866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1866951324,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "3" : {
            "sign" : 1741040866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#141]\n                        +- Filter (cnt#142L > 10)\n                           +- LogicalQueryStage Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L], HashAggregate(keys=[ca_zip#154], functions=[count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28561017975,
        "inputRowCount" : 578859885
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14199.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 993.0, 1053.0, 2754.0, 2774.0 ]
      },
      "StartTimeInMs" : 1702226571155,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5113,
        "IOBytes" : {
          "Total" : 174821712,
          "Details" : {
            "IR" : 38139793,
            "IW" : 0,
            "SR" : 68389507,
            "SW" : 68292412
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 381291397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 720,
            "rowCount" : 20,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1774566710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 640,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1784573531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 640,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1671492165,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 640,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160], HashAggregate(keys=[s_store_name#61], functions=[sum(UnscaledValue(ss_net_profit#26))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160], HashAggregate(keys=[s_store_name#61], functions=[sum(UnscaledValue(ss_net_profit#26))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 640,
        "inputRowCount" : 20
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226575680,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 588,
        "IOBytes" : {
          "Total" : 1519,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1519,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 648867056,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33685504,
            "rowCount" : 3706,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_zip#141], BroadcastQueryStage 6 "
          },
          "8" : {
            "sign" : -531016870,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "4" : {
            "sign" : 912981376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "11" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "5" : {
            "sign" : -1155616036,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792814369508000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : -1968975442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1703637243,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 954084463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -710863823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "3" : {
            "sign" : -303427331,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- LogicalQueryStage Project [ca_zip#141], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28594484415,
        "inputRowCount" : 578856745
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14199.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 993.0, 1053.0, 2754.0, 2774.0 ]
      },
      "StartTimeInMs" : 1702226571396,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4872,
        "IOBytes" : {
          "Total" : 174724617,
          "Details" : {
            "IR" : 38139793,
            "IW" : 0,
            "SR" : 68292412,
            "SW" : 68292412
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1608590622,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13L, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26, ss_sold_date_sk#27], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 877879354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 478065857360,
            "rowCount" : 23903292868,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26] "
          },
          "19" : {
            "sign" : -710596676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "23" : {
            "sign" : -691460336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 230608,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "4" : {
            "sign" : -1641439421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "15" : {
            "sign" : -1601037564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#28, d_date_id#29, d_date#30, d_month_seq#31, d_week_seq#32, d_quarter_seq#33, d_year#34, d_dow#35, d_moy#36, d_dom#37, d_qoy#38, d_fy_year#39, d_fy_quarter_seq#40, d_fy_week_seq#41, d_day_name#42, d_quarter_name#43, d_holiday#44, d_weekend#45, d_following_holiday#46, d_first_dom#47, d_last_dom#48, d_same_day_ly#49, d_same_day_lq#50, d_current_day#51, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 1852035460,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27]) "
          },
          "9" : {
            "sign" : 1201278929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 669292200304,
            "rowCount" : 23903292868,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#27 = d_date_sk#28) "
          },
          "22" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : 1641842703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50254000,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#154] "
          },
          "13" : {
            "sign" : 1600638119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1740,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#28] "
          },
          "24" : {
            "sign" : -1543454500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          },
          "16" : {
            "sign" : -1424883994,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#28], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1849760133,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792814369508000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : -1226974018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304165152,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] "
          },
          "21" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : -2130894482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61, s_zip#81] "
          },
          "1" : {
            "sign" : -1483717545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1725812814,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18090,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#56, s_store_name#61, s_zip#81], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : -631728057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L] "
          },
          "14" : {
            "sign" : -1835433505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 35670,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28)) "
          },
          "0" : {
            "sign" : -421365538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "27" : {
            "sign" : -1266657993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 66335280,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#145 = c_current_addr_sk#102) "
          },
          "2" : {
            "sign" : 181659700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1128077167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "7" : {
            "sign" : 660267459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 32937623223,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#11 = s_store_sk#56) "
          },
          "29" : {
            "sign" : 841313912,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_addr_sk#102], ShuffleQueryStage 3 "
          },
          "3" : {
            "sign" : -767030170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          },
          "28" : {
            "sign" : 1379298137,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 29000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n               :  +- Join Inner, (ss_store_sk#11 = s_store_sk#56)\n               :     :- Project [ss_store_sk#11, ss_net_profit#26]\n               :     :  +- Join Inner, (ss_sold_date_sk#27 = d_date_sk#28)\n               :     :     :- Project [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27]\n               :     :     :  +- Filter ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27])\n               :     :     :     :  +- Project [d_date_sk#28]\n               :     :     :     :     +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n               :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n               :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#5,ss_item_sk#6,ss_customer_sk#7,ss_cdemo_sk#8,ss_hdemo_sk#9,ss_addr_sk#10,ss_store_sk#11,ss_promo_sk#12,ss_ticket_number#13L,ss_quantity#14,ss_wholesale_cost#15,ss_list_price#16,ss_sales_price#17,ss_ext_discount_amt#18,ss_ext_sales_price#19,ss_ext_wholesale_cost#20,ss_ext_list_price#21,ss_ext_tax#22,ss_coupon_amt#23,ss_net_paid#24,ss_net_paid_inc_tax#25,ss_net_profit#26,ss_sold_date_sk#27] parquet\n               :     :     +- LogicalQueryStage Project [d_date_sk#28], BroadcastQueryStage 0\n               :     +- LogicalQueryStage Project [s_store_sk#56, s_store_name#61, s_zip#81], BroadcastQueryStage 1\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#141]\n                        +- Filter (cnt#142L > 10)\n                           +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n                              +- Project [ca_zip#154]\n                                 +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n                                    :- LogicalQueryStage Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2\n                                    +- LogicalQueryStage Project [c_current_addr_sk#102], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 42094541530,
        "inputRowCount" : 278010886
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 19,
        "FinishedTasksTotalTimeInMs" : 18054.0,
        "FinishedTasksDistributionInMs" : [ 27.0, 55.0, 1348.0, 1537.0, 1655.0 ]
      },
      "StartTimeInMs" : 1702226567492,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8776,
        "IOBytes" : {
          "Total" : 218962626,
          "Details" : {
            "IR" : 52407548,
            "IW" : 0,
            "SR" : 83277539,
            "SW" : 83277539
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1608590622,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13L, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26, ss_sold_date_sk#27], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 877879354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 478065857360,
            "rowCount" : 23903292868,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26] "
          },
          "19" : {
            "sign" : -710596676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "23" : {
            "sign" : -691460336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 230608,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "4" : {
            "sign" : -1641439421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7137050216799622736842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "15" : {
            "sign" : -1601037564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#28, d_date_id#29, d_date#30, d_month_seq#31, d_week_seq#32, d_quarter_seq#33, d_year#34, d_dow#35, d_moy#36, d_dom#37, d_qoy#38, d_fy_year#39, d_fy_quarter_seq#40, d_fy_week_seq#41, d_day_name#42, d_quarter_name#43, d_holiday#44, d_weekend#45, d_following_holiday#46, d_first_dom#47, d_last_dom#48, d_same_day_ly#49, d_same_day_lq#50, d_current_day#51, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 1852035460,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27]) "
          },
          "9" : {
            "sign" : 1201278929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 669292200304,
            "rowCount" : 23903292868,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#27 = d_date_sk#28) "
          },
          "22" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : 1641842703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50254000,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#154] "
          },
          "13" : {
            "sign" : 1600638119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1740,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#28] "
          },
          "24" : {
            "sign" : -1543454500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          },
          "16" : {
            "sign" : -1424883994,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#28], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1849760133,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 15067106013243648000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : -1226974018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304165152,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] "
          },
          "21" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : -2130894482,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 538110929044416,
            "rowCount" : 9609123732936,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61, s_zip#81] "
          },
          "1" : {
            "sign" : -1483717545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7137050216799622736842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1725812814,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#56, s_store_name#61, s_zip#81], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : -631728057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L] "
          },
          "14" : {
            "sign" : -1835433505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 35670,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28)) "
          },
          "0" : {
            "sign" : -421365538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "27" : {
            "sign" : -1266657993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 66335280,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#145 = c_current_addr_sk#102) "
          },
          "2" : {
            "sign" : 181659700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7137050216799622736842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1128077167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "7" : {
            "sign" : 660267459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 614983918907904,
            "rowCount" : 9609123732936,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#11 = s_store_sk#56) "
          },
          "29" : {
            "sign" : 841313912,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_addr_sk#102], ShuffleQueryStage 3 "
          },
          "3" : {
            "sign" : -767030170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7137050216799622736842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          },
          "28" : {
            "sign" : 1379298137,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 29000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n               :  +- Join Inner, (ss_store_sk#11 = s_store_sk#56)\n               :     :- Project [ss_store_sk#11, ss_net_profit#26]\n               :     :  +- Join Inner, (ss_sold_date_sk#27 = d_date_sk#28)\n               :     :     :- Project [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27]\n               :     :     :  +- Filter ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27])\n               :     :     :     :  +- Project [d_date_sk#28]\n               :     :     :     :     +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n               :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n               :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#5,ss_item_sk#6,ss_customer_sk#7,ss_cdemo_sk#8,ss_hdemo_sk#9,ss_addr_sk#10,ss_store_sk#11,ss_promo_sk#12,ss_ticket_number#13L,ss_quantity#14,ss_wholesale_cost#15,ss_list_price#16,ss_sales_price#17,ss_ext_discount_amt#18,ss_ext_sales_price#19,ss_ext_wholesale_cost#20,ss_ext_list_price#21,ss_ext_tax#22,ss_coupon_amt#23,ss_net_paid#24,ss_net_paid_inc_tax#25,ss_net_profit#26,ss_sold_date_sk#27] parquet\n               :     :     +- LogicalQueryStage Project [d_date_sk#28], BroadcastQueryStage 0\n               :     +- LogicalQueryStage Project [s_store_sk#56, s_store_name#61, s_zip#81], BroadcastQueryStage 1\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#141]\n                        +- Filter (cnt#142L > 10)\n                           +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n                              +- Project [ca_zip#154]\n                                 +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n                                    :- LogicalQueryStage Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2\n                                    +- LogicalQueryStage Project [c_current_addr_sk#102], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 42095575232,
        "inputRowCount" : 278010886
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 19,
        "FinishedTasksTotalTimeInMs" : 18054.0,
        "FinishedTasksDistributionInMs" : [ 27.0, 55.0, 1348.0, 1537.0, 1655.0 ]
      },
      "StartTimeInMs" : 1702226567644,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8624,
        "IOBytes" : {
          "Total" : 218947378,
          "Details" : {
            "IR" : 52392300,
            "IW" : 0,
            "SR" : 83277539,
            "SW" : 83277539
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 911499290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5202284604631578,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "5" : {
            "sign" : -2138433848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10982600832000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 392235744,
            "rowCount" : 8171578,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 9043098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5202284604631578,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 572050037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -65686197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5202284604631578,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1658114249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[]) "
          },
          "3" : {
            "sign" : 640534185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5202284604631578,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 420235744,
        "inputRowCount" : 8171578
      },
      "PD" : {
        "2" : [ 0, 0, 0, 652129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940701, 3667503, 286003, 659544, 0, 636759, 646089, 0, 0, 1435179, 0, 0, 0, 0, 0, 1426750, 0, 0, 0, 3393762, 0, 0, 1031268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1782084, 0, 1776850, 0, 0, 0, 285074, 0, 0, 0, 1396945, 1798266, 0, 0, 0, 636748, 0, 0, 0, 1397906, 0, 0, 0, 1794322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2534503, 0, 0, 0, 0, 2164807, 0, 643321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5624985, 0, 646640, 0, 0, 278085, 0, 0, 0, 0, 0, 0, 625751, 0, 0, 0, 0, 0, 638060, 0, 0, 0, 0, 0, 2556704, 0, 0, 0, 0, 0, 6134209, 0, 0, 0, 0, 0, 0, 0, 0, 1397117, 0, 0, 1725860, 0, 0, 0, 0, 1413975, 0, 0, 0, 0, 0, 633185, 0, 1777870, 0, 0, 0, 3303620, 0, 0, 0, 0, 640770, 1030692, 0, 0, 3914077, 0, 669323, 0, 0, 0, 0, 0, 0, 0, 2131653, 0, 0, 998518, 0, 0, 0, 0, 0, 0, 0, 1046294, 0, 0, 0, 0, 0, 0, 0, 1405567, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 1238.0,
        "FinishedTasksDistributionInMs" : [ 274.0, 294.0, 331.0, 339.0, 339.0 ]
      },
      "StartTimeInMs" : 1702226572014,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4254,
        "IOBytes" : {
          "Total" : 70002495,
          "Details" : {
            "IR" : 1707738,
            "IW" : 0,
            "SR" : 68292412,
            "SW" : 2345
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -691460336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27021120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "8" : {
            "sign" : -710596676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "4" : {
            "sign" : 525501984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "15" : {
            "sign" : 1641842703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27021120000000,
            "rowCount" : 965040000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#154] "
          },
          "11" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "13" : {
            "sign" : -1543454500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34741440000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          },
          "16" : {
            "sign" : -1266657993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34741440000000,
            "rowCount" : 965040000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#145 = c_current_addr_sk#102) "
          },
          "5" : {
            "sign" : -2134765698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792814369508000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "10" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          },
          "6" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 1443894608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1379298137,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31758904,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : -631728057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 34741440000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L] "
          },
          "0" : {
            "sign" : -2039820891,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -873651633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 841313912,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_addr_sk#102], ShuffleQueryStage 3 "
          },
          "7" : {
            "sign" : -1128077167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "3" : {
            "sign" : -1137743969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 375543648714315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- Aggregate [ca_zip#140], [ca_zip#140]\n                  +- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n                     :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                     :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n                     +- Project [ca_zip#141]\n                        +- Filter (cnt#142L > 10)\n                           +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n                              +- Project [ca_zip#154]\n                                 +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n                                    :- LogicalQueryStage Project [ca_address_sk#145, ca_zip#154], ShuffleQueryStage 2\n                                    +- LogicalQueryStage Project [c_current_addr_sk#102], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28604138295,
        "inputRowCount" : 580818079
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 11939.0,
        "FinishedTasksDistributionInMs" : [ 27.0, 47.0, 1323.0, 1476.0, 1605.0 ]
      },
      "StartTimeInMs" : 1702226568511,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7757,
        "IOBytes" : {
          "Total" : 203209018,
          "Details" : {
            "IR" : 46680264,
            "IW" : 0,
            "SR" : 83277539,
            "SW" : 73251215
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1658114249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 312,
                "rowCount" : 13
              },
              "compileTime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -124850110,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 312,
            "rowCount" : 13,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [ca_zip#140] Keys [1]: [ca_zip#140] Functions: [] Aggregate Attributes: [] Results [1]: [ca_zip#140] "
          },
          "1" : {
            "sign" : -1612642325,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [ca_zip#140] Arguments: 7 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n+- ShuffleQueryStage 7\n   +- Exchange hashpartitioning(ca_zip#140, 200), ENSURE_REQUIREMENTS, [plan_id=1180]\n      +- *(10) HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n         +- *(10) BroadcastHashJoin [coalesce(ca_zip#140, ), isnull(ca_zip#140)], [coalesce(ca_zip#141, ), isnull(ca_zip#141)], LeftSemi, BuildRight, false\n            :- *(10) Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n            :  +- *(10) Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n            :     +- *(10) ColumnarToRow\n            :        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_zip#94] Batched: true, DataFilters: [substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>\n            +- BroadcastQueryStage 6\n               +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [plan_id=1079]\n                  +- *(9) Project [ca_zip#141]\n                     +- *(9) Filter (cnt#142L > 10)\n                        +- *(9) HashAggregate(keys=[ca_zip#154], functions=[count(1)], output=[ca_zip#141, cnt#142L])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 5\n                                 +- Exchange hashpartitioning(ca_zip#154, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n                                    +- *(8) HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n                                       +- *(8) Project [ca_zip#154]\n                                          +- *(8) SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n                                             :- *(6) Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n                                             :  +- AQEShuffleRead coalesced\n                                             :     +- ShuffleQueryStage 2\n                                             :        +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n                                             :           +- *(3) Filter isnotnull(ca_address_sk#145)\n                                             :              +- *(3) ColumnarToRow\n                                             :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n                                             +- *(7) Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n                                                +- AQEShuffleRead coalesced\n                                                   +- ShuffleQueryStage 3\n                                                      +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n                                                         +- *(4) Project [c_current_addr_sk#102]\n                                                            +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                                               +- *(4) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 312,
        "inputRowCount" : 13
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 325,
        "TotalTasksDurationInMs" : 318,
        "IOBytes" : {
          "Total" : 826,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 826,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1226974018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6304165152,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 6304165152,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] "
          },
          "5" : {
            "sign" : 1852035460,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27]) "
          },
          "6" : {
            "sign" : 1608590622,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_cdemo_sk#8, ss_hdemo_sk#9, ss_addr_sk#10, ss_store_sk#11, ss_promo_sk#12, ss_ticket_number#13L, ss_quantity#14, ss_wholesale_cost#15, ss_list_price#16, ss_sales_price#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, ss_ext_tax#22, ss_coupon_amt#23, ss_net_paid#24, ss_net_paid_inc_tax#25, ss_net_profit#26, ss_sold_date_sk#27], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 217457050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32937623223,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 32937623223,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#11 = s_store_sk#56) "
          },
          "0" : {
            "sign" : 1415524029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28314798911,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 28314798911,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61, s_zip#81] "
          },
          "2" : {
            "sign" : -1443523525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#11, ss_net_profit#26] "
          },
          "3" : {
            "sign" : -1771094224,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#27 = d_date_sk#28) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalRelation",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n+- Join Inner, (ss_store_sk#11 = s_store_sk#56)\n   :- Project [ss_store_sk#11, ss_net_profit#26]\n   :  +- Join Inner, (ss_sold_date_sk#27 = d_date_sk#28)\n   :     :- Project [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27]\n   :     :  +- Filter ((isnotnull(ss_sold_date_sk#27) AND isnotnull(ss_store_sk#11)) AND dynamicpruning#163 [ss_sold_date_sk#27])\n   :     :     :  +- Project [d_date_sk#28]\n   :     :     :     +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n   :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n   :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#5,ss_item_sk#6,ss_customer_sk#7,ss_cdemo_sk#8,ss_hdemo_sk#9,ss_addr_sk#10,ss_store_sk#11,ss_promo_sk#12,ss_ticket_number#13L,ss_quantity#14,ss_wholesale_cost#15,ss_list_price#16,ss_sales_price#17,ss_ext_discount_amt#18,ss_ext_sales_price#19,ss_ext_wholesale_cost#20,ss_ext_list_price#21,ss_ext_tax#22,ss_coupon_amt#23,ss_net_paid#24,ss_net_paid_inc_tax#25,ss_net_profit#26,ss_sold_date_sk#27] parquet\n   :     +- Project [d_date_sk#28]\n   :        +- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n   +- Project [s_store_sk#56, s_store_name#61, s_zip#81]\n      +- Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#56,s_store_id#57,s_rec_start_date#58,s_rec_end_date#59,s_closed_date_sk#60,s_store_name#61,s_number_employees#62,s_floor_space#63,s_hours#64,s_manager#65,s_market_id#66,s_geography_class#67,s_market_desc#68,s_market_manager#69,s_division_id#70,s_division_name#71,s_company_id#72,s_company_name#73,s_street_number#74,s_street_name#75,s_street_type#76,s_suite_number#77,s_city#78,s_county#79,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -341166983,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6304165152,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] Condition : isnotnull(ss_store_sk#11) "
          },
          "5" : {
            "sign" : -45456146,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6304165152,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#163)] PushedFilters: [IsNotNull(ss_store_sk)] ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)> "
          },
          "6" : {
            "sign" : 1257057321,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#28] Arguments: 0 "
          },
          "1" : {
            "sign" : -1745800277,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 32937623223,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#11] Right keys [1]: [s_store_sk#56] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1572867614,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 28314798911,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_net_profit#26, s_store_name#61, s_zip#81] Input [5]: [ss_store_sk#11, ss_net_profit#26, s_store_sk#56, s_store_name#61, s_zip#81] "
          },
          "2" : {
            "sign" : 729747974,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_store_sk#11, ss_net_profit#26] Input [4]: [ss_store_sk#11, ss_net_profit#26, ss_sold_date_sk#27, d_date_sk#28] "
          },
          "7" : {
            "sign" : -2009857780,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [s_store_sk#56, s_store_name#61, s_zip#81] Arguments: 1 "
          },
          "3" : {
            "sign" : 145339199,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#27] Right keys [1]: [d_date_sk#28] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n+- BroadcastHashJoin [ss_store_sk#11], [s_store_sk#56], Inner, BuildRight, false\n   :- Project [ss_store_sk#11, ss_net_profit#26]\n   :  +- BroadcastHashJoin [ss_sold_date_sk#27], [d_date_sk#28], Inner, BuildRight, false\n   :     :- Filter isnotnull(ss_store_sk#11)\n   :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#11,ss_net_profit#26,ss_sold_date_sk#27] Batched: true, DataFilters: [isnotnull(ss_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#163)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>\n   :     :        +- SubqueryBroadcast dynamicpruning#163, 0, [d_date_sk#28], [id=#672]\n   :     :           +- AdaptiveSparkPlan isFinalPlan=false\n   :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=669]\n   :     :                 +- Project [d_date_sk#28]\n   :     :                    +- Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n   :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n   :     +- BroadcastQueryStage 0\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=291]\n   :           +- *(1) Project [d_date_sk#28]\n   :              +- *(1) Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n   :                 +- *(1) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n   +- BroadcastQueryStage 1\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=310]\n         +- *(2) Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n            +- *(2) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#56,s_store_name#61,s_zip#81] Batched: true, DataFilters: [isnotnull(s_store_sk#56), isnotnull(s_zip#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6306266248,
        "inputRowCount" : 262674041
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 19,
        "FinishedTasksTotalTimeInMs" : 18054.0,
        "FinishedTasksDistributionInMs" : [ 27.0, 55.0, 1348.0, 1537.0, 1655.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 4176,
        "TotalTasksDurationInMs" : 39111,
        "IOBytes" : {
          "Total" : 104722122,
          "Details" : {
            "IR" : 36432055,
            "IW" : 0,
            "SR" : 0,
            "SW" : 68290067
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 640534185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160] "
          },
          "1" : {
            "sign" : 911499290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : 106230514
              },
              "compileTime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : 106230514
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#26, s_store_name#61] "
          },
          "2" : {
            "sign" : -2138433848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8073519064,
                "rowCount" : 106230514
              },
              "compileTime" : {
                "sizeInBytes" : 8073519064,
                "rowCount" : 106230514
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2)) "
          },
          "3" : {
            "sign" : 925200765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 392235744,
                "rowCount" : 8171578
              },
              "compileTime" : {
                "sizeInBytes" : 28314798911,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n+- Project [ss_net_profit#26, s_store_name#61]\n   +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n      :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n      +- LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1296530135,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33555456,
            "rowCount" : 13,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_zip#140] Arguments: 8 "
          },
          "1" : {
            "sign" : 563893100,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3824298504,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_net_profit#26, s_store_name#61] Input [4]: [ss_net_profit#26, s_store_name#61, s_zip#81, ca_zip#140] "
          },
          "0" : {
            "sign" : -1823125074,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ss_net_profit#26, s_store_name#61] Keys [1]: [s_store_name#61] Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#26))] Aggregate Attributes [1]: [sum#164L] Results [2]: [s_store_name#61, sum#165L] "
          },
          "2" : {
            "sign" : -238827692,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8073519064,
            "rowCount" : 106230514,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [substr(s_zip#81, 1, 2)] Right keys [1]: [substr(ca_zip#140, 1, 2)] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -107317173,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 392235744,
            "rowCount" : 8171578,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_net_profit#26, s_store_name#61, s_zip#81] Arguments: 4 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_name#61], functions=[partial_sum(UnscaledValue(ss_net_profit#26))], output=[s_store_name#61, sum#165L])\n+- Project [ss_net_profit#26, s_store_name#61]\n   +- BroadcastHashJoin [substr(s_zip#81, 1, 2)], [substr(ca_zip#140, 1, 2)], Inner, BuildRight, false\n      :- ShuffleQueryStage 4\n      :  +- Exchange hashpartitioning(substr(s_zip#81, 1, 2), 200), ENSURE_REQUIREMENTS, [plan_id=709]\n      :     +- *(5) Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n      :        +- *(5) BroadcastHashJoin [ss_store_sk#11], [s_store_sk#56], Inner, BuildRight, false\n      :           :- *(5) Project [ss_store_sk#11, ss_net_profit#26]\n      :           :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#27], [d_date_sk#28], Inner, BuildRight, false\n      :           :     :- *(5) Filter isnotnull(ss_store_sk#11)\n      :           :     :  +- *(5) ColumnarToRow\n      :           :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#11,ss_net_profit#26,ss_sold_date_sk#27] Batched: true, DataFilters: [isnotnull(ss_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#163)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>\n      :           :     :           +- SubqueryBroadcast dynamicpruning#163, 0, [d_date_sk#28], [id=#672]\n      :           :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#28], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=291]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=669]\n                                             +- Project [d_date_sk#28]\n                                                +- Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n      :           :     +- BroadcastQueryStage 0\n      :           :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=291]\n      :           :           +- *(1) Project [d_date_sk#28]\n      :           :              +- *(1) Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n      :           :                 +- *(1) ColumnarToRow\n      :           :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n      :           +- BroadcastQueryStage 1\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=310]\n      :                 +- *(2) Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n      :                    +- *(2) ColumnarToRow\n      :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#56,s_store_name#61,s_zip#81] Batched: true, DataFilters: [isnotnull(s_store_sk#56), isnotnull(s_zip#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>\n      +- BroadcastQueryStage 8\n         +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=1285]\n            +- *(11) HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 7\n                     +- Exchange hashpartitioning(ca_zip#140, 200), ENSURE_REQUIREMENTS, [plan_id=1180]\n                        +- *(10) HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n                           +- *(10) BroadcastHashJoin [coalesce(ca_zip#140, ), isnull(ca_zip#140)], [coalesce(ca_zip#141, ), isnull(ca_zip#141)], LeftSemi, BuildRight, false\n                              :- *(10) Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                              :  +- *(10) Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                              :     +- *(10) ColumnarToRow\n                              :        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_zip#94] Batched: true, DataFilters: [substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>\n                              +- BroadcastQueryStage 6\n                                 +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [plan_id=1079]\n                                    +- *(9) Project [ca_zip#141]\n                                       +- *(9) Filter (cnt#142L > 10)\n                                          +- *(9) HashAggregate(keys=[ca_zip#154], functions=[count(1)], output=[ca_zip#141, cnt#142L])\n                                             +- AQEShuffleRead coalesced\n                                                +- ShuffleQueryStage 5\n                                                   +- Exchange hashpartitioning(ca_zip#154, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n                                                      +- *(8) HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n                                                         +- *(8) Project [ca_zip#154]\n                                                            +- *(8) SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n                                                               :- *(6) Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n                                                               :  +- AQEShuffleRead coalesced\n                                                               :     +- ShuffleQueryStage 2\n                                                               :        +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n                                                               :           +- *(3) Filter isnotnull(ca_address_sk#145)\n                                                               :              +- *(3) ColumnarToRow\n                                                               :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n                                                               +- *(7) Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n                                                                  +- AQEShuffleRead coalesced\n                                                                     +- ShuffleQueryStage 3\n                                                                        +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n                                                                           +- *(4) Project [c_current_addr_sk#102]\n                                                                              +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                                                                 +- *(4) ColumnarToRow\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 425791200,
        "inputRowCount" : 8171591
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 0, 0, 0, 652129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940701, 3667503, 286003, 659544, 0, 636759, 646089, 0, 0, 1435179, 0, 0, 0, 0, 0, 1426750, 0, 0, 0, 3393762, 0, 0, 1031268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1782084, 0, 1776850, 0, 0, 0, 285074, 0, 0, 0, 1396945, 1798266, 0, 0, 0, 636748, 0, 0, 0, 1397906, 0, 0, 0, 1794322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2534503, 0, 0, 0, 0, 2164807, 0, 643321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5624985, 0, 646640, 0, 0, 278085, 0, 0, 0, 0, 0, 0, 625751, 0, 0, 0, 0, 0, 638060, 0, 0, 0, 0, 0, 2556704, 0, 0, 0, 0, 0, 6134209, 0, 0, 0, 0, 0, 0, 0, 0, 1397117, 0, 0, 1725860, 0, 0, 0, 0, 1413975, 0, 0, 0, 0, 0, 633185, 0, 1777870, 0, 0, 0, 3303620, 0, 0, 0, 0, 640770, 1030692, 0, 0, 3914077, 0, 669323, 0, 0, 0, 0, 0, 0, 0, 2131653, 0, 0, 998518, 0, 0, 0, 0, 0, 0, 0, 1046294, 0, 0, 0, 0, 0, 0, 0, 1405567, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 1667,
        "TotalTasksDurationInMs" : 3288,
        "IOBytes" : {
          "Total" : 68291586,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 68290067,
            "SW" : 1519
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1773987879,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 296496,
                "rowCount" : 8236
              },
              "compileTime" : {
                "sizeInBytes" : 296496,
                "rowCount" : 8236
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L] "
          },
          "1" : {
            "sign" : -1441962441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 50254000,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 50254000,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#154] "
          },
          "2" : {
            "sign" : 965677353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 66335280,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 66335280,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#145 = c_current_addr_sk#102) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n+- Project [ca_zip#154]\n   +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n      :- Project [ca_address_sk#145, ca_zip#154]\n      :  +- Filter isnotnull(ca_address_sk#145)\n      :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_address_id#146,ca_street_number#147,ca_street_name#148,ca_street_type#149,ca_suite_number#150,ca_city#151,ca_county#152,ca_state#153,ca_zip#154,ca_country#155,ca_gmt_offset#156,ca_location_type#157] parquet\n      +- Project [c_current_addr_sk#102]\n         +- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#98,c_customer_id#99,c_current_cdemo_sk#100,c_current_hdemo_sk#101,c_current_addr_sk#102,c_first_shipto_date_sk#103,c_first_sales_date_sk#104,c_salutation#105,c_first_name#106,c_last_name#107,c_preferred_cust_flag#108,c_birth_day#109,c_birth_month#110,c_birth_year#111,c_birth_country#112,c_login#113,c_email_address#114,c_last_review_date#115] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1042933394,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 31758904,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#145, ca_zip#154] Arguments: 2 "
          },
          "5" : {
            "sign" : -2139395550,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [c_current_addr_sk#102] Arguments: [c_current_addr_sk#102 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1517570850,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 15132528,
            "rowCount" : 945783,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [c_current_addr_sk#102] Arguments: 3 "
          },
          "1" : {
            "sign" : -575717239,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 50254000,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_zip#154] Input [3]: [ca_address_sk#145, ca_zip#154, c_current_addr_sk#102] "
          },
          "0" : {
            "sign" : 694405295,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [ca_zip#154] Keys [1]: [ca_zip#154] Functions [1]: [partial_count(1)] Aggregate Attributes [1]: [count#166L] Results [2]: [ca_zip#154, count#167L] "
          },
          "2" : {
            "sign" : -212345899,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 66335280,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ca_address_sk#145] Right keys [1]: [c_current_addr_sk#102] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -2116068011,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#145, ca_zip#154] Arguments: [ca_address_sk#145 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n+- Project [ca_zip#154]\n   +- SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n      :- Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 2\n      :     +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n      :        +- *(3) Filter isnotnull(ca_address_sk#145)\n      :           +- *(3) ColumnarToRow\n      :              +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n      +- Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 3\n            +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n               +- *(4) Project [c_current_addr_sk#102]\n                  +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                     +- *(4) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 46891432,
        "inputRowCount" : 1945783
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 26854, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 26854, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 26854, 26854, 26854, 24413, 24413, 26854, 26854, 24413, 24413, 26854, 26854, 26854, 24413, 24413, 26854 ],
        "0" : [ 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 5903.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 442.0, 1034.0, 1053.0, 1056.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 1361,
        "TotalTasksDurationInMs" : 1350,
        "IOBytes" : {
          "Total" : 14985127,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 14888032,
            "SW" : 97095
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 572050037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 9043098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -65686197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3824298504,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_store_name#61 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_store_name#61 ASC NULLS FIRST], true\n      +- Aggregate [s_store_name#61], [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26)),17,2) AS sum(ss_net_profit)#160]\n         +- Project [ss_net_profit#26, s_store_name#61]\n            +- Join Inner, (substr(s_zip#81, 1, 2) = substr(ca_zip#140, 1, 2))\n               :- LogicalQueryStage Project [ss_net_profit#26, s_store_name#61, s_zip#81], ShuffleQueryStage 4\n               +- LogicalQueryStage Aggregate [ca_zip#140], [ca_zip#140], HashAggregate(keys=[ca_zip#140], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 895983015,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [2]: [s_store_name#61, sum(ss_net_profit)#160] Arguments: 100, [s_store_name#61 ASC NULLS FIRST], [s_store_name#61, sum(ss_net_profit)#160] "
          },
          "1" : {
            "sign" : -236822409,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 640,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [s_store_name#61, sum#165L] Keys [1]: [s_store_name#61] Functions [1]: [sum(UnscaledValue(ss_net_profit#26))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#26))#159L] Results [2]: [s_store_name#61, MakeDecimal(sum(UnscaledValue(ss_net_profit#26))#159L,17,2) AS sum(ss_net_profit)#160] "
          },
          "2" : {
            "sign" : 2109548482,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3824298504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_store_name#61, sum#165L] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[s_store_name#61 ASC NULLS FIRST], output=[s_store_name#61,sum(ss_net_profit)#160])\n+- HashAggregate(keys=[s_store_name#61], functions=[sum(UnscaledValue(ss_net_profit#26))], output=[s_store_name#61, sum(ss_net_profit)#160])\n   +- ShuffleQueryStage 9\n      +- Exchange hashpartitioning(s_store_name#61, 200), ENSURE_REQUIREMENTS, [plan_id=1341]\n         +- *(12) HashAggregate(keys=[s_store_name#61], functions=[partial_sum(UnscaledValue(ss_net_profit#26))], output=[s_store_name#61, sum#165L])\n            +- *(12) Project [ss_net_profit#26, s_store_name#61]\n               +- *(12) BroadcastHashJoin [substr(s_zip#81, 1, 2)], [substr(ca_zip#140, 1, 2)], Inner, BuildRight, false\n                  :- AQEShuffleRead local\n                  :  +- ShuffleQueryStage 4\n                  :     +- Exchange hashpartitioning(substr(s_zip#81, 1, 2), 200), ENSURE_REQUIREMENTS, [plan_id=709]\n                  :        +- *(5) Project [ss_net_profit#26, s_store_name#61, s_zip#81]\n                  :           +- *(5) BroadcastHashJoin [ss_store_sk#11], [s_store_sk#56], Inner, BuildRight, false\n                  :              :- *(5) Project [ss_store_sk#11, ss_net_profit#26]\n                  :              :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#27], [d_date_sk#28], Inner, BuildRight, false\n                  :              :     :- *(5) Filter isnotnull(ss_store_sk#11)\n                  :              :     :  +- *(5) ColumnarToRow\n                  :              :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#11,ss_net_profit#26,ss_sold_date_sk#27] Batched: true, DataFilters: [isnotnull(ss_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#163)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>\n                  :              :     :           +- SubqueryBroadcast dynamicpruning#163, 0, [d_date_sk#28], [id=#672]\n                  :              :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#28], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=291]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=669]\n                                                            +- Project [d_date_sk#28]\n                                                               +- Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n                  :              :     +- BroadcastQueryStage 0\n                  :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=291]\n                  :              :           +- *(1) Project [d_date_sk#28]\n                  :              :              +- *(1) Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n                  :              :                 +- *(1) ColumnarToRow\n                  :              :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n                  :              +- BroadcastQueryStage 1\n                  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=310]\n                  :                    +- *(2) Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n                  :                       +- *(2) ColumnarToRow\n                  :                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#56,s_store_name#61,s_zip#81] Batched: true, DataFilters: [isnotnull(s_store_sk#56), isnotnull(s_zip#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>\n                  +- BroadcastQueryStage 8\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=1285]\n                        +- *(11) HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 7\n                                 +- Exchange hashpartitioning(ca_zip#140, 200), ENSURE_REQUIREMENTS, [plan_id=1180]\n                                    +- *(10) HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n                                       +- *(10) BroadcastHashJoin [coalesce(ca_zip#140, ), isnull(ca_zip#140)], [coalesce(ca_zip#141, ), isnull(ca_zip#141)], LeftSemi, BuildRight, false\n                                          :- *(10) Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n                                          :  +- *(10) Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n                                          :     +- *(10) ColumnarToRow\n                                          :        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_zip#94] Batched: true, DataFilters: [substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>\n                                          +- BroadcastQueryStage 6\n                                             +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [plan_id=1079]\n                                                +- *(9) Project [ca_zip#141]\n                                                   +- *(9) Filter (cnt#142L > 10)\n                                                      +- *(9) HashAggregate(keys=[ca_zip#154], functions=[count(1)], output=[ca_zip#141, cnt#142L])\n                                                         +- AQEShuffleRead coalesced\n                                                            +- ShuffleQueryStage 5\n                                                               +- Exchange hashpartitioning(ca_zip#154, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n                                                                  +- *(8) HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n                                                                     +- *(8) Project [ca_zip#154]\n                                                                        +- *(8) SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n                                                                           :- *(6) Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n                                                                           :  +- AQEShuffleRead coalesced\n                                                                           :     +- ShuffleQueryStage 2\n                                                                           :        +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n                                                                           :           +- *(3) Filter isnotnull(ca_address_sk#145)\n                                                                           :              +- *(3) ColumnarToRow\n                                                                           :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n                                                                           +- *(7) Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n                                                                              +- AQEShuffleRead coalesced\n                                                                                 +- ShuffleQueryStage 3\n                                                                                    +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n                                                                                       +- *(4) Project [c_current_addr_sk#102]\n                                                                                          +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                                                                             +- *(4) ColumnarToRow\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 640,
        "inputRowCount" : 20
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 476,
        "TotalTasksDurationInMs" : 467,
        "IOBytes" : {
          "Total" : 1519,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1519,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2130604752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 230608,
                "rowCount" : 8236
              },
              "compileTime" : {
                "sizeInBytes" : 230608,
                "rowCount" : 8236
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_zip#141] "
          },
          "1" : {
            "sign" : -195055350,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 296496,
                "rowCount" : 8236
              },
              "compileTime" : {
                "sizeInBytes" : 296496,
                "rowCount" : 8236
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#142L > 10) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_zip#141]\n+- Filter (cnt#142L > 10)\n   +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n      +- Project [ca_zip#154]\n         +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n            :- Project [ca_address_sk#145, ca_zip#154]\n            :  +- Filter isnotnull(ca_address_sk#145)\n            :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_address_id#146,ca_street_number#147,ca_street_name#148,ca_street_type#149,ca_suite_number#150,ca_city#151,ca_county#152,ca_state#153,ca_zip#154,ca_country#155,ca_gmt_offset#156,ca_location_type#157] parquet\n            +- Project [c_current_addr_sk#102]\n               +- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                  +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#98,c_customer_id#99,c_current_cdemo_sk#100,c_current_hdemo_sk#101,c_current_addr_sk#102,c_first_shipto_date_sk#103,c_first_sales_date_sk#104,c_salutation#105,c_first_name#106,c_last_name#107,c_preferred_cust_flag#108,c_birth_day#109,c_birth_month#110,c_birth_year#111,c_birth_country#112,c_login#113,c_email_address#114,c_last_review_date#115] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1285289411,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 230608,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_zip#141] Input [2]: [ca_zip#141, cnt#142L] "
          },
          "1" : {
            "sign" : 1043261529,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_zip#141, cnt#142L] Condition : (cnt#142L > 10) "
          },
          "2" : {
            "sign" : -1385134164,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 219064,
            "rowCount" : 6846,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [ca_zip#154, count#167L] Keys [1]: [ca_zip#154] Functions [1]: [count(1)] Aggregate Attributes [1]: [count(1)#143L] Results [2]: [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1)#143L AS cnt#142L] "
          },
          "3" : {
            "sign" : 1021453825,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 296496,
            "rowCount" : 8236,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_zip#154, count#167L] Arguments: 5 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_zip#141]\n+- Filter (cnt#142L > 10)\n   +- HashAggregate(keys=[ca_zip#154], functions=[count(1)], output=[ca_zip#141, cnt#142L])\n      +- ShuffleQueryStage 5\n         +- Exchange hashpartitioning(ca_zip#154, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n            +- *(8) HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n               +- *(8) Project [ca_zip#154]\n                  +- *(8) SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n                     :- *(6) Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n                     :  +- AQEShuffleRead coalesced\n                     :     +- ShuffleQueryStage 2\n                     :        +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n                     :           +- *(3) Filter isnotnull(ca_address_sk#145)\n                     :              +- *(3) ColumnarToRow\n                     :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n                     +- *(7) Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 3\n                              +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n                                 +- *(4) Project [c_current_addr_sk#102]\n                                    +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                       +- *(4) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 219064,
        "inputRowCount" : 6846
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 593, 490, 539, 445, 593, 490, 539, 490, 405, 405, 652, 490, 445, 593, 368, 539, 445, 539, 539, 490, 405, 539, 490, 490, 593, 490, 445, 717, 539, 490, 593, 445, 445, 490, 445, 539, 539, 490, 490, 490, 490, 490, 490, 593, 368, 539, 539, 445, 445, 445, 405, 539, 490, 368, 490, 445, 445, 405, 405, 445, 445, 539, 539, 539, 539, 490, 445, 539, 593, 490, 539, 717, 539, 789, 490, 490, 368, 652, 652, 539, 445, 539, 593, 593, 490, 405, 539, 490, 593, 445, 539, 334, 539, 490, 539, 652, 539, 490, 368, 445, 490, 539, 445, 445, 445, 368, 368, 445, 490, 490, 445, 539, 593, 490, 539, 717, 593, 539, 490, 490, 539, 490, 539, 445, 539, 539, 593, 539, 405, 490, 445, 593, 593, 652, 490, 652, 593, 652, 334, 539, 405, 652, 490, 490, 539, 490, 490, 539, 539, 539, 539, 539, 368, 445, 539, 593, 490, 490, 445, 593, 593, 368, 539, 490, 539, 539, 539, 405, 717, 490, 490, 652, 593, 445, 445, 539, 445, 334, 539, 405, 593, 490, 405, 593, 652, 334, 539, 652, 490, 445, 539, 539, 490, 490, 490, 445, 539, 445, 539, 490 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14199.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 993.0, 1053.0, 2754.0, 2774.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 77,
        "TotalTasksDurationInMs" : 67,
        "IOBytes" : {
          "Total" : 97095,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 97095,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1449022886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18090,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 18090,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#56, s_store_name#61, s_zip#81] "
          },
          "1" : {
            "sign" : -1657566357,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81)) "
          },
          "2" : {
            "sign" : -874626872,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#56, s_store_id#57, s_rec_start_date#58, s_rec_end_date#59, s_closed_date_sk#60, s_store_name#61, s_number_employees#62, s_floor_space#63, s_hours#64, s_manager#65, s_market_id#66, s_geography_class#67, s_market_desc#68, s_market_manager#69, s_division_id#70, s_division_name#71, s_company_id#72, s_company_name#73, s_street_number#74, s_street_name#75, s_street_type#76, s_suite_number#77, s_city#78, s_county#79, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#56, s_store_name#61, s_zip#81]\n+- Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#56,s_store_id#57,s_rec_start_date#58,s_rec_end_date#59,s_closed_date_sk#60,s_store_name#61,s_number_employees#62,s_floor_space#63,s_hours#64,s_manager#65,s_market_id#66,s_geography_class#67,s_market_desc#68,s_market_manager#69,s_division_id#70,s_division_name#71,s_company_id#72,s_company_name#73,s_street_number#74,s_street_name#75,s_street_type#76,s_suite_number#77,s_city#78,s_county#79,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1725936871,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 18090,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#56, s_store_name#61, s_zip#81] Condition : (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81)) "
          },
          "1" : {
            "sign" : -569434556,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 18090,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#56, s_store_name#61, s_zip#81] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)] ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#56,s_store_name#61,s_zip#81] Batched: true, DataFilters: [isnotnull(s_store_sk#56), isnotnull(s_zip#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 18090,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1797,
        "TotalTasksDurationInMs" : 1774,
        "IOBytes" : {
          "Total" : 15248,
          "Details" : {
            "IR" : 15248,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1600638119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1740,
                "rowCount" : 145
              },
              "compileTime" : {
                "sizeInBytes" : 1740,
                "rowCount" : 145
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#28] "
          },
          "1" : {
            "sign" : -1835433505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 35670,
                "rowCount" : 145
              },
              "compileTime" : {
                "sizeInBytes" : 35670,
                "rowCount" : 145
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28)) "
          },
          "2" : {
            "sign" : -1601037564,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#28, d_date_id#29, d_date#30, d_month_seq#31, d_week_seq#32, d_quarter_seq#33, d_year#34, d_dow#35, d_moy#36, d_dom#37, d_qoy#38, d_fy_year#39, d_fy_quarter_seq#40, d_fy_week_seq#41, d_day_name#42, d_quarter_name#43, d_holiday#44, d_weekend#45, d_following_holiday#46, d_first_dom#47, d_last_dom#48, d_same_day_ly#49, d_same_day_lq#50, d_current_day#51, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#28]\n+- Filter (((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND ((d_qoy#38 = 1) AND (d_year#34 = 2002))) AND isnotnull(d_date_sk#28))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_date_id#29,d_date#30,d_month_seq#31,d_week_seq#32,d_quarter_seq#33,d_year#34,d_dow#35,d_moy#36,d_dom#37,d_qoy#38,d_fy_year#39,d_fy_quarter_seq#40,d_fy_week_seq#41,d_day_name#42,d_quarter_name#43,d_holiday#44,d_weekend#45,d_following_holiday#46,d_first_dom#47,d_last_dom#48,d_same_day_ly#49,d_same_day_lq#50,d_current_day#51,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1278915280,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1740,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#28] Input [3]: [d_date_sk#28, d_year#34, d_qoy#38] "
          },
          "1" : {
            "sign" : -248447132,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1740,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#28, d_year#34, d_qoy#38] Condition : ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28)) "
          },
          "2" : {
            "sign" : 873095403,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1740,
            "rowCount" : 145,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#28, d_year#34, d_qoy#38] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#28]\n+- Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 1)) AND (d_year#34 = 2002)) AND isnotnull(d_date_sk#28))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#28,d_year#34,d_qoy#38] Batched: true, DataFilters: [isnotnull(d_qoy#38), isnotnull(d_year#34), (d_qoy#38 = 1), (d_year#34 = 2002), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1740,
        "inputRowCount" : 145
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1601,
        "TotalTasksDurationInMs" : 1593,
        "IOBytes" : {
          "Total" : 93845,
          "Details" : {
            "IR" : 93845,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2022792081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 29000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#145, ca_zip#154] "
          },
          "1" : {
            "sign" : 1474742776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ca_address_sk#145) "
          },
          "2" : {
            "sign" : -925310866,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#145, ca_address_id#146, ca_street_number#147, ca_street_name#148, ca_street_type#149, ca_suite_number#150, ca_city#151, ca_county#152, ca_state#153, ca_zip#154, ca_country#155, ca_gmt_offset#156, ca_location_type#157], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#145, ca_zip#154]\n+- Filter isnotnull(ca_address_sk#145)\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_address_id#146,ca_street_number#147,ca_street_name#148,ca_street_type#149,ca_suite_number#150,ca_city#151,ca_county#152,ca_state#153,ca_zip#154,ca_country#155,ca_gmt_offset#156,ca_location_type#157] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1360900887,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 29000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#145, ca_zip#154] Condition : isnotnull(ca_address_sk#145) "
          },
          "1" : {
            "sign" : -1431534497,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 29000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#145, ca_zip#154] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(ca_address_sk#145)\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2831,
        "TotalTasksDurationInMs" : 8859,
        "IOBytes" : {
          "Total" : 15738360,
          "Details" : {
            "IR" : 5712036,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10026324
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -274132109,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#85, ca_address_id#86, ca_street_number#87, ca_street_name#88, ca_street_type#89, ca_suite_number#90, ca_city#91, ca_county#92, ca_state#93, ca_zip#94, ca_country#95, ca_gmt_offset#96, ca_location_type#97], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1762017686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ca_zip#140 <=> ca_zip#141) "
          },
          "0" : {
            "sign" : 322812623,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_zip#140], [ca_zip#140] "
          },
          "2" : {
            "sign" : -2099204921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 28000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [substr(ca_zip#94, 1, 5) AS ca_zip#140] "
          },
          "3" : {
            "sign" : 742892370,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ca_zip#140], [ca_zip#140]\n+- Join LeftSemi, (ca_zip#140 <=> ca_zip#141)\n   :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n   :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n   :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#85,ca_address_id#86,ca_street_number#87,ca_street_name#88,ca_street_type#89,ca_suite_number#90,ca_city#91,ca_county#92,ca_state#93,ca_zip#94,ca_country#95,ca_gmt_offset#96,ca_location_type#97] parquet\n   +- Project [ca_zip#141]\n      +- Filter (cnt#142L > 10)\n         +- Aggregate [ca_zip#154], [substr(ca_zip#154, 1, 5) AS ca_zip#141, count(1) AS cnt#142L]\n            +- Project [ca_zip#154]\n               +- Join Inner, (ca_address_sk#145 = c_current_addr_sk#102)\n                  :- Project [ca_address_sk#145, ca_zip#154]\n                  :  +- Filter isnotnull(ca_address_sk#145)\n                  :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_address_id#146,ca_street_number#147,ca_street_name#148,ca_street_type#149,ca_suite_number#150,ca_city#151,ca_county#152,ca_state#153,ca_zip#154,ca_country#155,ca_gmt_offset#156,ca_location_type#157] parquet\n                  +- Project [c_current_addr_sk#102]\n                     +- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                        +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#98,c_customer_id#99,c_current_cdemo_sk#100,c_current_hdemo_sk#101,c_current_addr_sk#102,c_first_shipto_date_sk#103,c_first_sales_date_sk#104,c_salutation#105,c_first_name#106,c_last_name#107,c_preferred_cust_flag#108,c_birth_day#109,c_birth_month#110,c_birth_year#111,c_birth_country#112,c_login#113,c_email_address#114,c_last_review_date#115] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1663844887,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [1]: [ca_zip#94] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] ReadSchema: struct<ca_zip:string> "
          },
          "5" : {
            "sign" : -146399396,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33685504,
            "rowCount" : 3706,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_zip#141] Arguments: 6 "
          },
          "1" : {
            "sign" : -998269219,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [coalesce(ca_zip#140, ), isnull(ca_zip#140)] Right keys [2]: [coalesce(ca_zip#141, ), isnull(ca_zip#141)] Join type: LeftSemi Join condition: None "
          },
          "0" : {
            "sign" : 309997198,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 28000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [ca_zip#140] Keys [1]: [ca_zip#140] Functions: [] Aggregate Attributes: [] Results [1]: [ca_zip#140] "
          },
          "2" : {
            "sign" : 1915355755,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [substr(ca_zip#94, 1, 5) AS ca_zip#140] Input [1]: [ca_zip#94] "
          },
          "3" : {
            "sign" : 1009440566,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 28000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [ca_zip#94] Condition : (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ca_zip#140], functions=[], output=[ca_zip#140])\n+- BroadcastHashJoin [coalesce(ca_zip#140, ), isnull(ca_zip#140)], [coalesce(ca_zip#141, ), isnull(ca_zip#141)], LeftSemi, BuildRight, false\n   :- Project [substr(ca_zip#94, 1, 5) AS ca_zip#140]\n   :  +- Filter (substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748819, 11376, 11395, 11433, 11622, 11635, 1192959403, 13036, 13261, 1335521801, 13395, 13414, 13842, 1417281410, 14276, 14354, 14410, 14933, 14946, 15482, 1552636496, 15560, 15884, 16022, 16072, 16165, 16515, 16737, 16808, 17819, 17959, 18377, 18427, 18586, 1871790226, 18767, 18799, 18840, 18842, 18846, 19053, 19124, 19454, 19736, 19770, 19850, 2000518384, 20223, 20261, 20961, 2106857666, 21077, 2115615799, 21203, 21204, 21218, 21286, 21309, 21360, 2150517184, 21744, 21757, 22745, 2292630123, 22928, 22977, 23054, 23427, 23969, 24611, 2467766446, 25004, 25251, 25612, 25683, 25734, 25797, 2606673146, 26234, 26696, 26705, 26935, 2738558049, 27413, 27670, 28055, 28286, 28806, 28810, 29467, 29742, 29785, 29898, 30045, 3021461024, 30379, 30432, 30868, 3088447484, 31897, 32200, 32322, 32779, 3289559004, 32936, 32961, 33032, 33113, 33283, 33562, 33790, 34175, 34425, 35375, 35851, 3590119506, 35943, 36447, 36503, 36580, 36610, 3663510827, 3687148121, 37119, 37562, 37931, 38123, 38177, 38360, 38936, 39050, 39734, 39736, 3993625632, 40758, 4081125990, 40921, 40936, 4110089951, 41249, 41368, 41369, 4179325002, 41967, 4239320132, 42548, 42961, 43286, 4390566979, 43933, 44166, 44439, 45013, 45486, 45539, 45550, 45907, 46047, 4608130202, 46346, 47208, 47306, 47513, 47546, 4804345645, 48375, 48584, 48649, 49124, 49157, 49231, 49247, 49521, 4961389977, 49661, 50497, 50530, 50723, 50906, 51061, 51744, 51799, 52226, 52232, 52406, 5286899194, 52940, 53121, 53535, 53582, 54010, 54191, 54561, 55307, 55349, 55607, 55854, 5644776619, 56458, 56648, 56692, 56979, 57042, 57350, 5764815009, 57835, 5785656372, 58149, 58200, 5842940697, 58471, 59080, 59362, 59785, 60069, 60915, 61068, 61125, 61163, 61265, 61451, 61869, 62878, 6319754853, 6329414664, 6351228944, 63792, 63982, 64008, 65085, 65690, 67031, 67298, 67393, 67898, 68310, 68908, 69036, 69297, 69998, 70067, 70070, 70467, 7047072008, 70873, 71286, 71381, 71850, 71853, 72550, 72666, 73520, 73957, 74621, 74703, 75692, 76232, 76615, 77209, 77471, 77557, 78298, 7889014090, 7914470373, 7930715492, 80015, 8007279188, 80218, 8033274535, 80614, 80619, 8075249858, 81020, 8108767468, 81427, 81450, 81625, 81980, 82276, 82564, 82626, 83103, 83326, 83550, 83583, 83658, 83712, 83927, 84093, 84861, 84936, 85778, 86057, 86199, 86709, 87291, 88191, 88376, 88500, 88601, 8909162378, 8933888425, 89436, 89531, 90733, 90885, 91068, 91137, 91830, 91911, 91946, 92309, 92397, 9245413376, 92713, 93578, 93815, 94167, 94203, 94627, 94808, 95042, 9544758581, 9546422246, 9580619303, 96577, 96976, 97790, 9829417921, 98360, 99149, 9922382637, 99447, 9955569399, 9982343276, 99900 AND isnotnull(substr(ca_zip#94, 1, 5)))\n   :     +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_zip#94] Batched: true, DataFilters: [substr(ca_zip#94, 1, 5) INSET 10094, 10391, 10502, 1068814868, 10866, 1111014329, 11201, 1135748..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>\n   +- BroadcastQueryStage 6\n      +- BroadcastExchange HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true])),false), [plan_id=1079]\n         +- *(9) Project [ca_zip#141]\n            +- *(9) Filter (cnt#142L > 10)\n               +- *(9) HashAggregate(keys=[ca_zip#154], functions=[count(1)], output=[ca_zip#141, cnt#142L])\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 5\n                        +- Exchange hashpartitioning(ca_zip#154, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n                           +- *(8) HashAggregate(keys=[ca_zip#154], functions=[partial_count(1)], output=[ca_zip#154, count#167L])\n                              +- *(8) Project [ca_zip#154]\n                                 +- *(8) SortMergeJoin [ca_address_sk#145], [c_current_addr_sk#102], Inner\n                                    :- *(6) Sort [ca_address_sk#145 ASC NULLS FIRST], false, 0\n                                    :  +- AQEShuffleRead coalesced\n                                    :     +- ShuffleQueryStage 2\n                                    :        +- Exchange hashpartitioning(ca_address_sk#145, 200), ENSURE_REQUIREMENTS, [plan_id=329]\n                                    :           +- *(3) Filter isnotnull(ca_address_sk#145)\n                                    :              +- *(3) ColumnarToRow\n                                    :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#145,ca_zip#154] Batched: true, DataFilters: [isnotnull(ca_address_sk#145)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n                                    +- *(7) Sort [c_current_addr_sk#102 ASC NULLS FIRST], false, 0\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 3\n                                             +- Exchange hashpartitioning(c_current_addr_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=348]\n                                                +- *(4) Project [c_current_addr_sk#102]\n                                                   +- *(4) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n                                                      +- *(4) ColumnarToRow\n                                                         +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 61685504,
        "inputRowCount" : 1003706
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 14199.0,
        "FinishedTasksDistributionInMs" : [ 286.0, 993.0, 1053.0, 2754.0, 2774.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 1955,
        "TotalTasksDurationInMs" : 3186,
        "IOBytes" : {
          "Total" : 1708564,
          "Details" : {
            "IR" : 1707738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 826
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1288826358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11580480,
                "rowCount" : 965040
              },
              "compileTime" : {
                "sizeInBytes" : 11580480,
                "rowCount" : 965040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_addr_sk#102] "
          },
          "1" : {
            "sign" : 1776952613,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 241260000,
                "rowCount" : 965040
              },
              "compileTime" : {
                "sizeInBytes" : 241260000,
                "rowCount" : 965040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102)) "
          },
          "2" : {
            "sign" : -45593592,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#98, c_customer_id#99, c_current_cdemo_sk#100, c_current_hdemo_sk#101, c_current_addr_sk#102, c_first_shipto_date_sk#103, c_first_sales_date_sk#104, c_salutation#105, c_first_name#106, c_last_name#107, c_preferred_cust_flag#108, c_birth_day#109, c_birth_month#110, c_birth_year#111, c_birth_country#112, c_login#113, c_email_address#114, c_last_review_date#115], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_current_addr_sk#102]\n+- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#98,c_customer_id#99,c_current_cdemo_sk#100,c_current_hdemo_sk#101,c_current_addr_sk#102,c_first_shipto_date_sk#103,c_first_sales_date_sk#104,c_salutation#105,c_first_name#106,c_last_name#107,c_preferred_cust_flag#108,c_birth_day#109,c_birth_month#110,c_birth_year#111,c_birth_country#112,c_login#113,c_email_address#114,c_last_review_date#115] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 110318897,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [c_current_addr_sk#102] Input [2]: [c_current_addr_sk#102, c_preferred_cust_flag#108] "
          },
          "1" : {
            "sign" : -1047983966,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [c_current_addr_sk#102, c_preferred_cust_flag#108] Condition : ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102)) "
          },
          "2" : {
            "sign" : 992730079,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11580480,
            "rowCount" : 965040,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [2]: [c_current_addr_sk#102, c_preferred_cust_flag#108] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)] ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_current_addr_sk#102]\n+- Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))\n   +- FileScan parquet spark_catalog.tpcds_100.customer[c_current_addr_sk#102,c_preferred_cust_flag#108] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#108), (c_preferred_cust_flag#108 = Y), isnotnull(c_current_addr_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11580480,
        "inputRowCount" : 965040
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 3652,
        "TotalTasksDurationInMs" : 15573,
        "IOBytes" : {
          "Total" : 13402179,
          "Details" : {
            "IR" : 8540471,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4861708
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226564330,
  "SQLEndTimeInMs" : 1702226576268,
  "Objectives" : {
    "DurationInMs" : 11938,
    "IOBytes" : {
      "Total" : 219056471,
      "Details" : {
        "IR" : 52501393,
        "IW" : 0,
        "SR" : 83277539,
        "SW" : 83277539
      }
    }
  }
}
