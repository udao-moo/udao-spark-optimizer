{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 1135771231,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#457, d_date_id#458, d_date#459, d_month_seq#460, d_week_seq#461, d_quarter_seq#462, d_year#463, d_dow#464, d_moy#465, d_dom#466, d_qoy#467, d_fy_year#468, d_fy_quarter_seq#469, d_fy_week_seq#470, d_day_name#471, d_quarter_name#472, d_holiday#473, d_weekend#474, d_following_holiday#475, d_first_dom#476, d_last_dom#477, d_same_day_ly#478, d_same_day_lq#479, d_current_day#480, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "34" : {
          "sign" : 581090763,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 17054190121,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_brand#409, i_category#413, cs_sales_price#443, d_year#463, d_moy#465, cc_name#491] "
        },
        "67" : {
          "sign" : 112486153,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11979065,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#521, i_brand#529, i_category#533] "
        },
        "12" : {
          "sign" : 1354071844,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 21042000,
          "rowCount" : 200400,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#0, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#137] "
        },
        "66" : {
          "sign" : -26528440,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#577, d_date_id#578, d_date#579, d_month_seq#580, d_week_seq#581, d_quarter_seq#582, d_year#583, d_dow#584, d_moy#585, d_dom#586, d_qoy#587, d_fy_year#588, d_fy_quarter_seq#589, d_fy_week_seq#590, d_day_name#591, d_quarter_name#592, d_holiday#593, d_weekend#594, d_following_holiday#595, d_first_dom#596, d_last_dom#597, d_same_day_ly#598, d_same_day_lq#599, d_current_day#600, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "51" : {
          "sign" : -646398585,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#485, cc_call_center_id#486, cc_rec_start_date#487, cc_rec_end_date#488, cc_closed_date_sk#489, cc_open_date_sk#490, cc_name#491, cc_class#492, cc_employees#493, cc_sq_ft#494, cc_hours#495, cc_manager#496, cc_mkt_id#497, cc_mkt_class#498, cc_mkt_desc#499, cc_market_manager#500, cc_division#501, cc_division_name#502, cc_company#503, cc_company_name#504, cc_street_number#505, cc_street_name#506, cc_street_type#507, cc_suite_number#508, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1480315736,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 25616347,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#1) AND (avg_monthly_sales#1 > 0.000000)) AND CASE WHEN (avg_monthly_sales#1 > 0.000000) THEN ((abs((sum_sales#0 - avg_monthly_sales#1)) / avg_monthly_sales#1) > 0.1000000000000000) END) "
        },
        "19" : {
          "sign" : -2092120978,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3991570660,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] "
        },
        "23" : {
          "sign" : 2125736862,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 171954,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63)) "
        },
        "62" : {
          "sign" : 2071665312,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651667760,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#557) AND isnotnull(cs_sold_date_sk#576)) AND isnotnull(cs_call_center_sk#553)) AND dynamicpruning#643 [cs_sold_date_sk#576]) "
        },
        "4" : {
          "sign" : -1767850867,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5187977891591434070310,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#533) AND (i_brand#15 = i_brand#529)) AND (cc_name#97 = cc_name#611)) AND (rn#2 = (rn#640 - 1))) "
        },
        "40" : {
          "sign" : 737160641,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3991570660,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#433, cs_item_sk#437, cs_sales_price#443, cs_sold_date_sk#456] "
        },
        "15" : {
          "sign" : -742022378,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10790583975,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
        },
        "11" : {
          "sign" : -676523533,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 21956869,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#2], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
        },
        "9" : {
          "sign" : -1249784522,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 25616347,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [avg(_w0#137) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#1], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
        },
        "44" : {
          "sign" : -1879559770,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 171954,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((d_year#463 = 2000) OR ((d_year#463 = 1999) AND (d_moy#465 = 12))) OR ((d_year#463 = 2001) AND (d_moy#465 = 1))) AND isnotnull(d_date_sk#457)) "
        },
        "33" : {
          "sign" : 1075230551,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 19438800,
          "rowCount" : 200400,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_category#413, i_brand#409, cc_name#491, d_year#463, d_moy#465], [i_category#413, i_brand#409, cc_name#491, d_year#463, d_moy#465, MakeDecimal(sum(UnscaledValue(cs_sales_price#443)),17,2) AS sum_sales#0] "
        },
        "22" : {
          "sign" : -409300458,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13980,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#63, d_year#69, d_moy#71] "
        },
        "56" : {
          "sign" : 1672197356,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18460721265,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#605 = cs_call_center_sk#553) "
        },
        "55" : {
          "sign" : 975724940,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 17054190121,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_brand#529, i_category#533, cs_sales_price#563, d_year#583, d_moy#585, cc_name#611] "
        },
        "26" : {
          "sign" : -1989795637,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86492910,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15))) "
        },
        "50" : {
          "sign" : -1411658802,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cc_call_center_sk#485) AND isnotnull(cc_name#491)) "
        },
        "37" : {
          "sign" : -757537049,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11941579599,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#437 = i_item_sk#401) "
        },
        "68" : {
          "sign" : -289135451,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86492910,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(i_item_sk#521) AND (isnotnull(i_category#533) AND isnotnull(i_brand#529))) "
        },
        "61" : {
          "sign" : 1064614984,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3991570660,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#553, cs_item_sk#557, cs_sales_price#563, cs_sold_date_sk#576] "
        },
        "13" : {
          "sign" : 566616220,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 17054190121,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
        },
        "46" : {
          "sign" : 852955247,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11979065,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#401, i_brand#409, i_category#413] "
        },
        "24" : {
          "sign" : -927145728,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "35" : {
          "sign" : -1723129252,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18460721265,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#485 = cs_call_center_sk#433) "
        },
        "16" : {
          "sign" : 1820839387,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11941579599,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
        },
        "5" : {
          "sign" : -112522183,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 280232166511305,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#0, avg_monthly_sales#1, rn#2, sum_sales#143] "
        },
        "72" : {
          "sign" : 1042497954,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#605, cc_call_center_id#606, cc_rec_start_date#607, cc_rec_end_date#608, cc_closed_date_sk#609, cc_open_date_sk#610, cc_name#611, cc_class#612, cc_employees#613, cc_sq_ft#614, cc_hours#615, cc_manager#616, cc_mkt_id#617, cc_mkt_class#618, cc_mkt_desc#619, cc_market_manager#620, cc_division#621, cc_division_name#622, cc_company#623, cc_company_name#624, cc_street_number#625, cc_street_name#626, cc_street_type#627, cc_suite_number#628, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "10" : {
          "sign" : -933988404,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 21956869,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
        },
        "59" : {
          "sign" : 651603171,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#553, cs_item_sk#557, cs_sales_price#563, d_year#583, d_moy#585] "
        },
        "48" : {
          "sign" : -1002056841,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#401, i_item_id#402, i_rec_start_date#403, i_rec_end_date#404, i_item_desc#405, i_current_price#406, i_wholesale_cost#407, i_brand_id#408, i_brand#409, i_class_id#410, i_class#411, i_category_id#412, i_category#413, i_manufact_id#414, i_manufact#415, i_size#416, i_formulation#417, i_color#418, i_units#419, i_container#420, i_manager_id#421, i_product_name#422], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : -1165315057,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#29, cs_ship_date_sk#30, cs_bill_customer_sk#31, cs_bill_cdemo_sk#32, cs_bill_hdemo_sk#33, cs_bill_addr_sk#34, cs_ship_customer_sk#35, cs_ship_cdemo_sk#36, cs_ship_hdemo_sk#37, cs_ship_addr_sk#38, cs_call_center_sk#39, cs_catalog_page_sk#40, cs_ship_mode_sk#41, cs_warehouse_sk#42, cs_item_sk#43, cs_promo_sk#44, cs_order_number#45L, cs_quantity#46, cs_wholesale_cost#47, cs_list_price#48, cs_sales_price#49, cs_ext_discount_amt#50, cs_ext_sales_price#51, cs_ext_wholesale_cost#52, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "54" : {
          "sign" : -1142680755,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 19438800,
          "rowCount" : 200400,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_category#533, i_brand#529, cc_name#611, d_year#583, d_moy#585], [i_category#533, i_brand#529, cc_name#611, d_year#583, d_moy#585, MakeDecimal(sum(UnscaledValue(cs_sales_price#563)),17,2) AS sum_sales#0] "
        },
        "43" : {
          "sign" : -2000401580,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13980,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#457, d_year#463, d_moy#465] "
        },
        "65" : {
          "sign" : -1554443153,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 171954,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((d_year#583 = 2000) OR ((d_year#583 = 1999) AND (d_moy#585 = 12))) OR ((d_year#583 = 2001) AND (d_moy#585 = 1))) AND isnotnull(d_date_sk#577)) "
        },
        "71" : {
          "sign" : -853774807,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cc_call_center_sk#605) AND isnotnull(cc_name#611)) "
        },
        "57" : {
          "sign" : 273612204,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10790583975,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#553, cs_sales_price#563, d_year#583, d_moy#585, i_brand#529, i_category#533] "
        },
        "32" : {
          "sign" : -2009872404,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 20364457,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(d_year#463, d_moy#465) windowspecdefinition(i_category#413, i_brand#409, cc_name#491, d_year#463 ASC NULLS FIRST, d_moy#465 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#520], [i_category#413, i_brand#409, cc_name#491], [d_year#463 ASC NULLS FIRST, d_moy#465 ASC NULLS FIRST] "
        },
        "49" : {
          "sign" : 800253232,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1140,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#485, cc_name#491] "
        },
        "6" : {
          "sign" : -1998515433,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 440364833089194,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#413) AND (i_brand#15 = i_brand#409)) AND (cc_name#97 = cc_name#491)) AND (rn#2 = (rn#520 + 1))) "
        },
        "36" : {
          "sign" : 1950233732,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10790583975,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#433, cs_sales_price#443, d_year#463, d_moy#465, i_brand#409, i_category#413] "
        },
        "1" : {
          "sign" : -1441532559,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 2142860433483418420345,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -411704058,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5540650480,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#456 = d_date_sk#457) "
        },
        "17" : {
          "sign" : 199677820,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] "
        },
        "25" : {
          "sign" : 1984212613,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11979065,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#7, i_brand#15, i_category#19] "
        },
        "60" : {
          "sign" : 663292229,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5540650480,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#576 = d_date_sk#577) "
        },
        "14" : {
          "sign" : -564225125,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18460721265,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
        },
        "47" : {
          "sign" : -1808149522,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86492910,
          "rowCount" : 203035,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(i_item_sk#401) AND (isnotnull(i_category#413) AND isnotnull(i_brand#409))) "
        },
        "31" : {
          "sign" : 743044394,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 18513142,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_category#413, i_brand#409, cc_name#491, sum_sales#0 AS sum_sales#143, rn#520] "
        },
        "69" : {
          "sign" : 1908730319,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#521, i_item_id#522, i_rec_start_date#523, i_rec_end_date#524, i_item_desc#525, i_current_price#526, i_wholesale_cost#527, i_brand_id#528, i_brand#529, i_class_id#530, i_class#531, i_category_id#532, i_category#533, i_manufact_id#534, i_manufact#535, i_size#536, i_formulation#537, i_color#538, i_units#539, i_container#540, i_manager_id#541, i_product_name#542], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "58" : {
          "sign" : 820964703,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11941579599,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#557 = i_item_sk#521) "
        },
        "64" : {
          "sign" : 191717278,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13980,
          "rowCount" : 699,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#577, d_year#583, d_moy#585] "
        },
        "53" : {
          "sign" : -893644607,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 20364457,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(d_year#583, d_moy#585) windowspecdefinition(i_category#533, i_brand#529, cc_name#611, d_year#583 ASC NULLS FIRST, d_moy#585 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#640], [i_category#533, i_brand#529, cc_name#611], [d_year#583 ASC NULLS FIRST, d_moy#585 ASC NULLS FIRST] "
        },
        "42" : {
          "sign" : 1816269522,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#423, cs_ship_date_sk#424, cs_bill_customer_sk#425, cs_bill_cdemo_sk#426, cs_bill_hdemo_sk#427, cs_bill_addr_sk#428, cs_ship_customer_sk#429, cs_ship_cdemo_sk#430, cs_ship_hdemo_sk#431, cs_ship_addr_sk#432, cs_call_center_sk#433, cs_catalog_page_sk#434, cs_ship_mode_sk#435, cs_warehouse_sk#436, cs_item_sk#437, cs_promo_sk#438, cs_order_number#439L, cs_quantity#440, cs_wholesale_cost#441, cs_list_price#442, cs_sales_price#443, cs_ext_discount_amt#444, cs_ext_sales_price#445, cs_ext_wholesale_cost#446, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -1228622146,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 7600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 575696380,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651667760,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#641 [cs_sold_date_sk#62]) "
        },
        "27" : {
          "sign" : 337999037,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#7, i_item_id#8, i_rec_start_date#9, i_rec_end_date#10, i_item_desc#11, i_current_price#12, i_wholesale_cost#13, i_brand_id#14, i_brand#15, i_class_id#16, i_class#17, i_category_id#18, i_category#19, i_manufact_id#20, i_manufact#21, i_size#22, i_formulation#23, i_color#24, i_units#25, i_container#26, i_manager_id#27, i_product_name#28], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "70" : {
          "sign" : 828271307,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1140,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#605, cc_name#611] "
        },
        "2" : {
          "sign" : 841849512,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 2142860433483418420345,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [(sum_sales#0 - avg_monthly_sales#1) ASC NULLS FIRST, nsum#4 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 668493243,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#433, cs_item_sk#437, cs_sales_price#443, d_year#463, d_moy#465] "
        },
        "18" : {
          "sign" : 521798727,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5540650480,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#62 = d_date_sk#63) "
        },
        "30" : {
          "sign" : -1672837575,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#91, cc_call_center_id#92, cc_rec_start_date#93, cc_rec_end_date#94, cc_closed_date_sk#95, cc_open_date_sk#96, cc_name#97, cc_class#98, cc_employees#99, cc_sq_ft#100, cc_hours#101, cc_manager#102, cc_mkt_id#103, cc_mkt_class#104, cc_mkt_desc#105, cc_market_manager#106, cc_division#107, cc_division_name#108, cc_company#109, cc_company_name#110, cc_street_number#111, cc_street_name#112, cc_street_type#113, cc_suite_number#114, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 641382221,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 23786607,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#0, avg_monthly_sales#1, rn#2] "
        },
        "29" : {
          "sign" : -391529393,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97)) "
        },
        "41" : {
          "sign" : -1151588981,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651667760,
          "rowCount" : 142556095,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#437) AND isnotnull(cs_sold_date_sk#456)) AND isnotnull(cs_call_center_sk#433)) AND dynamicpruning#642 [cs_sold_date_sk#456]) "
        },
        "63" : {
          "sign" : -823318578,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#543, cs_ship_date_sk#544, cs_bill_customer_sk#545, cs_bill_cdemo_sk#546, cs_bill_hdemo_sk#547, cs_bill_addr_sk#548, cs_ship_customer_sk#549, cs_ship_cdemo_sk#550, cs_ship_hdemo_sk#551, cs_ship_addr_sk#552, cs_call_center_sk#553, cs_catalog_page_sk#554, cs_ship_mode_sk#555, cs_warehouse_sk#556, cs_item_sk#557, cs_promo_sk#558, cs_order_number#559L, cs_quantity#560, cs_wholesale_cost#561, cs_list_price#562, cs_sales_price#563, cs_ext_discount_amt#564, cs_ext_sales_price#565, cs_ext_wholesale_cost#566, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 1895004940,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2142860433483418420345,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#1, sum_sales#0, sum_sales#143 AS psum#3, sum_sales#151 AS nsum#4] "
        },
        "52" : {
          "sign" : -2122828967,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 18513142,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_category#533, i_brand#529, cc_name#611, sum_sales#0 AS sum_sales#151, rn#640] "
        },
        "28" : {
          "sign" : -1920865720,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1140,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#91, cc_name#97] "
        }
      },
      "links" : [ {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 18,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 18,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Join",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Join",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Join",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Window",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Filter",
        "toId" : 9,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Window",
        "toId" : 8,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Filter",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "LogicalRelation",
        "toId" : 41,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "LogicalRelation",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Filter",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 41,
        "fromName" : "Filter",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Join",
        "toId" : 38,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "LogicalRelation",
        "toId" : 47,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Filter",
        "toId" : 46,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Join",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Join",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 33,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Aggregate",
        "toId" : 32,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Window",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "LogicalRelation",
        "toId" : 62,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 66,
        "fromName" : "LogicalRelation",
        "toId" : 65,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 65,
        "fromName" : "Filter",
        "toId" : 64,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "Project",
        "toId" : 62,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 62,
        "fromName" : "Filter",
        "toId" : 61,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "Project",
        "toId" : 60,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "Project",
        "toId" : 60,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Join",
        "toId" : 59,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "Project",
        "toId" : 58,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 69,
        "fromName" : "LogicalRelation",
        "toId" : 68,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 68,
        "fromName" : "Filter",
        "toId" : 67,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 67,
        "fromName" : "Project",
        "toId" : 58,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 58,
        "fromName" : "Join",
        "toId" : 57,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 72,
        "fromName" : "LogicalRelation",
        "toId" : 71,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 71,
        "fromName" : "Filter",
        "toId" : 70,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 70,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Join",
        "toId" : 55,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "Project",
        "toId" : 54,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Aggregate",
        "toId" : 53,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Window",
        "toId" : 52,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#0 - avg_monthly_sales#1) ASC NULLS FIRST, nsum#4 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#1, sum_sales#0, sum_sales#143 AS psum#3, sum_sales#151 AS nsum#4]\n         +- Join Inner, ((((i_category#19 = i_category#533) AND (i_brand#15 = i_brand#529)) AND (cc_name#97 = cc_name#611)) AND (rn#2 = (rn#640 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#0, avg_monthly_sales#1, rn#2, sum_sales#143]\n            :  +- Join Inner, ((((i_category#19 = i_category#413) AND (i_brand#15 = i_brand#409)) AND (cc_name#97 = cc_name#491)) AND (rn#2 = (rn#520 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#0, avg_monthly_sales#1, rn#2]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#1) AND (avg_monthly_sales#1 > 0.000000)) AND CASE WHEN (avg_monthly_sales#1 > 0.000000) THEN ((abs((sum_sales#0 - avg_monthly_sales#1)) / avg_monthly_sales#1) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#137) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#1], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#2], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#0, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#137]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n            :     :                       :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n            :     :                       :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n            :     :                       :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#641 [cs_sold_date_sk#62])\n            :     :                       :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n            :     :                       :     :     +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :        +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     +- Project [i_item_sk#7, i_brand#15, i_category#19]\n            :     :                       :        +- Filter (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15)))\n            :     :                       :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n            :     :                       +- Project [cc_call_center_sk#91, cc_name#97]\n            :     :                          +- Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n            :     :                             +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_call_center_id#92,cc_rec_start_date#93,cc_rec_end_date#94,cc_closed_date_sk#95,cc_open_date_sk#96,cc_name#97,cc_class#98,cc_employees#99,cc_sq_ft#100,cc_hours#101,cc_manager#102,cc_mkt_id#103,cc_mkt_class#104,cc_mkt_desc#105,cc_market_manager#106,cc_division#107,cc_division_name#108,cc_company#109,cc_company_name#110,cc_street_number#111,cc_street_name#112,cc_street_type#113,cc_suite_number#114,... 7 more fields] parquet\n            :     +- Project [i_category#413, i_brand#409, cc_name#491, sum_sales#0 AS sum_sales#143, rn#520]\n            :        +- Window [rank(d_year#463, d_moy#465) windowspecdefinition(i_category#413, i_brand#409, cc_name#491, d_year#463 ASC NULLS FIRST, d_moy#465 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#520], [i_category#413, i_brand#409, cc_name#491], [d_year#463 ASC NULLS FIRST, d_moy#465 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#413, i_brand#409, cc_name#491, d_year#463, d_moy#465], [i_category#413, i_brand#409, cc_name#491, d_year#463, d_moy#465, MakeDecimal(sum(UnscaledValue(cs_sales_price#443)),17,2) AS sum_sales#0]\n            :              +- Project [i_brand#409, i_category#413, cs_sales_price#443, d_year#463, d_moy#465, cc_name#491]\n            :                 +- Join Inner, (cc_call_center_sk#485 = cs_call_center_sk#433)\n            :                    :- Project [cs_call_center_sk#433, cs_sales_price#443, d_year#463, d_moy#465, i_brand#409, i_category#413]\n            :                    :  +- Join Inner, (cs_item_sk#437 = i_item_sk#401)\n            :                    :     :- Project [cs_call_center_sk#433, cs_item_sk#437, cs_sales_price#443, d_year#463, d_moy#465]\n            :                    :     :  +- Join Inner, (cs_sold_date_sk#456 = d_date_sk#457)\n            :                    :     :     :- Project [cs_call_center_sk#433, cs_item_sk#437, cs_sales_price#443, cs_sold_date_sk#456]\n            :                    :     :     :  +- Filter (((isnotnull(cs_item_sk#437) AND isnotnull(cs_sold_date_sk#456)) AND isnotnull(cs_call_center_sk#433)) AND dynamicpruning#642 [cs_sold_date_sk#456])\n            :                    :     :     :     :  +- Project [d_date_sk#457, d_year#463, d_moy#465]\n            :                    :     :     :     :     +- Filter ((((d_year#463 = 2000) OR ((d_year#463 = 1999) AND (d_moy#465 = 12))) OR ((d_year#463 = 2001) AND (d_moy#465 = 1))) AND isnotnull(d_date_sk#457))\n            :                    :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#457,d_date_id#458,d_date#459,d_month_seq#460,d_week_seq#461,d_quarter_seq#462,d_year#463,d_dow#464,d_moy#465,d_dom#466,d_qoy#467,d_fy_year#468,d_fy_quarter_seq#469,d_fy_week_seq#470,d_day_name#471,d_quarter_name#472,d_holiday#473,d_weekend#474,d_following_holiday#475,d_first_dom#476,d_last_dom#477,d_same_day_ly#478,d_same_day_lq#479,d_current_day#480,... 4 more fields] parquet\n            :                    :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#423,cs_ship_date_sk#424,cs_bill_customer_sk#425,cs_bill_cdemo_sk#426,cs_bill_hdemo_sk#427,cs_bill_addr_sk#428,cs_ship_customer_sk#429,cs_ship_cdemo_sk#430,cs_ship_hdemo_sk#431,cs_ship_addr_sk#432,cs_call_center_sk#433,cs_catalog_page_sk#434,cs_ship_mode_sk#435,cs_warehouse_sk#436,cs_item_sk#437,cs_promo_sk#438,cs_order_number#439L,cs_quantity#440,cs_wholesale_cost#441,cs_list_price#442,cs_sales_price#443,cs_ext_discount_amt#444,cs_ext_sales_price#445,cs_ext_wholesale_cost#446,... 10 more fields] parquet\n            :                    :     :     +- Project [d_date_sk#457, d_year#463, d_moy#465]\n            :                    :     :        +- Filter ((((d_year#463 = 2000) OR ((d_year#463 = 1999) AND (d_moy#465 = 12))) OR ((d_year#463 = 2001) AND (d_moy#465 = 1))) AND isnotnull(d_date_sk#457))\n            :                    :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#457,d_date_id#458,d_date#459,d_month_seq#460,d_week_seq#461,d_quarter_seq#462,d_year#463,d_dow#464,d_moy#465,d_dom#466,d_qoy#467,d_fy_year#468,d_fy_quarter_seq#469,d_fy_week_seq#470,d_day_name#471,d_quarter_name#472,d_holiday#473,d_weekend#474,d_following_holiday#475,d_first_dom#476,d_last_dom#477,d_same_day_ly#478,d_same_day_lq#479,d_current_day#480,... 4 more fields] parquet\n            :                    :     +- Project [i_item_sk#401, i_brand#409, i_category#413]\n            :                    :        +- Filter (isnotnull(i_item_sk#401) AND (isnotnull(i_category#413) AND isnotnull(i_brand#409)))\n            :                    :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#401,i_item_id#402,i_rec_start_date#403,i_rec_end_date#404,i_item_desc#405,i_current_price#406,i_wholesale_cost#407,i_brand_id#408,i_brand#409,i_class_id#410,i_class#411,i_category_id#412,i_category#413,i_manufact_id#414,i_manufact#415,i_size#416,i_formulation#417,i_color#418,i_units#419,i_container#420,i_manager_id#421,i_product_name#422] parquet\n            :                    +- Project [cc_call_center_sk#485, cc_name#491]\n            :                       +- Filter (isnotnull(cc_call_center_sk#485) AND isnotnull(cc_name#491))\n            :                          +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#485,cc_call_center_id#486,cc_rec_start_date#487,cc_rec_end_date#488,cc_closed_date_sk#489,cc_open_date_sk#490,cc_name#491,cc_class#492,cc_employees#493,cc_sq_ft#494,cc_hours#495,cc_manager#496,cc_mkt_id#497,cc_mkt_class#498,cc_mkt_desc#499,cc_market_manager#500,cc_division#501,cc_division_name#502,cc_company#503,cc_company_name#504,cc_street_number#505,cc_street_name#506,cc_street_type#507,cc_suite_number#508,... 7 more fields] parquet\n            +- Project [i_category#533, i_brand#529, cc_name#611, sum_sales#0 AS sum_sales#151, rn#640]\n               +- Window [rank(d_year#583, d_moy#585) windowspecdefinition(i_category#533, i_brand#529, cc_name#611, d_year#583 ASC NULLS FIRST, d_moy#585 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#640], [i_category#533, i_brand#529, cc_name#611], [d_year#583 ASC NULLS FIRST, d_moy#585 ASC NULLS FIRST]\n                  +- Aggregate [i_category#533, i_brand#529, cc_name#611, d_year#583, d_moy#585], [i_category#533, i_brand#529, cc_name#611, d_year#583, d_moy#585, MakeDecimal(sum(UnscaledValue(cs_sales_price#563)),17,2) AS sum_sales#0]\n                     +- Project [i_brand#529, i_category#533, cs_sales_price#563, d_year#583, d_moy#585, cc_name#611]\n                        +- Join Inner, (cc_call_center_sk#605 = cs_call_center_sk#553)\n                           :- Project [cs_call_center_sk#553, cs_sales_price#563, d_year#583, d_moy#585, i_brand#529, i_category#533]\n                           :  +- Join Inner, (cs_item_sk#557 = i_item_sk#521)\n                           :     :- Project [cs_call_center_sk#553, cs_item_sk#557, cs_sales_price#563, d_year#583, d_moy#585]\n                           :     :  +- Join Inner, (cs_sold_date_sk#576 = d_date_sk#577)\n                           :     :     :- Project [cs_call_center_sk#553, cs_item_sk#557, cs_sales_price#563, cs_sold_date_sk#576]\n                           :     :     :  +- Filter (((isnotnull(cs_item_sk#557) AND isnotnull(cs_sold_date_sk#576)) AND isnotnull(cs_call_center_sk#553)) AND dynamicpruning#643 [cs_sold_date_sk#576])\n                           :     :     :     :  +- Project [d_date_sk#577, d_year#583, d_moy#585]\n                           :     :     :     :     +- Filter ((((d_year#583 = 2000) OR ((d_year#583 = 1999) AND (d_moy#585 = 12))) OR ((d_year#583 = 2001) AND (d_moy#585 = 1))) AND isnotnull(d_date_sk#577))\n                           :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#577,d_date_id#578,d_date#579,d_month_seq#580,d_week_seq#581,d_quarter_seq#582,d_year#583,d_dow#584,d_moy#585,d_dom#586,d_qoy#587,d_fy_year#588,d_fy_quarter_seq#589,d_fy_week_seq#590,d_day_name#591,d_quarter_name#592,d_holiday#593,d_weekend#594,d_following_holiday#595,d_first_dom#596,d_last_dom#597,d_same_day_ly#598,d_same_day_lq#599,d_current_day#600,... 4 more fields] parquet\n                           :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#543,cs_ship_date_sk#544,cs_bill_customer_sk#545,cs_bill_cdemo_sk#546,cs_bill_hdemo_sk#547,cs_bill_addr_sk#548,cs_ship_customer_sk#549,cs_ship_cdemo_sk#550,cs_ship_hdemo_sk#551,cs_ship_addr_sk#552,cs_call_center_sk#553,cs_catalog_page_sk#554,cs_ship_mode_sk#555,cs_warehouse_sk#556,cs_item_sk#557,cs_promo_sk#558,cs_order_number#559L,cs_quantity#560,cs_wholesale_cost#561,cs_list_price#562,cs_sales_price#563,cs_ext_discount_amt#564,cs_ext_sales_price#565,cs_ext_wholesale_cost#566,... 10 more fields] parquet\n                           :     :     +- Project [d_date_sk#577, d_year#583, d_moy#585]\n                           :     :        +- Filter ((((d_year#583 = 2000) OR ((d_year#583 = 1999) AND (d_moy#585 = 12))) OR ((d_year#583 = 2001) AND (d_moy#585 = 1))) AND isnotnull(d_date_sk#577))\n                           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#577,d_date_id#578,d_date#579,d_month_seq#580,d_week_seq#581,d_quarter_seq#582,d_year#583,d_dow#584,d_moy#585,d_dom#586,d_qoy#587,d_fy_year#588,d_fy_quarter_seq#589,d_fy_week_seq#590,d_day_name#591,d_quarter_name#592,d_holiday#593,d_weekend#594,d_following_holiday#595,d_first_dom#596,d_last_dom#597,d_same_day_ly#598,d_same_day_lq#599,d_current_day#600,... 4 more fields] parquet\n                           :     +- Project [i_item_sk#521, i_brand#529, i_category#533]\n                           :        +- Filter (isnotnull(i_item_sk#521) AND (isnotnull(i_category#533) AND isnotnull(i_brand#529)))\n                           :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#521,i_item_id#522,i_rec_start_date#523,i_rec_end_date#524,i_item_desc#525,i_current_price#526,i_wholesale_cost#527,i_brand_id#528,i_brand#529,i_class_id#530,i_class#531,i_category_id#532,i_category#533,i_manufact_id#534,i_manufact#535,i_size#536,i_formulation#537,i_color#538,i_units#539,i_container#540,i_manager_id#541,i_product_name#542] parquet\n                           +- Project [cc_call_center_sk#605, cc_name#611]\n                              +- Filter (isnotnull(cc_call_center_sk#605) AND isnotnull(cc_name#611))\n                                 +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#605,cc_call_center_id#606,cc_rec_start_date#607,cc_rec_end_date#608,cc_closed_date_sk#609,cc_open_date_sk#610,cc_name#611,cc_class#612,cc_employees#613,cc_sq_ft#614,cc_hours#615,cc_manager#616,cc_mkt_id#617,cc_mkt_class#618,cc_mkt_desc#619,cc_market_manager#620,cc_division#621,cc_division_name#622,cc_company#623,cc_company_name#624,cc_street_number#625,cc_street_name#626,cc_street_type#627,cc_suite_number#628,... 7 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 89717032740,
      "inputRowCount" : 430650288
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 652290270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30 "
          },
          "4" : {
            "sign" : 274578926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4697522839799673509894,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "9" : {
            "sign" : 1236592343,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31 "
          },
          "5" : {
            "sign" : 67108658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253739902162457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "6" : {
            "sign" : 906263956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 398734131969576,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -312484746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1940281172960734710608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1136598657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1321054421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1940281172960734710608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1072787561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29 "
          },
          "3" : {
            "sign" : 4516798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1940281172960734710608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- LogicalQueryStage Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29\n            :     +- LogicalQueryStage Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30\n            +- LogicalQueryStage Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31\n"
      },
      "IM" : {
        "inputSizeInBytes" : 59062717,
        "inputRowCount" : 176553
      },
      "PD" : {
        "6" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 24413, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227169278,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8198,
        "IOBytes" : {
          "Total" : 43330290,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 31244579,
            "SW" : 12085711
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 906080548,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21042000,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], ShuffleQueryStage 25 "
          },
          "8" : {
            "sign" : -559156854,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "4" : {
            "sign" : -764838488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5187977891591434070310,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : -197814047,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26 "
          },
          "11" : {
            "sign" : 524147988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -611681504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "13" : {
            "sign" : -2104667794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "16" : {
            "sign" : -744879354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "5" : {
            "sign" : -172109403,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 280232166511305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : 1523881087,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "6" : {
            "sign" : -209687143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 440364833089194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -1199327572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -916679231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 1858466323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 832462459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1808587109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -762582032,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28 "
          },
          "7" : {
            "sign" : 1342198308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "3" : {
            "sign" : -1696609180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Window",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- LogicalQueryStage Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], ShuffleQueryStage 25\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- LogicalQueryStage Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28\n"
      },
      "IM" : {
        "inputSizeInBytes" : 59919600,
        "inputRowCount" : 601200
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227165753,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11723,
        "IOBytes" : {
          "Total" : 178072853,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 146828274,
            "SW" : 31244579
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1387243894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "12" : {
            "sign" : -1816307049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "8" : {
            "sign" : 275148913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94607161011048000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "19" : {
            "sign" : -197009863,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2 "
          },
          "23" : {
            "sign" : -28729911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          },
          "4" : {
            "sign" : -2110669153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 255291662187130811709324153901396400465064803760000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : 1203927247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          },
          "11" : {
            "sign" : -1109722539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 81091852295184000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -1249978463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94607161011048000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "33" : {
            "sign" : 378485405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "22" : {
            "sign" : 1378375428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "26" : {
            "sign" : 554820001,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "37" : {
            "sign" : 732112673,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19 "
          },
          "13" : {
            "sign" : 103134010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "24" : {
            "sign" : 2113452188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "35" : {
            "sign" : -1532972003,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "16" : {
            "sign" : -74520888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "5" : {
            "sign" : 1628880271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3777814736669308142354375258181818,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -1887674980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 81091852295184000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "21" : {
            "sign" : 1147015394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 74334197937252000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "32" : {
            "sign" : -1710470987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "6" : {
            "sign" : 1616288467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5936566014766055652271161120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "36" : {
            "sign" : -190441834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "1" : {
            "sign" : 1904306625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1194791063,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14 "
          },
          "17" : {
            "sign" : 702759827,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : 1256705706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "14" : {
            "sign" : -1034493995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "31" : {
            "sign" : -1056033848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 74334197937252000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : -803558996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1719562345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67576543579320000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "27" : {
            "sign" : -1024077150,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17 "
          },
          "2" : {
            "sign" : -714177278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 629801109,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12 "
          },
          "18" : {
            "sign" : 707782353,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1 "
          },
          "30" : {
            "sign" : -474066273,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67576543579320000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "7" : {
            "sign" : 1290284517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 87849506653116000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "29" : {
            "sign" : -1700563602,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8 "
          },
          "3" : {
            "sign" : -2080431943,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          },
          "28" : {
            "sign" : 470672562,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6 "
          }
        },
        "links" : [ {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Window",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Aggregate",
          "toId" : 31,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Window",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- LogicalQueryStage Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15\n            :     :                       :     +- LogicalQueryStage Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1\n            :     :                       +- LogicalQueryStage Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- LogicalQueryStage Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17\n            :                    :     +- LogicalQueryStage Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6\n            :                    +- LogicalQueryStage Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- LogicalQueryStage Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19\n                           :     +- LogicalQueryStage Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12\n                           +- LogicalQueryStage Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13337728392,
        "inputRowCount" : 416158701
      },
      "PD" : {
        "0" : [ 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 22193, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 22193, 24413, 24413, 24413, 22193, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 22193, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 6,
        "FinishedTasksTotalTimeInMs" : 7492.0,
        "FinishedTasksDistributionInMs" : [ 1167.0, 1191.0, 1256.0, 1298.0, 1370.0 ]
      },
      "StartTimeInMs" : 1702227150441,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27035,
        "IOBytes" : {
          "Total" : 1463449140,
          "Details" : {
            "IR" : 247279777,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 575148056
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 652290270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30 "
          },
          "4" : {
            "sign" : 274578926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5187977891591434070310,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "9" : {
            "sign" : 1236592343,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31 "
          },
          "5" : {
            "sign" : 67108658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 280232166511305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "6" : {
            "sign" : 906263956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 440364833089194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -312484746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1136598657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1321054421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1072787561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29 "
          },
          "3" : {
            "sign" : 4516798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- LogicalQueryStage Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29\n            :     +- LogicalQueryStage Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30\n            +- LogicalQueryStage Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31\n"
      },
      "IM" : {
        "inputSizeInBytes" : 60812891,
        "inputRowCount" : 0
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227167872,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9604,
        "IOBytes" : {
          "Total" : 55173774,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 37961542,
            "SW" : 17212232
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 906080548,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19587816,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], ShuffleQueryStage 25 "
          },
          "8" : {
            "sign" : -559156854,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23846036,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "4" : {
            "sign" : -764838488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4829443808236402265596,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : -197814047,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26 "
          },
          "11" : {
            "sign" : 524147988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20439460,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -611681504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 23846036,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "13" : {
            "sign" : -2104667794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "16" : {
            "sign" : -744879354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "5" : {
            "sign" : -172109403,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 260865703306138,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : 1523881087,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 20439460,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "6" : {
            "sign" : -209687143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 409931819481074,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -1199327572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1994770268619383544485,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -916679231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 1858466323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 832462459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1808587109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1994770268619383544485,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -762582032,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28 "
          },
          "7" : {
            "sign" : 1342198308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 22142747,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "3" : {
            "sign" : -1696609180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1994770268619383544485,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Window",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- LogicalQueryStage Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], ShuffleQueryStage 25\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- LogicalQueryStage Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28\n"
      },
      "IM" : {
        "inputSizeInBytes" : 58465416,
        "inputRowCount" : 577353
      },
      "PD" : {
        "3" : [ 43249, 35743, 35743, 39317, 39317, 39317, 39317, 32493, 29539, 39317, 32493, 32493, 39317, 35743, 43249, 35743, 32493, 52331, 39317, 32493, 39317, 32493, 39317, 35743, 35743, 29539, 35743, 35743, 32493, 35743, 35743, 43249, 35743, 32493, 39317, 43249, 39317, 39317, 43249, 35743, 39317, 47574, 29539, 47574, 39317, 35743, 32493, 35743, 43249, 35743, 43249, 32493, 47574, 47574, 43249, 35743, 43249, 35743, 32493, 43249, 39317, 39317, 47574, 35743, 43249, 43249, 35743, 35743, 35743, 35743, 29539, 32493, 39317, 29539, 43249, 39317, 35743, 35743, 43249, 43249, 39317, 39317, 35743, 39317, 47574, 43249, 47574, 47574, 39317, 32493, 43249, 35743, 29539, 35743, 52331, 43249, 43249, 35743, 39317, 52331, 26854, 32493, 43249, 47574, 32493, 35743, 43249, 47574, 43249, 32493, 35743, 29539, 39317, 39317, 47574, 39317, 35743, 47574, 24413, 32493, 35743, 43249, 32493, 39317, 35743, 35743, 39317, 32493, 29539, 39317, 35743, 52331, 43249, 26854, 43249, 47574, 35743, 32493, 35743, 47574, 43249, 35743, 35743, 32493, 52331, 32493, 32493, 43249, 39317, 35743, 32493, 39317, 39317, 32493, 39317, 47574, 29539, 32493, 35743, 52331, 43249, 32493, 35743, 43249, 39317, 35743, 35743, 39317, 32493, 43249, 39317, 26854, 39317, 32493, 52331, 39317, 47574, 43249, 43249, 35743, 29539, 26854, 39317, 32493, 39317, 35743, 39317, 35743, 39317, 39317, 43249, 35743, 43249, 47574, 32493, 32493, 39317, 29539, 47574, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227166946,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10530,
        "IOBytes" : {
          "Total" : 116324103,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 92394908,
            "SW" : 23929195
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 652290270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30 "
          },
          "4" : {
            "sign" : 274578926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4253433860272397492376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "9" : {
            "sign" : 1236592343,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31 "
          },
          "5" : {
            "sign" : 67108658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253739902162457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "6" : {
            "sign" : 906263956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 398734131969576,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -312484746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1756853116199468529459,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1136598657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1321054421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1756853116199468529459,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1072787561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29 "
          },
          "3" : {
            "sign" : 4516798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1756853116199468529459,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- LogicalQueryStage Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29\n            :     +- LogicalQueryStage Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30\n            +- LogicalQueryStage Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31\n"
      },
      "IM" : {
        "inputSizeInBytes" : 57312543,
        "inputRowCount" : 353106
      },
      "PD" : {
        "7" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 24413, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854 ],
        "6" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 24413, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227169471,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8005,
        "IOBytes" : {
          "Total" : 31489509,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 24527616,
            "SW" : 6961893
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1387243894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19535390322858000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "12" : {
            "sign" : -1816307049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19535390322858000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "8" : {
            "sign" : 275148913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23782214306088000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "19" : {
            "sign" : -197009863,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2 "
          },
          "23" : {
            "sign" : -28729911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17836660729566000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          },
          "4" : {
            "sign" : -2110669153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4055285782358246354796355730815827193291648560000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : 1203927247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 481306718099400,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          },
          "11" : {
            "sign" : -1109722539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20384755119504000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -1249978463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 23782214306088000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "33" : {
            "sign" : 378485405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17836660729566000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "22" : {
            "sign" : 1378375428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 17836660729566000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "26" : {
            "sign" : 554820001,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 537931037875800,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "37" : {
            "sign" : 732112673,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1671361056,
            "rowCount" : 34820022,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19 "
          },
          "13" : {
            "sign" : 103134010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17836660729566000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "24" : {
            "sign" : 2113452188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19535390322858000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "35" : {
            "sign" : -1532972003,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 481306718099400,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "16" : {
            "sign" : -74520888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 537931037875800,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "5" : {
            "sign" : 1628880271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 238724620938605763233773658181818,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -1887674980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 20384755119504000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "21" : {
            "sign" : 1147015394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 18686025526212000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "32" : {
            "sign" : -1710470987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 17836660729566000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "6" : {
            "sign" : 1616288467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 375138690046380485081644320000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "36" : {
            "sign" : -190441834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 537931037875800,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "1" : {
            "sign" : 1904306625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1675009344887101755241973019250015579837854840000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1194791063,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14 "
          },
          "17" : {
            "sign" : 702759827,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1671361056,
            "rowCount" : 34820022,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : 1256705706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 481306718099400,
            "rowCount" : 7078039972050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "14" : {
            "sign" : -1034493995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19535390322858000,
            "rowCount" : 212341199161500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "31" : {
            "sign" : -1056033848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 18686025526212000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : -803558996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1719562345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16987295932920000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "27" : {
            "sign" : -1024077150,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1671361056,
            "rowCount" : 34820022,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17 "
          },
          "2" : {
            "sign" : -714177278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1675009344887101755241973019250015579837854840000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 629801109,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12 "
          },
          "18" : {
            "sign" : 707782353,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1 "
          },
          "30" : {
            "sign" : -474066273,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16987295932920000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "7" : {
            "sign" : 1290284517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 22083484712796000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "29" : {
            "sign" : -1700563602,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8 "
          },
          "3" : {
            "sign" : -2080431943,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1675009344887101755241973019250015579837854840000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          },
          "28" : {
            "sign" : 470672562,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6 "
          }
        },
        "links" : [ {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Window",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Aggregate",
          "toId" : 31,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Window",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- LogicalQueryStage Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15\n            :     :                       :     +- LogicalQueryStage Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1\n            :     :                       +- LogicalQueryStage Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- LogicalQueryStage Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17\n            :                    :     +- LogicalQueryStage Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6\n            :                    +- LogicalQueryStage Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- LogicalQueryStage Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19\n                           :     +- LogicalQueryStage Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12\n                           +- LogicalQueryStage Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5054250408,
        "inputRowCount" : 105069981
      },
      "PD" : {
        "1" : [ 2400494, 2413612, 2590646, 2465663, 2649813, 2450001, 2705433, 2380530, 2355435, 2616680, 2799419, 2562971, 2632114, 2407856, 2618585, 2541945, 2616750, 2630097, 2736667, 2663733, 2565696, 2640543, 2576798, 2408155, 2669194, 2632114, 2630097, 2626358, 2607483, 2626358, 2630097, 2538862, 2729544, 2458729, 2618585, 2601317, 2605168, 2561066, 2409691, 2723618, 2496307, 2571042, 2505094, 2435458, 2401262, 2624453, 2630097, 2583802, 2398589, 2398589, 2861442, 2632114, 2590983, 2630097, 2528118, 2750131, 2702910, 2607073, 2464485, 2632114, 2585995, 2593656, 2497433, 2638526, 2360354, 2607073, 2646955, 2522731, 2639367, 2618585, 2632114, 2509355, 2710498, 2618585, 2502421, 2521184, 2352628, 2686893, 2618585, 2548018, 2566054, 2402622, 2665830, 2546113, 2657066, 2465253, 2457961, 2624341, 2693640, 2630097, 2630097, 2632114, 2624341, 2365903, 2630097, 2618585, 2546523, 2390998, 2649813, 2390998, 2599412, 2632114, 2624341, 2630097, 2465323, 2624341, 2630097, 2766574, 2392833, 2557625, 2503968, 2466800, 2390998, 2641384, 2548018, 2648972, 2632114, 2409691, 2392833, 2600661, 2535491, 2509713, 2646875, 2593656, 2497433, 2632114, 2604512, 2402622, 2624341, 2472146, 2630097, 2618585, 2584459, 2494062, 2568369, 2596381, 2404415, 2642881, 2612829, 2593656, 2622436, 2551511, 2630097, 2648637, 2599412, 2630097, 2532696, 2566054, 2630097, 2656225, 2620602, 2237724, 2630097, 2505094, 2641384, 2630097, 2680591, 2458781, 2618585, 2390998, 2434978, 2667512, 2607073, 2713862, 2632114, 2630097, 2610924, 2373564, 2705463, 2612829, 2503189, 2692799, 2632114, 2618585, 2630097, 2610924, 2228923, 2390998, 2416285, 2599412, 2624341, 2597988, 2601317, 2390998, 2672162, 2639367, 2612829, 2487878, 2566822, 2390998, 2624341, 2553416, 2588380, 2390998, 2638526, 2407856, 2632114, 2421203, 2630097, 2683114 ],
        "0" : [ 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 22193, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 22193, 24413, 24413, 24413, 22193, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 22193, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227154339,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23137,
        "IOBytes" : {
          "Total" : 726699252,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 85677945
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -916679231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 19040886,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "8" : {
            "sign" : -2104667794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17309896,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "4" : {
            "sign" : 2113151325,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4535516688670034558136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "11" : {
            "sign" : -744879354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17309896,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "9" : {
            "sign" : 1858466323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 19040886,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "13" : {
            "sign" : -762582032,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18175392,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28 "
          },
          "5" : {
            "sign" : 2115875010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 262018713958191,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -197814047,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18175392,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26 "
          },
          "6" : {
            "sign" : -29272184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 411743693362872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : 642532619,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1873365588798492534882,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -89641686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -315552128,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1873365588798492534882,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1072787561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29 "
          },
          "3" : {
            "sign" : 1299701507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1873365588798492534882,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Window",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- LogicalQueryStage Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], ShuffleQueryStage 26\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- LogicalQueryStage Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], ShuffleQueryStage 28\n"
      },
      "IM" : {
        "inputSizeInBytes" : 60137391,
        "inputRowCount" : 353106
      },
      "PD" : {
        "4" : [ 39317, 32493, 35743, 35743, 35743, 35743, 35743, 29539, 26854, 35743, 29539, 29539, 35743, 35743, 39317, 35743, 29539, 47574, 35743, 29539, 39317, 29539, 35743, 32493, 32493, 26854, 32493, 32493, 29539, 32493, 32493, 39317, 32493, 29539, 35743, 39317, 35743, 35743, 39317, 32493, 35743, 43249, 24413, 43249, 39317, 32493, 29539, 35743, 43249, 32493, 39317, 32493, 43249, 43249, 39317, 32493, 39317, 32493, 32493, 39317, 35743, 35743, 43249, 32493, 39317, 39317, 32493, 35743, 32493, 32493, 26854, 29539, 35743, 26854, 39317, 35743, 32493, 32493, 39317, 43249, 35743, 35743, 32493, 39317, 47574, 39317, 43249, 43249, 35743, 29539, 43249, 32493, 29539, 32493, 47574, 39317, 39317, 35743, 35743, 47574, 24413, 29539, 39317, 43249, 29539, 32493, 39317, 43249, 39317, 29539, 32493, 26854, 35743, 35743, 43249, 35743, 32493, 43249, 22193, 29539, 32493, 39317, 29539, 35743, 32493, 32493, 35743, 29539, 26854, 39317, 32493, 47574, 39317, 24413, 39317, 43249, 32493, 29539, 32493, 43249, 39317, 35743, 32493, 29539, 47574, 29539, 29539, 39317, 35743, 32493, 29539, 35743, 35743, 29539, 35743, 43249, 26854, 29539, 35743, 47574, 39317, 29539, 32493, 39317, 35743, 32493, 35743, 35743, 29539, 39317, 35743, 22193, 35743, 29539, 47574, 35743, 43249, 39317, 39317, 32493, 29539, 24413, 35743, 29539, 35743, 32493, 35743, 32493, 35743, 35743, 39317, 32493, 39317, 47574, 29539, 32493, 35743, 26854, 47574, 35743 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227167772,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9704,
        "IOBytes" : {
          "Total" : 55173774,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 37961542,
            "SW" : 17212232
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1918776278,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21042000,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))]) "
          },
          "8" : {
            "sign" : 1460157188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "4" : {
            "sign" : -1456187962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5187977891591434070310,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : -1018446464,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))]) "
          },
          "11" : {
            "sign" : -1957330374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -403498322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "13" : {
            "sign" : -265190643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "16" : {
            "sign" : -1903034685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "5" : {
            "sign" : -1631908884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 280232166511305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : 167996271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "6" : {
            "sign" : -1849389220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 440364833089194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : 993897064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 744561448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 619989170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 470500697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1994174467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1113215897,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], functions=[sum(UnscaledValue(cs_sales_price#1112))]) "
          },
          "7" : {
            "sign" : -2043081942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "3" : {
            "sign" : -1457349664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Window",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- LogicalQueryStage Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))])\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))])\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- LogicalQueryStage Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], functions=[sum(UnscaledValue(cs_sales_price#1112))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 59919600,
        "inputRowCount" : 601200
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227154752,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22724,
        "IOBytes" : {
          "Total" : 726699252,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 85677945
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1700563602,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8 "
          },
          "34" : {
            "sign" : -1551029126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "12" : {
            "sign" : -2027102938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 430184614470,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "51" : {
            "sign" : -94983538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "8" : {
            "sign" : 1201166336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 523703008920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "19" : {
            "sign" : 2125648384,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] "
          },
          "23" : {
            "sign" : 2125736862,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63)) "
          },
          "62" : {
            "sign" : 629801109,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12 "
          },
          "4" : {
            "sign" : 577371150,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 43303181723140085922176490824961600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "40" : {
            "sign" : -1415004428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1006, d_year#1012, d_moy#1014] "
          },
          "15" : {
            "sign" : -1493632734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          },
          "11" : {
            "sign" : 1348992424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 448888293360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1325837684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 523703008920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "44" : {
            "sign" : 470672562,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6 "
          },
          "33" : {
            "sign" : -1814391117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "22" : {
            "sign" : -409300458,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#63, d_year#69, d_moy#71] "
          },
          "56" : {
            "sign" : -1602132059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125]) "
          },
          "55" : {
            "sign" : 152244955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125] "
          },
          "26" : {
            "sign" : 707782353,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1 "
          },
          "50" : {
            "sign" : -1025450181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "37" : {
            "sign" : -610102153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005] "
          },
          "61" : {
            "sign" : -246742889,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1126, d_year#1132, d_moy#1134], BroadcastQueryStage 10 "
          },
          "13" : {
            "sign" : 464004109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "46" : {
            "sign" : -1546926394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 374073577800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "24" : {
            "sign" : -927145728,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : -1712802213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014] "
          },
          "16" : {
            "sign" : -913932327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "5" : {
            "sign" : 98921935,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 115761134421240285531272,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -1539082069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 448888293360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "59" : {
            "sign" : -512569783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126)) "
          },
          "48" : {
            "sign" : 846252592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 392777256690,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "21" : {
            "sign" : -1165315057,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#29, cs_ship_date_sk#30, cs_bill_customer_sk#31, cs_bill_cdemo_sk#32, cs_bill_hdemo_sk#33, cs_bill_addr_sk#34, cs_ship_customer_sk#35, cs_ship_cdemo_sk#36, cs_ship_hdemo_sk#37, cs_ship_addr_sk#38, cs_call_center_sk#39, cs_catalog_page_sk#40, cs_ship_mode_sk#41, cs_warehouse_sk#42, cs_item_sk#43, cs_promo_sk#44, cs_order_number#45L, cs_quantity#46, cs_wholesale_cost#47, cs_list_price#48, cs_sales_price#49, cs_ext_discount_amt#50, cs_ext_sales_price#51, cs_ext_wholesale_cost#52, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "54" : {
            "sign" : 1326550517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1125 = d_date_sk#1126) "
          },
          "43" : {
            "sign" : -1598207095,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1006, d_year#1012, d_moy#1014], BroadcastQueryStage 4 "
          },
          "57" : {
            "sign" : 1392504932,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#1092, cs_ship_date_sk#1093, cs_bill_customer_sk#1094, cs_bill_cdemo_sk#1095, cs_bill_hdemo_sk#1096, cs_bill_addr_sk#1097, cs_ship_customer_sk#1098, cs_ship_cdemo_sk#1099, cs_ship_hdemo_sk#1100, cs_ship_addr_sk#1101, cs_call_center_sk#1102, cs_catalog_page_sk#1103, cs_ship_mode_sk#1104, cs_warehouse_sk#1105, cs_item_sk#1106, cs_promo_sk#1107, cs_order_number#1108L, cs_quantity#1109, cs_wholesale_cost#1110, cs_list_price#1111, cs_sales_price#1112, cs_ext_discount_amt#1113, cs_ext_sales_price#1114, cs_ext_wholesale_cost#1115, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 1582890837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "49" : {
            "sign" : -1507259942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "6" : {
            "sign" : 2120540231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 181910354090520448692000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "36" : {
            "sign" : 969070759,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1005 = d_date_sk#1006) "
          },
          "1" : {
            "sign" : 2078363322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1197689096,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#972, cs_ship_date_sk#973, cs_bill_customer_sk#974, cs_bill_cdemo_sk#975, cs_bill_hdemo_sk#976, cs_bill_addr_sk#977, cs_ship_customer_sk#978, cs_ship_cdemo_sk#979, cs_ship_hdemo_sk#980, cs_ship_addr_sk#981, cs_call_center_sk#982, cs_catalog_page_sk#983, cs_ship_mode_sk#984, cs_warehouse_sk#985, cs_item_sk#986, cs_promo_sk#987, cs_order_number#988L, cs_quantity#989, cs_wholesale_cost#990, cs_list_price#991, cs_sales_price#992, cs_ext_discount_amt#993, cs_ext_sales_price#994, cs_ext_wholesale_cost#995, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1759348390,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] "
          },
          "25" : {
            "sign" : -2016141014,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#63, d_year#69, d_moy#71], BroadcastQueryStage 0 "
          },
          "60" : {
            "sign" : -1550232984,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1126, d_date_id#1127, d_date#1128, d_month_seq#1129, d_week_seq#1130, d_quarter_seq#1131, d_year#1132, d_dow#1133, d_moy#1134, d_dom#1135, d_qoy#1136, d_fy_year#1137, d_fy_quarter_seq#1138, d_fy_week_seq#1139, d_day_name#1140, d_quarter_name#1141, d_holiday#1142, d_weekend#1143, d_following_holiday#1144, d_first_dom#1145, d_last_dom#1146, d_same_day_ly#1147, d_same_day_lq#1148, d_current_day#1149, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 1523619556,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "47" : {
            "sign" : -657457329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 411480935580,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "31" : {
            "sign" : 282571584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          },
          "58" : {
            "sign" : -2067421129,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1126, d_year#1132, d_moy#1134] "
          },
          "53" : {
            "sign" : 739556868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134] "
          },
          "42" : {
            "sign" : -1490112250,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1006, d_date_id#1007, d_date#1008, d_month_seq#1009, d_week_seq#1010, d_quarter_seq#1011, d_year#1012, d_dow#1013, d_moy#1014, d_dom#1015, d_qoy#1016, d_fy_year#1017, d_fy_quarter_seq#1018, d_fy_week_seq#1019, d_day_name#1020, d_quarter_name#1021, d_holiday#1022, d_weekend#1023, d_following_holiday#1024, d_first_dom#1025, d_last_dom#1026, d_same_day_ly#1027, d_same_day_lq#1028, d_current_day#1029, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 394102555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -715317830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62]) "
          },
          "27" : {
            "sign" : -197009863,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2 "
          },
          "2" : {
            "sign" : -1553012687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -679066203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005]) "
          },
          "18" : {
            "sign" : 71178921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#62 = d_date_sk#63) "
          },
          "30" : {
            "sign" : 896556653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 392777256690,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "7" : {
            "sign" : 1657665080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 486295651140,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "29" : {
            "sign" : 1382661255,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 411480935580,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "41" : {
            "sign" : -1261739799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006)) "
          },
          "63" : {
            "sign" : -1194791063,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14 "
          },
          "3" : {
            "sign" : -1972730126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          },
          "52" : {
            "sign" : -559430459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "28" : {
            "sign" : -952922374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 374073577800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          }
        },
        "links" : [ {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Aggregate",
          "toId" : 29,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Window",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "LogicalRelation",
          "toId" : 56,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "LogicalRelation",
          "toId" : 59,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "Filter",
          "toId" : 58,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Project",
          "toId" : 56,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 56,
          "fromName" : "Filter",
          "toId" : 55,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "Project",
          "toId" : 54,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "LogicalQueryStage",
          "toId" : 54,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "Join",
          "toId" : 53,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Project",
          "toId" : 52,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 62,
          "fromName" : "LogicalQueryStage",
          "toId" : 52,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Join",
          "toId" : 51,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Project",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 63,
          "fromName" : "LogicalQueryStage",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Join",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 48,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Aggregate",
          "toId" : 47,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Window",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n            :     :                       :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n            :     :                       :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n            :     :                       :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n            :     :                       :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n            :     :                       :     :     +- LogicalQueryStage Project [d_date_sk#63, d_year#69, d_moy#71], BroadcastQueryStage 0\n            :     :                       :     +- LogicalQueryStage Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1\n            :     :                       +- LogicalQueryStage Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014]\n            :                    :     :  +- Join Inner, (cs_sold_date_sk#1005 = d_date_sk#1006)\n            :                    :     :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005]\n            :                    :     :     :  +- Filter (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005])\n            :                    :     :     :     :  +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :                    :     :     :     :     +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :                    :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :                    :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#972,cs_ship_date_sk#973,cs_bill_customer_sk#974,cs_bill_cdemo_sk#975,cs_bill_hdemo_sk#976,cs_bill_addr_sk#977,cs_ship_customer_sk#978,cs_ship_cdemo_sk#979,cs_ship_hdemo_sk#980,cs_ship_addr_sk#981,cs_call_center_sk#982,cs_catalog_page_sk#983,cs_ship_mode_sk#984,cs_warehouse_sk#985,cs_item_sk#986,cs_promo_sk#987,cs_order_number#988L,cs_quantity#989,cs_wholesale_cost#990,cs_list_price#991,cs_sales_price#992,cs_ext_discount_amt#993,cs_ext_sales_price#994,cs_ext_wholesale_cost#995,... 10 more fields] parquet\n            :                    :     :     +- LogicalQueryStage Project [d_date_sk#1006, d_year#1012, d_moy#1014], BroadcastQueryStage 4\n            :                    :     +- LogicalQueryStage Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6\n            :                    +- LogicalQueryStage Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134]\n                           :     :  +- Join Inner, (cs_sold_date_sk#1125 = d_date_sk#1126)\n                           :     :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125]\n                           :     :     :  +- Filter (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125])\n                           :     :     :     :  +- Project [d_date_sk#1126, d_year#1132, d_moy#1134]\n                           :     :     :     :     +- Filter ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126))\n                           :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1126,d_date_id#1127,d_date#1128,d_month_seq#1129,d_week_seq#1130,d_quarter_seq#1131,d_year#1132,d_dow#1133,d_moy#1134,d_dom#1135,d_qoy#1136,d_fy_year#1137,d_fy_quarter_seq#1138,d_fy_week_seq#1139,d_day_name#1140,d_quarter_name#1141,d_holiday#1142,d_weekend#1143,d_following_holiday#1144,d_first_dom#1145,d_last_dom#1146,d_same_day_ly#1147,d_same_day_lq#1148,d_current_day#1149,... 4 more fields] parquet\n                           :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#1092,cs_ship_date_sk#1093,cs_bill_customer_sk#1094,cs_bill_cdemo_sk#1095,cs_bill_hdemo_sk#1096,cs_bill_addr_sk#1097,cs_ship_customer_sk#1098,cs_ship_cdemo_sk#1099,cs_ship_hdemo_sk#1100,cs_ship_addr_sk#1101,cs_call_center_sk#1102,cs_catalog_page_sk#1103,cs_ship_mode_sk#1104,cs_warehouse_sk#1105,cs_item_sk#1106,cs_promo_sk#1107,cs_order_number#1108L,cs_quantity#1109,cs_wholesale_cost#1110,cs_list_price#1111,cs_sales_price#1112,cs_ext_discount_amt#1113,cs_ext_sales_price#1114,cs_ext_wholesale_cost#1115,... 10 more fields] parquet\n                           :     :     +- LogicalQueryStage Project [d_date_sk#1126, d_year#1132, d_moy#1134], BroadcastQueryStage 10\n                           :     +- LogicalQueryStage Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12\n                           +- LogicalQueryStage Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 89441488191,
        "inputRowCount" : 430430343
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4788.0,
        "FinishedTasksDistributionInMs" : [ 1120.0, 1203.0, 1231.0, 1234.0, 1234.0 ]
      },
      "StartTimeInMs" : 1702227148559,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 28917,
        "IOBytes" : {
          "Total" : 1469406165,
          "Details" : {
            "IR" : 248513880,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 579870978
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 652290270,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30 "
          },
          "4" : {
            "sign" : 274578926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 862761850598836656,
            "rowCount" : 4688923101080634,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "9" : {
            "sign" : 1236592343,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31 "
          },
          "5" : {
            "sign" : 67108658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2974514096736,
            "rowCount" : 26558161578,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "6" : {
            "sign" : 906263956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4674236437728,
            "rowCount" : 26558161578,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -312484746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 356358155682128184,
            "rowCount" : 4688923101080634,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1136598657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1321054421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 356358155682128184,
            "rowCount" : 4688923101080634,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1072787561,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 20278304,
            "rowCount" : 150426,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29 "
          },
          "3" : {
            "sign" : 4516798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 356358155682128184,
            "rowCount" : 4688923101080634,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- LogicalQueryStage Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670], ShuffleQueryStage 29\n            :     +- LogicalQueryStage Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069], ShuffleQueryStage 30\n            +- LogicalQueryStage Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189], ShuffleQueryStage 31\n"
      },
      "IM" : {
        "inputSizeInBytes" : 53804240,
        "inputRowCount" : 503532
      },
      "PD" : {
        "5" : [ 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 32493, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 32493, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 32493, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 32493, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743 ],
        "7" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 24413, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854 ],
        "6" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 24413, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227175288,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2188,
        "IOBytes" : {
          "Total" : 17212232,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 17212232,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1700563602,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8 "
          },
          "34" : {
            "sign" : -1551029126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "12" : {
            "sign" : -2027102938,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 430184614470,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "51" : {
            "sign" : -94983538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "8" : {
            "sign" : 1201166336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 523703008920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "19" : {
            "sign" : 2125648384,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] "
          },
          "23" : {
            "sign" : 2125736862,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63)) "
          },
          "62" : {
            "sign" : 629801109,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12 "
          },
          "4" : {
            "sign" : 577371150,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 43303181723140085922176490824961600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "40" : {
            "sign" : -1415004428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1006, d_year#1012, d_moy#1014] "
          },
          "15" : {
            "sign" : -1493632734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          },
          "11" : {
            "sign" : 1348992424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 448888293360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1325837684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 523703008920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "44" : {
            "sign" : 470672562,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6 "
          },
          "33" : {
            "sign" : -1814391117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "22" : {
            "sign" : -409300458,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#63, d_year#69, d_moy#71] "
          },
          "56" : {
            "sign" : -1602132059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125]) "
          },
          "55" : {
            "sign" : 152244955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125] "
          },
          "26" : {
            "sign" : 707782353,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1 "
          },
          "50" : {
            "sign" : -1025450181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "37" : {
            "sign" : -610102153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005] "
          },
          "61" : {
            "sign" : -246742889,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1052000,
            "rowCount" : 428,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1126, d_year#1132, d_moy#1134], BroadcastQueryStage 10 "
          },
          "13" : {
            "sign" : 464004109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "46" : {
            "sign" : -1546926394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 374073577800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "24" : {
            "sign" : -927145728,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : -1712802213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1952448277120,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014] "
          },
          "16" : {
            "sign" : -913932327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "5" : {
            "sign" : 98921935,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 115761134421240285531272,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -1539082069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 448888293360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "59" : {
            "sign" : -512569783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126)) "
          },
          "48" : {
            "sign" : 846252592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 392777256690,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "21" : {
            "sign" : -1165315057,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#29, cs_ship_date_sk#30, cs_bill_customer_sk#31, cs_bill_cdemo_sk#32, cs_bill_hdemo_sk#33, cs_bill_addr_sk#34, cs_ship_customer_sk#35, cs_ship_cdemo_sk#36, cs_ship_hdemo_sk#37, cs_ship_addr_sk#38, cs_call_center_sk#39, cs_catalog_page_sk#40, cs_ship_mode_sk#41, cs_warehouse_sk#42, cs_item_sk#43, cs_promo_sk#44, cs_order_number#45L, cs_quantity#46, cs_wholesale_cost#47, cs_list_price#48, cs_sales_price#49, cs_ext_discount_amt#50, cs_ext_sales_price#51, cs_ext_wholesale_cost#52, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "54" : {
            "sign" : 1326550517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2440560346400,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1125 = d_date_sk#1126) "
          },
          "43" : {
            "sign" : -1598207095,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1052000,
            "rowCount" : 428,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1006, d_year#1012, d_moy#1014], BroadcastQueryStage 4 "
          },
          "57" : {
            "sign" : 1392504932,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#1092, cs_ship_date_sk#1093, cs_bill_customer_sk#1094, cs_bill_cdemo_sk#1095, cs_bill_hdemo_sk#1096, cs_bill_addr_sk#1097, cs_ship_customer_sk#1098, cs_ship_cdemo_sk#1099, cs_ship_hdemo_sk#1100, cs_ship_addr_sk#1101, cs_call_center_sk#1102, cs_catalog_page_sk#1103, cs_ship_mode_sk#1104, cs_warehouse_sk#1105, cs_item_sk#1106, cs_promo_sk#1107, cs_order_number#1108L, cs_quantity#1109, cs_wholesale_cost#1110, cs_list_price#1111, cs_sales_price#1112, cs_ext_discount_amt#1113, cs_ext_sales_price#1114, cs_ext_wholesale_cost#1115, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 1582890837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "49" : {
            "sign" : -1507259942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "6" : {
            "sign" : 2120540231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 181910354090520448692000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "36" : {
            "sign" : 969070759,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2440560346400,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1005 = d_date_sk#1006) "
          },
          "1" : {
            "sign" : 2078363322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1197689096,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#972, cs_ship_date_sk#973, cs_bill_customer_sk#974, cs_bill_cdemo_sk#975, cs_bill_hdemo_sk#976, cs_bill_addr_sk#977, cs_ship_customer_sk#978, cs_ship_cdemo_sk#979, cs_ship_hdemo_sk#980, cs_ship_addr_sk#981, cs_call_center_sk#982, cs_catalog_page_sk#983, cs_ship_mode_sk#984, cs_warehouse_sk#985, cs_item_sk#986, cs_promo_sk#987, cs_order_number#988L, cs_quantity#989, cs_wholesale_cost#990, cs_list_price#991, cs_sales_price#992, cs_ext_discount_amt#993, cs_ext_sales_price#994, cs_ext_wholesale_cost#995, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1759348390,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1952448277120,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] "
          },
          "25" : {
            "sign" : -2016141014,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1052000,
            "rowCount" : 428,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#63, d_year#69, d_moy#71], BroadcastQueryStage 0 "
          },
          "60" : {
            "sign" : -1550232984,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1126, d_date_id#1127, d_date#1128, d_month_seq#1129, d_week_seq#1130, d_quarter_seq#1131, d_year#1132, d_dow#1133, d_moy#1134, d_dom#1135, d_qoy#1136, d_fy_year#1137, d_fy_quarter_seq#1138, d_fy_week_seq#1139, d_day_name#1140, d_quarter_name#1141, d_holiday#1142, d_weekend#1143, d_following_holiday#1144, d_first_dom#1145, d_last_dom#1146, d_same_day_ly#1147, d_same_day_lq#1148, d_current_day#1149, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 1523619556,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 427307125410,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "47" : {
            "sign" : -657457329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 411480935580,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "31" : {
            "sign" : 282571584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392777256690,
            "rowCount" : 4316233590,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          },
          "58" : {
            "sign" : -2067421129,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1126, d_year#1132, d_moy#1134] "
          },
          "53" : {
            "sign" : 739556868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1952448277120,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134] "
          },
          "42" : {
            "sign" : -1490112250,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1006, d_date_id#1007, d_date#1008, d_month_seq#1009, d_week_seq#1010, d_quarter_seq#1011, d_year#1012, d_dow#1013, d_moy#1014, d_dom#1015, d_qoy#1016, d_fy_year#1017, d_fy_quarter_seq#1018, d_fy_week_seq#1019, d_day_name#1020, d_quarter_name#1021, d_holiday#1022, d_weekend#1023, d_following_holiday#1024, d_first_dom#1025, d_last_dom#1026, d_same_day_ly#1027, d_same_day_lq#1028, d_current_day#1029, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 394102555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -715317830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62]) "
          },
          "27" : {
            "sign" : -197009863,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2 "
          },
          "2" : {
            "sign" : -1553012687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -679066203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651667760,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005]) "
          },
          "18" : {
            "sign" : 71178921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2440560346400,
            "rowCount" : 61014008660,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#62 = d_date_sk#63) "
          },
          "30" : {
            "sign" : 896556653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 392777256690,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "7" : {
            "sign" : 1657665080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 486295651140,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "29" : {
            "sign" : 1382661255,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 411480935580,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "41" : {
            "sign" : -1261739799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 171954,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006)) "
          },
          "63" : {
            "sign" : -1194791063,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14 "
          },
          "3" : {
            "sign" : -1972730126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17886096798688296359159854905962400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          },
          "52" : {
            "sign" : -559430459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "28" : {
            "sign" : -952922374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 374073577800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          }
        },
        "links" : [ {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Aggregate",
          "toId" : 29,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Window",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "LogicalRelation",
          "toId" : 56,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "LogicalRelation",
          "toId" : 59,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "Filter",
          "toId" : 58,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Project",
          "toId" : 56,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 56,
          "fromName" : "Filter",
          "toId" : 55,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "Project",
          "toId" : 54,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "LogicalQueryStage",
          "toId" : 54,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "Join",
          "toId" : 53,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Project",
          "toId" : 52,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 62,
          "fromName" : "LogicalQueryStage",
          "toId" : 52,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Join",
          "toId" : 51,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Project",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 63,
          "fromName" : "LogicalQueryStage",
          "toId" : 50,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Join",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 48,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Aggregate",
          "toId" : 47,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Window",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n            :     :                       :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n            :     :                       :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n            :     :                       :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n            :     :                       :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n            :     :                       :     :     +- LogicalQueryStage Project [d_date_sk#63, d_year#69, d_moy#71], BroadcastQueryStage 0\n            :     :                       :     +- LogicalQueryStage Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1\n            :     :                       +- LogicalQueryStage Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014]\n            :                    :     :  +- Join Inner, (cs_sold_date_sk#1005 = d_date_sk#1006)\n            :                    :     :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005]\n            :                    :     :     :  +- Filter (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005])\n            :                    :     :     :     :  +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :                    :     :     :     :     +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :                    :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :                    :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#972,cs_ship_date_sk#973,cs_bill_customer_sk#974,cs_bill_cdemo_sk#975,cs_bill_hdemo_sk#976,cs_bill_addr_sk#977,cs_ship_customer_sk#978,cs_ship_cdemo_sk#979,cs_ship_hdemo_sk#980,cs_ship_addr_sk#981,cs_call_center_sk#982,cs_catalog_page_sk#983,cs_ship_mode_sk#984,cs_warehouse_sk#985,cs_item_sk#986,cs_promo_sk#987,cs_order_number#988L,cs_quantity#989,cs_wholesale_cost#990,cs_list_price#991,cs_sales_price#992,cs_ext_discount_amt#993,cs_ext_sales_price#994,cs_ext_wholesale_cost#995,... 10 more fields] parquet\n            :                    :     :     +- LogicalQueryStage Project [d_date_sk#1006, d_year#1012, d_moy#1014], BroadcastQueryStage 4\n            :                    :     +- LogicalQueryStage Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6\n            :                    +- LogicalQueryStage Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134]\n                           :     :  +- Join Inner, (cs_sold_date_sk#1125 = d_date_sk#1126)\n                           :     :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125]\n                           :     :     :  +- Filter (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125])\n                           :     :     :     :  +- Project [d_date_sk#1126, d_year#1132, d_moy#1134]\n                           :     :     :     :     +- Filter ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126))\n                           :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1126,d_date_id#1127,d_date#1128,d_month_seq#1129,d_week_seq#1130,d_quarter_seq#1131,d_year#1132,d_dow#1133,d_moy#1134,d_dom#1135,d_qoy#1136,d_fy_year#1137,d_fy_quarter_seq#1138,d_fy_week_seq#1139,d_day_name#1140,d_quarter_name#1141,d_holiday#1142,d_weekend#1143,d_following_holiday#1144,d_first_dom#1145,d_last_dom#1146,d_same_day_ly#1147,d_same_day_lq#1148,d_current_day#1149,... 4 more fields] parquet\n                           :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#1092,cs_ship_date_sk#1093,cs_bill_customer_sk#1094,cs_bill_cdemo_sk#1095,cs_bill_hdemo_sk#1096,cs_bill_addr_sk#1097,cs_ship_customer_sk#1098,cs_ship_cdemo_sk#1099,cs_ship_hdemo_sk#1100,cs_ship_addr_sk#1101,cs_call_center_sk#1102,cs_catalog_page_sk#1103,cs_ship_mode_sk#1104,cs_warehouse_sk#1105,cs_item_sk#1106,cs_promo_sk#1107,cs_order_number#1108L,cs_quantity#1109,cs_wholesale_cost#1110,cs_list_price#1111,cs_sales_price#1112,cs_ext_discount_amt#1113,cs_ext_sales_price#1114,cs_ext_wholesale_cost#1115,... 10 more fields] parquet\n                           :     :     +- LogicalQueryStage Project [d_date_sk#1126, d_year#1132, d_moy#1134], BroadcastQueryStage 10\n                           :     +- LogicalQueryStage Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12\n                           +- LogicalQueryStage Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 89444602251,
        "inputRowCount" : 430429530
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4788.0,
        "FinishedTasksDistributionInMs" : [ 1120.0, 1203.0, 1231.0, 1234.0, 1234.0 ]
      },
      "StartTimeInMs" : 1702227148687,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 28789,
        "IOBytes" : {
          "Total" : 1469406165,
          "Details" : {
            "IR" : 248513880,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 579870978
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1918776278,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 142188288,
            "rowCount" : 1382368,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))]) "
          },
          "8" : {
            "sign" : 1460157188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 173098784,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "4" : {
            "sign" : -1456187962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1875701531472811768461120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : -1018446464,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 142188288,
            "rowCount" : 1382368,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))]) "
          },
          "11" : {
            "sign" : -1957330374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 148370387,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -403498322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 173098784,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "13" : {
            "sign" : -265190643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135417416,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "16" : {
            "sign" : -1903034685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135417416,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "5" : {
            "sign" : -1631908884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13851257739793320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : 167996271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 148370387,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "6" : {
            "sign" : -1849389220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21766262162532360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : 993897064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 774746284738770078277419,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 744561448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 148959158,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "14" : {
            "sign" : 619989170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 148959158,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : 470500697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1994174467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 774746284738770078277419,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1113215897,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 142188288,
            "rowCount" : 1382368,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], functions=[sum(UnscaledValue(cs_sales_price#1112))]) "
          },
          "7" : {
            "sign" : -2043081942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 160734585,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "3" : {
            "sign" : -1457349664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 774746284738770078277419,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Window",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Window",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- LogicalQueryStage Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))])\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))])\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- LogicalQueryStage Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], functions=[sum(UnscaledValue(cs_sales_price#1112))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 426564864,
        "inputRowCount" : 4147104
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227165628,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11848,
        "IOBytes" : {
          "Total" : 178072853,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 146828274,
            "SW" : 31244579
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1387243894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "12" : {
            "sign" : -1816307049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "8" : {
            "sign" : 275148913,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 94607161011048000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "19" : {
            "sign" : -197009863,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2 "
          },
          "23" : {
            "sign" : -28729911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          },
          "4" : {
            "sign" : -2110669153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 255291662187130811709324153901396400465064803760000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : 1203927247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          },
          "11" : {
            "sign" : -1109722539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 81091852295184000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -1249978463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 94607161011048000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "33" : {
            "sign" : 378485405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "22" : {
            "sign" : 1378375428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "26" : {
            "sign" : 554820001,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "37" : {
            "sign" : 732112673,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19 "
          },
          "13" : {
            "sign" : 103134010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "24" : {
            "sign" : 2113452188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "35" : {
            "sign" : -1532972003,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "16" : {
            "sign" : -74520888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "5" : {
            "sign" : 1628880271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3777814736669308142354375258181818,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : -1887674980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 81091852295184000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          },
          "21" : {
            "sign" : 1147015394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 74334197937252000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "32" : {
            "sign" : -1710470987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 70955370758286000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "6" : {
            "sign" : 1616288467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5936566014766055652271161120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "36" : {
            "sign" : -190441834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2139923880011800,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "1" : {
            "sign" : 1904306625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1194791063,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14 "
          },
          "17" : {
            "sign" : 702759827,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15 "
          },
          "25" : {
            "sign" : 1256705706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1914668734747400,
            "rowCount" : 28156893158050,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "14" : {
            "sign" : -1034493995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77713025116218000,
            "rowCount" : 844706794741500,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "31" : {
            "sign" : -1056033848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 74334197937252000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : -803558996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1719562345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67576543579320000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "27" : {
            "sign" : -1024077150,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17 "
          },
          "2" : {
            "sign" : -714177278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 629801109,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12 "
          },
          "18" : {
            "sign" : 707782353,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1 "
          },
          "30" : {
            "sign" : -474066273,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67576543579320000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "7" : {
            "sign" : 1290284517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 87849506653116000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "29" : {
            "sign" : -1700563602,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8 "
          },
          "3" : {
            "sign" : -2080431943,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105446556120771422227764324437533295844265897205217,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          },
          "28" : {
            "sign" : 470672562,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6 "
          }
        },
        "links" : [ {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Window",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 34,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Join",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Aggregate",
          "toId" : 31,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Window",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- LogicalQueryStage Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71], ShuffleQueryStage 15\n            :     :                       :     +- LogicalQueryStage Project [i_item_sk#7, i_brand#15, i_category#19], ShuffleQueryStage 1\n            :     :                       +- LogicalQueryStage Project [cc_call_center_sk#91, cc_name#97], BroadcastQueryStage 2\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- LogicalQueryStage Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014], ShuffleQueryStage 17\n            :                    :     +- LogicalQueryStage Project [i_item_sk#950, i_brand#958, i_category#962], ShuffleQueryStage 6\n            :                    +- LogicalQueryStage Project [cc_call_center_sk#1034, cc_name#1040], BroadcastQueryStage 8\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- LogicalQueryStage Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134], ShuffleQueryStage 19\n                           :     +- LogicalQueryStage Project [i_item_sk#1070, i_brand#1078, i_category#1082], ShuffleQueryStage 12\n                           +- LogicalQueryStage Project [cc_call_center_sk#1154, cc_name#1160], BroadcastQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13337728392,
        "inputRowCount" : 416158701
      },
      "PD" : {
        "0" : [ 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 22193, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 22193, 24413, 24413, 24413, 22193, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 22193, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 6,
        "FinishedTasksTotalTimeInMs" : 7492.0,
        "FinishedTasksDistributionInMs" : [ 1167.0, 1191.0, 1256.0, 1298.0, 1370.0 ]
      },
      "StartTimeInMs" : 1702227150377,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27099,
        "IOBytes" : {
          "Total" : 1463449140,
          "Details" : {
            "IR" : 247279777,
            "IW" : 0,
            "SR" : 641021307,
            "SW" : 575148056
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 1695921596,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1005 = d_date_sk#1006) "
          },
          "4" : {
            "sign" : 1337949296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "11" : {
            "sign" : -1197689096,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#972, cs_ship_date_sk#973, cs_bill_customer_sk#974, cs_bill_cdemo_sk#975, cs_bill_hdemo_sk#976, cs_bill_addr_sk#977, cs_ship_customer_sk#978, cs_ship_cdemo_sk#979, cs_ship_hdemo_sk#980, cs_ship_addr_sk#981, cs_call_center_sk#982, cs_catalog_page_sk#983, cs_ship_mode_sk#984, cs_warehouse_sk#985, cs_item_sk#986, cs_promo_sk#987, cs_order_number#988L, cs_quantity#989, cs_wholesale_cost#990, cs_list_price#991, cs_sales_price#992, cs_ext_discount_amt#993, cs_ext_sales_price#994, cs_ext_wholesale_cost#995, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -610102153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005] "
          },
          "5" : {
            "sign" : -1615723307,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "10" : {
            "sign" : -679066203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005]) "
          },
          "6" : {
            "sign" : -1859467034,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "1" : {
            "sign" : -716515388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : -948431701,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "2" : {
            "sign" : 856141848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              },
              "compileTime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "7" : {
            "sign" : -1881149278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014] "
          },
          "3" : {
            "sign" : 1219504107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          }
        },
        "links" : [ {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n+- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n   +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n      +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n         +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014]\n            :     :  +- Join Inner, (cs_sold_date_sk#1005 = d_date_sk#1006)\n            :     :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005]\n            :     :     :  +- Filter (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005])\n            :     :     :     :  +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :     :     :     :     +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#972,cs_ship_date_sk#973,cs_bill_customer_sk#974,cs_bill_cdemo_sk#975,cs_bill_hdemo_sk#976,cs_bill_addr_sk#977,cs_ship_customer_sk#978,cs_ship_cdemo_sk#979,cs_ship_hdemo_sk#980,cs_ship_addr_sk#981,cs_call_center_sk#982,cs_catalog_page_sk#983,cs_ship_mode_sk#984,cs_warehouse_sk#985,cs_item_sk#986,cs_promo_sk#987,cs_order_number#988L,cs_quantity#989,cs_wholesale_cost#990,cs_list_price#991,cs_sales_price#992,cs_ext_discount_amt#993,cs_ext_sales_price#994,cs_ext_wholesale_cost#995,... 10 more fields] parquet\n            :     :     +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :     :        +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :     +- Project [i_item_sk#950, i_brand#958, i_category#962]\n            :        +- Filter (isnotnull(i_item_sk#950) AND (isnotnull(i_category#962) AND isnotnull(i_brand#958)))\n            :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#950,i_item_id#951,i_rec_start_date#952,i_rec_end_date#953,i_item_desc#954,i_current_price#955,i_wholesale_cost#956,i_brand_id#957,i_brand#958,i_class_id#959,i_class#960,i_category_id#961,i_category#962,i_manufact_id#963,i_manufact#964,i_size#965,i_formulation#966,i_color#967,i_units#968,i_container#969,i_manager_id#970,i_product_name#971] parquet\n            +- Project [cc_call_center_sk#1034, cc_name#1040]\n               +- Filter (isnotnull(cc_call_center_sk#1034) AND isnotnull(cc_name#1040))\n                  +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#1034,cc_call_center_id#1035,cc_rec_start_date#1036,cc_rec_end_date#1037,cc_closed_date_sk#1038,cc_open_date_sk#1039,cc_name#1040,cc_class#1041,cc_employees#1042,cc_sq_ft#1043,cc_hours#1044,cc_manager#1045,cc_mkt_id#1046,cc_mkt_class#1047,cc_mkt_desc#1048,cc_market_manager#1049,cc_division#1050,cc_division_name#1051,cc_company#1052,cc_company_name#1053,cc_street_number#1054,cc_street_name#1055,cc_street_type#1056,cc_suite_number#1057,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1531174631,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] Input [7]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668, rn#1069] "
          },
          "1" : {
            "sign" : -1361452498,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "2" : {
            "sign" : 1411476634,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1701800804,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 18175392,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: 26 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n+- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n   +- Sort [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 26\n         +- Exchange hashpartitioning(i_category#962, i_brand#958, cc_name#1040, 200), ENSURE_REQUIREMENTS, [plan_id=2760]\n            +- *(23) HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))], output=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 22\n                     +- ReusedExchange [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L], Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 18175392,
        "inputRowCount" : 176553
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 39317, 32493, 35743, 35743, 35743, 35743, 35743, 29539, 26854, 35743, 29539, 29539, 35743, 35743, 39317, 35743, 29539, 47574, 35743, 29539, 39317, 29539, 35743, 32493, 32493, 26854, 32493, 32493, 29539, 32493, 32493, 39317, 32493, 29539, 35743, 39317, 35743, 35743, 39317, 32493, 35743, 43249, 24413, 43249, 39317, 32493, 29539, 35743, 43249, 32493, 39317, 32493, 43249, 43249, 39317, 32493, 39317, 32493, 32493, 39317, 35743, 35743, 43249, 32493, 39317, 39317, 32493, 35743, 32493, 32493, 26854, 29539, 35743, 26854, 39317, 35743, 32493, 32493, 39317, 43249, 35743, 35743, 32493, 39317, 47574, 39317, 43249, 43249, 35743, 29539, 43249, 32493, 29539, 32493, 47574, 39317, 39317, 35743, 35743, 47574, 24413, 29539, 39317, 43249, 29539, 32493, 39317, 43249, 39317, 29539, 32493, 26854, 35743, 35743, 43249, 35743, 32493, 43249, 22193, 29539, 32493, 39317, 29539, 35743, 32493, 32493, 35743, 29539, 26854, 39317, 32493, 47574, 39317, 24413, 39317, 43249, 32493, 29539, 32493, 43249, 39317, 35743, 32493, 29539, 47574, 29539, 29539, 39317, 35743, 32493, 29539, 35743, 35743, 29539, 35743, 43249, 26854, 29539, 35743, 47574, 39317, 29539, 32493, 39317, 35743, 32493, 35743, 35743, 29539, 39317, 35743, 22193, 35743, 29539, 47574, 35743, 43249, 39317, 39317, 32493, 29539, 24413, 35743, 29539, 35743, 32493, 35743, 32493, 35743, 35743, 39317, 32493, 39317, 47574, 29539, 32493, 35743, 26854, 47574, 35743 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 1437,
        "TotalTasksDurationInMs" : 1426,
        "IOBytes" : {
          "Total" : 11843484,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6716963,
            "SW" : 5126521
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1505451113,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#43 = i_item_sk#7) "
          },
          "1" : {
            "sign" : -1650690780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] "
          },
          "0" : {
            "sign" : -544918013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21042000,
                "rowCount" : 200400
              },
              "compileTime" : {
                "sizeInBytes" : 21042000,
                "rowCount" : 200400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686] "
          },
          "2" : {
            "sign" : 574963717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#91 = cs_call_center_sk#39) "
          },
          "3" : {
            "sign" : -1548920602,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n+- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n   +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n      :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n      :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n      :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n      :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n      :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n      :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n      :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n      :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n      :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n      :     :     +- Project [d_date_sk#63, d_year#69, d_moy#71]\n      :     :        +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n      :     +- Project [i_item_sk#7, i_brand#15, i_category#19]\n      :        +- Filter (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15)))\n      :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n      +- Project [cc_call_center_sk#91, cc_name#97]\n         +- Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n            +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_call_center_id#92,cc_rec_start_date#93,cc_rec_end_date#94,cc_closed_date_sk#95,cc_open_date_sk#96,cc_name#97,cc_class#98,cc_employees#99,cc_sq_ft#100,cc_hours#101,cc_manager#102,cc_mkt_id#103,cc_mkt_class#104,cc_mkt_desc#105,cc_market_manager#106,cc_division#107,cc_division_name#108,cc_company#109,cc_company_name#110,cc_street_number#111,cc_street_name#112,cc_street_type#113,cc_suite_number#114,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -2059094028,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 12340264,
            "rowCount" : 203275,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_item_sk#7, i_brand#15, i_category#19] Arguments: 1 "
          },
          "4" : {
            "sign" : 1696659724,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11941579599,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [cs_item_sk#43] Right keys [1]: [i_item_sk#7] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : 1033038159,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [cc_call_center_sk#91, cc_name#97] Arguments: 2 "
          },
          "5" : {
            "sign" : -1062988178,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] Arguments: [cs_item_sk#43 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 457502517,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1671361056,
            "rowCount" : 34820022,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] Arguments: 15 "
          },
          "1" : {
            "sign" : -1473817764,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 17054190121,
            "rowCount" : 175816393,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] Input [8]: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19, cc_call_center_sk#91, cc_name#97] "
          },
          "0" : {
            "sign" : 2028515766,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 21042000,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97] Keys [5]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71] Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#49))] Aggregate Attributes [1]: [sum#1193L] Results [6]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L] "
          },
          "2" : {
            "sign" : 2043669185,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 18460721265,
            "rowCount" : 175816393,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_call_center_sk#39] Right keys [1]: [cc_call_center_sk#91] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 883138302,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [i_item_sk#7, i_brand#15, i_category#19] Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1913864267,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 10790583975,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19] Input [8]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71, i_item_sk#7, i_brand#15, i_category#19] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[partial_sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L])\n+- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n   +- BroadcastHashJoin [cs_call_center_sk#39], [cc_call_center_sk#91], Inner, BuildRight, false\n      :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n      :  +- SortMergeJoin [cs_item_sk#43], [i_item_sk#7], Inner\n      :     :- Sort [cs_item_sk#43 ASC NULLS FIRST], false, 0\n      :     :  +- ShuffleQueryStage 15\n      :     :     +- Exchange hashpartitioning(cs_item_sk#43, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n      :     :        +- *(10) Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n      :     :           +- *(10) BroadcastHashJoin [cs_sold_date_sk#62], [d_date_sk#63], Inner, BuildRight, false\n      :     :              :- *(10) Filter (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39))\n      :     :              :  +- *(10) ColumnarToRow\n      :     :              :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#39,cs_item_sk#43,cs_sales_price#49,cs_sold_date_sk#62] Batched: true, DataFilters: [isnotnull(cs_item_sk#43), isnotnull(cs_call_center_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>\n      :     :              :           +- SubqueryBroadcast dynamicpruning#1190, 0, [d_date_sk#63], [id=#1529]\n      :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#63, d_year#69, d_moy#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1526]\n                                                +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :              +- BroadcastQueryStage 0\n      :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n      :     :                    +- *(1) Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n      :     :                       +- *(1) ColumnarToRow\n      :     :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- Sort [i_item_sk#7 ASC NULLS FIRST], false, 0\n      :        +- ShuffleQueryStage 1\n      :           +- Exchange hashpartitioning(i_item_sk#7, 200), ENSURE_REQUIREMENTS, [plan_id=528]\n      :              +- *(2) Filter ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15))\n      :                 +- *(2) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7,i_brand#15,i_category#19] Batched: true, DataFilters: [isnotnull(i_item_sk#7), isnotnull(i_category#19), isnotnull(i_brand#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>\n      +- BroadcastQueryStage 2\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=547]\n            +- *(3) Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_name#97] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#91), isnotnull(cc_name#97)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1684750136,
        "inputRowCount" : 35023327
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 2400494, 2413612, 2590646, 2465663, 2649813, 2450001, 2705433, 2380530, 2355435, 2616680, 2799419, 2562971, 2632114, 2407856, 2618585, 2541945, 2616750, 2630097, 2736667, 2663733, 2565696, 2640543, 2576798, 2408155, 2669194, 2632114, 2630097, 2626358, 2607483, 2626358, 2630097, 2538862, 2729544, 2458729, 2618585, 2601317, 2605168, 2561066, 2409691, 2723618, 2496307, 2571042, 2505094, 2435458, 2401262, 2624453, 2630097, 2583802, 2398589, 2398589, 2861442, 2632114, 2590983, 2630097, 2528118, 2750131, 2702910, 2607073, 2464485, 2632114, 2585995, 2593656, 2497433, 2638526, 2360354, 2607073, 2646955, 2522731, 2639367, 2618585, 2632114, 2509355, 2710498, 2618585, 2502421, 2521184, 2352628, 2686893, 2618585, 2548018, 2566054, 2402622, 2665830, 2546113, 2657066, 2465253, 2457961, 2624341, 2693640, 2630097, 2630097, 2632114, 2624341, 2365903, 2630097, 2618585, 2546523, 2390998, 2649813, 2390998, 2599412, 2632114, 2624341, 2630097, 2465323, 2624341, 2630097, 2766574, 2392833, 2557625, 2503968, 2466800, 2390998, 2641384, 2548018, 2648972, 2632114, 2409691, 2392833, 2600661, 2535491, 2509713, 2646875, 2593656, 2497433, 2632114, 2604512, 2402622, 2624341, 2472146, 2630097, 2618585, 2584459, 2494062, 2568369, 2596381, 2404415, 2642881, 2612829, 2593656, 2622436, 2551511, 2630097, 2648637, 2599412, 2630097, 2532696, 2566054, 2630097, 2656225, 2620602, 2237724, 2630097, 2505094, 2641384, 2630097, 2680591, 2458781, 2618585, 2390998, 2434978, 2667512, 2607073, 2713862, 2632114, 2630097, 2610924, 2373564, 2705463, 2612829, 2503189, 2692799, 2632114, 2618585, 2630097, 2610924, 2228923, 2390998, 2416285, 2599412, 2624341, 2597988, 2601317, 2390998, 2672162, 2639367, 2612829, 2487878, 2566822, 2390998, 2624341, 2553416, 2588380, 2390998, 2638526, 2407856, 2632114, 2421203, 2630097, 2683114 ],
        "0" : [ 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 22193, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 22193, 24413, 24413, 24413, 22193, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 26854, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 22193, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 24413, 26854, 24413 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 10848,
        "TotalTasksDurationInMs" : 66581,
        "IOBytes" : {
          "Total" : 548626399,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 494193033,
            "SW" : 54433366
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 1695921596,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1005 = d_date_sk#1006) "
          },
          "4" : {
            "sign" : 1337949296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982) "
          },
          "11" : {
            "sign" : -1197689096,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#972, cs_ship_date_sk#973, cs_bill_customer_sk#974, cs_bill_cdemo_sk#975, cs_bill_hdemo_sk#976, cs_bill_addr_sk#977, cs_ship_customer_sk#978, cs_ship_cdemo_sk#979, cs_ship_hdemo_sk#980, cs_ship_addr_sk#981, cs_call_center_sk#982, cs_catalog_page_sk#983, cs_ship_mode_sk#984, cs_warehouse_sk#985, cs_item_sk#986, cs_promo_sk#987, cs_order_number#988L, cs_quantity#989, cs_wholesale_cost#990, cs_list_price#991, cs_sales_price#992, cs_ext_discount_amt#993, cs_ext_sales_price#994, cs_ext_wholesale_cost#995, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -610102153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005] "
          },
          "5" : {
            "sign" : -1615723307,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962] "
          },
          "10" : {
            "sign" : -679066203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005]) "
          },
          "6" : {
            "sign" : -1859467034,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#986 = i_item_sk#950) "
          },
          "1" : {
            "sign" : -716515388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "0" : {
            "sign" : -948431701,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] "
          },
          "2" : {
            "sign" : 856141848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              },
              "compileTime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668] "
          },
          "7" : {
            "sign" : -1881149278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014] "
          },
          "3" : {
            "sign" : 1219504107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040] "
          }
        },
        "links" : [ {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n+- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n   +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n      +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n         +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014]\n            :     :  +- Join Inner, (cs_sold_date_sk#1005 = d_date_sk#1006)\n            :     :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005]\n            :     :     :  +- Filter (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005])\n            :     :     :     :  +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :     :     :     :     +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#972,cs_ship_date_sk#973,cs_bill_customer_sk#974,cs_bill_cdemo_sk#975,cs_bill_hdemo_sk#976,cs_bill_addr_sk#977,cs_ship_customer_sk#978,cs_ship_cdemo_sk#979,cs_ship_hdemo_sk#980,cs_ship_addr_sk#981,cs_call_center_sk#982,cs_catalog_page_sk#983,cs_ship_mode_sk#984,cs_warehouse_sk#985,cs_item_sk#986,cs_promo_sk#987,cs_order_number#988L,cs_quantity#989,cs_wholesale_cost#990,cs_list_price#991,cs_sales_price#992,cs_ext_discount_amt#993,cs_ext_sales_price#994,cs_ext_wholesale_cost#995,... 10 more fields] parquet\n            :     :     +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :     :        +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :     +- Project [i_item_sk#950, i_brand#958, i_category#962]\n            :        +- Filter (isnotnull(i_item_sk#950) AND (isnotnull(i_category#962) AND isnotnull(i_brand#958)))\n            :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#950,i_item_id#951,i_rec_start_date#952,i_rec_end_date#953,i_item_desc#954,i_current_price#955,i_wholesale_cost#956,i_brand_id#957,i_brand#958,i_class_id#959,i_class#960,i_category_id#961,i_category#962,i_manufact_id#963,i_manufact#964,i_size#965,i_formulation#966,i_color#967,i_units#968,i_container#969,i_manager_id#970,i_product_name#971] parquet\n            +- Project [cc_call_center_sk#1034, cc_name#1040]\n               +- Filter (isnotnull(cc_call_center_sk#1034) AND isnotnull(cc_name#1040))\n                  +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#1034,cc_call_center_id#1035,cc_rec_start_date#1036,cc_rec_end_date#1037,cc_closed_date_sk#1038,cc_open_date_sk#1039,cc_name#1040,cc_class#1041,cc_employees#1042,cc_sq_ft#1043,cc_hours#1044,cc_manager#1045,cc_mkt_id#1046,cc_mkt_class#1047,cc_mkt_desc#1048,cc_market_manager#1049,cc_division#1050,cc_division_name#1051,cc_company#1052,cc_company_name#1053,cc_street_number#1054,cc_street_name#1055,cc_street_type#1056,cc_suite_number#1057,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1531174631,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 18513142,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069] Input [7]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668, rn#1069] "
          },
          "1" : {
            "sign" : -1361452498,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 20364457,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST] "
          },
          "2" : {
            "sign" : 1411476634,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1701800804,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 18175392,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668] Arguments: 26 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n+- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n   +- Sort [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 26\n         +- Exchange hashpartitioning(i_category#962, i_brand#958, cc_name#1040, 200), ENSURE_REQUIREMENTS, [plan_id=2760]\n            +- *(23) HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))], output=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 22\n                     +- ReusedExchange [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L], Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 18175392,
        "inputRowCount" : 176553
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 39317, 32493, 35743, 35743, 35743, 35743, 35743, 29539, 26854, 35743, 29539, 29539, 35743, 35743, 39317, 35743, 29539, 47574, 35743, 29539, 39317, 29539, 35743, 32493, 32493, 26854, 32493, 32493, 29539, 32493, 32493, 39317, 32493, 29539, 35743, 39317, 35743, 35743, 39317, 32493, 35743, 43249, 24413, 43249, 39317, 32493, 29539, 35743, 43249, 32493, 39317, 32493, 43249, 43249, 39317, 32493, 39317, 32493, 32493, 39317, 35743, 35743, 43249, 32493, 39317, 39317, 32493, 35743, 32493, 32493, 26854, 29539, 35743, 26854, 39317, 35743, 32493, 32493, 39317, 43249, 35743, 35743, 32493, 39317, 47574, 39317, 43249, 43249, 35743, 29539, 43249, 32493, 29539, 32493, 47574, 39317, 39317, 35743, 35743, 47574, 24413, 29539, 39317, 43249, 29539, 32493, 39317, 43249, 39317, 29539, 32493, 26854, 35743, 35743, 43249, 35743, 32493, 43249, 22193, 29539, 32493, 39317, 29539, 35743, 32493, 32493, 35743, 29539, 26854, 39317, 32493, 47574, 39317, 24413, 39317, 43249, 32493, 29539, 32493, 43249, 39317, 35743, 32493, 29539, 47574, 29539, 29539, 39317, 35743, 32493, 29539, 35743, 35743, 29539, 35743, 43249, 26854, 29539, 35743, 47574, 39317, 29539, 32493, 39317, 35743, 32493, 35743, 35743, 29539, 39317, 35743, 22193, 35743, 29539, 47574, 35743, 43249, 39317, 39317, 32493, 29539, 24413, 35743, 29539, 35743, 32493, 35743, 32493, 35743, 35743, 39317, 32493, 39317, 47574, 29539, 32493, 35743, 26854, 47574, 35743 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 1599,
        "TotalTasksDurationInMs" : 1587,
        "IOBytes" : {
          "Total" : 11840781,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6716963,
            "SW" : 5123818
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1918776278,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 142188288,
                "rowCount" : 1382368
              },
              "compileTime" : {
                "sizeInBytes" : 21042000,
                "rowCount" : 200400
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686], HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -280723728,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 142188288,
            "rowCount" : 1382368,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L] Keys [5]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71] Functions [1]: [sum(UnscaledValue(cs_sales_price#49))] Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#49))#675L] Results [7]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49))#675L,17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49))#675L,17,2) AS _w0#686] "
          },
          "1" : {
            "sign" : -1896341443,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 21042000,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L] Arguments: 20 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686])\n+- ShuffleQueryStage 20\n   +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n      +- *(15) HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[partial_sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L])\n         +- *(15) Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            +- *(15) BroadcastHashJoin [cs_call_center_sk#39], [cc_call_center_sk#91], Inner, BuildRight, false\n               :- *(15) Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n               :  +- *(15) SortMergeJoin [cs_item_sk#43], [i_item_sk#7], Inner\n               :     :- *(13) Sort [cs_item_sk#43 ASC NULLS FIRST], false, 0\n               :     :  +- AQEShuffleRead coalesced\n               :     :     +- ShuffleQueryStage 15\n               :     :        +- Exchange hashpartitioning(cs_item_sk#43, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n               :     :           +- *(10) Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n               :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#62], [d_date_sk#63], Inner, BuildRight, false\n               :     :                 :- *(10) Filter (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39))\n               :     :                 :  +- *(10) ColumnarToRow\n               :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#39,cs_item_sk#43,cs_sales_price#49,cs_sold_date_sk#62] Batched: true, DataFilters: [isnotnull(cs_item_sk#43), isnotnull(cs_call_center_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>\n               :     :                 :           +- SubqueryBroadcast dynamicpruning#1190, 0, [d_date_sk#63], [id=#1529]\n               :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#63, d_year#69, d_moy#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1526]\n                                                            +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :     :                 +- BroadcastQueryStage 0\n               :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n               :     :                       +- *(1) Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n               :     :                          +- *(1) ColumnarToRow\n               :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :     +- *(14) Sort [i_item_sk#7 ASC NULLS FIRST], false, 0\n               :        +- AQEShuffleRead coalesced\n               :           +- ShuffleQueryStage 1\n               :              +- Exchange hashpartitioning(i_item_sk#7, 200), ENSURE_REQUIREMENTS, [plan_id=528]\n               :                 +- *(2) Filter ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15))\n               :                    +- *(2) ColumnarToRow\n               :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7,i_brand#15,i_category#19] Batched: true, DataFilters: [isnotnull(i_item_sk#7), isnotnull(i_category#19), isnotnull(i_brand#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>\n               +- BroadcastQueryStage 2\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=547]\n                     +- *(3) Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n                        +- *(3) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_name#97] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#91), isnotnull(cc_name#97)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 142188288,
        "inputRowCount" : 1382368
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 285944, 310962, 285944, 259944, 285944, 285944, 285944, 285944, 293092, 285944, 307388, 285944, 296666, 285944, 285944, 285944, 285944, 285944, 263194, 285944, 285944, 289518, 285944, 285944, 285944, 285944, 285944, 259944, 269694, 285944, 289518, 285944, 285944, 282694, 285944, 285944, 293092, 263194, 259944, 285944, 285944, 285944, 285944, 279444, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 259944, 285944, 263194, 285944, 263194, 285944, 276194, 285944, 285944, 285944, 285944, 289518, 259944, 285944, 285944, 285944, 285944, 314536, 293092, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 263194, 285944, 285944, 285944, 307388, 285944, 285944, 285944, 289518, 285944, 314536, 314536, 285944, 285944, 263194, 285944, 285944, 285944, 314536, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 282694, 285944, 285944, 285944, 285944, 259944, 285944, 285944, 285944, 285944, 285944, 285944, 296666, 289518, 300240, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 282694, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 276194, 307388, 285944, 285944, 285944, 285944, 259944, 279444, 285944, 276194, 285944, 285944, 285944, 285944, 282694, 285944, 272944, 285944, 285944, 285944, 282694, 285944, 279444, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 300240, 285944, 276194, 285944, 279444, 285944, 285944, 285944, 269694, 285944, 269694, 285944, 285944, 285944, 282694, 285944 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 1208,
        "TotalTasksDurationInMs" : 1198,
        "IOBytes" : {
          "Total" : 61748750,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 54433366,
            "SW" : 7315384
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : 1979560344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 10790583975,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082] "
          },
          "8" : {
            "sign" : -517316039,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 20364457,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : 2057891038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5187977891591434070310,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 5187977891591434070310,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1))) "
          },
          "15" : {
            "sign" : -801353033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#1125 = d_date_sk#1126) "
          },
          "11" : {
            "sign" : -1636631023,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 18460721265,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102) "
          },
          "9" : {
            "sign" : 838872764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              },
              "compileTime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668] "
          },
          "13" : {
            "sign" : -1350091035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 11941579599,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#1106 = i_item_sk#1070) "
          },
          "16" : {
            "sign" : 152244955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125] "
          },
          "5" : {
            "sign" : 443541685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 280232166511305,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 280232166511305,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] "
          },
          "10" : {
            "sign" : 1148064590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              },
              "compileTime" : {
                "sizeInBytes" : 17054190121,
                "rowCount" : 175816393
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160] "
          },
          "6" : {
            "sign" : -937555685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 440364833089194,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 440364833089194,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1))) "
          },
          "1" : {
            "sign" : -52145604,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1602132059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125]) "
          },
          "14" : {
            "sign" : -296509916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134] "
          },
          "0" : {
            "sign" : -1141689871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -98551973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1392504932,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#1092, cs_ship_date_sk#1093, cs_bill_customer_sk#1094, cs_bill_cdemo_sk#1095, cs_bill_hdemo_sk#1096, cs_bill_addr_sk#1097, cs_ship_customer_sk#1098, cs_ship_cdemo_sk#1099, cs_ship_hdemo_sk#1100, cs_ship_addr_sk#1101, cs_call_center_sk#1102, cs_catalog_page_sk#1103, cs_ship_mode_sk#1104, cs_warehouse_sk#1105, cs_item_sk#1106, cs_promo_sk#1107, cs_order_number#1108L, cs_quantity#1109, cs_wholesale_cost#1110, cs_list_price#1111, cs_sales_price#1112, cs_ext_discount_amt#1113, cs_ext_sales_price#1114, cs_ext_wholesale_cost#1115, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : -456138138,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 18513142,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189] "
          },
          "3" : {
            "sign" : 1131013316,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2142860433483418420345,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], true\n      +- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n         +- Join Inner, ((((i_category#19 = i_category#1082) AND (i_brand#15 = i_brand#1078)) AND (cc_name#97 = cc_name#1160)) AND (rn#670 = (rn#1189 - 1)))\n            :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n            :  +- Join Inner, ((((i_category#19 = i_category#962) AND (i_brand#15 = i_brand#958)) AND (cc_name#97 = cc_name#1040)) AND (rn#670 = (rn#1069 + 1)))\n            :     :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n            :     :  +- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n            :     :     +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n            :     :        +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n            :     :           +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            :     :              +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n            :     :                 +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n            :     :                    +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n            :     :                       :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n            :     :                       :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n            :     :                       :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n            :     :                       :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n            :     :                       :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n            :     :                       :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n            :     :                       :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n            :     :                       :     :     +- Project [d_date_sk#63, d_year#69, d_moy#71]\n            :     :                       :     :        +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            :     :                       :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n            :     :                       :     +- Project [i_item_sk#7, i_brand#15, i_category#19]\n            :     :                       :        +- Filter (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15)))\n            :     :                       :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n            :     :                       +- Project [cc_call_center_sk#91, cc_name#97]\n            :     :                          +- Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n            :     :                             +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_call_center_id#92,cc_rec_start_date#93,cc_rec_end_date#94,cc_closed_date_sk#95,cc_open_date_sk#96,cc_name#97,cc_class#98,cc_employees#99,cc_sq_ft#100,cc_hours#101,cc_manager#102,cc_mkt_id#103,cc_mkt_class#104,cc_mkt_desc#105,cc_market_manager#106,cc_division#107,cc_division_name#108,cc_company#109,cc_company_name#110,cc_street_number#111,cc_street_name#112,cc_street_type#113,cc_suite_number#114,... 7 more fields] parquet\n            :     +- Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n            :        +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n            :           +- Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668]\n            :              +- Project [i_brand#958, i_category#962, cs_sales_price#992, d_year#1012, d_moy#1014, cc_name#1040]\n            :                 +- Join Inner, (cc_call_center_sk#1034 = cs_call_center_sk#982)\n            :                    :- Project [cs_call_center_sk#982, cs_sales_price#992, d_year#1012, d_moy#1014, i_brand#958, i_category#962]\n            :                    :  +- Join Inner, (cs_item_sk#986 = i_item_sk#950)\n            :                    :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, d_year#1012, d_moy#1014]\n            :                    :     :  +- Join Inner, (cs_sold_date_sk#1005 = d_date_sk#1006)\n            :                    :     :     :- Project [cs_call_center_sk#982, cs_item_sk#986, cs_sales_price#992, cs_sold_date_sk#1005]\n            :                    :     :     :  +- Filter (((isnotnull(cs_item_sk#986) AND isnotnull(cs_sold_date_sk#1005)) AND isnotnull(cs_call_center_sk#982)) AND dynamicpruning#1191 [cs_sold_date_sk#1005])\n            :                    :     :     :     :  +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :                    :     :     :     :     +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :                    :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :                    :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#972,cs_ship_date_sk#973,cs_bill_customer_sk#974,cs_bill_cdemo_sk#975,cs_bill_hdemo_sk#976,cs_bill_addr_sk#977,cs_ship_customer_sk#978,cs_ship_cdemo_sk#979,cs_ship_hdemo_sk#980,cs_ship_addr_sk#981,cs_call_center_sk#982,cs_catalog_page_sk#983,cs_ship_mode_sk#984,cs_warehouse_sk#985,cs_item_sk#986,cs_promo_sk#987,cs_order_number#988L,cs_quantity#989,cs_wholesale_cost#990,cs_list_price#991,cs_sales_price#992,cs_ext_discount_amt#993,cs_ext_sales_price#994,cs_ext_wholesale_cost#995,... 10 more fields] parquet\n            :                    :     :     +- Project [d_date_sk#1006, d_year#1012, d_moy#1014]\n            :                    :     :        +- Filter ((((d_year#1012 = 2000) OR ((d_year#1012 = 1999) AND (d_moy#1014 = 12))) OR ((d_year#1012 = 2001) AND (d_moy#1014 = 1))) AND isnotnull(d_date_sk#1006))\n            :                    :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1006,d_date_id#1007,d_date#1008,d_month_seq#1009,d_week_seq#1010,d_quarter_seq#1011,d_year#1012,d_dow#1013,d_moy#1014,d_dom#1015,d_qoy#1016,d_fy_year#1017,d_fy_quarter_seq#1018,d_fy_week_seq#1019,d_day_name#1020,d_quarter_name#1021,d_holiday#1022,d_weekend#1023,d_following_holiday#1024,d_first_dom#1025,d_last_dom#1026,d_same_day_ly#1027,d_same_day_lq#1028,d_current_day#1029,... 4 more fields] parquet\n            :                    :     +- Project [i_item_sk#950, i_brand#958, i_category#962]\n            :                    :        +- Filter (isnotnull(i_item_sk#950) AND (isnotnull(i_category#962) AND isnotnull(i_brand#958)))\n            :                    :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#950,i_item_id#951,i_rec_start_date#952,i_rec_end_date#953,i_item_desc#954,i_current_price#955,i_wholesale_cost#956,i_brand_id#957,i_brand#958,i_class_id#959,i_class#960,i_category_id#961,i_category#962,i_manufact_id#963,i_manufact#964,i_size#965,i_formulation#966,i_color#967,i_units#968,i_container#969,i_manager_id#970,i_product_name#971] parquet\n            :                    +- Project [cc_call_center_sk#1034, cc_name#1040]\n            :                       +- Filter (isnotnull(cc_call_center_sk#1034) AND isnotnull(cc_name#1040))\n            :                          +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#1034,cc_call_center_id#1035,cc_rec_start_date#1036,cc_rec_end_date#1037,cc_closed_date_sk#1038,cc_open_date_sk#1039,cc_name#1040,cc_class#1041,cc_employees#1042,cc_sq_ft#1043,cc_hours#1044,cc_manager#1045,cc_mkt_id#1046,cc_mkt_class#1047,cc_mkt_desc#1048,cc_market_manager#1049,cc_division#1050,cc_division_name#1051,cc_company#1052,cc_company_name#1053,cc_street_number#1054,cc_street_name#1055,cc_street_type#1056,cc_suite_number#1057,... 7 more fields] parquet\n            +- Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n               +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                  +- Aggregate [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134], [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, MakeDecimal(sum(UnscaledValue(cs_sales_price#1112)),17,2) AS sum_sales#668]\n                     +- Project [i_brand#1078, i_category#1082, cs_sales_price#1112, d_year#1132, d_moy#1134, cc_name#1160]\n                        +- Join Inner, (cc_call_center_sk#1154 = cs_call_center_sk#1102)\n                           :- Project [cs_call_center_sk#1102, cs_sales_price#1112, d_year#1132, d_moy#1134, i_brand#1078, i_category#1082]\n                           :  +- Join Inner, (cs_item_sk#1106 = i_item_sk#1070)\n                           :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, d_year#1132, d_moy#1134]\n                           :     :  +- Join Inner, (cs_sold_date_sk#1125 = d_date_sk#1126)\n                           :     :     :- Project [cs_call_center_sk#1102, cs_item_sk#1106, cs_sales_price#1112, cs_sold_date_sk#1125]\n                           :     :     :  +- Filter (((isnotnull(cs_item_sk#1106) AND isnotnull(cs_sold_date_sk#1125)) AND isnotnull(cs_call_center_sk#1102)) AND dynamicpruning#1192 [cs_sold_date_sk#1125])\n                           :     :     :     :  +- Project [d_date_sk#1126, d_year#1132, d_moy#1134]\n                           :     :     :     :     +- Filter ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126))\n                           :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1126,d_date_id#1127,d_date#1128,d_month_seq#1129,d_week_seq#1130,d_quarter_seq#1131,d_year#1132,d_dow#1133,d_moy#1134,d_dom#1135,d_qoy#1136,d_fy_year#1137,d_fy_quarter_seq#1138,d_fy_week_seq#1139,d_day_name#1140,d_quarter_name#1141,d_holiday#1142,d_weekend#1143,d_following_holiday#1144,d_first_dom#1145,d_last_dom#1146,d_same_day_ly#1147,d_same_day_lq#1148,d_current_day#1149,... 4 more fields] parquet\n                           :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#1092,cs_ship_date_sk#1093,cs_bill_customer_sk#1094,cs_bill_cdemo_sk#1095,cs_bill_hdemo_sk#1096,cs_bill_addr_sk#1097,cs_ship_customer_sk#1098,cs_ship_cdemo_sk#1099,cs_ship_hdemo_sk#1100,cs_ship_addr_sk#1101,cs_call_center_sk#1102,cs_catalog_page_sk#1103,cs_ship_mode_sk#1104,cs_warehouse_sk#1105,cs_item_sk#1106,cs_promo_sk#1107,cs_order_number#1108L,cs_quantity#1109,cs_wholesale_cost#1110,cs_list_price#1111,cs_sales_price#1112,cs_ext_discount_amt#1113,cs_ext_sales_price#1114,cs_ext_wholesale_cost#1115,... 10 more fields] parquet\n                           :     :     +- Project [d_date_sk#1126, d_year#1132, d_moy#1134]\n                           :     :        +- Filter ((((d_year#1132 = 2000) OR ((d_year#1132 = 1999) AND (d_moy#1134 = 12))) OR ((d_year#1132 = 2001) AND (d_moy#1134 = 1))) AND isnotnull(d_date_sk#1126))\n                           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1126,d_date_id#1127,d_date#1128,d_month_seq#1129,d_week_seq#1130,d_quarter_seq#1131,d_year#1132,d_dow#1133,d_moy#1134,d_dom#1135,d_qoy#1136,d_fy_year#1137,d_fy_quarter_seq#1138,d_fy_week_seq#1139,d_day_name#1140,d_quarter_name#1141,d_holiday#1142,d_weekend#1143,d_following_holiday#1144,d_first_dom#1145,d_last_dom#1146,d_same_day_ly#1147,d_same_day_lq#1148,d_current_day#1149,... 4 more fields] parquet\n                           :     +- Project [i_item_sk#1070, i_brand#1078, i_category#1082]\n                           :        +- Filter (isnotnull(i_item_sk#1070) AND (isnotnull(i_category#1082) AND isnotnull(i_brand#1078)))\n                           :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#1070,i_item_id#1071,i_rec_start_date#1072,i_rec_end_date#1073,i_item_desc#1074,i_current_price#1075,i_wholesale_cost#1076,i_brand_id#1077,i_brand#1078,i_class_id#1079,i_class#1080,i_category_id#1081,i_category#1082,i_manufact_id#1083,i_manufact#1084,i_size#1085,i_formulation#1086,i_color#1087,i_units#1088,i_container#1089,i_manager_id#1090,i_product_name#1091] parquet\n                           +- Project [cc_call_center_sk#1154, cc_name#1160]\n                              +- Filter (isnotnull(cc_call_center_sk#1154) AND isnotnull(cc_name#1160))\n                                 +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#1154,cc_call_center_id#1155,cc_rec_start_date#1156,cc_rec_end_date#1157,cc_closed_date_sk#1158,cc_open_date_sk#1159,cc_name#1160,cc_class#1161,cc_employees#1162,cc_sq_ft#1163,cc_hours#1164,cc_manager#1165,cc_mkt_id#1166,cc_mkt_class#1167,cc_mkt_desc#1168,cc_market_manager#1169,cc_division#1170,cc_division_name#1171,cc_company#1172,cc_company_name#1173,cc_street_number#1174,cc_street_name#1175,cc_street_type#1176,cc_suite_number#1177,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 390484716,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [i_category#962, i_brand#958, cc_name#1040, sum_sales#692, rn#1069] Arguments: 30 "
          },
          "4" : {
            "sign" : 1636925940,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 440364833089194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [4]: [i_category#19, i_brand#15, cc_name#97, rn#670] Right keys [4]: [i_category#962, i_brand#958, cc_name#1040, (rn#1069 + 1)] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : 1674172254,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#700, rn#1189] Arguments: [i_category#1082 ASC NULLS FIRST, i_brand#1078 ASC NULLS FIRST, cc_name#1160 ASC NULLS FIRST, (rn#1189 - 1) ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -930894784,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] Arguments: [i_category#19 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, cc_name#97 ASC NULLS FIRST, rn#670 ASC NULLS FIRST], false, 0 "
          },
          "10" : {
            "sign" : -821923063,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16762968,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#700, rn#1189] Arguments: 31 "
          },
          "6" : {
            "sign" : 976020479,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 20278304,
            "rowCount" : 150426,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] Arguments: 29 "
          },
          "1" : {
            "sign" : -1199954227,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2142860433483418420345,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672] Input [14]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692, i_category#1082, i_brand#1078, cc_name#1160, sum_sales#700, rn#1189] "
          },
          "0" : {
            "sign" : -999761251,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, psum#671, nsum#672] Arguments: 100, [(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST, nsum#672 ASC NULLS FIRST], [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, psum#671, nsum#672] "
          },
          "2" : {
            "sign" : 245016791,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 5187977891591434070310,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [4]: [i_category#19, i_brand#15, cc_name#97, rn#670] Right keys [4]: [i_category#1082, i_brand#1078, cc_name#1160, (rn#1189 - 1)] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 767856691,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [i_category#962, i_brand#958, cc_name#1040, sum_sales#692, rn#1069] Arguments: [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, (rn#1069 + 1) ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 218198988,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 280232166511305,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [9]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692] Input [13]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, i_category#962, i_brand#958, cc_name#1040, sum_sales#692, rn#1069] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "ShuffleQueryStage",
          "toId" : 9,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[(sum_sales#668 - avg_monthly_sales#669) ASC NULLS FIRST,nsum#672 ASC NULLS FIRST], output=[cc_name#97,d_year#69,d_moy#71,avg_monthly_sales#669,sum_sales#668,psum#671,nsum#672])\n+- Project [cc_name#97, d_year#69, d_moy#71, avg_monthly_sales#669, sum_sales#668, sum_sales#692 AS psum#671, sum_sales#700 AS nsum#672]\n   +- SortMergeJoin [i_category#19, i_brand#15, cc_name#97, rn#670], [i_category#1082, i_brand#1078, cc_name#1160, (rn#1189 - 1)], Inner\n      :- Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670, sum_sales#692]\n      :  +- SortMergeJoin [i_category#19, i_brand#15, cc_name#97, rn#670], [i_category#962, i_brand#958, cc_name#1040, (rn#1069 + 1)], Inner\n      :     :- Sort [i_category#19 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, cc_name#97 ASC NULLS FIRST, rn#670 ASC NULLS FIRST], false, 0\n      :     :  +- ShuffleQueryStage 29\n      :     :     +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, rn#670, 200), ENSURE_REQUIREMENTS, [plan_id=2997]\n      :     :        +- *(27) Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n      :     :           +- *(27) Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n      :     :              +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n      :     :                 +- *(26) Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n      :     :                    +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n      :     :                       +- *(25) Sort [i_category#19 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, cc_name#97 ASC NULLS FIRST, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST], false, 0\n      :     :                          +- AQEShuffleRead coalesced\n      :     :                             +- ShuffleQueryStage 25\n      :     :                                +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, 200), ENSURE_REQUIREMENTS, [plan_id=2737]\n      :     :                                   +- *(22) HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686])\n      :     :                                      +- AQEShuffleRead coalesced\n      :     :                                         +- ShuffleQueryStage 20\n      :     :                                            +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n      :     :                                               +- *(15) HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[partial_sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L])\n      :     :                                                  +- *(15) Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n      :     :                                                     +- *(15) BroadcastHashJoin [cs_call_center_sk#39], [cc_call_center_sk#91], Inner, BuildRight, false\n      :     :                                                        :- *(15) Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n      :     :                                                        :  +- *(15) SortMergeJoin [cs_item_sk#43], [i_item_sk#7], Inner\n      :     :                                                        :     :- *(13) Sort [cs_item_sk#43 ASC NULLS FIRST], false, 0\n      :     :                                                        :     :  +- AQEShuffleRead coalesced\n      :     :                                                        :     :     +- ShuffleQueryStage 15\n      :     :                                                        :     :        +- Exchange hashpartitioning(cs_item_sk#43, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n      :     :                                                        :     :           +- *(10) Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n      :     :                                                        :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#62], [d_date_sk#63], Inner, BuildRight, false\n      :     :                                                        :     :                 :- *(10) Filter (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39))\n      :     :                                                        :     :                 :  +- *(10) ColumnarToRow\n      :     :                                                        :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#39,cs_item_sk#43,cs_sales_price#49,cs_sold_date_sk#62] Batched: true, DataFilters: [isnotnull(cs_item_sk#43), isnotnull(cs_call_center_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>\n      :     :                                                        :     :                 :           +- SubqueryBroadcast dynamicpruning#1190, 0, [d_date_sk#63], [id=#1529]\n      :     :                                                        :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                               +- == Final Plan ==\n                                                                                                                  BroadcastQueryStage 1\n                                                                                                                  +- ReusedExchange [d_date_sk#63, d_year#69, d_moy#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                                                                                                               +- == Initial Plan ==\n                                                                                                                  BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1526]\n                                                                                                                  +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                                                                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :                                                        :     :                 +- BroadcastQueryStage 0\n      :     :                                                        :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n      :     :                                                        :     :                       +- *(1) Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n      :     :                                                        :     :                          +- *(1) ColumnarToRow\n      :     :                                                        :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :                                                        :     +- *(14) Sort [i_item_sk#7 ASC NULLS FIRST], false, 0\n      :     :                                                        :        +- AQEShuffleRead coalesced\n      :     :                                                        :           +- ShuffleQueryStage 1\n      :     :                                                        :              +- Exchange hashpartitioning(i_item_sk#7, 200), ENSURE_REQUIREMENTS, [plan_id=528]\n      :     :                                                        :                 +- *(2) Filter ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15))\n      :     :                                                        :                    +- *(2) ColumnarToRow\n      :     :                                                        :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7,i_brand#15,i_category#19] Batched: true, DataFilters: [isnotnull(i_item_sk#7), isnotnull(i_category#19), isnotnull(i_brand#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>\n      :     :                                                        +- BroadcastQueryStage 2\n      :     :                                                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=547]\n      :     :                                                              +- *(3) Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n      :     :                                                                 +- *(3) ColumnarToRow\n      :     :                                                                    +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_name#97] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#91), isnotnull(cc_name#97)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>\n      :     +- Sort [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, (rn#1069 + 1) ASC NULLS FIRST], false, 0\n      :        +- ShuffleQueryStage 30\n      :           +- Exchange hashpartitioning(i_category#962, i_brand#958, cc_name#1040, (rn#1069 + 1), 200), ENSURE_REQUIREMENTS, [plan_id=3089]\n      :              +- *(29) Project [i_category#962, i_brand#958, cc_name#1040, sum_sales#668 AS sum_sales#692, rn#1069]\n      :                 +- Window [rank(d_year#1012, d_moy#1014) windowspecdefinition(i_category#962, i_brand#958, cc_name#1040, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1069], [i_category#962, i_brand#958, cc_name#1040], [d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST]\n      :                    +- *(28) Sort [i_category#962 ASC NULLS FIRST, i_brand#958 ASC NULLS FIRST, cc_name#1040 ASC NULLS FIRST, d_year#1012 ASC NULLS FIRST, d_moy#1014 ASC NULLS FIRST], false, 0\n      :                       +- AQEShuffleRead coalesced\n      :                          +- ShuffleQueryStage 26\n      :                             +- Exchange hashpartitioning(i_category#962, i_brand#958, cc_name#1040, 200), ENSURE_REQUIREMENTS, [plan_id=2760]\n      :                                +- *(23) HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))], output=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668])\n      :                                   +- AQEShuffleRead coalesced\n      :                                      +- ShuffleQueryStage 22\n      :                                         +- ReusedExchange [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L], Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n      +- Sort [i_category#1082 ASC NULLS FIRST, i_brand#1078 ASC NULLS FIRST, cc_name#1160 ASC NULLS FIRST, (rn#1189 - 1) ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 31\n            +- Exchange hashpartitioning(i_category#1082, i_brand#1078, cc_name#1160, (rn#1189 - 1), 200), ENSURE_REQUIREMENTS, [plan_id=3119]\n               +- *(31) Project [i_category#1082, i_brand#1078, cc_name#1160, sum_sales#668 AS sum_sales#700, rn#1189]\n                  +- Window [rank(d_year#1132, d_moy#1134) windowspecdefinition(i_category#1082, i_brand#1078, cc_name#1160, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#1189], [i_category#1082, i_brand#1078, cc_name#1160], [d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST]\n                     +- *(30) Sort [i_category#1082 ASC NULLS FIRST, i_brand#1078 ASC NULLS FIRST, cc_name#1160 ASC NULLS FIRST, d_year#1132 ASC NULLS FIRST, d_moy#1134 ASC NULLS FIRST], false, 0\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 28\n                              +- ReusedExchange [i_category#1082, i_brand#1078, cc_name#1160, d_year#1132, d_moy#1134, sum_sales#668], Exchange hashpartitioning(i_category#962, i_brand#958, cc_name#1040, 200), ENSURE_REQUIREMENTS, [plan_id=2760]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 53804240,
        "inputRowCount" : 503532
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 32493, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 32493, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 32493, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 32493, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743 ],
        "7" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 24413, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854 ],
        "6" : [ 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 29539, 26854, 26854, 26854, 26854, 26854, 24413, 29539, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 29539, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 24413, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854, 26854 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 26 ],
      "Objectives" : {
        "DurationInMs" : 1951,
        "TotalTasksDurationInMs" : 1942,
        "IOBytes" : {
          "Total" : 17212232,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 17212232,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1018446464,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 142188288,
                "rowCount" : 1382368
              },
              "compileTime" : {
                "sizeInBytes" : 19438800,
                "rowCount" : 200400
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992)),17,2) AS sum_sales#668], HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 364031976,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 142188288,
            "rowCount" : 1382368,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L] Keys [5]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014] Functions [1]: [sum(UnscaledValue(cs_sales_price#992))] Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#992))#675L] Results [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, MakeDecimal(sum(UnscaledValue(cs_sales_price#992))#675L,17,2) AS sum_sales#668] "
          },
          "1" : {
            "sign" : -1817011731,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 19438800,
            "rowCount" : 200400,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L] Arguments: 22 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014], functions=[sum(UnscaledValue(cs_sales_price#992))], output=[i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum_sales#668])\n+- ShuffleQueryStage 22\n   +- ReusedExchange [i_category#962, i_brand#958, cc_name#1040, d_year#1012, d_moy#1014, sum#1196L], Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 142188288,
        "inputRowCount" : 1382368
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 285944, 310962, 285944, 259944, 285944, 285944, 285944, 285944, 293092, 285944, 307388, 285944, 296666, 285944, 285944, 285944, 285944, 285944, 263194, 285944, 285944, 289518, 285944, 285944, 285944, 285944, 285944, 259944, 269694, 285944, 289518, 285944, 285944, 282694, 285944, 285944, 293092, 263194, 259944, 285944, 285944, 285944, 285944, 279444, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 259944, 285944, 263194, 285944, 263194, 285944, 276194, 285944, 285944, 285944, 285944, 289518, 259944, 285944, 285944, 285944, 285944, 314536, 293092, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 263194, 285944, 285944, 285944, 307388, 285944, 285944, 285944, 289518, 285944, 314536, 314536, 285944, 285944, 263194, 285944, 285944, 285944, 314536, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 282694, 285944, 285944, 285944, 285944, 259944, 285944, 285944, 285944, 285944, 285944, 285944, 296666, 289518, 300240, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 282694, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 276194, 307388, 285944, 285944, 285944, 285944, 259944, 279444, 285944, 276194, 285944, 285944, 285944, 285944, 282694, 285944, 272944, 285944, 285944, 285944, 282694, 285944, 279444, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 285944, 300240, 285944, 276194, 285944, 279444, 285944, 285944, 285944, 269694, 285944, 269694, 285944, 285944, 285944, 282694, 285944 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 2022,
        "TotalTasksDurationInMs" : 2014,
        "IOBytes" : {
          "Total" : 61150329,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 54433366,
            "SW" : 6716963
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1920865720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1140,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 1140,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#91, cc_name#97] "
          },
          "1" : {
            "sign" : -391529393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97)) "
          },
          "2" : {
            "sign" : -1672837575,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#91, cc_call_center_id#92, cc_rec_start_date#93, cc_rec_end_date#94, cc_closed_date_sk#95, cc_open_date_sk#96, cc_name#97, cc_class#98, cc_employees#99, cc_sq_ft#100, cc_hours#101, cc_manager#102, cc_mkt_id#103, cc_mkt_class#104, cc_mkt_desc#105, cc_market_manager#106, cc_division#107, cc_division_name#108, cc_company#109, cc_company_name#110, cc_street_number#111, cc_street_name#112, cc_street_type#113, cc_suite_number#114, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cc_call_center_sk#91, cc_name#97]\n+- Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n   +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_call_center_id#92,cc_rec_start_date#93,cc_rec_end_date#94,cc_closed_date_sk#95,cc_open_date_sk#96,cc_name#97,cc_class#98,cc_employees#99,cc_sq_ft#100,cc_hours#101,cc_manager#102,cc_mkt_id#103,cc_mkt_class#104,cc_mkt_desc#105,cc_market_manager#106,cc_division#107,cc_division_name#108,cc_company#109,cc_company_name#110,cc_street_number#111,cc_street_name#112,cc_street_type#113,cc_suite_number#114,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1423820503,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1140,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cc_call_center_sk#91, cc_name#97] Condition : (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97)) "
          },
          "1" : {
            "sign" : 642445439,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1140,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.call_center Output [2]: [cc_call_center_sk#91, cc_name#97] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center] PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)] ReadSchema: struct<cc_call_center_sk:int,cc_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.call_center",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n+- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_name#97] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#91), isnotnull(cc_name#97)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1140,
        "inputRowCount" : 30
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1460,
        "TotalTasksDurationInMs" : 1455,
        "IOBytes" : {
          "Total" : 13206,
          "Details" : {
            "IR" : 13206,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -409300458,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13980,
                "rowCount" : 699
              },
              "compileTime" : {
                "sizeInBytes" : 13980,
                "rowCount" : 699
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#63, d_year#69, d_moy#71] "
          },
          "1" : {
            "sign" : 2125736862,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 171954,
                "rowCount" : 699
              },
              "compileTime" : {
                "sizeInBytes" : 171954,
                "rowCount" : 699
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63)) "
          },
          "2" : {
            "sign" : -927145728,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#63, d_date_id#64, d_date#65, d_month_seq#66, d_week_seq#67, d_quarter_seq#68, d_year#69, d_dow#70, d_moy#71, d_dom#72, d_qoy#73, d_fy_year#74, d_fy_quarter_seq#75, d_fy_week_seq#76, d_day_name#77, d_quarter_name#78, d_holiday#79, d_weekend#80, d_following_holiday#81, d_first_dom#82, d_last_dom#83, d_same_day_ly#84, d_same_day_lq#85, d_current_day#86, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#63, d_year#69, d_moy#71]\n+- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 441103709,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#63, d_year#69, d_moy#71] Condition : ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63)) "
          },
          "1" : {
            "sign" : 980871995,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 13980,
            "rowCount" : 699,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#63, d_year#69, d_moy#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001),EqualTo(d_moy,1))), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13980,
        "inputRowCount" : 699
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1486,
        "TotalTasksDurationInMs" : 1479,
        "IOBytes" : {
          "Total" : 93881,
          "Details" : {
            "IR" : 93881,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1984212613,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11979065,
                "rowCount" : 203035
              },
              "compileTime" : {
                "sizeInBytes" : 11979065,
                "rowCount" : 203035
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#7, i_brand#15, i_category#19] "
          },
          "1" : {
            "sign" : -1989795637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86492910,
                "rowCount" : 203035
              },
              "compileTime" : {
                "sizeInBytes" : 86492910,
                "rowCount" : 203035
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15))) "
          },
          "2" : {
            "sign" : 337999037,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#7, i_item_id#8, i_rec_start_date#9, i_rec_end_date#10, i_item_desc#11, i_current_price#12, i_wholesale_cost#13, i_brand_id#14, i_brand#15, i_class_id#16, i_class#17, i_category_id#18, i_category#19, i_manufact_id#20, i_manufact#21, i_size#22, i_formulation#23, i_color#24, i_units#25, i_container#26, i_manager_id#27, i_product_name#28], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#7, i_brand#15, i_category#19]\n+- Filter (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15)))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1874666012,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#7, i_brand#15, i_category#19] Condition : ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15)) "
          },
          "1" : {
            "sign" : 1129129782,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11979065,
            "rowCount" : 203035,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#7, i_brand#15, i_category#19] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)] ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15))\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7,i_brand#15,i_category#19] Batched: true, DataFilters: [isnotnull(i_item_sk#7), isnotnull(i_category#19), isnotnull(i_brand#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11979065,
        "inputRowCount" : 203035
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 3407,
        "TotalTasksDurationInMs" : 8162,
        "IOBytes" : {
          "Total" : 5957025,
          "Details" : {
            "IR" : 1234103,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4722922
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1208226135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21956869,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 21956869,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "1" : {
            "sign" : -132674199,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25616347,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 25616347,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "0" : {
            "sign" : 1052520985,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23786607,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 23786607,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] "
          },
          "2" : {
            "sign" : -1738914211,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25616347,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 25616347,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "3" : {
            "sign" : 278748190,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21956869,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 21956869,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n+- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n   +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n      +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n         +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            +- Aggregate [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS sum_sales#668, MakeDecimal(sum(UnscaledValue(cs_sales_price#49)),17,2) AS _w0#686]\n               +- Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n                  +- Join Inner, (cc_call_center_sk#91 = cs_call_center_sk#39)\n                     :- Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n                     :  +- Join Inner, (cs_item_sk#43 = i_item_sk#7)\n                     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n                     :     :  +- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n                     :     :     :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n                     :     :     :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n                     :     :     :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n                     :     :     :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n                     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n                     :     :     +- Project [d_date_sk#63, d_year#69, d_moy#71]\n                     :     :        +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n                     :     +- Project [i_item_sk#7, i_brand#15, i_category#19]\n                     :        +- Filter (isnotnull(i_item_sk#7) AND (isnotnull(i_category#19) AND isnotnull(i_brand#15)))\n                     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n                     +- Project [cc_call_center_sk#91, cc_name#97]\n                        +- Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n                           +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_call_center_id#92,cc_rec_start_date#93,cc_rec_end_date#94,cc_closed_date_sk#95,cc_open_date_sk#96,cc_name#97,cc_class#98,cc_employees#99,cc_sq_ft#100,cc_hours#101,cc_manager#102,cc_mkt_id#103,cc_mkt_class#104,cc_mkt_desc#105,cc_market_manager#106,cc_division#107,cc_division_name#108,cc_company#109,cc_company_name#110,cc_street_number#111,cc_street_name#112,cc_street_type#113,cc_suite_number#114,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -60155335,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [7]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686] Arguments: [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST] "
          },
          "5" : {
            "sign" : 1811075189,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686] Arguments: [i_category#19 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, cc_name#97 ASC NULLS FIRST, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 461230268,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 19587816,
            "rowCount" : 176553,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686] Arguments: 25 "
          },
          "1" : {
            "sign" : -202552369,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686, rn#670, avg_monthly_sales#669] Condition : ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END) "
          },
          "0" : {
            "sign" : 1162674473,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 23786607,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670] Input [9]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686, rn#670, avg_monthly_sales#669] "
          },
          "2" : {
            "sign" : -1766114387,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 25616347,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [8]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686, rn#670] Arguments: [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69] "
          },
          "3" : {
            "sign" : 942405754,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 21956869,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686, rn#670] Condition : (isnotnull(d_year#69) AND (d_year#69 = 2000)) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, avg_monthly_sales#669, rn#670]\n+- Filter ((isnotnull(avg_monthly_sales#669) AND (avg_monthly_sales#669 > 0.000000)) AND CASE WHEN (avg_monthly_sales#669 > 0.000000) THEN ((abs((sum_sales#668 - avg_monthly_sales#669)) / avg_monthly_sales#669) > 0.1000000000000000) END)\n   +- Window [avg(_w0#686) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#669], [i_category#19, i_brand#15, cc_name#97, d_year#69]\n      +- Filter (isnotnull(d_year#69) AND (d_year#69 = 2000))\n         +- Window [rank(d_year#69, d_moy#71) windowspecdefinition(i_category#19, i_brand#15, cc_name#97, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#670], [i_category#19, i_brand#15, cc_name#97], [d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST]\n            +- Sort [i_category#19 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, cc_name#97 ASC NULLS FIRST, d_year#69 ASC NULLS FIRST, d_moy#71 ASC NULLS FIRST], false, 0\n               +- ShuffleQueryStage 25\n                  +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, 200), ENSURE_REQUIREMENTS, [plan_id=2737]\n                     +- *(22) HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum_sales#668, _w0#686])\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 20\n                              +- Exchange hashpartitioning(i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, 200), ENSURE_REQUIREMENTS, [plan_id=2370]\n                                 +- *(15) HashAggregate(keys=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71], functions=[partial_sum(UnscaledValue(cs_sales_price#49))], output=[i_category#19, i_brand#15, cc_name#97, d_year#69, d_moy#71, sum#1194L])\n                                    +- *(15) Project [i_brand#15, i_category#19, cs_sales_price#49, d_year#69, d_moy#71, cc_name#97]\n                                       +- *(15) BroadcastHashJoin [cs_call_center_sk#39], [cc_call_center_sk#91], Inner, BuildRight, false\n                                          :- *(15) Project [cs_call_center_sk#39, cs_sales_price#49, d_year#69, d_moy#71, i_brand#15, i_category#19]\n                                          :  +- *(15) SortMergeJoin [cs_item_sk#43], [i_item_sk#7], Inner\n                                          :     :- *(13) Sort [cs_item_sk#43 ASC NULLS FIRST], false, 0\n                                          :     :  +- AQEShuffleRead coalesced\n                                          :     :     +- ShuffleQueryStage 15\n                                          :     :        +- Exchange hashpartitioning(cs_item_sk#43, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n                                          :     :           +- *(10) Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n                                          :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#62], [d_date_sk#63], Inner, BuildRight, false\n                                          :     :                 :- *(10) Filter (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39))\n                                          :     :                 :  +- *(10) ColumnarToRow\n                                          :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#39,cs_item_sk#43,cs_sales_price#49,cs_sold_date_sk#62] Batched: true, DataFilters: [isnotnull(cs_item_sk#43), isnotnull(cs_call_center_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>\n                                          :     :                 :           +- SubqueryBroadcast dynamicpruning#1190, 0, [d_date_sk#63], [id=#1529]\n                                          :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#63, d_year#69, d_moy#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1526]\n                                                                                       +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                          :     :                 +- BroadcastQueryStage 0\n                                          :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                                          :     :                       +- *(1) Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n                                          :     :                          +- *(1) ColumnarToRow\n                                          :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                          :     +- *(14) Sort [i_item_sk#7 ASC NULLS FIRST], false, 0\n                                          :        +- AQEShuffleRead coalesced\n                                          :           +- ShuffleQueryStage 1\n                                          :              +- Exchange hashpartitioning(i_item_sk#7, 200), ENSURE_REQUIREMENTS, [plan_id=528]\n                                          :                 +- *(2) Filter ((isnotnull(i_item_sk#7) AND isnotnull(i_category#19)) AND isnotnull(i_brand#15))\n                                          :                    +- *(2) ColumnarToRow\n                                          :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7,i_brand#15,i_category#19] Batched: true, DataFilters: [isnotnull(i_item_sk#7), isnotnull(i_category#19), isnotnull(i_brand#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)], ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>\n                                          +- BroadcastQueryStage 2\n                                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=547]\n                                                +- *(3) Filter (isnotnull(cc_call_center_sk#91) AND isnotnull(cc_name#97))\n                                                   +- *(3) ColumnarToRow\n                                                      +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#91,cc_name#97] Batched: true, DataFilters: [isnotnull(cc_call_center_sk#91), isnotnull(cc_name#97)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)], ReadSchema: struct<cc_call_center_sk:int,cc_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19587816,
        "inputRowCount" : 176553
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 43249, 35743, 35743, 39317, 39317, 39317, 39317, 32493, 29539, 39317, 32493, 32493, 39317, 35743, 43249, 35743, 32493, 52331, 39317, 32493, 39317, 32493, 39317, 35743, 35743, 29539, 35743, 35743, 32493, 35743, 35743, 43249, 35743, 32493, 39317, 43249, 39317, 39317, 43249, 35743, 39317, 47574, 29539, 47574, 39317, 35743, 32493, 35743, 43249, 35743, 43249, 32493, 47574, 47574, 43249, 35743, 43249, 35743, 32493, 43249, 39317, 39317, 47574, 35743, 43249, 43249, 35743, 35743, 35743, 35743, 29539, 32493, 39317, 29539, 43249, 39317, 35743, 35743, 43249, 43249, 39317, 39317, 35743, 39317, 47574, 43249, 47574, 47574, 39317, 32493, 43249, 35743, 29539, 35743, 52331, 43249, 43249, 35743, 39317, 52331, 26854, 32493, 43249, 47574, 32493, 35743, 43249, 47574, 43249, 32493, 35743, 29539, 39317, 39317, 47574, 39317, 35743, 47574, 24413, 32493, 35743, 43249, 32493, 39317, 35743, 35743, 39317, 32493, 29539, 39317, 35743, 52331, 43249, 26854, 43249, 47574, 35743, 32493, 35743, 47574, 43249, 35743, 35743, 32493, 52331, 32493, 32493, 43249, 39317, 35743, 32493, 39317, 39317, 32493, 39317, 47574, 29539, 32493, 35743, 52331, 43249, 32493, 35743, 43249, 39317, 35743, 35743, 39317, 32493, 43249, 39317, 26854, 39317, 32493, 52331, 39317, 47574, 43249, 43249, 35743, 29539, 26854, 39317, 32493, 39317, 35743, 39317, 35743, 39317, 39317, 43249, 35743, 43249, 47574, 32493, 32493, 39317, 29539, 47574, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 8212,
        "TotalTasksDurationInMs" : 8201,
        "IOBytes" : {
          "Total" : 14277277,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7315384,
            "SW" : 6961893
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1165315057,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#29, cs_ship_date_sk#30, cs_bill_customer_sk#31, cs_bill_cdemo_sk#32, cs_bill_hdemo_sk#33, cs_bill_addr_sk#34, cs_ship_customer_sk#35, cs_ship_cdemo_sk#36, cs_ship_hdemo_sk#37, cs_ship_addr_sk#38, cs_call_center_sk#39, cs_catalog_page_sk#40, cs_ship_mode_sk#41, cs_warehouse_sk#42, cs_item_sk#43, cs_promo_sk#44, cs_order_number#45L, cs_quantity#46, cs_wholesale_cost#47, cs_list_price#48, cs_sales_price#49, cs_ext_discount_amt#50, cs_ext_sales_price#51, cs_ext_wholesale_cost#52, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1749606285,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#62 = d_date_sk#63) "
          },
          "0" : {
            "sign" : 1756006042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] "
          },
          "2" : {
            "sign" : 2125648384,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 3991570660,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] "
          },
          "3" : {
            "sign" : -715317830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              },
              "compileTime" : {
                "sizeInBytes" : 29651667760,
                "rowCount" : 142556095
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n+- Join Inner, (cs_sold_date_sk#62 = d_date_sk#63)\n   :- Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62]\n   :  +- Filter (((isnotnull(cs_item_sk#43) AND isnotnull(cs_sold_date_sk#62)) AND isnotnull(cs_call_center_sk#39)) AND dynamicpruning#1190 [cs_sold_date_sk#62])\n   :     :  +- Project [d_date_sk#63, d_year#69, d_moy#71]\n   :     :     +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#29,cs_ship_date_sk#30,cs_bill_customer_sk#31,cs_bill_cdemo_sk#32,cs_bill_hdemo_sk#33,cs_bill_addr_sk#34,cs_ship_customer_sk#35,cs_ship_cdemo_sk#36,cs_ship_hdemo_sk#37,cs_ship_addr_sk#38,cs_call_center_sk#39,cs_catalog_page_sk#40,cs_ship_mode_sk#41,cs_warehouse_sk#42,cs_item_sk#43,cs_promo_sk#44,cs_order_number#45L,cs_quantity#46,cs_wholesale_cost#47,cs_list_price#48,cs_sales_price#49,cs_ext_discount_amt#50,cs_ext_sales_price#51,cs_ext_wholesale_cost#52,... 10 more fields] parquet\n   +- Project [d_date_sk#63, d_year#69, d_moy#71]\n      +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_date_id#64,d_date#65,d_month_seq#66,d_week_seq#67,d_quarter_seq#68,d_year#69,d_dow#70,d_moy#71,d_dom#72,d_qoy#73,d_fy_year#74,d_fy_quarter_seq#75,d_fy_week_seq#76,d_day_name#77,d_quarter_name#78,d_holiday#79,d_weekend#80,d_following_holiday#81,d_first_dom#82,d_last_dom#83,d_same_day_ly#84,d_same_day_lq#85,d_current_day#86,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -822764533,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1052000,
            "rowCount" : 428,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [d_date_sk#63, d_year#69, d_moy#71] Arguments: 0 "
          },
          "1" : {
            "sign" : 449218739,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#62] Right keys [1]: [d_date_sk#63] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -619459884,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71] Input [7]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62, d_date_sk#63, d_year#69, d_moy#71] "
          },
          "2" : {
            "sign" : 1277474435,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] Condition : (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39)) "
          },
          "3" : {
            "sign" : 109341265,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3991570660,
            "rowCount" : 142556095,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, cs_sold_date_sk#62] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)] PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)] ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_call_center_sk#39, cs_item_sk#43, cs_sales_price#49, d_year#69, d_moy#71]\n+- BroadcastHashJoin [cs_sold_date_sk#62], [d_date_sk#63], Inner, BuildRight, false\n   :- Filter (isnotnull(cs_item_sk#43) AND isnotnull(cs_call_center_sk#39))\n   :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#39,cs_item_sk#43,cs_sales_price#49,cs_sold_date_sk#62] Batched: true, DataFilters: [isnotnull(cs_item_sk#43), isnotnull(cs_call_center_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#1190)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#1190, 0, [d_date_sk#63], [id=#1529]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1526]\n   :                 +- Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n         +- *(1) Filter ((((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_moy#71 = 1))) AND isnotnull(d_date_sk#63))\n            +- *(1) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#63,d_year#69,d_moy#71] Batched: true, DataFilters: [(((d_year#69 = 2000) OR ((d_year#69 = 1999) AND (d_moy#71 = 12))) OR ((d_year#69 = 2001) AND (d_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [Or(Or(EqualTo(d_year,2000),And(EqualTo(d_year,1999),EqualTo(d_moy,12))),And(EqualTo(d_year,2001)..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3992622660,
        "inputRowCount" : 142556523
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4788.0,
        "FinishedTasksDistributionInMs" : [ 1120.0, 1203.0, 1231.0, 1234.0, 1234.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 5391,
        "TotalTasksDurationInMs" : 61479,
        "IOBytes" : {
          "Total" : 736749888,
          "Details" : {
            "IR" : 247279777,
            "IW" : 0,
            "SR" : 0,
            "SW" : 489470111
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227146355,
  "SQLEndTimeInMs" : 1702227177476,
  "Objectives" : {
    "DurationInMs" : 31121,
    "IOBytes" : {
      "Total" : 1469513252,
      "Details" : {
        "IR" : 248620967,
        "IW" : 0,
        "SR" : 641021307,
        "SW" : 579870978
      }
    }
  }
}
