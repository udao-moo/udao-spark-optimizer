{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -70932494,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13038,
          "rowCount" : 53,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#257) AND isnotnull(d_moy#259)) AND ((d_year#257 = 1998) AND (d_moy#259 = 5))) AND isnotnull(d_date_sk#251)) "
        },
        "12" : {
          "sign" : -1130007319,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : 1719649700,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11168589488,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
        },
        "19" : {
          "sign" : 871767067,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 570,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, w_warehouse_name#31] "
        },
        "23" : {
          "sign" : 2056759653,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END "
        },
        "4" : {
          "sign" : 1240287130,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#0, avg(inv_quantity_on_hand#5) AS mean#1] "
        },
        "40" : {
          "sign" : -1713587195,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#237) "
        },
        "15" : {
          "sign" : 1032928700,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : 701880579,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#296 [inv_date_sk#6]) "
        },
        "9" : {
          "sign" : 1308142962,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9378749856,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
        },
        "33" : {
          "sign" : 856177911,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 848,
          "rowCount" : 53,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#251, d_moy#259] "
        },
        "22" : {
          "sign" : -1607371223,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#237, i_item_sk#215, d_moy#259, mean#1 AS mean#106, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#107] "
        },
        "26" : {
          "sign" : -1987101916,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 23944944924,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#212 = w_warehouse_sk#237) "
        },
        "37" : {
          "sign" : -1537959295,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#215) "
        },
        "13" : {
          "sign" : -38693346,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 800,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
        },
        "24" : {
          "sign" : 2112777928,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#239, w_warehouse_sk#237, i_item_sk#215, d_moy#259], [w_warehouse_sk#237, i_item_sk#215, d_moy#259, stddev_samp(cast(inv_quantity_on_hand#213 as double)) AS stdev#0, avg(inv_quantity_on_hand#213) AS mean#1] "
        },
        "35" : {
          "sign" : -1965177980,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#251, d_date_id#252, d_date#253, d_month_seq#254, d_week_seq#255, d_quarter_seq#256, d_year#257, d_dow#258, d_moy#259, d_dom#260, d_qoy#261, d_fy_year#262, d_fy_quarter_seq#263, d_fy_week_seq#264, d_day_name#265, d_quarter_name#266, d_holiday#267, d_weekend#268, d_following_holiday#269, d_first_dom#270, d_last_dom#271, d_same_day_ly#272, d_same_day_lq#273, d_current_day#274, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 340068321,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2448000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#7] "
        },
        "5" : {
          "sign" : -552463612,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 22171245300,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
        },
        "10" : {
          "sign" : 1216309892,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12504999808,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
        },
        "21" : {
          "sign" : -782926507,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#29, w_warehouse_id#30, w_warehouse_name#31, w_warehouse_sq_ft#32, w_street_number#33, w_street_name#34, w_street_type#35, w_suite_number#36, w_city#37, w_county#38, w_state#39, w_zip#40, w_country#41, w_gmt_offset#42], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "32" : {
          "sign" : 134249223,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#211, inv_warehouse_sk#212, inv_quantity_on_hand#213, inv_date_sk#214], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : 587920829,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 23944944924,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
        },
        "36" : {
          "sign" : 2062070713,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2448000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#215] "
        },
        "1" : {
          "sign" : -575260866,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1088,
          "rowCount" : 17,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#215) AND (w_warehouse_sk#29 = w_warehouse_sk#237)) "
        },
        "39" : {
          "sign" : 579097339,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 570,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#237, w_warehouse_name#239] "
        },
        "17" : {
          "sign" : 1906460664,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#7) "
        },
        "25" : {
          "sign" : -1436296676,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 22171245300,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#213, i_item_sk#215, w_warehouse_sk#237, w_warehouse_name#239, d_moy#259] "
        },
        "14" : {
          "sign" : -771719480,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
        },
        "31" : {
          "sign" : -914810579,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#211) AND isnotnull(inv_warehouse_sk#212)) AND isnotnull(inv_date_sk#214)) AND dynamicpruning#297 [inv_date_sk#214]) "
        },
        "0" : {
          "sign" : -944828220,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 1088,
          "rowCount" : 17,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#1 ASC NULLS FIRST, cov#2 ASC NULLS FIRST, d_moy#259 ASC NULLS FIRST, mean#106 ASC NULLS FIRST, cov#107 ASC NULLS FIRST], true "
        },
        "20" : {
          "sign" : 2017802534,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#29) "
        },
        "27" : {
          "sign" : 1135051077,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9573076704,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#212, inv_quantity_on_hand#213, d_moy#259, i_item_sk#215] "
        },
        "2" : {
          "sign" : -404624362,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#1, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#2] "
        },
        "38" : {
          "sign" : -1556296643,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#215, i_item_id#216, i_rec_start_date#217, i_rec_end_date#218, i_item_desc#219, i_current_price#220, i_wholesale_cost#221, i_brand_id#222, i_brand#223, i_class_id#224, i_class#225, i_category_id#226, i_category#227, i_manufact_id#228, i_manufact#229, i_size#230, i_formulation#231, i_color#232, i_units#233, i_container#234, i_manager_id#235, i_product_name#236], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : 337999037,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#7, i_item_id#8, i_rec_start_date#9, i_rec_end_date#10, i_item_desc#11, i_current_price#12, i_wholesale_cost#13, i_brand_id#14, i_brand#15, i_class_id#16, i_class#17, i_category_id#18, i_category#19, i_manufact_id#20, i_manufact#21, i_size#22, i_formulation#23, i_color#24, i_units#25, i_container#26, i_manager_id#27, i_product_name#28], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "30" : {
          "sign" : -1061662887,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12504999808,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#214 = d_date_sk#251) "
        },
        "7" : {
          "sign" : 1763588974,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9573076704,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
        },
        "29" : {
          "sign" : 844664488,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9378749856,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#211, inv_warehouse_sk#212, inv_quantity_on_hand#213, d_moy#259] "
        },
        "41" : {
          "sign" : 688277139,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#237, w_warehouse_id#238, w_warehouse_name#239, w_warehouse_sq_ft#240, w_street_number#241, w_street_name#242, w_street_type#243, w_suite_number#244, w_city#245, w_county#246, w_state#247, w_zip#248, w_country#249, w_gmt_offset#250], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 860561717,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1644138000,
          "rowCount" : 45670500,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END AND CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.5) END) "
        },
        "28" : {
          "sign" : 619288796,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11168589488,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#211 = i_item_sk#215) "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Aggregate",
        "toId" : 3,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Filter",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "LogicalRelation",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "LogicalRelation",
        "toId" : 34,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Filter",
        "toId" : 33,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 31,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 30,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Join",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Join",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Join",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Aggregate",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Join",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#1 ASC NULLS FIRST, cov#2 ASC NULLS FIRST, d_moy#259 ASC NULLS FIRST, mean#106 ASC NULLS FIRST, cov#107 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#215) AND (w_warehouse_sk#29 = w_warehouse_sk#237))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#1, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#2]\n   :  +- Filter (CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END AND CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.5) END)\n   :     +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#0, avg(inv_quantity_on_hand#5) AS mean#1]\n   :        +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   :           +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n   :              :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n   :              :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n   :              :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n   :              :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n   :              :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#296 [inv_date_sk#6])\n   :              :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n   :              :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n   :              :     :     +- Project [d_date_sk#43, d_moy#51]\n   :              :     :        +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     +- Project [i_item_sk#7]\n   :              :        +- Filter isnotnull(i_item_sk#7)\n   :              :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n   :              +- Project [w_warehouse_sk#29, w_warehouse_name#31]\n   :                 +- Filter isnotnull(w_warehouse_sk#29)\n   :                    +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_id#30,w_warehouse_name#31,w_warehouse_sq_ft#32,w_street_number#33,w_street_name#34,w_street_type#35,w_suite_number#36,w_city#37,w_county#38,w_state#39,w_zip#40,w_country#41,w_gmt_offset#42] parquet\n   +- Project [w_warehouse_sk#237, i_item_sk#215, d_moy#259, mean#1 AS mean#106, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#107]\n      +- Filter CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END\n         +- Aggregate [w_warehouse_name#239, w_warehouse_sk#237, i_item_sk#215, d_moy#259], [w_warehouse_sk#237, i_item_sk#215, d_moy#259, stddev_samp(cast(inv_quantity_on_hand#213 as double)) AS stdev#0, avg(inv_quantity_on_hand#213) AS mean#1]\n            +- Project [inv_quantity_on_hand#213, i_item_sk#215, w_warehouse_sk#237, w_warehouse_name#239, d_moy#259]\n               +- Join Inner, (inv_warehouse_sk#212 = w_warehouse_sk#237)\n                  :- Project [inv_warehouse_sk#212, inv_quantity_on_hand#213, d_moy#259, i_item_sk#215]\n                  :  +- Join Inner, (inv_item_sk#211 = i_item_sk#215)\n                  :     :- Project [inv_item_sk#211, inv_warehouse_sk#212, inv_quantity_on_hand#213, d_moy#259]\n                  :     :  +- Join Inner, (inv_date_sk#214 = d_date_sk#251)\n                  :     :     :- Filter (((isnotnull(inv_item_sk#211) AND isnotnull(inv_warehouse_sk#212)) AND isnotnull(inv_date_sk#214)) AND dynamicpruning#297 [inv_date_sk#214])\n                  :     :     :  :  +- Project [d_date_sk#251, d_moy#259]\n                  :     :     :  :     +- Filter (((isnotnull(d_year#257) AND isnotnull(d_moy#259)) AND ((d_year#257 = 1998) AND (d_moy#259 = 5))) AND isnotnull(d_date_sk#251))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#251,d_date_id#252,d_date#253,d_month_seq#254,d_week_seq#255,d_quarter_seq#256,d_year#257,d_dow#258,d_moy#259,d_dom#260,d_qoy#261,d_fy_year#262,d_fy_quarter_seq#263,d_fy_week_seq#264,d_day_name#265,d_quarter_name#266,d_holiday#267,d_weekend#268,d_following_holiday#269,d_first_dom#270,d_last_dom#271,d_same_day_ly#272,d_same_day_lq#273,d_current_day#274,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#211,inv_warehouse_sk#212,inv_quantity_on_hand#213,inv_date_sk#214] parquet\n                  :     :     +- Project [d_date_sk#251, d_moy#259]\n                  :     :        +- Filter (((isnotnull(d_year#257) AND isnotnull(d_moy#259)) AND ((d_year#257 = 1998) AND (d_moy#259 = 5))) AND isnotnull(d_date_sk#251))\n                  :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#251,d_date_id#252,d_date#253,d_month_seq#254,d_week_seq#255,d_quarter_seq#256,d_year#257,d_dow#258,d_moy#259,d_dom#260,d_qoy#261,d_fy_year#262,d_fy_quarter_seq#263,d_fy_week_seq#264,d_day_name#265,d_quarter_name#266,d_holiday#267,d_weekend#268,d_following_holiday#269,d_first_dom#270,d_last_dom#271,d_same_day_ly#272,d_same_day_lq#273,d_current_day#274,... 4 more fields] parquet\n                  :     +- Project [i_item_sk#215]\n                  :        +- Filter isnotnull(i_item_sk#215)\n                  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#215,i_item_id#216,i_rec_start_date#217,i_rec_end_date#218,i_item_desc#219,i_current_price#220,i_wholesale_cost#221,i_brand_id#222,i_brand#223,i_class_id#224,i_class#225,i_category_id#226,i_category#227,i_manufact_id#228,i_manufact#229,i_size#230,i_formulation#231,i_color#232,i_units#233,i_container#234,i_manager_id#235,i_product_name#236] parquet\n                  +- Project [w_warehouse_sk#237, w_warehouse_name#239]\n                     +- Filter isnotnull(w_warehouse_sk#237)\n                        +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#237,w_warehouse_id#238,w_warehouse_name#239,w_warehouse_sq_ft#240,w_street_number#241,w_street_name#242,w_street_type#243,w_suite_number#244,w_city#245,w_county#246,w_state#247,w_zip#248,w_country#249,w_gmt_offset#250] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 19377595728,
      "inputRowCount" : 799214128
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1942702887,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5384003904000,
            "rowCount" : 84125061000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -201506770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5384003904000,
            "rowCount" : 84125061000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "2" : {
            "sign" : -1872670928,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 88416,
            "rowCount" : 1842,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10 "
          },
          "3" : {
            "sign" : -793562461,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10\n   +- LogicalQueryStage Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1644226416,
        "inputRowCount" : 45672342
      },
      "PD" : {
        "2" : [ 345, 527, 349, 505, 306, 446, 483, 479, 399, 421, 331, 384, 483, 368, 248, 324, 269, 370, 465, 384, 414, 342, 258, 277, 331, 324, 363, 476, 458, 504, 465, 396, 259, 360, 277, 465, 532, 349, 230, 458, 562, 339, 251, 251, 357, 440, 271, 502, 259, 490, 295, 396, 407, 288, 421, 485, 331, 269, 331, 479, 360, 504, 422, 440, 418, 368, 284, 414, 384, 396, 251, 235, 440, 417, 502, 417, 370, 447, 440, 378, 342, 399, 288, 313, 396, 342, 504, 236, 313, 306, 271, 342, 446, 269, 370, 342, 502, 370, 360, 378, 594, 399, 422, 327, 222, 80, 324, 458, 456, 384, 334, 308, 324, 458, 370, 349, 349, 580, 458, 357, 378, 399, 399, 271, 223, 345, 273, 327, 117, 363, 368, 370, 483, 435, 485, 357, 483, 435, 422, 393, 465, 262, 460, 435, 504, 407, 505, 331, 399, 458, 324, 345, 269, 298, 555, 223, 209, 421, 324, 313, 476, 288, 171, 363, 313, 236, 399, 345, 493, 313, 435, 259, 451, 259, 288, 370, 349, 349, 580, 269, 298, 295, 580, 417, 327, 378, 475, 465, 251, 306, 504, 368, 585, 277, 331, 456, 298, 259, 370, 277 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1432.0,
        "FinishedTasksDistributionInMs" : [ 1432.0, 1432.0, 1432.0, 1432.0, 1432.0 ]
      },
      "StartTimeInMs" : 1702226959582,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1032,
        "IOBytes" : {
          "Total" : 101540250,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 99082950,
            "SW" : 2457300
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -262844601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 10020608,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#473], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -1130007319,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1362908082,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68429188800000000,
            "rowCount" : 2443899600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
          },
          "19" : {
            "sign" : -162302334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1363695976800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "23" : {
            "sign" : -1251481531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1818261302400000000,
            "rowCount" : 37880443800000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495) "
          },
          "4" : {
            "sign" : -98393180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1319705784000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331] "
          },
          "15" : {
            "sign" : 1032928700,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 181587294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6]) "
          },
          "9" : {
            "sign" : -270771739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 287517600000,
            "rowCount" : 11979900000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
          },
          "33" : {
            "sign" : 2135690983,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3 "
          },
          "22" : {
            "sign" : -1054203522,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1666739527200000000,
            "rowCount" : 37880443800000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] "
          },
          "26" : {
            "sign" : 1234998699,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 297101520000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] "
          },
          "13" : {
            "sign" : -38693346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
          },
          "24" : {
            "sign" : -835107142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60608710080000000,
            "rowCount" : 2525362920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          },
          "35" : {
            "sign" : 1590684223,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : -1208939466,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1639322486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1612973736000000000,
            "rowCount" : 36658494000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
          },
          "10" : {
            "sign" : -280341055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 383356800000,
            "rowCount" : 11979900000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
          },
          "21" : {
            "sign" : -1800563716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1363695976800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331] "
          },
          "32" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 1979752353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1759607712000000000,
            "rowCount" : 36658494000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
          },
          "1" : {
            "sign" : 161003265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1799677468200489811200000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "17" : {
            "sign" : -2057036668,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 10020608,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : 1429346098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 70710161760000000,
            "rowCount" : 2525362920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#469 = i_item_sk#473) "
          },
          "14" : {
            "sign" : -771719480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
          },
          "31" : {
            "sign" : 1469291511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 13038,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509)) "
          },
          "0" : {
            "sign" : 195501158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1799677468200489811200000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -81501653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1363695976800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "27" : {
            "sign" : 1295579168,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 396135360000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#472 = d_date_sk#509) "
          },
          "2" : {
            "sign" : 1186611080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1319705784000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "18" : {
            "sign" : 1136463599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2 "
          },
          "30" : {
            "sign" : -1977056655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509, d_moy#517] "
          },
          "7" : {
            "sign" : -922440130,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 58653590400000000,
            "rowCount" : 2443899600000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          },
          "29" : {
            "sign" : -1172229338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -336903643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1319705784000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          },
          "28" : {
            "sign" : 1439204196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472]) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n   :        +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   :           +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n   :              :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n   :              :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n   :              :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n   :              :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n   :              :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n   :              :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n   :              :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n   :              :     :     +- LogicalQueryStage Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0\n   :              :     +- LogicalQueryStage Project [i_item_sk#7], BroadcastQueryStage 1\n   :              +- LogicalQueryStage Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n            +- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n               +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n                  :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                  :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n                  :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                  :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n                  :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n                  :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n                  :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3\n                  :     +- LogicalQueryStage Project [i_item_sk#473], BroadcastQueryStage 5\n                  +- LogicalQueryStage Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19192076248,
        "inputRowCount" : 799068091
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226952189,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8425,
        "IOBytes" : {
          "Total" : 503645165,
          "Details" : {
            "IR" : 72924168,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 214138123
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -831408863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10824,
            "rowCount" : 123,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -448795710,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 10824,
            "rowCount" : 123,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)), ShuffleQueryStage 13 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- LogicalQueryStage Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)), ShuffleQueryStage 13\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10824,
        "inputRowCount" : 123
      },
      "PD" : {
        "4" : [ 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 117, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226960372,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 242,
        "IOBytes" : {
          "Total" : 12549,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12549,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1369244810,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12639126144,
            "rowCount" : 197486346,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -907494933,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12639126144,
            "rowCount" : 197486346,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "2" : {
            "sign" : 1046241427,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 88416,
            "rowCount" : 1842,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10, BroadcastQueryStage 12 "
          },
          "3" : {
            "sign" : -793562461,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5146224,
            "rowCount" : 107213,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- LogicalQueryStage LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10, BroadcastQueryStage 12\n   +- LogicalQueryStage Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5234640,
        "inputRowCount" : 109055
      },
      "PD" : {
        "3" : [ 13802, 12168, 13869, 12547, 12946, 12168, 11769, 12547, 11769, 12547, 13386, 12184, 11769, 13802, 14242, 12547, 12946, 13869, 13040, 12946, 13403, 11406, 12184, 12608, 13386, 12168, 12184, 12946, 13802, 12547, 13403, 12547, 14242, 12184, 12946, 12547, 13386, 12547, 12168, 12946, 13802, 13802, 12168, 12946, 12946, 11769, 13403, 13403, 12547, 12946, 12184, 12547, 13386, 12547, 13040, 13040, 13802, 11769, 12946, 13386, 12547, 12547, 12184, 12547, 12946, 11406, 12547, 12547, 11062, 13403, 13802, 11769, 14242, 12946, 12946, 12547, 13802, 13386, 12946, 12946, 12547, 12946, 11406, 13386, 13802, 12946, 13386, 13403, 12547, 12946, 12184, 12547, 12946, 12946, 12184, 13386, 11769, 12547, 13386, 12946, 13040, 12946, 12547, 12946, 12547, 12547, 12168, 12547, 14242, 14242, 13802, 12547, 12946, 12547, 12547, 12168, 12946, 12946, 12946, 13802, 12547, 13802, 12946, 12547, 11406, 13386, 11769, 12946, 12547, 12184, 12547, 12547, 12946, 13403, 12168, 12946, 12547, 11769, 12547, 12946, 12946, 13386, 12547, 12168, 12946, 12547, 12946, 13386, 12946, 12547, 12946, 12184, 12946, 11769, 13403, 12547, 13386, 12547, 13403, 13040, 12168, 11769, 12946, 12946, 13386, 12547, 12946, 12547, 12547, 12184, 12547, 13403, 12946, 12547, 12946, 13386, 12946, 12547, 13802, 13386, 12547, 12946, 13802, 12946, 12168, 13040, 12946, 12946, 13802, 13802, 12946, 12547, 13386, 13802, 12547, 13040, 13802, 13802, 11769, 12168 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226959660,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 954,
        "IOBytes" : {
          "Total" : 4986261,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4973712,
            "SW" : 12549
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 263400086,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331], HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)]) "
          },
          "5" : {
            "sign" : -1668170649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "6" : {
            "sign" : 1697773656,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "1" : {
            "sign" : 1321666276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1088,
            "rowCount" : 17,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "0" : {
            "sign" : 1011157481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1088,
            "rowCount" : 17,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1134544902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "7" : {
            "sign" : -917850259,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)]) "
          },
          "3" : {
            "sign" : -436031805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- LogicalQueryStage Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331], HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)])\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- LogicalQueryStage Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3288276000,
        "inputRowCount" : 91341000
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226952698,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7916,
        "IOBytes" : {
          "Total" : 503645165,
          "Details" : {
            "IR" : 72924168,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 214138123
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1369244810,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12639126144,
            "rowCount" : 197486346,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -907494933,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12639126144,
            "rowCount" : 197486346,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "2" : {
            "sign" : 1046241427,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1114112,
            "rowCount" : 1842,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10, BroadcastQueryStage 12 "
          },
          "3" : {
            "sign" : -793562461,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5146224,
            "rowCount" : 107213,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- LogicalQueryStage LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10, BroadcastQueryStage 12\n   +- LogicalQueryStage Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6260336,
        "inputRowCount" : 109055
      },
      "PD" : {
        "3" : [ 13802, 12168, 13869, 12547, 12946, 12168, 11769, 12547, 11769, 12547, 13386, 12184, 11769, 13802, 14242, 12547, 12946, 13869, 13040, 12946, 13403, 11406, 12184, 12608, 13386, 12168, 12184, 12946, 13802, 12547, 13403, 12547, 14242, 12184, 12946, 12547, 13386, 12547, 12168, 12946, 13802, 13802, 12168, 12946, 12946, 11769, 13403, 13403, 12547, 12946, 12184, 12547, 13386, 12547, 13040, 13040, 13802, 11769, 12946, 13386, 12547, 12547, 12184, 12547, 12946, 11406, 12547, 12547, 11062, 13403, 13802, 11769, 14242, 12946, 12946, 12547, 13802, 13386, 12946, 12946, 12547, 12946, 11406, 13386, 13802, 12946, 13386, 13403, 12547, 12946, 12184, 12547, 12946, 12946, 12184, 13386, 11769, 12547, 13386, 12946, 13040, 12946, 12547, 12946, 12547, 12547, 12168, 12547, 14242, 14242, 13802, 12547, 12946, 12547, 12547, 12168, 12946, 12946, 12946, 13802, 12547, 13802, 12946, 12547, 11406, 13386, 11769, 12946, 12547, 12184, 12547, 12547, 12946, 13403, 12168, 12946, 12547, 11769, 12547, 12946, 12946, 13386, 12547, 12168, 12946, 12547, 12946, 13386, 12946, 12547, 12946, 12184, 12946, 11769, 13403, 12547, 13386, 12547, 13403, 13040, 12168, 11769, 12946, 12946, 13386, 12547, 12946, 12547, 12547, 12184, 12547, 13403, 12946, 12547, 12946, 13386, 12946, 12547, 13802, 13386, 12547, 12946, 13802, 12946, 12168, 13040, 12946, 12946, 13802, 13802, 12946, 12547, 13386, 13802, 12547, 13040, 13802, 13802, 11769, 12168 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226959792,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 822,
        "IOBytes" : {
          "Total" : 4914600,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4902051,
            "SW" : 12549
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 263400086,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 738480000,
            "rowCount" : 7650000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331], HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)]) "
          },
          "5" : {
            "sign" : -1668170649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "6" : {
            "sign" : 1697773656,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "1" : {
            "sign" : 1321666276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22360276800000000,
            "rowCount" : 349379325000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "0" : {
            "sign" : 1011157481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 22360276800000000,
            "rowCount" : 349379325000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1134544902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 275400000,
            "rowCount" : 7650000,
            "isRuntime" : true,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "7" : {
            "sign" : -917850259,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)]) "
          },
          "3" : {
            "sign" : -436031805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 275400000,
            "rowCount" : 7650000,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- LogicalQueryStage Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331], HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)])\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- LogicalQueryStage Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2382618000,
        "inputRowCount" : 53320500
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 12749.0,
        "FinishedTasksDistributionInMs" : [ 128.0, 184.0, 667.0, 3731.0, 4030.0 ]
      },
      "StartTimeInMs" : 1702226957290,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3324,
        "IOBytes" : {
          "Total" : 345631581,
          "Details" : {
            "IR" : 32410508,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 96638199
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -262844601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#473], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -1130007319,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1362908082,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
          },
          "19" : {
            "sign" : -162302334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "23" : {
            "sign" : -1251481531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495) "
          },
          "4" : {
            "sign" : -98393180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331] "
          },
          "15" : {
            "sign" : 1032928700,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 181587294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6]) "
          },
          "9" : {
            "sign" : -270771739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
          },
          "33" : {
            "sign" : 2135690983,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3 "
          },
          "22" : {
            "sign" : -1054203522,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] "
          },
          "26" : {
            "sign" : 1234998699,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] "
          },
          "13" : {
            "sign" : -38693346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
          },
          "24" : {
            "sign" : -835107142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          },
          "35" : {
            "sign" : 1590684223,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : -1208939466,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1639322486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
          },
          "10" : {
            "sign" : -280341055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
          },
          "21" : {
            "sign" : -1800563716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331] "
          },
          "32" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 1979752353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
          },
          "1" : {
            "sign" : 161003265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "17" : {
            "sign" : -2057036668,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : 1429346098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#469 = i_item_sk#473) "
          },
          "14" : {
            "sign" : -771719480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
          },
          "31" : {
            "sign" : 1469291511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 13038,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509)) "
          },
          "0" : {
            "sign" : 195501158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -81501653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "27" : {
            "sign" : 1295579168,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#472 = d_date_sk#509) "
          },
          "2" : {
            "sign" : 1186611080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "18" : {
            "sign" : 1136463599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2 "
          },
          "30" : {
            "sign" : -1977056655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509, d_moy#517] "
          },
          "7" : {
            "sign" : -922440130,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          },
          "29" : {
            "sign" : -1172229338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -336903643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          },
          "28" : {
            "sign" : 1439204196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472]) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n   :        +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   :           +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n   :              :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n   :              :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n   :              :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n   :              :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n   :              :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n   :              :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n   :              :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n   :              :     :     +- LogicalQueryStage Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0\n   :              :     +- LogicalQueryStage Project [i_item_sk#7], BroadcastQueryStage 1\n   :              +- LogicalQueryStage Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n            +- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n               +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n                  :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                  :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n                  :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                  :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n                  :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n                  :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n                  :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3\n                  :     +- LogicalQueryStage Project [i_item_sk#473], BroadcastQueryStage 5\n                  +- LogicalQueryStage Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19174835040,
        "inputRowCount" : 799068133
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4875.0,
        "FinishedTasksDistributionInMs" : [ 1145.0, 1176.0, 1246.0, 1308.0, 1308.0 ]
      },
      "StartTimeInMs" : 1702226952006,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8608,
        "IOBytes" : {
          "Total" : 504605389,
          "Details" : {
            "IR" : 73884392,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 214138123
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -262844601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#473], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -1130007319,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1362908082,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
          },
          "19" : {
            "sign" : -162302334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "23" : {
            "sign" : -1251481531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495) "
          },
          "4" : {
            "sign" : -98393180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331] "
          },
          "15" : {
            "sign" : 1032928700,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 181587294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6]) "
          },
          "9" : {
            "sign" : -270771739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
          },
          "33" : {
            "sign" : 2135690983,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3 "
          },
          "22" : {
            "sign" : -1054203522,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] "
          },
          "26" : {
            "sign" : 1234998699,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 297101520000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] "
          },
          "13" : {
            "sign" : -38693346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
          },
          "24" : {
            "sign" : -835107142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          },
          "35" : {
            "sign" : 1590684223,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : -1208939466,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1639322486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
          },
          "10" : {
            "sign" : -280341055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
          },
          "21" : {
            "sign" : -1800563716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331] "
          },
          "32" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 1979752353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
          },
          "1" : {
            "sign" : 161003265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "17" : {
            "sign" : -2057036668,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : 1429346098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#469 = i_item_sk#473) "
          },
          "14" : {
            "sign" : -771719480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
          },
          "31" : {
            "sign" : 1469291511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 13038,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509)) "
          },
          "0" : {
            "sign" : 195501158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -81501653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "27" : {
            "sign" : 1295579168,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 396135360000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#472 = d_date_sk#509) "
          },
          "2" : {
            "sign" : 1186611080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "18" : {
            "sign" : 1136463599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2 "
          },
          "30" : {
            "sign" : -1977056655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509, d_moy#517] "
          },
          "7" : {
            "sign" : -922440130,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          },
          "29" : {
            "sign" : -1172229338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -336903643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          },
          "28" : {
            "sign" : 1439204196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472]) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n   :        +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   :           +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n   :              :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n   :              :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n   :              :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n   :              :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n   :              :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n   :              :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n   :              :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n   :              :     :     +- LogicalQueryStage Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0\n   :              :     +- LogicalQueryStage Project [i_item_sk#7], BroadcastQueryStage 1\n   :              +- LogicalQueryStage Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n            +- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n               +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n                  :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                  :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n                  :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                  :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n                  :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n                  :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n                  :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3\n                  :     +- LogicalQueryStage Project [i_item_sk#473], BroadcastQueryStage 5\n                  +- LogicalQueryStage Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19175883016,
        "inputRowCount" : 799068111
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226952078,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8536,
        "IOBytes" : {
          "Total" : 503645165,
          "Details" : {
            "IR" : 72924168,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 214138123
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1697773656,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 220320000,
            "rowCount" : 6120000,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "5" : {
            "sign" : -917850259,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 590784000,
            "rowCount" : 6120000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)]) "
          },
          "1" : {
            "sign" : -543873752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17888221440000000,
            "rowCount" : 279503460000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "0" : {
            "sign" : 1216749483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 17888221440000000,
            "rowCount" : 279503460000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1872670928,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10 "
          },
          "3" : {
            "sign" : -1668170649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 220320000,
            "rowCount" : 6120000,
            "isRuntime" : true,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- LogicalQueryStage Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331], HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2234922000,
        "inputRowCount" : 51790500
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226957413,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3201,
        "IOBytes" : {
          "Total" : 219111835,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 2528961
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -262844601,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#473], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -1130007319,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1362908082,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
          },
          "19" : {
            "sign" : -162302334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "23" : {
            "sign" : -1251481531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495) "
          },
          "4" : {
            "sign" : -98393180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331] "
          },
          "15" : {
            "sign" : 1032928700,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 181587294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6]) "
          },
          "9" : {
            "sign" : -270771739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 287517600000,
            "rowCount" : 11979900000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
          },
          "33" : {
            "sign" : 2135690983,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3 "
          },
          "22" : {
            "sign" : -1054203522,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] "
          },
          "26" : {
            "sign" : 1234998699,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 297101520000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] "
          },
          "13" : {
            "sign" : -38693346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
          },
          "24" : {
            "sign" : -835107142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          },
          "35" : {
            "sign" : 1590684223,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : -1208939466,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 1639322486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 263259609360,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
          },
          "10" : {
            "sign" : -280341055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 383356800000,
            "rowCount" : 11979900000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
          },
          "21" : {
            "sign" : -1800563716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331] "
          },
          "32" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 1979752353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 287192301120,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
          },
          "1" : {
            "sign" : 161003265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "17" : {
            "sign" : -2057036668,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#7], BroadcastQueryStage 1 "
          },
          "25" : {
            "sign" : 1429346098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#469 = i_item_sk#473) "
          },
          "14" : {
            "sign" : -771719480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
          },
          "31" : {
            "sign" : 1469291511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 13038,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509)) "
          },
          "0" : {
            "sign" : 195501158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 46394672525212923705600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -81501653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "27" : {
            "sign" : 1295579168,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 396135360000,
            "rowCount" : 12379230000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#472 = d_date_sk#509) "
          },
          "2" : {
            "sign" : 1186611080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "18" : {
            "sign" : 1136463599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2 "
          },
          "30" : {
            "sign" : -1977056655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509, d_moy#517] "
          },
          "7" : {
            "sign" : -922440130,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          },
          "29" : {
            "sign" : -1172229338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -336903643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 215394225840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          },
          "28" : {
            "sign" : 1439204196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472]) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n   :  +- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   :     +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n   :        +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   :           +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n   :              :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n   :              :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n   :              :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n   :              :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n   :              :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n   :              :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n   :              :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   :              :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n   :              :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n   :              :     :     +- LogicalQueryStage Project [d_date_sk#43, d_moy#51], BroadcastQueryStage 0\n   :              :     +- LogicalQueryStage Project [i_item_sk#7], BroadcastQueryStage 1\n   :              +- LogicalQueryStage Project [w_warehouse_sk#29, w_warehouse_name#31], BroadcastQueryStage 2\n   +- Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n      +- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n         +- Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n            +- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n               +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n                  :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                  :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n                  :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                  :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n                  :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n                  :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n                  :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#509, d_moy#517], BroadcastQueryStage 3\n                  :     +- LogicalQueryStage Project [i_item_sk#473], BroadcastQueryStage 5\n                  +- LogicalQueryStage Project [w_warehouse_sk#495, w_warehouse_name#497], BroadcastQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19176931032,
        "inputRowCount" : 799068091
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226952136,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8478,
        "IOBytes" : {
          "Total" : 503645165,
          "Details" : {
            "IR" : 72924168,
            "IW" : 0,
            "SR" : 216582874,
            "SW" : 214138123
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1872670928,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 88416,
                "rowCount" : 1842
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 592940996,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 88416,
            "rowCount" : 1842,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, cov#332] Arguments: 10 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 10\n+- Exchange hashpartitioning(i_item_sk#7, w_warehouse_sk#29, 200), ENSURE_REQUIREMENTS, [plan_id=1473]\n   +- *(9) Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n      +- *(9) Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n         +- *(9) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)], output=[w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331])\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 8\n                  +- Exchange hashpartitioning(w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, 200), ENSURE_REQUIREMENTS, [plan_id=1216]\n                     +- *(7) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)], output=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L])\n                        +- *(7) Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n                           +- *(7) BroadcastHashJoin [inv_warehouse_sk#4], [w_warehouse_sk#29], Inner, BuildRight, false\n                              :- *(7) Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n                              :  +- *(7) BroadcastHashJoin [inv_item_sk#3], [i_item_sk#7], Inner, BuildRight, false\n                              :     :- *(7) Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n                              :     :  +- *(7) BroadcastHashJoin [inv_date_sk#6], [d_date_sk#43], Inner, BuildRight, false\n                              :     :     :- *(7) Filter (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4))\n                              :     :     :  +- *(7) ColumnarToRow\n                              :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] Batched: true, DataFilters: [isnotnull(inv_item_sk#3), isnotnull(inv_warehouse_sk#4)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                              :     :     :           +- SubqueryBroadcast dynamicpruning#554, 0, [d_date_sk#43], [id=#1163]\n                              :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#43, d_moy#51], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1160]\n                                                               +- Project [d_date_sk#43, d_moy#51]\n                                                                  +- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                              :     :     +- BroadcastQueryStage 0\n                              :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                              :     :           +- *(1) Project [d_date_sk#43, d_moy#51]\n                              :     :              +- *(1) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                              :     :                 +- *(1) ColumnarToRow\n                              :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                              :     +- BroadcastQueryStage 1\n                              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n                              :           +- *(2) Filter isnotnull(i_item_sk#7)\n                              :              +- *(2) ColumnarToRow\n                              :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n                              +- BroadcastQueryStage 2\n                                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n                                    +- *(3) Filter isnotnull(w_warehouse_sk#29)\n                                       +- *(3) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 88416,
        "inputRowCount" : 1842
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 345, 527, 349, 505, 306, 446, 483, 479, 399, 421, 331, 384, 483, 368, 248, 324, 269, 370, 465, 384, 414, 342, 258, 277, 331, 324, 363, 476, 458, 504, 465, 396, 259, 360, 277, 465, 532, 349, 230, 458, 562, 339, 251, 251, 357, 440, 271, 502, 259, 490, 295, 396, 407, 288, 421, 485, 331, 269, 331, 479, 360, 504, 422, 440, 418, 368, 284, 414, 384, 396, 251, 235, 440, 417, 502, 417, 370, 447, 440, 378, 342, 399, 288, 313, 396, 342, 504, 236, 313, 306, 271, 342, 446, 269, 370, 342, 502, 370, 360, 378, 594, 399, 422, 327, 222, 80, 324, 458, 456, 384, 334, 308, 324, 458, 370, 349, 349, 580, 458, 357, 378, 399, 399, 271, 223, 345, 273, 327, 117, 363, 368, 370, 483, 435, 485, 357, 483, 435, 422, 393, 465, 262, 460, 435, 504, 407, 505, 331, 399, 458, 324, 345, 269, 298, 555, 223, 209, 421, 324, 313, 476, 288, 171, 363, 313, 236, 399, 345, 493, 313, 435, 259, 451, 259, 288, 370, 349, 349, 580, 269, 298, 295, 580, 417, 327, 378, 475, 465, 251, 306, 504, 368, 585, 277, 331, 456, 298, 259, 370, 277 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1432.0,
        "FinishedTasksDistributionInMs" : [ 1432.0, 1432.0, 1432.0, 1432.0, 1432.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 138,
        "TotalTasksDurationInMs" : 132,
        "IOBytes" : {
          "Total" : 71661,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 71661,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1130007319,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -726761687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11168589488,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 11168589488,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#3 = i_item_sk#7) "
          },
          "5" : {
            "sign" : -1704123763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] "
          },
          "6" : {
            "sign" : -1687840119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#6 = d_date_sk#43) "
          },
          "1" : {
            "sign" : 2045329695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22171245300,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 22171245300,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] "
          },
          "0" : {
            "sign" : 1101890847,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331] "
          },
          "2" : {
            "sign" : -1455164414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29) "
          },
          "7" : {
            "sign" : 181587294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6]) "
          },
          "3" : {
            "sign" : 1752383027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9573076704,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 9573076704,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n+- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n      :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n      :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n      :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n      :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n      :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n      :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n      :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n      :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n      :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n      :     :     +- Project [d_date_sk#43, d_moy#51]\n      :     :        +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n      :     +- Project [i_item_sk#7]\n      :        +- Filter isnotnull(i_item_sk#7)\n      :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n      +- Project [w_warehouse_sk#29, w_warehouse_name#31]\n         +- Filter isnotnull(w_warehouse_sk#29)\n            +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_id#30,w_warehouse_name#31,w_warehouse_sq_ft#32,w_street_number#33,w_street_name#34,w_street_type#35,w_suite_number#36,w_city#37,w_county#38,w_state#39,w_zip#40,w_country#41,w_gmt_offset#42] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1736053908,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.inventory Output [4]: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/inventory/inv_date_sk=2450815, ... 260 entries] PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)] PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)] ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int> "
          },
          "4" : {
            "sign" : 736477249,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_item_sk#3] Right keys [1]: [i_item_sk#7] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : 903943785,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [w_warehouse_sk#29, w_warehouse_name#31] Arguments: 2 "
          },
          "9" : {
            "sign" : 1598649138,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#43, d_moy#51] Arguments: 0 "
          },
          "5" : {
            "sign" : 1201129214,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51] Input [6]: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6, d_date_sk#43, d_moy#51] "
          },
          "10" : {
            "sign" : 2136965616,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 10020608,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#7] Arguments: 1 "
          },
          "6" : {
            "sign" : -848760210,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_date_sk#6] Right keys [1]: [d_date_sk#43] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 170445473,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 22171245300,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] Input [6]: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31] "
          },
          "0" : {
            "sign" : -1422262335,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51] Keys [4]: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51] Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)] Aggregate Attributes [5]: [n#351, avg#352, m2#353, sum#556, count#557L] Results [9]: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L] "
          },
          "2" : {
            "sign" : 1483054408,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 23944944924,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_warehouse_sk#4] Right keys [1]: [w_warehouse_sk#29] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1624077035,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, inv_date_sk#6] Condition : (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) "
          },
          "3" : {
            "sign" : -1919195725,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] Input [5]: [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.inventory",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)], output=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L])\n+- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n   +- BroadcastHashJoin [inv_warehouse_sk#4], [w_warehouse_sk#29], Inner, BuildRight, false\n      :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n      :  +- BroadcastHashJoin [inv_item_sk#3], [i_item_sk#7], Inner, BuildRight, false\n      :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n      :     :  +- BroadcastHashJoin [inv_date_sk#6], [d_date_sk#43], Inner, BuildRight, false\n      :     :     :- Filter (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4))\n      :     :     :  +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] Batched: true, DataFilters: [isnotnull(inv_item_sk#3), isnotnull(inv_warehouse_sk#4)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n      :     :     :        +- SubqueryBroadcast dynamicpruning#554, 0, [d_date_sk#43], [id=#1163]\n      :     :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1160]\n      :     :     :                 +- Project [d_date_sk#43, d_moy#51]\n      :     :     :                    +- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n      :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :     +- BroadcastQueryStage 0\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n      :     :           +- *(1) Project [d_date_sk#43, d_moy#51]\n      :     :              +- *(1) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n      :     :                 +- *(1) ColumnarToRow\n      :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- BroadcastQueryStage 1\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n      :           +- *(2) Filter isnotnull(i_item_sk#7)\n      :              +- *(2) ColumnarToRow\n      :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n      +- BroadcastQueryStage 2\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n            +- *(3) Filter isnotnull(w_warehouse_sk#29)\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9596038120,
        "inputRowCount" : 399534045
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 4718,
        "TotalTasksDurationInMs" : 24302,
        "IOBytes" : {
          "Total" : 158013584,
          "Details" : {
            "IR" : 40513660,
            "IW" : 0,
            "SR" : 0,
            "SW" : 117499924
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -201506770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5384003904000,
                "rowCount" : 84125061000
              },
              "compileTime" : {
                "sizeInBytes" : 5384003904000,
                "rowCount" : 84125061000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495)) "
          },
          "1" : {
            "sign" : -793562461,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5146224,
                "rowCount" : 107213
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Join",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n:- LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10\n+- LogicalQueryStage Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 597945837,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5384003904000,
            "rowCount" : 84125061000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [i_item_sk#7, w_warehouse_sk#29] Right keys [2]: [i_item_sk#473, w_warehouse_sk#495] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -1907631283,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1114112,
            "rowCount" : 1842,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, cov#332] Arguments: 12 "
          },
          "2" : {
            "sign" : 551236792,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 5146224,
            "rowCount" : 107213,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#364, cov#365] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "BroadcastQueryStage",
          "toId" : 0,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "BroadcastHashJoin [i_item_sk#7, w_warehouse_sk#29], [i_item_sk#473, w_warehouse_sk#495], Inner, BuildLeft, false\n:- BroadcastQueryStage 12\n:  +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=1567]\n:     +- AQEShuffleRead local\n:        +- ShuffleQueryStage 10\n:           +- Exchange hashpartitioning(i_item_sk#7, w_warehouse_sk#29, 200), ENSURE_REQUIREMENTS, [plan_id=1473]\n:              +- *(9) Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n:                 +- *(9) Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n:                    +- *(9) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)], output=[w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331])\n:                       +- AQEShuffleRead coalesced\n:                          +- ShuffleQueryStage 8\n:                             +- Exchange hashpartitioning(w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, 200), ENSURE_REQUIREMENTS, [plan_id=1216]\n:                                +- *(7) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)], output=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L])\n:                                   +- *(7) Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n:                                      +- *(7) BroadcastHashJoin [inv_warehouse_sk#4], [w_warehouse_sk#29], Inner, BuildRight, false\n:                                         :- *(7) Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n:                                         :  +- *(7) BroadcastHashJoin [inv_item_sk#3], [i_item_sk#7], Inner, BuildRight, false\n:                                         :     :- *(7) Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n:                                         :     :  +- *(7) BroadcastHashJoin [inv_date_sk#6], [d_date_sk#43], Inner, BuildRight, false\n:                                         :     :     :- *(7) Filter (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4))\n:                                         :     :     :  +- *(7) ColumnarToRow\n:                                         :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] Batched: true, DataFilters: [isnotnull(inv_item_sk#3), isnotnull(inv_warehouse_sk#4)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n:                                         :     :     :           +- SubqueryBroadcast dynamicpruning#554, 0, [d_date_sk#43], [id=#1163]\n:                                         :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#43, d_moy#51], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1160]\n                                                                           +- Project [d_date_sk#43, d_moy#51]\n                                                                              +- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n:                                         :     :     +- BroadcastQueryStage 0\n:                                         :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n:                                         :     :           +- *(1) Project [d_date_sk#43, d_moy#51]\n:                                         :     :              +- *(1) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n:                                         :     :                 +- *(1) ColumnarToRow\n:                                         :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n:                                         :     +- BroadcastQueryStage 1\n:                                         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n:                                         :           +- *(2) Filter isnotnull(i_item_sk#7)\n:                                         :              +- *(2) ColumnarToRow\n:                                         :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n:                                         +- BroadcastQueryStage 2\n:                                            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n:                                               +- *(3) Filter isnotnull(w_warehouse_sk#29)\n:                                                  +- *(3) ColumnarToRow\n:                                                     +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n+- ShuffleQueryStage 11\n   +- Exchange hashpartitioning(i_item_sk#473, w_warehouse_sk#495, 200), ENSURE_REQUIREMENTS, [plan_id=1529]\n      +- *(10) Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n         +- *(10) Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n            +- *(10) HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)], output=[w_warehouse_sk#495, i_item_sk#473, d_moy#517, stdev#330, mean#331])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 9\n                     +- Exchange hashpartitioning(w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, 200), ENSURE_REQUIREMENTS, [plan_id=1303]\n                        +- *(8) HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#471 as double)), partial_avg(inv_quantity_on_hand#471)], output=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L])\n                           +- *(8) Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n                              +- *(8) BroadcastHashJoin [inv_warehouse_sk#470], [w_warehouse_sk#495], Inner, BuildRight, false\n                                 :- *(8) Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                                 :  +- *(8) BroadcastHashJoin [inv_item_sk#469], [i_item_sk#473], Inner, BuildRight, false\n                                 :     :- *(8) Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                                 :     :  +- *(8) BroadcastHashJoin [inv_date_sk#472], [d_date_sk#509], Inner, BuildRight, false\n                                 :     :     :- *(8) Filter (isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470))\n                                 :     :     :  +- *(8) ColumnarToRow\n                                 :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] Batched: true, DataFilters: [isnotnull(inv_item_sk#469), isnotnull(inv_warehouse_sk#470)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#472), dynamicpruningexpression(inv_date_sk#472 IN dynamicpruning#555)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                                 :     :     :           +- SubqueryBroadcast dynamicpruning#555, 0, [d_date_sk#509], [id=#1250]\n                                 :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  BroadcastQueryStage 1\n                                                                  +- ReusedExchange [d_date_sk#509, d_moy#517], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                                                               +- == Initial Plan ==\n                                                                  BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1247]\n                                                                  +- Project [d_date_sk#509, d_moy#517]\n                                                                     +- Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                 :     :     +- BroadcastQueryStage 3\n                                 :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                                 :     :           +- *(4) Project [d_date_sk#509, d_moy#517]\n                                 :     :              +- *(4) Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                                 :     :                 +- *(4) ColumnarToRow\n                                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                 :     +- BroadcastQueryStage 5\n                                 :        +- ReusedExchange [i_item_sk#473], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n                                 +- BroadcastQueryStage 7\n                                    +- ReusedExchange [w_warehouse_sk#495, w_warehouse_name#497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6260336,
        "inputRowCount" : 109055
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 13802, 12168, 13869, 12547, 12946, 12168, 11769, 12547, 11769, 12547, 13386, 12184, 11769, 13802, 14242, 12547, 12946, 13869, 13040, 12946, 13403, 11406, 12184, 12608, 13386, 12168, 12184, 12946, 13802, 12547, 13403, 12547, 14242, 12184, 12946, 12547, 13386, 12547, 12168, 12946, 13802, 13802, 12168, 12946, 12946, 11769, 13403, 13403, 12547, 12946, 12184, 12547, 13386, 12547, 13040, 13040, 13802, 11769, 12946, 13386, 12547, 12547, 12184, 12547, 12946, 11406, 12547, 12547, 11062, 13403, 13802, 11769, 14242, 12946, 12946, 12547, 13802, 13386, 12946, 12946, 12547, 12946, 11406, 13386, 13802, 12946, 13386, 13403, 12547, 12946, 12184, 12547, 12946, 12946, 12184, 13386, 11769, 12547, 13386, 12946, 13040, 12946, 12547, 12946, 12547, 12547, 12168, 12547, 14242, 14242, 13802, 12547, 12946, 12547, 12547, 12168, 12946, 12946, 12946, 13802, 12547, 13802, 12946, 12547, 11406, 13386, 11769, 12946, 12547, 12184, 12547, 12547, 12946, 13403, 12168, 12946, 12547, 11769, 12547, 12946, 12946, 13386, 12547, 12168, 12946, 12547, 12946, 13386, 12946, 12547, 12946, 12184, 12946, 11769, 13403, 12547, 13386, 12547, 13403, 13040, 12168, 11769, 12946, 12946, 13386, 12547, 12946, 12547, 12547, 12184, 12547, 13403, 12946, 12547, 12946, 13386, 12946, 12547, 13802, 13386, 12547, 12946, 13802, 12946, 12168, 13040, 12946, 12946, 13802, 13802, 12946, 12547, 13386, 13802, 12547, 13040, 13802, 13802, 11769, 12168 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16, 19 ],
      "Objectives" : {
        "DurationInMs" : 479,
        "TotalTasksDurationInMs" : 453,
        "IOBytes" : {
          "Total" : 4902051,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4889502,
            "SW" : 12549
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1172229338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1222232742,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11168589488,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 11168589488,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#469 = i_item_sk#473) "
          },
          "5" : {
            "sign" : -1332619347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] "
          },
          "6" : {
            "sign" : -590784684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#472 = d_date_sk#509) "
          },
          "1" : {
            "sign" : -59095650,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22171245300,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 22171245300,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] "
          },
          "0" : {
            "sign" : 798794488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331] "
          },
          "2" : {
            "sign" : -872303551,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495) "
          },
          "7" : {
            "sign" : 1439204196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472]) "
          },
          "3" : {
            "sign" : 38481690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9573076704,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 9573076704,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n+- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n   +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n      :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n      :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n      :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n      :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n      :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n      :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n      :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n      :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n      :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n      :     :     +- Project [d_date_sk#509, d_moy#517]\n      :     :        +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n      :     +- Project [i_item_sk#473]\n      :        +- Filter isnotnull(i_item_sk#473)\n      :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#473,i_item_id#474,i_rec_start_date#475,i_rec_end_date#476,i_item_desc#477,i_current_price#478,i_wholesale_cost#479,i_brand_id#480,i_brand#481,i_class_id#482,i_class#483,i_category_id#484,i_category#485,i_manufact_id#486,i_manufact#487,i_size#488,i_formulation#489,i_color#490,i_units#491,i_container#492,i_manager_id#493,i_product_name#494] parquet\n      +- Project [w_warehouse_sk#495, w_warehouse_name#497]\n         +- Filter isnotnull(w_warehouse_sk#495)\n            +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#495,w_warehouse_id#496,w_warehouse_name#497,w_warehouse_sq_ft#498,w_street_number#499,w_street_name#500,w_street_type#501,w_suite_number#502,w_city#503,w_county#504,w_state#505,w_zip#506,w_country#507,w_gmt_offset#508] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 998589527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.inventory Output [4]: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/inventory/inv_date_sk=2450815, ... 260 entries] PartitionFilters: [isnotnull(inv_date_sk#472), dynamicpruningexpression(inv_date_sk#472 IN dynamicpruning#555)] PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)] ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int> "
          },
          "4" : {
            "sign" : 1521051036,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 11168589488,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_item_sk#469] Right keys [1]: [i_item_sk#473] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -2137372815,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [w_warehouse_sk#495, w_warehouse_name#497] Arguments: 7 "
          },
          "9" : {
            "sign" : 2088686888,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#509, d_moy#517] Arguments: 3 "
          },
          "5" : {
            "sign" : 51325253,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517] Input [6]: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472, d_date_sk#509, d_moy#517] "
          },
          "10" : {
            "sign" : -1397539955,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 10020608,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#473] Arguments: 5 "
          },
          "6" : {
            "sign" : -1362285678,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_date_sk#472] Right keys [1]: [d_date_sk#509] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -498433670,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 22171245300,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] Input [6]: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497] "
          },
          "0" : {
            "sign" : 2016467335,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517] Keys [4]: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517] Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#471 as double)), partial_avg(inv_quantity_on_hand#471)] Aggregate Attributes [5]: [n#537, avg#538, m2#539, sum#560, count#561L] Results [9]: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L] "
          },
          "2" : {
            "sign" : 640284979,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 23944944924,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_warehouse_sk#470] Right keys [1]: [w_warehouse_sk#495] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1574634773,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, inv_date_sk#472] Condition : (isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) "
          },
          "3" : {
            "sign" : -1318292554,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9573076704,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] Input [5]: [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.inventory",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#471 as double)), partial_avg(inv_quantity_on_hand#471)], output=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L])\n+- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n   +- BroadcastHashJoin [inv_warehouse_sk#470], [w_warehouse_sk#495], Inner, BuildRight, false\n      :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n      :  +- BroadcastHashJoin [inv_item_sk#469], [i_item_sk#473], Inner, BuildRight, false\n      :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n      :     :  +- BroadcastHashJoin [inv_date_sk#472], [d_date_sk#509], Inner, BuildRight, false\n      :     :     :- Filter (isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470))\n      :     :     :  +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] Batched: true, DataFilters: [isnotnull(inv_item_sk#469), isnotnull(inv_warehouse_sk#470)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#472), dynamicpruningexpression(inv_date_sk#472 IN dynamicpruning#555)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n      :     :     :        +- SubqueryBroadcast dynamicpruning#555, 0, [d_date_sk#509], [id=#1250]\n      :     :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1247]\n      :     :     :                 +- Project [d_date_sk#509, d_moy#517]\n      :     :     :                    +- Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n      :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     :     +- BroadcastQueryStage 3\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n      :     :           +- *(4) Project [d_date_sk#509, d_moy#517]\n      :     :              +- *(4) Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n      :     :                 +- *(4) ColumnarToRow\n      :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :     +- BroadcastQueryStage 5\n      :        +- ReusedExchange [i_item_sk#473], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n      +- BroadcastQueryStage 7\n         +- ReusedExchange [w_warehouse_sk#495, w_warehouse_name#497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9596038128,
        "inputRowCount" : 399534046
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 4636,
        "TotalTasksDurationInMs" : 17371,
        "IOBytes" : {
          "Total" : 126519746,
          "Details" : {
            "IR" : 32410508,
            "IW" : 0,
            "SR" : 0,
            "SW" : 94109238
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1942702887,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5384003904000,
                "rowCount" : 84125061000
              },
              "compileTime" : {
                "sizeInBytes" : 5384003904000,
                "rowCount" : 84125061000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true\n+- Join Inner, ((i_item_sk#7 = i_item_sk#473) AND (w_warehouse_sk#29 = w_warehouse_sk#495))\n   :- LogicalQueryStage Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332], ShuffleQueryStage 10\n   +- LogicalQueryStage Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365], ShuffleQueryStage 11\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 751093054,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 5384003904000,
            "rowCount" : 84125061000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [10]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, cov#332, w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#364, cov#365] Arguments: [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true, 0 "
          },
          "1" : {
            "sign" : 1025081813,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 10824,
            "rowCount" : 123,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [10]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, cov#332, w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#364, cov#365] Arguments: 13 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST], true, 0\n+- ShuffleQueryStage 13\n   +- Exchange rangepartitioning(w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#331 ASC NULLS FIRST, cov#332 ASC NULLS FIRST, d_moy#517 ASC NULLS FIRST, mean#364 ASC NULLS FIRST, cov#365 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=1609]\n      +- *(11) BroadcastHashJoin [i_item_sk#7, w_warehouse_sk#29], [i_item_sk#473, w_warehouse_sk#495], Inner, BuildLeft, false\n         :- BroadcastQueryStage 12\n         :  +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=1567]\n         :     +- AQEShuffleRead local\n         :        +- ShuffleQueryStage 10\n         :           +- Exchange hashpartitioning(i_item_sk#7, w_warehouse_sk#29, 200), ENSURE_REQUIREMENTS, [plan_id=1473]\n         :              +- *(9) Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n         :                 +- *(9) Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n         :                    +- *(9) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)], output=[w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331])\n         :                       +- AQEShuffleRead coalesced\n         :                          +- ShuffleQueryStage 8\n         :                             +- Exchange hashpartitioning(w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, 200), ENSURE_REQUIREMENTS, [plan_id=1216]\n         :                                +- *(7) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)], output=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L])\n         :                                   +- *(7) Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n         :                                      +- *(7) BroadcastHashJoin [inv_warehouse_sk#4], [w_warehouse_sk#29], Inner, BuildRight, false\n         :                                         :- *(7) Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n         :                                         :  +- *(7) BroadcastHashJoin [inv_item_sk#3], [i_item_sk#7], Inner, BuildRight, false\n         :                                         :     :- *(7) Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n         :                                         :     :  +- *(7) BroadcastHashJoin [inv_date_sk#6], [d_date_sk#43], Inner, BuildRight, false\n         :                                         :     :     :- *(7) Filter (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4))\n         :                                         :     :     :  +- *(7) ColumnarToRow\n         :                                         :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] Batched: true, DataFilters: [isnotnull(inv_item_sk#3), isnotnull(inv_warehouse_sk#4)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n         :                                         :     :     :           +- SubqueryBroadcast dynamicpruning#554, 0, [d_date_sk#43], [id=#1163]\n         :                                         :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#43, d_moy#51], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1160]\n                                                                                    +- Project [d_date_sk#43, d_moy#51]\n                                                                                       +- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         :                                         :     :     +- BroadcastQueryStage 0\n         :                                         :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n         :                                         :     :           +- *(1) Project [d_date_sk#43, d_moy#51]\n         :                                         :     :              +- *(1) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n         :                                         :     :                 +- *(1) ColumnarToRow\n         :                                         :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         :                                         :     +- BroadcastQueryStage 1\n         :                                         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n         :                                         :           +- *(2) Filter isnotnull(i_item_sk#7)\n         :                                         :              +- *(2) ColumnarToRow\n         :                                         :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n         :                                         +- BroadcastQueryStage 2\n         :                                            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n         :                                               +- *(3) Filter isnotnull(w_warehouse_sk#29)\n         :                                                  +- *(3) ColumnarToRow\n         :                                                     +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n         +- AQEShuffleRead local\n            +- ShuffleQueryStage 11\n               +- Exchange hashpartitioning(i_item_sk#473, w_warehouse_sk#495, 200), ENSURE_REQUIREMENTS, [plan_id=1529]\n                  +- *(10) Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n                     +- *(10) Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n                        +- *(10) HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)], output=[w_warehouse_sk#495, i_item_sk#473, d_moy#517, stdev#330, mean#331])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 9\n                                 +- Exchange hashpartitioning(w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, 200), ENSURE_REQUIREMENTS, [plan_id=1303]\n                                    +- *(8) HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#471 as double)), partial_avg(inv_quantity_on_hand#471)], output=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L])\n                                       +- *(8) Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n                                          +- *(8) BroadcastHashJoin [inv_warehouse_sk#470], [w_warehouse_sk#495], Inner, BuildRight, false\n                                             :- *(8) Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                                             :  +- *(8) BroadcastHashJoin [inv_item_sk#469], [i_item_sk#473], Inner, BuildRight, false\n                                             :     :- *(8) Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                                             :     :  +- *(8) BroadcastHashJoin [inv_date_sk#472], [d_date_sk#509], Inner, BuildRight, false\n                                             :     :     :- *(8) Filter (isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470))\n                                             :     :     :  +- *(8) ColumnarToRow\n                                             :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] Batched: true, DataFilters: [isnotnull(inv_item_sk#469), isnotnull(inv_warehouse_sk#470)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#472), dynamicpruningexpression(inv_date_sk#472 IN dynamicpruning#555)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                                             :     :     :           +- SubqueryBroadcast dynamicpruning#555, 0, [d_date_sk#509], [id=#1250]\n                                             :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                           +- == Final Plan ==\n                                                                              BroadcastQueryStage 1\n                                                                              +- ReusedExchange [d_date_sk#509, d_moy#517], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                                                                           +- == Initial Plan ==\n                                                                              BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1247]\n                                                                              +- Project [d_date_sk#509, d_moy#517]\n                                                                                 +- Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                             :     :     +- BroadcastQueryStage 3\n                                             :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                                             :     :           +- *(4) Project [d_date_sk#509, d_moy#517]\n                                             :     :              +- *(4) Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                                             :     :                 +- *(4) ColumnarToRow\n                                             :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                                             :     +- BroadcastQueryStage 5\n                                             :        +- ReusedExchange [i_item_sk#473], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n                                             +- BroadcastQueryStage 7\n                                                +- ReusedExchange [w_warehouse_sk#495, w_warehouse_name#497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10824,
        "inputRowCount" : 123
      },
      "InitialPartitionNum" : 200,
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 148,
        "TotalTasksDurationInMs" : 137,
        "IOBytes" : {
          "Total" : 12549,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12549,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1949166843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] "
          },
          "1" : {
            "sign" : -1439085360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n+- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   +- Aggregate [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double)) AS stdev#330, avg(inv_quantity_on_hand#5) AS mean#331]\n      +- Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n         +- Join Inner, (inv_warehouse_sk#4 = w_warehouse_sk#29)\n            :- Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n            :  +- Join Inner, (inv_item_sk#3 = i_item_sk#7)\n            :     :- Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n            :     :  +- Join Inner, (inv_date_sk#6 = d_date_sk#43)\n            :     :     :- Filter (((isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4)) AND isnotnull(inv_date_sk#6)) AND dynamicpruning#554 [inv_date_sk#6])\n            :     :     :  :  +- Project [d_date_sk#43, d_moy#51]\n            :     :     :  :     +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n            :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n            :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] parquet\n            :     :     +- Project [d_date_sk#43, d_moy#51]\n            :     :        +- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n            :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n            :     +- Project [i_item_sk#7]\n            :        +- Filter isnotnull(i_item_sk#7)\n            :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n            +- Project [w_warehouse_sk#29, w_warehouse_name#31]\n               +- Filter isnotnull(w_warehouse_sk#29)\n                  +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_id#30,w_warehouse_name#31,w_warehouse_sq_ft#32,w_street_number#33,w_street_name#34,w_street_type#35,w_suite_number#36,w_city#37,w_county#38,w_state#39,w_zip#40,w_country#41,w_gmt_offset#42] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2045701967,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332] Input [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331] "
          },
          "1" : {
            "sign" : -2105529524,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331] Condition : (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END) "
          },
          "2" : {
            "sign" : 301799053,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 738480000,
            "rowCount" : 7650000,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L] Keys [4]: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51] Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)] Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#5 as double))#341, avg(inv_quantity_on_hand#5)#342] Results [5]: [w_warehouse_sk#29, i_item_sk#7, d_moy#51, stddev_samp(cast(inv_quantity_on_hand#5 as double))#341 AS stdev#330, avg(inv_quantity_on_hand#5)#342 AS mean#331] "
          },
          "3" : {
            "sign" : -1720456073,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#331, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#332]\n+- Filter (CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END AND CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.5) END)\n   +- HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#5 as double)), avg(inv_quantity_on_hand#5)], output=[w_warehouse_sk#29, i_item_sk#7, d_moy#51, stdev#330, mean#331])\n      +- ShuffleQueryStage 8\n         +- Exchange hashpartitioning(w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, 200), ENSURE_REQUIREMENTS, [plan_id=1216]\n            +- *(7) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#5 as double)), partial_avg(inv_quantity_on_hand#5)], output=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, n#356, avg#357, m2#358, sum#558, count#559L])\n               +- *(7) Project [inv_quantity_on_hand#5, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]\n                  +- *(7) BroadcastHashJoin [inv_warehouse_sk#4], [w_warehouse_sk#29], Inner, BuildRight, false\n                     :- *(7) Project [inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51, i_item_sk#7]\n                     :  +- *(7) BroadcastHashJoin [inv_item_sk#3], [i_item_sk#7], Inner, BuildRight, false\n                     :     :- *(7) Project [inv_item_sk#3, inv_warehouse_sk#4, inv_quantity_on_hand#5, d_moy#51]\n                     :     :  +- *(7) BroadcastHashJoin [inv_date_sk#6], [d_date_sk#43], Inner, BuildRight, false\n                     :     :     :- *(7) Filter (isnotnull(inv_item_sk#3) AND isnotnull(inv_warehouse_sk#4))\n                     :     :     :  +- *(7) ColumnarToRow\n                     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#3,inv_warehouse_sk#4,inv_quantity_on_hand#5,inv_date_sk#6] Batched: true, DataFilters: [isnotnull(inv_item_sk#3), isnotnull(inv_warehouse_sk#4)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#6), dynamicpruningexpression(inv_date_sk#6 IN dynamicpruning#554)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                     :     :     :           +- SubqueryBroadcast dynamicpruning#554, 0, [d_date_sk#43], [id=#1163]\n                     :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#43, d_moy#51], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1160]\n                                                      +- Project [d_date_sk#43, d_moy#51]\n                                                         +- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                     :     :     +- BroadcastQueryStage 0\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=370]\n                     :     :           +- *(1) Project [d_date_sk#43, d_moy#51]\n                     :     :              +- *(1) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n                     :     :                 +- *(1) ColumnarToRow\n                     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                     :     +- BroadcastQueryStage 1\n                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n                     :           +- *(2) Filter isnotnull(i_item_sk#7)\n                     :              +- *(2) ColumnarToRow\n                     :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n                     +- BroadcastQueryStage 2\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n                           +- *(3) Filter isnotnull(w_warehouse_sk#29)\n                              +- *(3) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 738480000,
        "inputRowCount" : 7650000
      },
      "InitialPartitionNum" : 200,
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 12749.0,
        "FinishedTasksDistributionInMs" : [ 128.0, 184.0, 667.0, 3731.0, 4030.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 2155,
        "TotalTasksDurationInMs" : 4269,
        "IOBytes" : {
          "Total" : 117571585,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 117499924,
            "SW" : 71661
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 340068321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2448000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 2448000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#7] "
          },
          "1" : {
            "sign" : 1906460664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#7) "
          },
          "2" : {
            "sign" : 337999037,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#7, i_item_id#8, i_rec_start_date#9, i_rec_end_date#10, i_item_desc#11, i_current_price#12, i_wholesale_cost#13, i_brand_id#14, i_brand#15, i_class_id#16, i_class#17, i_category_id#18, i_category#19, i_manufact_id#20, i_manufact#21, i_size#22, i_formulation#23, i_color#24, i_units#25, i_container#26, i_manager_id#27, i_product_name#28], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#7]\n+- Filter isnotnull(i_item_sk#7)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#7,i_item_id#8,i_rec_start_date#9,i_rec_end_date#10,i_item_desc#11,i_current_price#12,i_wholesale_cost#13,i_brand_id#14,i_brand#15,i_class_id#16,i_class#17,i_category_id#18,i_category#19,i_manufact_id#20,i_manufact#21,i_size#22,i_formulation#23,i_color#24,i_units#25,i_container#26,i_manager_id#27,i_product_name#28] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1887148435,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [i_item_sk#7] Condition : isnotnull(i_item_sk#7) "
          },
          "1" : {
            "sign" : -1206166376,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2448000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [1]: [i_item_sk#7] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#7)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#7] Batched: true, DataFilters: [isnotnull(i_item_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2448000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1548,
        "TotalTasksDurationInMs" : 6415,
        "IOBytes" : {
          "Total" : 866274,
          "Details" : {
            "IR" : 866274,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -38693346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 800,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 800,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#43, d_moy#51] "
          },
          "1" : {
            "sign" : -771719480,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43)) "
          },
          "2" : {
            "sign" : 1032928700,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#43, d_date_id#44, d_date#45, d_month_seq#46, d_week_seq#47, d_quarter_seq#48, d_year#49, d_dow#50, d_moy#51, d_dom#52, d_qoy#53, d_fy_year#54, d_fy_quarter_seq#55, d_fy_week_seq#56, d_day_name#57, d_quarter_name#58, d_holiday#59, d_weekend#60, d_following_holiday#61, d_first_dom#62, d_last_dom#63, d_same_day_ly#64, d_same_day_lq#65, d_current_day#66, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#43, d_moy#51]\n+- Filter (((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND ((d_year#49 = 1998) AND (d_moy#51 = 4))) AND isnotnull(d_date_sk#43))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_date_id#44,d_date#45,d_month_seq#46,d_week_seq#47,d_quarter_seq#48,d_year#49,d_dow#50,d_moy#51,d_dom#52,d_qoy#53,d_fy_year#54,d_fy_quarter_seq#55,d_fy_week_seq#56,d_day_name#57,d_quarter_name#58,d_holiday#59,d_weekend#60,d_following_holiday#61,d_first_dom#62,d_last_dom#63,d_same_day_ly#64,d_same_day_lq#65,d_current_day#66,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 91382807,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [d_date_sk#43, d_moy#51] Input [3]: [d_date_sk#43, d_year#49, d_moy#51] "
          },
          "1" : {
            "sign" : -69074483,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#43, d_year#49, d_moy#51] Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43)) "
          },
          "2" : {
            "sign" : -914280549,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 800,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#43, d_year#49, d_moy#51] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#43, d_moy#51]\n+- Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 1998)) AND (d_moy#51 = 4)) AND isnotnull(d_date_sk#43))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#43,d_year#49,d_moy#51] Batched: true, DataFilters: [isnotnull(d_year#49), isnotnull(d_moy#51), (d_year#49 = 1998), (d_moy#51 = 4), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,4), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 800,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1451,
        "TotalTasksDurationInMs" : 1443,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 871767067,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#29, w_warehouse_name#31] "
          },
          "1" : {
            "sign" : 2017802534,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#29) "
          },
          "2" : {
            "sign" : -782926507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#29, w_warehouse_id#30, w_warehouse_name#31, w_warehouse_sq_ft#32, w_street_number#33, w_street_name#34, w_street_type#35, w_suite_number#36, w_city#37, w_county#38, w_state#39, w_zip#40, w_country#41, w_gmt_offset#42], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#29, w_warehouse_name#31]\n+- Filter isnotnull(w_warehouse_sk#29)\n   +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_id#30,w_warehouse_name#31,w_warehouse_sq_ft#32,w_street_number#33,w_street_name#34,w_street_type#35,w_suite_number#36,w_city#37,w_county#38,w_state#39,w_zip#40,w_country#41,w_gmt_offset#42] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -512811401,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [w_warehouse_sk#29, w_warehouse_name#31] Condition : isnotnull(w_warehouse_sk#29) "
          },
          "1" : {
            "sign" : -538867864,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.warehouse Output [2]: [w_warehouse_sk#29, w_warehouse_name#31] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse] PushedFilters: [IsNotNull(w_warehouse_sk)] ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.warehouse",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(w_warehouse_sk#29)\n+- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#29,w_warehouse_name#31] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#29)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 570,
        "inputRowCount" : 15
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1436,
        "TotalTasksDurationInMs" : 1422,
        "IOBytes" : {
          "Total" : 6239,
          "Details" : {
            "IR" : 6239,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1748864514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] "
          },
          "1" : {
            "sign" : 1987331211,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              },
              "compileTime" : {
                "sizeInBytes" : 1644138000,
                "rowCount" : 45670500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n+- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n   +- Aggregate [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double)) AS stdev#330, avg(inv_quantity_on_hand#471) AS mean#331]\n      +- Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n         +- Join Inner, (inv_warehouse_sk#470 = w_warehouse_sk#495)\n            :- Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n            :  +- Join Inner, (inv_item_sk#469 = i_item_sk#473)\n            :     :- Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n            :     :  +- Join Inner, (inv_date_sk#472 = d_date_sk#509)\n            :     :     :- Filter (((isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470)) AND isnotnull(inv_date_sk#472)) AND dynamicpruning#555 [inv_date_sk#472])\n            :     :     :  :  +- Project [d_date_sk#509, d_moy#517]\n            :     :     :  :     +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n            :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n            :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] parquet\n            :     :     +- Project [d_date_sk#509, d_moy#517]\n            :     :        +- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n            :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n            :     +- Project [i_item_sk#473]\n            :        +- Filter isnotnull(i_item_sk#473)\n            :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#473,i_item_id#474,i_rec_start_date#475,i_rec_end_date#476,i_item_desc#477,i_current_price#478,i_wholesale_cost#479,i_brand_id#480,i_brand#481,i_class_id#482,i_class#483,i_category_id#484,i_category#485,i_manufact_id#486,i_manufact#487,i_size#488,i_formulation#489,i_color#490,i_units#491,i_container#492,i_manager_id#493,i_product_name#494] parquet\n            +- Project [w_warehouse_sk#495, w_warehouse_name#497]\n               +- Filter isnotnull(w_warehouse_sk#495)\n                  +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#495,w_warehouse_id#496,w_warehouse_name#497,w_warehouse_sq_ft#498,w_street_number#499,w_street_name#500,w_street_type#501,w_suite_number#502,w_city#503,w_county#504,w_state#505,w_zip#506,w_country#507,w_gmt_offset#508] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1168401242,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365] Input [5]: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stdev#330, mean#331] "
          },
          "1" : {
            "sign" : -1729817365,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stdev#330, mean#331] Condition : CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END "
          },
          "2" : {
            "sign" : 1690359380,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 590784000,
            "rowCount" : 6120000,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L] Keys [4]: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517] Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)] Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#471 as double))#341, avg(inv_quantity_on_hand#471)#342] Results [5]: [w_warehouse_sk#495, i_item_sk#473, d_moy#517, stddev_samp(cast(inv_quantity_on_hand#471 as double))#341 AS stdev#330, avg(inv_quantity_on_hand#471)#342 AS mean#331] "
          },
          "3" : {
            "sign" : 731473850,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1644138000,
            "rowCount" : 45670500,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#495, i_item_sk#473, d_moy#517, mean#331 AS mean#364, CASE WHEN (mean#331 = 0.0) THEN null ELSE (stdev#330 / mean#331) END AS cov#365]\n+- Filter CASE WHEN (mean#331 = 0.0) THEN false ELSE ((stdev#330 / mean#331) > 1.0) END\n   +- HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[stddev_samp(cast(inv_quantity_on_hand#471 as double)), avg(inv_quantity_on_hand#471)], output=[w_warehouse_sk#495, i_item_sk#473, d_moy#517, stdev#330, mean#331])\n      +- ShuffleQueryStage 9\n         +- Exchange hashpartitioning(w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, 200), ENSURE_REQUIREMENTS, [plan_id=1303]\n            +- *(8) HashAggregate(keys=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#471 as double)), partial_avg(inv_quantity_on_hand#471)], output=[w_warehouse_name#497, w_warehouse_sk#495, i_item_sk#473, d_moy#517, n#542, avg#543, m2#544, sum#562, count#563L])\n               +- *(8) Project [inv_quantity_on_hand#471, i_item_sk#473, w_warehouse_sk#495, w_warehouse_name#497, d_moy#517]\n                  +- *(8) BroadcastHashJoin [inv_warehouse_sk#470], [w_warehouse_sk#495], Inner, BuildRight, false\n                     :- *(8) Project [inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517, i_item_sk#473]\n                     :  +- *(8) BroadcastHashJoin [inv_item_sk#469], [i_item_sk#473], Inner, BuildRight, false\n                     :     :- *(8) Project [inv_item_sk#469, inv_warehouse_sk#470, inv_quantity_on_hand#471, d_moy#517]\n                     :     :  +- *(8) BroadcastHashJoin [inv_date_sk#472], [d_date_sk#509], Inner, BuildRight, false\n                     :     :     :- *(8) Filter (isnotnull(inv_item_sk#469) AND isnotnull(inv_warehouse_sk#470))\n                     :     :     :  +- *(8) ColumnarToRow\n                     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#469,inv_warehouse_sk#470,inv_quantity_on_hand#471,inv_date_sk#472] Batched: true, DataFilters: [isnotnull(inv_item_sk#469), isnotnull(inv_warehouse_sk#470)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#472), dynamicpruningexpression(inv_date_sk#472 IN dynamicpruning#555)], PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                     :     :     :           +- SubqueryBroadcast dynamicpruning#555, 0, [d_date_sk#509], [id=#1250]\n                     :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#509, d_moy#517], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1247]\n                                                      +- Project [d_date_sk#509, d_moy#517]\n                                                         +- Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                     :     :     +- BroadcastQueryStage 3\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=432]\n                     :     :           +- *(4) Project [d_date_sk#509, d_moy#517]\n                     :     :              +- *(4) Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n                     :     :                 +- *(4) ColumnarToRow\n                     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                     :     +- BroadcastQueryStage 5\n                     :        +- ReusedExchange [i_item_sk#473], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=389]\n                     +- BroadcastQueryStage 7\n                        +- ReusedExchange [w_warehouse_sk#495, w_warehouse_name#497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=406]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 590784000,
        "inputRowCount" : 6120000
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580, 493580 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 2157,
        "TotalTasksDurationInMs" : 3580,
        "IOBytes" : {
          "Total" : 96553989,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 94109238,
            "SW" : 2444751
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1977056655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 848,
                "rowCount" : 53
              },
              "compileTime" : {
                "sizeInBytes" : 848,
                "rowCount" : 53
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509, d_moy#517] "
          },
          "1" : {
            "sign" : 1469291511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13038,
                "rowCount" : 53
              },
              "compileTime" : {
                "sizeInBytes" : 13038,
                "rowCount" : 53
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509)) "
          },
          "2" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#509, d_moy#517]\n+- Filter (((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND ((d_year#515 = 1998) AND (d_moy#517 = 5))) AND isnotnull(d_date_sk#509))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -182941812,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [d_date_sk#509, d_moy#517] Input [3]: [d_date_sk#509, d_year#515, d_moy#517] "
          },
          "1" : {
            "sign" : -1469725286,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#509, d_year#515, d_moy#517] Condition : ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509)) "
          },
          "2" : {
            "sign" : 1439429998,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 848,
            "rowCount" : 53,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#509, d_year#515, d_moy#517] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#509, d_moy#517]\n+- Filter ((((isnotnull(d_year#515) AND isnotnull(d_moy#517)) AND (d_year#515 = 1998)) AND (d_moy#517 = 5)) AND isnotnull(d_date_sk#509))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_year#515,d_moy#517] Batched: true, DataFilters: [isnotnull(d_year#515), isnotnull(d_moy#517), (d_year#515 = 1998), (d_moy#517 = 5), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 848,
        "inputRowCount" : 53
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1565,
        "TotalTasksDurationInMs" : 1560,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226949769,
  "SQLEndTimeInMs" : 1702226960614,
  "Objectives" : {
    "DurationInMs" : 10845,
    "IOBytes" : {
      "Total" : 504705578,
      "Details" : {
        "IR" : 73984581,
        "IW" : 0,
        "SR" : 216582874,
        "SW" : 214138123
      }
    }
  }
}
