{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : 119021198,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1153753008,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24] "
        },
        "4" : {
          "sign" : 1470726712,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 34694296666,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [sum(_w0#93) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#94], [i_class#46] "
        },
        "15" : {
          "sign" : -246181910,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1884082052,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#102 [cs_sold_date_sk#35]) "
        },
        "9" : {
          "sign" : -1758571818,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#35 = d_date_sk#58) "
        },
        "13" : {
          "sign" : 1797729055,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
        },
        "16" : {
          "sign" : -553768668,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12178800,
          "rowCount" : 61200,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
        },
        "5" : {
          "sign" : 1394596896,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 30357509583,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#0, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#93] "
        },
        "10" : {
          "sign" : 1356760882,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3438552408,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35] "
        },
        "6" : {
          "sign" : 480721650,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 29206513959,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
        },
        "1" : {
          "sign" : 1031109548,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 32525903124,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 800946388,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 26071200,
          "rowCount" : 61200,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36)) "
        },
        "14" : {
          "sign" : -828403114,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58)) "
        },
        "0" : {
          "sign" : -1191656543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 12000,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "2" : {
          "sign" : 595313847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 32525903124,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#1 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -1494117967,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -56424910,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 30357509583,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#16 = i_item_sk#36) "
        },
        "3" : {
          "sign" : -198322305,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32525903124,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#0, ((_w0#93 * 100) / _we0#94) AS revenueratio#1] "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Window",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#1 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#0, ((_w0#93 * 100) / _we0#94) AS revenueratio#1]\n         +- Window [sum(_w0#93) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#94], [i_class#46]\n            +- Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#0, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#93]\n               +- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                  +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n                     :- Project [cs_item_sk#16, cs_ext_sales_price#24]\n                     :  +- Join Inner, (cs_sold_date_sk#35 = d_date_sk#58)\n                     :     :- Project [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35]\n                     :     :  +- Filter ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#102 [cs_sold_date_sk#35])\n                     :     :     :  +- Project [d_date_sk#58]\n                     :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#58]\n                     :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n                     +- Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                        +- Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n                           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 29905661590,
      "inputRowCount" : 143550066
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -774947125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 6776896,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "5" : {
            "sign" : -1600327820,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5929784,
            "rowCount" : 30583,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))]) "
          },
          "1" : {
            "sign" : -1263012038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6353340,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -654825321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1698324397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6353340,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -2080164983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6353340,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- LogicalQueryStage Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5929784,
        "inputRowCount" : 30583
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226676205,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1619,
        "IOBytes" : {
          "Total" : 10808456,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7239957,
            "SW" : 3568499
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1150822209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 7056512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "5" : {
            "sign" : -490139018,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6174448,
            "rowCount" : 30583,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : 636446448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6615480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 638467955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 303829661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6615480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1192524479,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6615480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- LogicalQueryStage Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6174448,
        "inputRowCount" : 30583
      },
      "PD" : {
        "3" : [ 164239, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69653, 84280, 0, 0, 69653, 0, 0, 76619, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 84280, 0, 0, 0, 0, 3298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 84280, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 76619, 0, 0, 76619, 0, 0, 0, 0, 0, 84280, 0, 0, 0, 84280, 0, 0, 0, 164239, 76619, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 69653, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 76619, 76619, 76619, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 76619, 0, 76619, 164239, 0, 76619, 0, 0, 0, 0, 76619, 164239, 0, 0, 0, 76619, 0, 84280, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226676903,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 921,
        "IOBytes" : {
          "Total" : 3568499,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3568499,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 2095826495,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 88829270540,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24] "
          },
          "4" : {
            "sign" : -40963851,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 34694296666,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "15" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1326604191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35]) "
          },
          "9" : {
            "sign" : -2055479429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 124360978756,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#35 = d_date_sk#58) "
          },
          "13" : {
            "sign" : 1797729055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "16" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : 494864500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 30357509583,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109] "
          },
          "10" : {
            "sign" : -1776334953,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35] "
          },
          "6" : {
            "sign" : 1171379514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 29206513959,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "1" : {
            "sign" : 550291566,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 32525903124,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1596239675,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12178800,
            "rowCount" : 61200,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1 "
          },
          "14" : {
            "sign" : -828403114,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58)) "
          },
          "0" : {
            "sign" : 536966825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 476591443,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 32525903124,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -934721708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 30357509583,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#16 = i_item_sk#36) "
          },
          "3" : {
            "sign" : -1463054209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 32525903124,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109]\n               +- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                  +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n                     :- Project [cs_item_sk#16, cs_ext_sales_price#24]\n                     :  +- Join Inner, (cs_sold_date_sk#35 = d_date_sk#58)\n                     :     :- Project [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35]\n                     :     :  +- Filter ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35])\n                     :     :     :  +- Project [d_date_sk#58]\n                     :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n                     :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n                     +- LogicalQueryStage Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29814015160,
        "inputRowCount" : 143334248
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4369.0,
        "FinishedTasksDistributionInMs" : [ 1031.0, 1064.0, 1119.0, 1155.0, 1155.0 ]
      },
      "StartTimeInMs" : 1702226669516,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8308,
        "IOBytes" : {
          "Total" : 85882205,
          "Details" : {
            "IR" : 24769823,
            "IW" : 0,
            "SR" : 30556191,
            "SW" : 30556191
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1065617006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#16, cs_ext_sales_price#24], ShuffleQueryStage 2 "
          },
          "4" : {
            "sign" : 213361396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1081907305408256,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "9" : {
            "sign" : 1596239675,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11841648,
            "rowCount" : 61021,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : 1616031135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 946668892232224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109] "
          },
          "6" : {
            "sign" : 364145231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 879049685644208,
            "rowCount" : 8452400823502,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "1" : {
            "sign" : 1391700197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1014288098820240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 626479424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1928529430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1014288098820240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -422262017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 946668892232224,
            "rowCount" : 8452400823502,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#16 = i_item_sk#36) "
          },
          "3" : {
            "sign" : -217121676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1014288098820240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109]\n               +- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                  +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n                     :- LogicalQueryStage Project [cs_item_sk#16, cs_ext_sales_price#24], ShuffleQueryStage 2\n                     +- LogicalQueryStage Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2782166888,
        "inputRowCount" : 138577283
      },
      "PD" : {
        "0" : [ 35743, 35743, 39317, 35743, 39317, 32493, 39317, 35743, 35743, 35743, 43249, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 43249, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 43249, 35743, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 43249, 43249, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 32493, 39317, 39317, 35743, 32493, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 43249, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 43249, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 32493, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226669866,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7958,
        "IOBytes" : {
          "Total" : 65721691,
          "Details" : {
            "IR" : 11739544,
            "IW" : 0,
            "SR" : 30556191,
            "SW" : 23425956
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1065617006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33819360,
            "rowCount" : 1409140,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#16, cs_ext_sales_price#24], ShuffleQueryStage 2 "
          },
          "4" : {
            "sign" : 213361396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 11006352888320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "9" : {
            "sign" : 1596239675,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11841648,
            "rowCount" : 61021,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : 1616031135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9630558777280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109] "
          },
          "6" : {
            "sign" : 364145231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8942661721760,
            "rowCount" : 85987131940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "1" : {
            "sign" : 1391700197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 10318455832800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 626479424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1928529430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10318455832800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -422262017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9630558777280,
            "rowCount" : 85987131940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#16 = i_item_sk#36) "
          },
          "3" : {
            "sign" : -217121676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10318455832800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109]\n               +- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                  +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n                     :- LogicalQueryStage Project [cs_item_sk#16, cs_ext_sales_price#24], ShuffleQueryStage 2\n                     +- LogicalQueryStage Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48], ShuffleQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 45661008,
        "inputRowCount" : 1470161
      },
      "PD" : {
        "1" : [ 84345, 82469, 81503, 84545, 83572, 78395, 89896, 79040, 77826, 89119, 84014, 80489, 88004, 80006, 84593, 86411, 85607, 86942, 91933, 91076, 85076, 90234, 86411, 81986, 86710, 84866, 84014, 84818, 85076, 81551, 92126, 85607, 85880, 82077, 86411, 86722, 79366, 77591, 79571, 89418, 83225, 83579, 81915, 85397, 85607, 84335, 88887, 83572, 80772, 87825, 88004, 89377, 82790, 89908, 81986, 87248, 89418, 87731, 81834, 86763, 82517, 82211, 84586, 92763, 88004, 83273, 89896, 85349, 84818, 85880, 88588, 83321, 88004, 86717, 83048, 83000, 80810, 85397, 85349, 80532, 83000, 78390, 89597, 84103, 87483, 83905, 83096, 89597, 89949, 83572, 87473, 80327, 84110, 79758, 85165, 84431, 84062, 84914, 88535, 84110, 85349, 84545, 85349, 91064, 83000, 86411, 85880, 88588, 81303, 83273, 84593, 86942, 80279, 90234, 77108, 84866, 85076, 81245, 79040, 83369, 86179, 83483, 93347, 85655, 83804, 87473, 85349, 74622, 85607, 81503, 85880, 82517, 85928, 82269, 86459, 85928, 83804, 86411, 86191, 81068, 83852, 84545, 88588, 85696, 84866, 85349, 81776, 84641, 89597, 88052, 84593, 79523, 86942, 83483, 88588, 94462, 84287, 89418, 81728, 84545, 79523, 87473, 81389, 86811, 88004, 85124, 85076, 78830, 86942, 83531, 80279, 87473, 86138, 84287, 87473, 79040, 75578, 79796, 84014, 83531, 83579, 86411, 82565, 85124, 92816, 92710, 82259, 88004, 82259, 83668, 83531, 86669, 87779, 82082, 83852, 83531, 84818, 85397, 88535, 85397 ],
        "0" : [ 35743, 35743, 39317, 35743, 39317, 32493, 39317, 35743, 35743, 35743, 43249, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 43249, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 43249, 35743, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 43249, 43249, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 32493, 39317, 39317, 35743, 32493, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 43249, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 43249, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 32493, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226673911,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3913,
        "IOBytes" : {
          "Total" : 37796148,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 30556191,
            "SW" : 7239957
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1600327820,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5929784,
                "rowCount" : 30583
              },
              "compileTime" : {
                "sizeInBytes" : 30357509583,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109], HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 542495950,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 5929784,
            "rowCount" : 30583,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L] Keys [5]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41] Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#24))] Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#24))#105L] Results [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24))#105L,17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24))#105L,17,2) AS _w0#109] "
          },
          "1" : {
            "sign" : 149174131,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 30357509583,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))], output=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109])\n+- ShuffleQueryStage 3\n   +- Exchange hashpartitioning(i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, 200), ENSURE_REQUIREMENTS, [plan_id=476]\n      +- *(6) HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#24))], output=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L])\n         +- *(6) Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n            +- *(6) SortMergeJoin [cs_item_sk#16], [i_item_sk#36], Inner\n               :- *(4) Sort [cs_item_sk#16 ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 2\n               :        +- Exchange hashpartitioning(cs_item_sk#16, 200), ENSURE_REQUIREMENTS, [plan_id=322]\n               :           +- *(3) Project [cs_item_sk#16, cs_ext_sales_price#24]\n               :              +- *(3) BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n               :                 :- *(3) Filter isnotnull(cs_item_sk#16)\n               :                 :  +- *(3) ColumnarToRow\n               :                 :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_sales_price#24,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#118)], PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n               :                 :           +- SubqueryBroadcast dynamicpruning#118, 0, [d_date_sk#58], [id=#296]\n               :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#58], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=293]\n                                                      +- Project [d_date_sk#58]\n                                                         +- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n               :                 +- BroadcastQueryStage 0\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n               :                       +- *(1) Project [d_date_sk#58]\n               :                          +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n               :                             +- *(1) ColumnarToRow\n               :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n               +- *(5) Sort [i_item_sk#36 ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 1\n                        +- Exchange hashpartitioning(i_item_sk#36, 200), ENSURE_REQUIREMENTS, [plan_id=181]\n                           +- *(2) Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n                              +- *(2) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_item_desc#40,i_current_price#41,i_class#46,i_category#48] Batched: true, DataFilters: [i_category#48 IN (Jewelry,Sports,Books), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books,Jewelry,Sports]), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5929784,
        "inputRowCount" : 30583
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 22193, 18341, 18341, 18341, 16674, 20176, 16674, 18341, 18341, 20176, 16674, 18341, 16674, 22193, 22193, 20176, 22193, 18341, 20176, 18341, 16674, 16674, 20176, 18341, 18341, 18341, 18341, 20176, 18341, 18341, 16674, 20176, 18341, 20176, 20176, 20176, 18341, 16674, 18341, 18341, 22193, 24413, 22193, 22193, 20176, 20176, 18341, 24413, 20176, 16674, 20176, 20176, 18341, 18341, 18341, 22193, 15158, 18341, 20176, 20176, 16674, 20176, 18341, 18341, 18341, 18341, 20176, 20176, 18341, 18341, 24413, 20176, 18341, 18341, 18341, 18341, 16674, 20176, 18341, 16674, 16674, 18341, 20176, 20176, 18341, 20176, 16674, 18341, 22193, 20176, 18341, 20176, 20176, 20176, 20176, 20176, 20176, 18341, 20176, 18341, 20176, 18341, 18341, 20176, 18341, 16674, 20176, 16674, 18341, 20176, 20176, 18341, 18341, 20176, 18341, 20176, 16674, 18341, 16674, 18341, 16674, 20176, 22193, 18341, 20176, 20176, 18341, 22193, 20176, 18341, 16674, 15158, 16674, 18341, 18341, 16674, 20176, 16674, 22193, 20176, 16674, 22193, 16674, 20176, 18341, 18341, 20176, 22193, 16674, 16674, 24413, 18341, 20176, 18341, 20176, 20176, 20176, 20176, 18341, 18341, 18341, 22193, 22193, 22193, 20176, 20176, 20176, 20176, 18341, 20176, 18341, 20176, 20176, 22193, 18341, 18341, 20176, 16674, 18341, 20176, 18341, 22193, 22193, 20176, 16674, 18341, 22193, 22193, 22193, 18341, 18341, 22193, 15158, 20176, 18341, 18341, 18341, 22193, 20176, 18341 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 627,
        "TotalTasksDurationInMs" : 619,
        "IOBytes" : {
          "Total" : 7239957,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3671458,
            "SW" : 3568499
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 128055720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34694296666,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 34694296666,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "1" : {
            "sign" : 1172784647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -586502692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1641596230,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -554307752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 32525903124,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], true\n      +- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n         +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n            +- Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109]\n               +- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                  +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n                     :- Project [cs_item_sk#16, cs_ext_sales_price#24]\n                     :  +- Join Inner, (cs_sold_date_sk#35 = d_date_sk#58)\n                     :     :- Project [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35]\n                     :     :  +- Filter ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35])\n                     :     :     :  +- Project [d_date_sk#58]\n                     :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#58]\n                     :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n                     +- Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                        +- Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n                           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1674350874,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 6174448,
            "rowCount" : 30583,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109] Arguments: 4 "
          },
          "1" : {
            "sign" : -1229351584,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 32525903124,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104] Input [8]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109, _we0#110] "
          },
          "0" : {
            "sign" : -1405492368,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, revenueratio#104] Arguments: 100, [i_category#48 ASC NULLS FIRST, i_class#46 ASC NULLS FIRST, i_item_id#37 ASC NULLS FIRST, i_item_desc#40 ASC NULLS FIRST, revenueratio#104 ASC NULLS FIRST], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, revenueratio#104] "
          },
          "2" : {
            "sign" : 667329814,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 34694296666,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109] Arguments: [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46] "
          },
          "3" : {
            "sign" : 401630933,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109] Arguments: [i_class#46 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[i_category#48 ASC NULLS FIRST,i_class#46 ASC NULLS FIRST,i_item_id#37 ASC NULLS FIRST,i_item_desc#40 ASC NULLS FIRST,revenueratio#104 ASC NULLS FIRST], output=[i_item_id#37,i_item_desc#40,i_category#48,i_class#46,i_current_price#41,itemrevenue#103,revenueratio#104])\n+- Project [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, ((_w0#109 * 100) / _we0#110) AS revenueratio#104]\n   +- Window [sum(_w0#109) windowspecdefinition(i_class#46, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#110], [i_class#46]\n      +- Sort [i_class#46 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(i_class#46, 200), ENSURE_REQUIREMENTS, [plan_id=529]\n               +- *(7) HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[sum(UnscaledValue(cs_ext_sales_price#24))], output=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, itemrevenue#103, _w0#109])\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 3\n                        +- Exchange hashpartitioning(i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, 200), ENSURE_REQUIREMENTS, [plan_id=476]\n                           +- *(6) HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#24))], output=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L])\n                              +- *(6) Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n                                 +- *(6) SortMergeJoin [cs_item_sk#16], [i_item_sk#36], Inner\n                                    :- *(4) Sort [cs_item_sk#16 ASC NULLS FIRST], false, 0\n                                    :  +- AQEShuffleRead coalesced\n                                    :     +- ShuffleQueryStage 2\n                                    :        +- Exchange hashpartitioning(cs_item_sk#16, 200), ENSURE_REQUIREMENTS, [plan_id=322]\n                                    :           +- *(3) Project [cs_item_sk#16, cs_ext_sales_price#24]\n                                    :              +- *(3) BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n                                    :                 :- *(3) Filter isnotnull(cs_item_sk#16)\n                                    :                 :  +- *(3) ColumnarToRow\n                                    :                 :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_sales_price#24,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#118)], PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n                                    :                 :           +- SubqueryBroadcast dynamicpruning#118, 0, [d_date_sk#58], [id=#296]\n                                    :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#58], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=293]\n                                                                           +- Project [d_date_sk#58]\n                                                                              +- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                    :                 +- BroadcastQueryStage 0\n                                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n                                    :                       +- *(1) Project [d_date_sk#58]\n                                    :                          +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n                                    :                             +- *(1) ColumnarToRow\n                                    :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                    +- *(5) Sort [i_item_sk#36 ASC NULLS FIRST], false, 0\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 1\n                                             +- Exchange hashpartitioning(i_item_sk#36, 200), ENSURE_REQUIREMENTS, [plan_id=181]\n                                                +- *(2) Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n                                                   +- *(2) ColumnarToRow\n                                                      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_item_desc#40,i_current_price#41,i_class#46,i_category#48] Batched: true, DataFilters: [i_category#48 IN (Jewelry,Sports,Books), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books,Jewelry,Sports]), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6174448,
        "inputRowCount" : 30583
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "3" : [ 164239, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69653, 84280, 0, 0, 69653, 0, 0, 76619, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 84280, 0, 0, 0, 0, 3298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 84280, 0, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 76619, 0, 0, 76619, 0, 0, 0, 0, 0, 84280, 0, 0, 0, 84280, 0, 0, 0, 164239, 76619, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 69653, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 0, 0, 76619, 76619, 0, 0, 0, 76619, 76619, 76619, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 76619, 0, 76619, 164239, 0, 76619, 0, 0, 0, 0, 76619, 164239, 0, 0, 0, 76619, 0, 84280, 76619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76619, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 768,
        "TotalTasksDurationInMs" : 758,
        "IOBytes" : {
          "Total" : 3568499,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3568499,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -553768668,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12178800,
                "rowCount" : 61200
              },
              "compileTime" : {
                "sizeInBytes" : 12178800,
                "rowCount" : 61200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "1" : {
            "sign" : 800946388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26071200,
                "rowCount" : 61200
              },
              "compileTime" : {
                "sizeInBytes" : 26071200,
                "rowCount" : 61200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n+- Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -818879960,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12178800,
            "rowCount" : 61200,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Condition : (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36)) "
          },
          "1" : {
            "sign" : -74254741,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12178800,
            "rowCount" : 61200,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [In(i_category, [Books,Jewelry,Sports]), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_item_desc#40,i_current_price#41,i_class#46,i_category#48] Batched: true, DataFilters: [i_category#48 IN (Jewelry,Sports,Books), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books,Jewelry,Sports]), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12178800,
        "inputRowCount" : 61200
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1866,
        "TotalTasksDurationInMs" : 6197,
        "IOBytes" : {
          "Total" : 20160514,
          "Details" : {
            "IR" : 13030279,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7130235
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1797729055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "1" : {
            "sign" : -828403114,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1329338757,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#58] Input [2]: [d_date_sk#58, d_date#60] "
          },
          "1" : {
            "sign" : -1780765762,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#58, d_date#60] Condition : (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : 1041454914,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#58, d_date#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 360,
        "inputRowCount" : 30
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1433,
        "TotalTasksDurationInMs" : 1427,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 119021198,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#2, cs_ship_date_sk#3, cs_bill_customer_sk#4, cs_bill_cdemo_sk#5, cs_bill_hdemo_sk#6, cs_bill_addr_sk#7, cs_ship_customer_sk#8, cs_ship_cdemo_sk#9, cs_ship_hdemo_sk#10, cs_ship_addr_sk#11, cs_call_center_sk#12, cs_catalog_page_sk#13, cs_ship_mode_sk#14, cs_warehouse_sk#15, cs_item_sk#16, cs_promo_sk#17, cs_order_number#18L, cs_quantity#19, cs_wholesale_cost#20, cs_list_price#21, cs_sales_price#22, cs_ext_discount_amt#23, cs_ext_sales_price#24, cs_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 421801681,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#35 = d_date_sk#58) "
          },
          "0" : {
            "sign" : -1070981323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24] "
          },
          "2" : {
            "sign" : -1776334953,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3438552408,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 3438552408,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35] "
          },
          "3" : {
            "sign" : -1326604191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#16, cs_ext_sales_price#24]\n+- Join Inner, (cs_sold_date_sk#35 = d_date_sk#58)\n   :- Project [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35]\n   :  +- Filter ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35])\n   :     :  +- Project [d_date_sk#58]\n   :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n   +- Project [d_date_sk#58]\n      +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 635115857,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#58] Arguments: 0 "
          },
          "1" : {
            "sign" : -759326752,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#35] Right keys [1]: [d_date_sk#58] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -280322166,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cs_item_sk#16, cs_ext_sales_price#24] Input [4]: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35, d_date_sk#58] "
          },
          "2" : {
            "sign" : -1302965770,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35] Condition : isnotnull(cs_item_sk#16) "
          },
          "3" : {
            "sign" : 815555208,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3438552408,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [3]: [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#118)] PushedFilters: [IsNotNull(cs_item_sk)] ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#16, cs_ext_sales_price#24]\n+- BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n   :- Filter isnotnull(cs_item_sk#16)\n   :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_sales_price#24,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#118)], PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#118, 0, [d_date_sk#58], [id=#296]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=293]\n   :                 +- Project [d_date_sk#58]\n   :                    +- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n         +- *(1) Project [d_date_sk#58]\n            +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3439601232,
        "inputRowCount" : 143273048
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4369.0,
        "FinishedTasksDistributionInMs" : [ 1031.0, 1064.0, 1119.0, 1155.0, 1155.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4244,
        "TotalTasksDurationInMs" : 32058,
        "IOBytes" : {
          "Total" : 27925543,
          "Details" : {
            "IR" : 11739544,
            "IW" : 0,
            "SR" : 0,
            "SW" : 16185999
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1269941619,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30357509583,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 30357509583,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109] "
          },
          "1" : {
            "sign" : -1412656083,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29206513959,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 29206513959,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "2" : {
            "sign" : -1405638483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30357509583,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 30357509583,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_item_sk#16 = i_item_sk#36) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS itemrevenue#103, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24)),17,2) AS _w0#109]\n+- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n   +- Join Inner, (cs_item_sk#16 = i_item_sk#36)\n      :- Project [cs_item_sk#16, cs_ext_sales_price#24]\n      :  +- Join Inner, (cs_sold_date_sk#35 = d_date_sk#58)\n      :     :- Project [cs_item_sk#16, cs_ext_sales_price#24, cs_sold_date_sk#35]\n      :     :  +- Filter ((isnotnull(cs_item_sk#16) AND isnotnull(cs_sold_date_sk#35)) AND dynamicpruning#118 [cs_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#2,cs_ship_date_sk#3,cs_bill_customer_sk#4,cs_bill_cdemo_sk#5,cs_bill_hdemo_sk#6,cs_bill_addr_sk#7,cs_ship_customer_sk#8,cs_ship_cdemo_sk#9,cs_ship_hdemo_sk#10,cs_ship_addr_sk#11,cs_call_center_sk#12,cs_catalog_page_sk#13,cs_ship_mode_sk#14,cs_warehouse_sk#15,cs_item_sk#16,cs_promo_sk#17,cs_order_number#18L,cs_quantity#19,cs_wholesale_cost#20,cs_list_price#21,cs_sales_price#22,cs_ext_discount_amt#23,cs_ext_sales_price#24,cs_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- Project [d_date_sk#58]\n      :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 2001-01-12) AND (d_date#60 <= 2001-02-11))) AND isnotnull(d_date_sk#58))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      +- Project [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n         +- Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n            +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -487339379,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 33819360,
            "rowCount" : 1409140,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [cs_item_sk#16, cs_ext_sales_price#24] Arguments: 2 "
          },
          "5" : {
            "sign" : 1310359021,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Arguments: [i_item_sk#36 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -366639647,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 11841648,
            "rowCount" : 61021,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Arguments: 1 "
          },
          "1" : {
            "sign" : 1548754323,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 29206513959,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Input [8]: [cs_item_sk#16, cs_ext_sales_price#24, i_item_sk#36, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] "
          },
          "0" : {
            "sign" : -108062038,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 30357509583,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48] Keys [5]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41] Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#24))] Aggregate Attributes [1]: [sum#119L] Results [6]: [i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L] "
          },
          "2" : {
            "sign" : 1379781997,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 30357509583,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [cs_item_sk#16] Right keys [1]: [i_item_sk#36] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1010341424,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [cs_item_sk#16, cs_ext_sales_price#24] Arguments: [cs_item_sk#16 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#24))], output=[i_item_id#37, i_item_desc#40, i_category#48, i_class#46, i_current_price#41, sum#120L])\n+- Project [cs_ext_sales_price#24, i_item_id#37, i_item_desc#40, i_current_price#41, i_class#46, i_category#48]\n   +- SortMergeJoin [cs_item_sk#16], [i_item_sk#36], Inner\n      :- Sort [cs_item_sk#16 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 2\n      :     +- Exchange hashpartitioning(cs_item_sk#16, 200), ENSURE_REQUIREMENTS, [plan_id=322]\n      :        +- *(3) Project [cs_item_sk#16, cs_ext_sales_price#24]\n      :           +- *(3) BroadcastHashJoin [cs_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n      :              :- *(3) Filter isnotnull(cs_item_sk#16)\n      :              :  +- *(3) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_item_sk#16,cs_ext_sales_price#24,cs_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(cs_item_sk#16)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#118)], PushedFilters: [IsNotNull(cs_item_sk)], ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n      :              :           +- SubqueryBroadcast dynamicpruning#118, 0, [d_date_sk#58], [id=#296]\n      :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#58], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=293]\n                                          +- Project [d_date_sk#58]\n                                             +- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :              +- BroadcastQueryStage 0\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=160]\n      :                    +- *(1) Project [d_date_sk#58]\n      :                       +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 2001-01-12)) AND (d_date#60 <= 2001-02-11)) AND isnotnull(d_date_sk#58))\n      :                          +- *(1) ColumnarToRow\n      :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 2001-01-12), (d_date#60 <= 2001-02-11), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-12), LessThanOrEqual(d_date,2001-02-11), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- Sort [i_item_sk#36 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 1\n            +- Exchange hashpartitioning(i_item_sk#36, 200), ENSURE_REQUIREMENTS, [plan_id=181]\n               +- *(2) Filter (i_category#48 IN (Jewelry,Sports,Books) AND isnotnull(i_item_sk#36))\n                  +- *(2) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_item_desc#40,i_current_price#41,i_class#46,i_category#48] Batched: true, DataFilters: [i_category#48 IN (Jewelry,Sports,Books), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [In(i_category, [Books,Jewelry,Sports]), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:str...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 45661008,
        "inputRowCount" : 1470161
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 84345, 82469, 81503, 84545, 83572, 78395, 89896, 79040, 77826, 89119, 84014, 80489, 88004, 80006, 84593, 86411, 85607, 86942, 91933, 91076, 85076, 90234, 86411, 81986, 86710, 84866, 84014, 84818, 85076, 81551, 92126, 85607, 85880, 82077, 86411, 86722, 79366, 77591, 79571, 89418, 83225, 83579, 81915, 85397, 85607, 84335, 88887, 83572, 80772, 87825, 88004, 89377, 82790, 89908, 81986, 87248, 89418, 87731, 81834, 86763, 82517, 82211, 84586, 92763, 88004, 83273, 89896, 85349, 84818, 85880, 88588, 83321, 88004, 86717, 83048, 83000, 80810, 85397, 85349, 80532, 83000, 78390, 89597, 84103, 87483, 83905, 83096, 89597, 89949, 83572, 87473, 80327, 84110, 79758, 85165, 84431, 84062, 84914, 88535, 84110, 85349, 84545, 85349, 91064, 83000, 86411, 85880, 88588, 81303, 83273, 84593, 86942, 80279, 90234, 77108, 84866, 85076, 81245, 79040, 83369, 86179, 83483, 93347, 85655, 83804, 87473, 85349, 74622, 85607, 81503, 85880, 82517, 85928, 82269, 86459, 85928, 83804, 86411, 86191, 81068, 83852, 84545, 88588, 85696, 84866, 85349, 81776, 84641, 89597, 88052, 84593, 79523, 86942, 83483, 88588, 94462, 84287, 89418, 81728, 84545, 79523, 87473, 81389, 86811, 88004, 85124, 85076, 78830, 86942, 83531, 80279, 87473, 86138, 84287, 87473, 79040, 75578, 79796, 84014, 83531, 83579, 86411, 82565, 85124, 92816, 92710, 82259, 88004, 82259, 83668, 83531, 86669, 87779, 82082, 83852, 83531, 84818, 85397, 88535, 85397 ],
        "0" : [ 35743, 35743, 39317, 35743, 39317, 32493, 39317, 35743, 35743, 35743, 43249, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 43249, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 43249, 35743, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 43249, 43249, 39317, 35743, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 32493, 39317, 39317, 35743, 32493, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 43249, 35743, 35743, 35743, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 43249, 35743, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 32493, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 32493, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1972,
        "TotalTasksDurationInMs" : 1958,
        "IOBytes" : {
          "Total" : 26987692,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23316234,
            "SW" : 3671458
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226667456,
  "SQLEndTimeInMs" : 1702226677824,
  "Objectives" : {
    "DurationInMs" : 10368,
    "IOBytes" : {
      "Total" : 86053943,
      "Details" : {
        "IR" : 24941561,
        "IW" : 0,
        "SR" : 30556191,
        "SW" : 30556191
      }
    }
  }
}
