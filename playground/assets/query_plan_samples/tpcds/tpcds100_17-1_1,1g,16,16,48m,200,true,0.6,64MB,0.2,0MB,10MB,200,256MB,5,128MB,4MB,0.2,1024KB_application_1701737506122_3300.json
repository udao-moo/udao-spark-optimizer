{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -2097243814,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
        },
        "12" : {
          "sign" : -1189440504,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] "
        },
        "8" : {
          "sign" : 892101366,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 105747106137,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
        },
        "19" : {
          "sign" : 1833733500,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#89, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : -898837227,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10452,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#117, s_state#141] "
        },
        "4" : {
          "sign" : 462062660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 348028682050,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
        },
        "40" : {
          "sign" : 144800440,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 69864,
          "rowCount" : 284,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (d_quarter_name#211 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#196)) "
        },
        "15" : {
          "sign" : -1065584475,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 38129799488,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#455 [ss_sold_date_sk#34]) "
        },
        "11" : {
          "sign" : 144491492,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 50844652017,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
        },
        "9" : {
          "sign" : -147836061,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 110369930449,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
        },
        "33" : {
          "sign" : 1992934830,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#168, d_date_id#169, d_date#170, d_month_seq#171, d_week_seq#172, d_quarter_seq#173, d_year#174, d_dow#175, d_moy#176, d_dom#177, d_qoy#178, d_fy_year#179, d_fy_quarter_seq#180, d_fy_week_seq#181, d_day_name#182, d_quarter_name#183, d_holiday#184, d_weekend#185, d_following_holiday#186, d_first_dom#187, d_last_dom#188, d_same_day_ly#189, d_same_day_lq#190, d_current_day#191, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 1528163749,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#146, i_item_id#147, i_rec_start_date#148, i_rec_end_date#149, i_item_desc#150, i_current_price#151, i_wholesale_cost#152, i_brand_id#153, i_brand#154, i_class_id#155, i_class#156, i_category_id#157, i_category#158, i_manufact_id#159, i_manufact#160, i_size#161, i_formulation#162, i_color#163, i_units#164, i_container#165, i_manager_id#166, i_product_name#167], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -1237341048,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 754762260,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
        },
        "37" : {
          "sign" : -558711512,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651732864,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#457 [cs_sold_date_sk#88]) "
        },
        "13" : {
          "sign" : -1165697132,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#89 = ss_sold_date_sk#34) "
        },
        "24" : {
          "sign" : 633032996,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#117) "
        },
        "35" : {
          "sign" : -81139831,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#88 = d_date_sk#196) "
        },
        "16" : {
          "sign" : -1580388450,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#12, ss_item_sk#13, ss_customer_sk#14, ss_cdemo_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_promo_sk#19, ss_ticket_number#20L, ss_quantity#21, ss_wholesale_cost#22, ss_list_price#23, ss_sales_price#24, ss_ext_discount_amt#25, ss_ext_sales_price#26, ss_ext_wholesale_cost#27, ss_ext_list_price#28, ss_ext_tax#29, ss_coupon_amt#30, ss_net_paid#31, ss_net_paid_inc_tax#32, ss_net_profit#33, ss_sold_date_sk#34], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -1629737462,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 379848447266,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
        },
        "10" : {
          "sign" : 452489338,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 49695620333,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
        },
        "21" : {
          "sign" : -1502856378,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#146) "
        },
        "32" : {
          "sign" : -1379438187,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 69864,
          "rowCount" : 284,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (d_quarter_name#183 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#168)) "
        },
        "6" : {
          "sign" : 1630542933,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 62198759795,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
        },
        "36" : {
          "sign" : 1811982849,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3421353792,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] "
        },
        "1" : {
          "sign" : 1250252539,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 515082449434,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 2029490840,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3408,
          "rowCount" : 284,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#196] "
        },
        "17" : {
          "sign" : 270499216,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1140,
          "rowCount" : 95,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#89] "
        },
        "25" : {
          "sign" : 36810635,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#117, s_store_id#118, s_rec_start_date#119, s_rec_end_date#120, s_closed_date_sk#121, s_store_name#122, s_number_employees#123, s_floor_space#124, s_hours#125, s_manager#126, s_market_id#127, s_geography_class#128, s_market_desc#129, s_market_manager#130, s_division_id#131, s_division_name#132, s_company_id#133, s_company_name#134, s_street_number#135, s_street_name#136, s_street_type#137, s_suite_number#138, s_city#139, s_county#140, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -307119486,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9030741984,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] "
        },
        "31" : {
          "sign" : 1780510716,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3408,
          "rowCount" : 284,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#168] "
        },
        "0" : {
          "sign" : 1512917582,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 16400,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1307397105,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31212000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#146, i_item_id#147, i_item_desc#150] "
        },
        "27" : {
          "sign" : -417055486,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 970408620,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#54 = d_date_sk#168) "
        },
        "2" : {
          "sign" : 1920523448,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 515082449434,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -1677773466,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#55, cs_ship_date_sk#56, cs_bill_customer_sk#57, cs_bill_cdemo_sk#58, cs_bill_hdemo_sk#59, cs_bill_addr_sk#60, cs_ship_customer_sk#61, cs_ship_cdemo_sk#62, cs_ship_hdemo_sk#63, cs_ship_addr_sk#64, cs_call_center_sk#65, cs_catalog_page_sk#66, cs_ship_mode_sk#67, cs_warehouse_sk#68, cs_item_sk#69, cs_promo_sk#70, cs_order_number#71L, cs_quantity#72, cs_wholesale_cost#73, cs_list_price#74, cs_sales_price#75, cs_ext_discount_amt#76, cs_ext_sales_price#77, cs_ext_wholesale_cost#78, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : -431383277,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 23370,
          "rowCount" : 95,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89)) "
        },
        "30" : {
          "sign" : 623626769,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#35, sr_item_sk#36, sr_customer_sk#37, sr_cdemo_sk#38, sr_hdemo_sk#39, sr_addr_sk#40, sr_store_sk#41, sr_reason_sk#42, sr_ticket_number#43L, sr_return_quantity#44, sr_return_amt#45, sr_return_tax#46, sr_return_amt_inc_tax#47, sr_fee#48, sr_return_ship_cost#49, sr_refunded_cash#50, sr_reversed_charge#51, sr_store_credit#52, sr_net_loss#53, sr_returned_date_sk#54], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 598687973,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 70538258315,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
        },
        "29" : {
          "sign" : 1006448013,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433101696,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#456 [sr_returned_date_sk#54]) "
        },
        "41" : {
          "sign" : -1560600880,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#196, d_date_id#197, d_date#198, d_month_seq#199, d_week_seq#200, d_quarter_seq#201, d_year#202, d_dow#203, d_moy#204, d_dom#205, d_qoy#206, d_fy_year#207, d_fy_quarter_seq#208, d_fy_week_seq#209, d_day_name#210, d_quarter_name#211, d_holiday#212, d_weekend#213, d_following_holiday#214, d_first_dom#215, d_last_dom#216, d_same_day_ly#217, d_same_day_lq#218, d_current_day#219, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 1974714577,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 515082449434,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#0L, avg(ss_quantity#21) AS store_sales_quantityave#1, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#2, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#3, count(sr_return_quantity#44) AS as_store_returns_quantitycount#4L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#5, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#6, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#7, count(cs_quantity#72) AS catalog_sales_quantitycount#8L, avg(cs_quantity#72) AS catalog_sales_quantityave#9, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#10, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#11] "
        },
        "28" : {
          "sign" : -557726580,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 858275424,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Join",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#0L, avg(ss_quantity#21) AS store_sales_quantityave#1, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#2, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#3, count(sr_return_quantity#44) AS as_store_returns_quantitycount#4L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#5, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#6, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#7, count(cs_quantity#72) AS catalog_sales_quantitycount#8L, avg(cs_quantity#72) AS catalog_sales_quantityave#9, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#10, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#11]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n               :     :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n               :     :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#455 [ss_sold_date_sk#34])\n               :     :     :     :     :     :  +- Project [d_date_sk#89]\n               :     :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n               :     :     :     :     +- Project [d_date_sk#89]\n               :     :     :     :        +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n               :     :     :        +- Filter isnotnull(i_item_sk#146)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n               :     :     +- Project [s_store_sk#117, s_state#141]\n               :     :        +- Filter isnotnull(s_store_sk#117)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#168)\n               :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#456 [sr_returned_date_sk#54])\n               :           :     :  +- Project [d_date_sk#168]\n               :           :     :     +- Filter (d_quarter_name#183 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#168))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#168,d_date_id#169,d_date#170,d_month_seq#171,d_week_seq#172,d_quarter_seq#173,d_year#174,d_dow#175,d_moy#176,d_dom#177,d_qoy#178,d_fy_year#179,d_fy_quarter_seq#180,d_fy_week_seq#181,d_day_name#182,d_quarter_name#183,d_holiday#184,d_weekend#185,d_following_holiday#186,d_first_dom#187,d_last_dom#188,d_same_day_ly#189,d_same_day_lq#190,d_current_day#191,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n               :           +- Project [d_date_sk#168]\n               :              +- Filter (d_quarter_name#183 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#168))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#168,d_date_id#169,d_date#170,d_month_seq#171,d_week_seq#172,d_quarter_seq#173,d_year#174,d_dow#175,d_moy#176,d_dom#177,d_qoy#178,d_fy_year#179,d_fy_quarter_seq#180,d_fy_week_seq#181,d_day_name#182,d_quarter_name#183,d_holiday#184,d_weekend#185,d_following_holiday#186,d_first_dom#187,d_last_dom#188,d_same_day_ly#189,d_same_day_lq#190,d_current_day#191,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#196)\n                     :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#457 [cs_sold_date_sk#88])\n                     :     :  +- Project [d_date_sk#196]\n                     :     :     +- Filter (d_quarter_name#211 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#196))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#196,d_date_id#197,d_date#198,d_month_seq#199,d_week_seq#200,d_quarter_seq#201,d_year#202,d_dow#203,d_moy#204,d_dom#205,d_qoy#206,d_fy_year#207,d_fy_quarter_seq#208,d_fy_week_seq#209,d_day_name#210,d_quarter_name#211,d_holiday#212,d_weekend#213,d_following_holiday#214,d_first_dom#215,d_last_dom#216,d_same_day_ly#217,d_same_day_lq#218,d_current_day#219,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n                     +- Project [d_date_sk#196]\n                        +- Filter (d_quarter_name#211 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#196))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#196,d_date_id#197,d_date#198,d_month_seq#199,d_week_seq#200,d_quarter_seq#201,d_year#202,d_dow#203,d_moy#204,d_dom#205,d_qoy#206,d_fy_year#207,d_fy_quarter_seq#208,d_fy_week_seq#209,d_day_name#210,d_quarter_name#211,d_holiday#212,d_weekend#213,d_following_holiday#214,d_first_dom#215,d_last_dom#216,d_same_day_ly#217,d_same_day_lq#218,d_current_day#219,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 75306294440,
      "inputRowCount" : 446535720
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1405236968,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1435575760,
            "rowCount" : 7485401,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141], ShuffleQueryStage 9 "
          },
          "4" : {
            "sign" : -1425582766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15750505532727925122240,
            "rowCount" : 196881319159099064028,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "9" : {
            "sign" : 1500471205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 66267360,
            "rowCount" : 1656684,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : 1766384504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18900606639273510146688,
            "rowCount" : 196881319159099064028,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : 1905940200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1041679301903856,
            "rowCount" : 12400944070284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : -1224129157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 32288536342092246500592,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 421396340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 2051374282,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 32288536342092246500592,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 166113940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1339301959590672,
            "rowCount" : 12400944070284,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : 1727338469,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32288536342092246500592,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141], ShuffleQueryStage 9\n               :     +- LogicalQueryStage Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2009885264,
        "inputRowCount" : 25018402
      },
      "PD" : {
        "2" : [ 194263, 201341, 199038, 196935, 199138, 197558, 193744, 196443, 196342, 196466, 194934, 198180, 197051, 194027, 198918, 199444, 199565, 201359, 197450, 200753, 193120, 196932, 195032, 200744, 197259, 201105, 197145, 193032, 195961, 198630, 192948, 198746, 199920, 197070, 195635, 200983, 198727, 194525, 197796, 201473, 192210, 198281, 199167, 195775, 196449, 194421, 194875, 198423, 198650, 200485, 202475, 198001, 196109, 194332, 197095, 195600, 200233, 196281, 197565, 194459, 194818, 198840, 198369, 196541, 200254, 200836, 199160, 198793, 196148, 193822, 196676, 196026, 202430, 197987, 196579, 199941, 195885, 193020, 194471, 193399, 203460, 196765, 197908, 192794, 200330, 202169, 198350, 193629, 201959, 194946, 200048, 190745, 201429, 197134, 197417, 197899, 194235, 193713, 198397, 193091, 197679, 192561, 198328, 200254, 198453, 197625, 196004, 200321, 199622, 201494, 200011, 194487, 200387, 190991, 197681, 194880, 197904, 197899, 195921, 199211, 199225, 198109, 196585, 203127, 203046, 196429, 200038, 199041, 194818, 193512, 199541, 199449, 199778, 197767, 194195, 203302, 200097, 191779, 198460, 197398, 191020, 197129, 199902, 196815, 200301, 197564, 194383, 196292, 197188, 200925, 194755, 193386, 199416, 202813, 200810, 198421, 196619, 195355, 201138, 198667, 198969, 190521, 201838, 197831, 201453, 199600, 196978, 195947, 196193, 200184, 192364, 197477, 192776, 199171, 197007, 200427, 195354, 195245, 195491, 205420, 196003, 197308, 197590, 202306, 194260, 200945, 196255, 198668, 200472, 193823, 194954, 194522, 200112, 196102, 194832, 196264, 201477, 194648, 202709, 197410 ],
        "4" : [ 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3937205, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3937205, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205 ],
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226658521,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7145,
        "IOBytes" : {
          "Total" : 1177130560,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1110899584,
            "SW" : 66230976
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2132596646,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 748304703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1916327801931840000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "4" : {
            "sign" : -1751326727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 159098826080,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "15" : {
            "sign" : 1500471205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -628717277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4116941229840000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -491863962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2090539420289280000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "13" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -384206007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 190918591296,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 1430825423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3900260112480000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "6" : {
            "sign" : -462925983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 29188244820,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : 665976780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 326152593464,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 991741979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1191024207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 326152593464,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1207938417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37527743340,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : -616650506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 326152593464,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12054436436,
        "inputRowCount" : 431217044
      },
      "PD" : {
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226643649,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22017,
        "IOBytes" : {
          "Total" : 2793595051,
          "Details" : {
            "IR" : 180310310,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 1297558425
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1491679357,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 711624791943680,
            "rowCount" : 8895309899296,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "5" : {
            "sign" : 2102330703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 853949750332416,
            "rowCount" : 8895309899296,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "6" : {
            "sign" : 896267247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 107494664,
            "rowCount" : 560288,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44], ShuffleQueryStage 10 "
          },
          "1" : {
            "sign" : 439166994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1458830823484544,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1921191969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1356420683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1458830823484544,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "3" : {
            "sign" : 715832188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1458830823484544,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- LogicalQueryStage Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44], ShuffleQueryStage 10\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 615536808,
        "inputRowCount" : 16436605
      },
      "PD" : {
        "5" : [ 339445, 338461, 334540, 340633, 347794, 338957, 345515, 359478, 353760, 345759, 347525, 339201, 347574, 344596, 351100, 347525, 341642, 343587, 362109, 358265, 341886, 344571, 352920, 357961, 349453, 340658, 355276, 342130, 330381, 346028, 342448, 348855, 346193, 358803, 325255, 341398, 357777, 347256, 351911, 354083, 351398, 357227, 339445, 350150, 343020, 337948, 348259, 341642, 351344, 348200, 345705, 358230, 355605, 347012, 363356, 341911, 354527, 358290, 345245, 336516, 354823, 349906, 339445, 336760, 341642, 340877, 348390, 356201, 338382, 360462, 345515, 342130, 336760, 347550, 355032, 356524, 355092, 353760, 355605, 353785, 350431, 343264, 349697, 340579, 340633, 344620, 341557, 342155, 345759, 363685, 356524, 348982, 354029, 347256, 357777, 340363, 353104, 343264, 354823, 351398, 351129, 359722, 344840, 342179, 336760, 338138, 344571, 362109, 331390, 348855, 352920, 344780, 349376, 346028, 344620, 352138, 356714, 348444, 340227, 338192, 339935, 337225, 348469, 354273, 349906, 353104, 343157, 354029, 354823, 347525, 346003, 334540, 345759, 333531, 348903, 335019, 341886, 355067, 356689, 343020, 344327, 346028, 345305, 348982, 343020, 355336, 352138, 345705, 339714, 355580, 342155, 345759, 349453, 359912, 353760, 337273, 356983, 348659, 338651, 344327, 344620, 350162, 347465, 345705, 343073, 349201, 351075, 349966, 339201, 338957, 349662, 350944, 345759, 344571, 352895, 356470, 337029, 333746, 346170, 340877, 338957, 339910, 339201, 367479, 339201, 345759, 347256, 356201, 347012, 352138, 341886, 347734, 339410, 349941, 346768, 352138, 343264, 344571, 353785, 355336 ],
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226660955,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4711,
        "IOBytes" : {
          "Total" : 315193218,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 315184053,
            "SW" : 9165
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2132596646,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 748304703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1916327801931840000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "4" : {
            "sign" : -1751326727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 441335073748502800,
            "rowCount" : 5516688421856285,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "15" : {
            "sign" : 1500471205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -628717277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4116941229840000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -491863962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2090539420289280000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "13" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -384206007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 529602088498203360,
            "rowCount" : 5516688421856285,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 1430825423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3900260112480000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "6" : {
            "sign" : -462925983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 29188244820,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : 665976780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 904736901184430740,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 991741979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1191024207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 904736901184430740,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1207938417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37527743340,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : -616650506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 904736901184430740,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9792153340,
        "inputRowCount" : 308577099
      },
      "PD" : {
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 28,
        "FinishedTasksTotalTimeInMs" : 59586.0,
        "FinishedTasksDistributionInMs" : [ 232.0, 394.0, 946.0, 3659.0, 6257.0 ]
      },
      "StartTimeInMs" : 1702226649778,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 15888,
        "IOBytes" : {
          "Total" : 2443085699,
          "Details" : {
            "IR" : 78754035,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 1048605348
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -412819150,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6068,
            "rowCount" : 37,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1167189967,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11264,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1298331100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11264,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 463981753,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11264,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565], HashAggregate(keys=[i_item_id#147, i_item_desc#150, s_state#141], functions=[count(ss_quantity#21), avg(ss_quantity#21), stddev_samp(cast(ss_quantity#21 as double)), count(sr_return_quantity#44), avg(sr_return_quantity#44), stddev_samp(cast(sr_return_quantity#44 as double)), count(cs_quantity#72), avg(cs_quantity#72), stddev_samp(cast(cs_quantity#72 as double))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565], HashAggregate(keys=[i_item_id#147, i_item_desc#150, s_state#141], functions=[count(ss_quantity#21), avg(ss_quantity#21), stddev_samp(cast(ss_quantity#21 as double)), count(sr_return_quantity#44), avg(sr_return_quantity#44), stddev_samp(cast(sr_return_quantity#44 as double)), count(cs_quantity#72), avg(cs_quantity#72), stddev_samp(cast(cs_quantity#72 as double))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11264,
        "inputRowCount" : 37
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226665169,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 497,
        "IOBytes" : {
          "Total" : 9165,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 9165,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2132596646,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 748304703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1916327801931840000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "4" : {
            "sign" : -1751326727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 45821210159688580594188403200000,
            "rowCount" : 572765126996107257427355040000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "15" : {
            "sign" : 1500471205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 66267360,
            "rowCount" : 1656684,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -628717277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4116941229840000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -491863962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2090539420289280000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "13" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -384206007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 54985452191626296713026083840000,
            "rowCount" : 572765126996107257427355040000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 1430825423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3900260112480000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "6" : {
            "sign" : -462925983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3030442807842209854080000,
            "rowCount" : 36076700093359641120000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : 665976780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 93933480827361590218086226560000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 991741979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1191024207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 93933480827361590218086226560000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1207938417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3896283610082841240960000,
            "rowCount" : 36076700093359641120000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : -616650506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 93933480827361590218086226560000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9103658440,
        "inputRowCount" : 283277988
      },
      "PD" : {
        "2" : [ 194263, 201341, 199038, 196935, 199138, 197558, 193744, 196443, 196342, 196466, 194934, 198180, 197051, 194027, 198918, 199444, 199565, 201359, 197450, 200753, 193120, 196932, 195032, 200744, 197259, 201105, 197145, 193032, 195961, 198630, 192948, 198746, 199920, 197070, 195635, 200983, 198727, 194525, 197796, 201473, 192210, 198281, 199167, 195775, 196449, 194421, 194875, 198423, 198650, 200485, 202475, 198001, 196109, 194332, 197095, 195600, 200233, 196281, 197565, 194459, 194818, 198840, 198369, 196541, 200254, 200836, 199160, 198793, 196148, 193822, 196676, 196026, 202430, 197987, 196579, 199941, 195885, 193020, 194471, 193399, 203460, 196765, 197908, 192794, 200330, 202169, 198350, 193629, 201959, 194946, 200048, 190745, 201429, 197134, 197417, 197899, 194235, 193713, 198397, 193091, 197679, 192561, 198328, 200254, 198453, 197625, 196004, 200321, 199622, 201494, 200011, 194487, 200387, 190991, 197681, 194880, 197904, 197899, 195921, 199211, 199225, 198109, 196585, 203127, 203046, 196429, 200038, 199041, 194818, 193512, 199541, 199449, 199778, 197767, 194195, 203302, 200097, 191779, 198460, 197398, 191020, 197129, 199902, 196815, 200301, 197564, 194383, 196292, 197188, 200925, 194755, 193386, 199416, 202813, 200810, 198421, 196619, 195355, 201138, 198667, 198969, 190521, 201838, 197831, 201453, 199600, 196978, 195947, 196193, 200184, 192364, 197477, 192776, 199171, 197007, 200427, 195354, 195245, 195491, 205420, 196003, 197308, 197590, 202306, 194260, 200945, 196255, 198668, 200472, 193823, 194954, 194522, 200112, 196102, 194832, 196264, 201477, 194648, 202709, 197410 ],
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226651779,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13887,
        "IOBytes" : {
          "Total" : 2139980547,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 824254231
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1276797059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] "
          },
          "12" : {
            "sign" : -1668352836,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] "
          },
          "8" : {
            "sign" : 1303323373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21825282321738,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "19" : {
            "sign" : 1833733500,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#89, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -277831213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
          },
          "4" : {
            "sign" : -1708852365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 359961094006,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "40" : {
            "sign" : 768672967,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#594], BroadcastQueryStage 5 "
          },
          "15" : {
            "sign" : -1569833122,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34]) "
          },
          "11" : {
            "sign" : 771407355,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -1693845678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22749103795674,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "33" : {
            "sign" : -1585850568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#88 = d_date_sk#594) "
          },
          "22" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : 1497422940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54]) "
          },
          "37" : {
            "sign" : -1538887121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#594] "
          },
          "13" : {
            "sign" : 1771808296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#89 = ss_sold_date_sk#34) "
          },
          "24" : {
            "sign" : -1110413127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 970408620,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#54 = d_date_sk#566) "
          },
          "35" : {
            "sign" : -400963880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88]) "
          },
          "16" : {
            "sign" : -1580388450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#12, ss_item_sk#13, ss_customer_sk#14, ss_cdemo_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_promo_sk#19, ss_ticket_number#20L, ss_quantity#21, ss_wholesale_cost#22, ss_list_price#23, ss_sales_price#24, ss_ext_discount_amt#25, ss_ext_sales_price#26, ss_ext_wholesale_cost#27, ss_ext_list_price#28, ss_ext_tax#29, ss_coupon_amt#30, ss_net_paid#31, ss_net_paid_inc_tax#32, ss_net_profit#33, ss_sold_date_sk#34], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1206466827,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 391780859222,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : -659979441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "21" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "32" : {
            "sign" : 1055908359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
          },
          "6" : {
            "sign" : 1333952715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "36" : {
            "sign" : -1677773466,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#55, cs_ship_date_sk#56, cs_bill_customer_sk#57, cs_bill_cdemo_sk#58, cs_bill_hdemo_sk#59, cs_bill_addr_sk#60, cs_ship_customer_sk#61, cs_ship_cdemo_sk#62, cs_ship_hdemo_sk#63, cs_ship_addr_sk#64, cs_call_center_sk#65, cs_catalog_page_sk#66, cs_ship_mode_sk#67, cs_warehouse_sk#68, cs_item_sk#69, cs_promo_sk#70, cs_order_number#71L, cs_quantity#72, cs_wholesale_cost#73, cs_list_price#74, cs_sales_price#75, cs_ext_discount_amt#76, cs_ext_sales_price#77, cs_ext_wholesale_cost#78, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1317400440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -2076961228,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#594, d_date_id#595, d_date#596, d_month_seq#597, d_week_seq#598, d_quarter_seq#599, d_year#600, d_dow#601, d_moy#602, d_dom#603, d_qoy#604, d_fy_year#605, d_fy_quarter_seq#606, d_fy_week_seq#607, d_day_name#608, d_quarter_name#609, d_holiday#610, d_weekend#611, d_following_holiday#612, d_first_dom#613, d_last_dom#614, d_same_day_ly#615, d_same_day_lq#616, d_current_day#617, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 270499216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#89] "
          },
          "25" : {
            "sign" : 47437971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] "
          },
          "14" : {
            "sign" : 567948219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] "
          },
          "31" : {
            "sign" : -2054129532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#566], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : -1280441323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 80852619,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#89], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 623626769,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#35, sr_item_sk#36, sr_customer_sk#37, sr_cdemo_sk#38, sr_hdemo_sk#39, sr_addr_sk#40, sr_store_sk#41, sr_reason_sk#42, sr_ticket_number#43L, sr_return_quantity#44, sr_return_amt#45, sr_return_tax#46, sr_return_amt_inc_tax#47, sr_fee#48, sr_return_ship_cost#49, sr_refunded_cash#50, sr_reversed_charge#51, sr_store_credit#52, sr_net_loss#53, sr_returned_date_sk#54], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 882776555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 181228299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594)) "
          },
          "18" : {
            "sign" : -431383277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23370,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89)) "
          },
          "30" : {
            "sign" : 1203644936,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#566, d_date_id#567, d_date#568, d_month_seq#569, d_week_seq#570, d_quarter_seq#571, d_year#572, d_dow#573, d_moy#574, d_dom#575, d_qoy#576, d_fy_year#577, d_fy_quarter_seq#578, d_fy_week_seq#579, d_day_name#580, d_quarter_name#581, d_holiday#582, d_weekend#583, d_following_holiday#584, d_first_dom#585, d_last_dom#586, d_same_day_ly#587, d_same_day_lq#588, d_current_day#589, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 1499613247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "29" : {
            "sign" : -724266125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566)) "
          },
          "3" : {
            "sign" : 1591083618,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          },
          "28" : {
            "sign" : 1714101204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#566] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n               :     :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n               :     :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n               :     :     :     :     :     :  +- Project [d_date_sk#89]\n               :     :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#89], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n               :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n               :           :     :  +- Project [d_date_sk#566]\n               :           :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#566], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n                     :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n                     :     :  +- Project [d_date_sk#594]\n                     :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#594], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 75197559468,
        "inputRowCount" : 446317236
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 2560.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1311.0, 1311.0 ]
      },
      "StartTimeInMs" : 1702226642545,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23121,
        "IOBytes" : {
          "Total" : 2824229152,
          "Details" : {
            "IR" : 192776520,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 1315726316
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1276797059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] "
          },
          "12" : {
            "sign" : -1668352836,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 730486684928,
            "rowCount" : 22827708904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] "
          },
          "8" : {
            "sign" : 1303323373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21825282321738,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "19" : {
            "sign" : 1833733500,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#89, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -277831213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
          },
          "4" : {
            "sign" : -1708852365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 359961094006,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "40" : {
            "sign" : 768672967,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#594], BroadcastQueryStage 5 "
          },
          "15" : {
            "sign" : -1569833122,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34]) "
          },
          "11" : {
            "sign" : 771407355,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -1693845678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22749103795674,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "33" : {
            "sign" : -1585850568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#88 = d_date_sk#594) "
          },
          "22" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : 1497422940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54]) "
          },
          "37" : {
            "sign" : -1538887121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#594] "
          },
          "13" : {
            "sign" : 1771808296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 913108356160,
            "rowCount" : 22827708904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#89 = ss_sold_date_sk#34) "
          },
          "24" : {
            "sign" : -1110413127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 970408620,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#54 = d_date_sk#566) "
          },
          "35" : {
            "sign" : -400963880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88]) "
          },
          "16" : {
            "sign" : -1580388450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#12, ss_item_sk#13, ss_customer_sk#14, ss_cdemo_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_promo_sk#19, ss_ticket_number#20L, ss_quantity#21, ss_wholesale_cost#22, ss_list_price#23, ss_sales_price#24, ss_ext_discount_amt#25, ss_ext_sales_price#26, ss_ext_wholesale_cost#27, ss_ext_list_price#28, ss_ext_tax#29, ss_coupon_amt#30, ss_net_paid#31, ss_net_paid_inc_tax#32, ss_net_profit#33, ss_sold_date_sk#34], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1206466827,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 391780859222,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : -659979441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "21" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "32" : {
            "sign" : 1055908359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
          },
          "6" : {
            "sign" : 1333952715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "36" : {
            "sign" : -1677773466,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#55, cs_ship_date_sk#56, cs_bill_customer_sk#57, cs_bill_cdemo_sk#58, cs_bill_hdemo_sk#59, cs_bill_addr_sk#60, cs_ship_customer_sk#61, cs_ship_cdemo_sk#62, cs_ship_hdemo_sk#63, cs_ship_addr_sk#64, cs_call_center_sk#65, cs_catalog_page_sk#66, cs_ship_mode_sk#67, cs_warehouse_sk#68, cs_item_sk#69, cs_promo_sk#70, cs_order_number#71L, cs_quantity#72, cs_wholesale_cost#73, cs_list_price#74, cs_sales_price#75, cs_ext_discount_amt#76, cs_ext_sales_price#77, cs_ext_wholesale_cost#78, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1317400440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -2076961228,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#594, d_date_id#595, d_date#596, d_month_seq#597, d_week_seq#598, d_quarter_seq#599, d_year#600, d_dow#601, d_moy#602, d_dom#603, d_qoy#604, d_fy_year#605, d_fy_quarter_seq#606, d_fy_week_seq#607, d_day_name#608, d_quarter_name#609, d_holiday#610, d_weekend#611, d_following_holiday#612, d_first_dom#613, d_last_dom#614, d_same_day_ly#615, d_same_day_lq#616, d_current_day#617, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 270499216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#89] "
          },
          "25" : {
            "sign" : 47437971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] "
          },
          "14" : {
            "sign" : 567948219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] "
          },
          "31" : {
            "sign" : -2054129532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#566], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : -1280441323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 80852619,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#89], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 623626769,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#35, sr_item_sk#36, sr_customer_sk#37, sr_cdemo_sk#38, sr_hdemo_sk#39, sr_addr_sk#40, sr_store_sk#41, sr_reason_sk#42, sr_ticket_number#43L, sr_return_quantity#44, sr_return_amt#45, sr_return_tax#46, sr_return_amt_inc_tax#47, sr_fee#48, sr_return_ship_cost#49, sr_refunded_cash#50, sr_reversed_charge#51, sr_store_credit#52, sr_net_loss#53, sr_returned_date_sk#54], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 882776555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 181228299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594)) "
          },
          "18" : {
            "sign" : -431383277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23370,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89)) "
          },
          "30" : {
            "sign" : 1203644936,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#566, d_date_id#567, d_date#568, d_month_seq#569, d_week_seq#570, d_quarter_seq#571, d_year#572, d_dow#573, d_moy#574, d_dom#575, d_qoy#576, d_fy_year#577, d_fy_quarter_seq#578, d_fy_week_seq#579, d_day_name#580, d_quarter_name#581, d_holiday#582, d_weekend#583, d_following_holiday#584, d_first_dom#585, d_last_dom#586, d_same_day_ly#587, d_same_day_lq#588, d_current_day#589, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 1499613247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "29" : {
            "sign" : -724266125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566)) "
          },
          "3" : {
            "sign" : 1591083618,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          },
          "28" : {
            "sign" : 1714101204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#566] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n               :     :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n               :     :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n               :     :     :     :     :     :  +- Project [d_date_sk#89]\n               :     :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#89], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n               :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n               :           :     :  +- Project [d_date_sk#566]\n               :           :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#566], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n                     :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n                     :     :  +- Project [d_date_sk#594]\n                     :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#594], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 75198607632,
        "inputRowCount" : 446317232
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 4022.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1462.0, 1462.0 ]
      },
      "StartTimeInMs" : 1702226642651,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23015,
        "IOBytes" : {
          "Total" : 2824229152,
          "Details" : {
            "IR" : 192776520,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 1315726316
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2132596646,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 359299248,
            "rowCount" : 7485401,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 748304703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54019923338304000,
            "rowCount" : 613862765208000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "4" : {
            "sign" : -1751326727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1291667457727951683424657920000,
            "rowCount" : 16145843221599396042808224000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "15" : {
            "sign" : 1500471205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 66267360,
            "rowCount" : 1656684,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -628717277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 116053657104000,
            "rowCount" : 1527021804000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -491863962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 58930825459968000,
            "rowCount" : 613862765208000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "13" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 562017287,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -384206007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1550000949273542020109589504000,
            "rowCount" : 16145843221599396042808224000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 1430825423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 109945569888000,
            "rowCount" : 1527021804000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "6" : {
            "sign" : -462925983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 85426036190531422848000,
            "rowCount" : 1016976621315850272000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : 665976780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2647918288342300951020548736000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 991741979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1191024207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2647918288342300951020548736000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1207938417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 109833475102111829376000,
            "rowCount" : 1016976621315850272000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : -616650506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2647918288342300951020548736000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 965658968,
        "inputRowCount" : 25222804
      },
      "PD" : {
        "2" : [ 194263, 201341, 199038, 196935, 199138, 197558, 193744, 196443, 196342, 196466, 194934, 198180, 197051, 194027, 198918, 199444, 199565, 201359, 197450, 200753, 193120, 196932, 195032, 200744, 197259, 201105, 197145, 193032, 195961, 198630, 192948, 198746, 199920, 197070, 195635, 200983, 198727, 194525, 197796, 201473, 192210, 198281, 199167, 195775, 196449, 194421, 194875, 198423, 198650, 200485, 202475, 198001, 196109, 194332, 197095, 195600, 200233, 196281, 197565, 194459, 194818, 198840, 198369, 196541, 200254, 200836, 199160, 198793, 196148, 193822, 196676, 196026, 202430, 197987, 196579, 199941, 195885, 193020, 194471, 193399, 203460, 196765, 197908, 192794, 200330, 202169, 198350, 193629, 201959, 194946, 200048, 190745, 201429, 197134, 197417, 197899, 194235, 193713, 198397, 193091, 197679, 192561, 198328, 200254, 198453, 197625, 196004, 200321, 199622, 201494, 200011, 194487, 200387, 190991, 197681, 194880, 197904, 197899, 195921, 199211, 199225, 198109, 196585, 203127, 203046, 196429, 200038, 199041, 194818, 193512, 199541, 199449, 199778, 197767, 194195, 203302, 200097, 191779, 198460, 197398, 191020, 197129, 199902, 196815, 200301, 197564, 194383, 196292, 197188, 200925, 194755, 193386, 199416, 202813, 200810, 198421, 196619, 195355, 201138, 198667, 198969, 190521, 201838, 197831, 201453, 199600, 196978, 195947, 196193, 200184, 192364, 197477, 192776, 199171, 197007, 200427, 195354, 195245, 195491, 205420, 196003, 197308, 197590, 202306, 194260, 200945, 196255, 198668, 200472, 193823, 194954, 194522, 200112, 196102, 194832, 196264, 201477, 194648, 202709, 197410 ],
        "1" : [ 933069, 938825, 1052395, 956723, 1046639, 1001047, 1032707, 932547, 870752, 975719, 1038463, 988383, 957821, 963055, 951489, 932547, 938825, 970485, 1001047, 938303, 956723, 994715, 938303, 933069, 1059361, 956723, 975719, 950391, 882264, 982051, 969387, 933069, 1108123, 1020043, 969387, 995813, 1001047, 1013711, 957821, 963055, 950391, 945157, 969387, 939401, 944059, 963055, 1032707, 956723, 921557, 859240, 1073293, 963055, 1007379, 994715, 956723, 1026375, 1032707, 988383, 988383, 982051, 1007379, 982051, 982051, 1026375, 853484, 983149, 975719, 951489, 1032707, 1026375, 994715, 938825, 982051, 1013711, 938825, 1026375, 927313, 1073293, 994715, 956723, 950391, 950391, 950391, 956723, 1038463, 975719, 983149, 969387, 1032707, 982051, 1032707, 1059361, 963055, 898533, 1032707, 1038463, 950391, 944059, 1026375, 938825, 988383, 1032707, 951489, 950391, 982051, 975719, 1032131, 1026375, 876508, 970485, 933069, 950391, 950391, 1007379, 1013711, 1013711, 950391, 963055, 938303, 1007379, 933069, 1013711, 1032131, 975719, 1026375, 969387, 963055, 1020043, 1001047, 950391, 969387, 1039673, 927313, 945157, 933069, 938825, 938825, 1046639, 994715, 1020043, 1039673, 927313, 982051, 1053605, 944059, 1026375, 956723, 988383, 1001047, 1026375, 944059, 875509, 1001047, 1032131, 964153, 994715, 1001047, 921557, 1020043, 904289, 1007379, 1052395, 1059361, 1039673, 975719, 982051, 1007379, 982051, 975719, 994715, 1013711, 1032707, 976817, 1007379, 982051, 994715, 887021, 910045, 969387, 1007379, 1032707, 904289, 1032707, 933069, 982051, 1001047, 994715, 945157, 963055, 963055, 994715, 945157, 938825, 853484, 1001047, 950391, 950391, 921557, 988383, 1026375 ],
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226651799,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13867,
        "IOBytes" : {
          "Total" : 2139980547,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 824254231
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -2132596646,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 748304703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21825282321738,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "19" : {
            "sign" : 623626769,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#35, sr_item_sk#36, sr_customer_sk#37, sr_cdemo_sk#38, sr_hdemo_sk#39, sr_addr_sk#40, sr_store_sk#41, sr_reason_sk#42, sr_ticket_number#43L, sr_return_quantity#44, sr_return_amt#45, sr_return_tax#46, sr_return_amt_inc_tax#47, sr_fee#48, sr_return_ship_cost#49, sr_refunded_cash#50, sr_reversed_charge#51, sr_store_credit#52, sr_net_loss#53, sr_returned_date_sk#54], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -2054129532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1050768,
            "rowCount" : 274,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#566], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -1682694579,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 359961094006,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "15" : {
            "sign" : -277831213,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 205771532904,
            "rowCount" : 7348983318,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
          },
          "11" : {
            "sign" : -628717277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          },
          "9" : {
            "sign" : -491863962,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22749103795674,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "22" : {
            "sign" : 1203644936,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#566, d_date_id#567, d_date#568, d_month_seq#569, d_week_seq#570, d_quarter_seq#571, d_year#572, d_dow#573, d_moy#574, d_dom#575, d_qoy#576, d_fy_year#577, d_fy_quarter_seq#578, d_fy_week_seq#579, d_day_name#580, d_quarter_name#581, d_holiday#582, d_weekend#583, d_following_holiday#584, d_first_dom#585, d_last_dom#586, d_same_day_ly#587, d_same_day_lq#588, d_current_day#589, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : -1276797059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] "
          },
          "13" : {
            "sign" : 1724533378,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : 1055908359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 781209115840,
            "rowCount" : 39060455792,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
          },
          "16" : {
            "sign" : -1110413127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 264563399448,
            "rowCount" : 7348983318,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#54 = d_date_sk#566) "
          },
          "5" : {
            "sign" : -1418986897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 391780859222,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          },
          "10" : {
            "sign" : 1430825423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "21" : {
            "sign" : -724266125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566)) "
          },
          "32" : {
            "sign" : 768672967,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1050768,
            "rowCount" : 274,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#594], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 816238999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : -421912948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 47437971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] "
          },
          "25" : {
            "sign" : -1585850568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1093692762176,
            "rowCount" : 39060455792,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#88 = d_date_sk#594) "
          },
          "14" : {
            "sign" : 704778143,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2 "
          },
          "31" : {
            "sign" : -2076961228,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#594, d_date_id#595, d_date#596, d_month_seq#597, d_week_seq#598, d_quarter_seq#599, d_year#600, d_dow#601, d_moy#602, d_dom#603, d_qoy#604, d_fy_year#605, d_fy_quarter_seq#606, d_fy_week_seq#607, d_day_name#608, d_quarter_name#609, d_holiday#610, d_weekend#611, d_following_holiday#612, d_first_dom#613, d_last_dom#614, d_same_day_ly#615, d_same_day_lq#616, d_current_day#617, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : -1744267157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1714101204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#566] "
          },
          "27" : {
            "sign" : -400963880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88]) "
          },
          "2" : {
            "sign" : 53799253,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1497422940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54]) "
          },
          "30" : {
            "sign" : 181228299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 69864,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594)) "
          },
          "7" : {
            "sign" : 1661354375,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          },
          "29" : {
            "sign" : -1538887121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#594] "
          },
          "3" : {
            "sign" : -1465317662,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 737920242712,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          },
          "28" : {
            "sign" : -1677773466,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#55, cs_ship_date_sk#56, cs_bill_customer_sk#57, cs_bill_cdemo_sk#58, cs_bill_hdemo_sk#59, cs_bill_addr_sk#60, cs_ship_customer_sk#61, cs_ship_cdemo_sk#62, cs_ship_hdemo_sk#63, cs_ship_addr_sk#64, cs_call_center_sk#65, cs_catalog_page_sk#66, cs_ship_mode_sk#67, cs_warehouse_sk#68, cs_item_sk#69, cs_promo_sk#70, cs_order_number#71L, cs_quantity#72, cs_wholesale_cost#73, cs_list_price#74, cs_sales_price#75, cs_ext_discount_amt#76, cs_ext_sales_price#77, cs_ext_wholesale_cost#78, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21], ShuffleQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#146, i_item_id#147, i_item_desc#150], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#117, s_state#141], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n               :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n               :           :     :  +- Project [d_date_sk#566]\n               :           :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#566], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n                     :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n                     :     :  +- Project [d_date_sk#594]\n                     :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#594], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41890058112,
        "inputRowCount" : 436812353
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 4022.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1462.0, 1462.0 ]
      },
      "StartTimeInMs" : 1702226642921,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22745,
        "IOBytes" : {
          "Total" : 2824130191,
          "Details" : {
            "IR" : 192677559,
            "IW" : 0,
            "SR" : 1315726316,
            "SW" : 1315726316
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -591978197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 62198759795,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 62198759795,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] "
          },
          "1" : {
            "sign" : -343470767,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 70538258315,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 70538258315,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n+- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n   :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n   :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n   :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n   :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n   :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n   :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n   :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n   :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n   :     :     :     :     :  +- Project [d_date_sk#89]\n   :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n   :     :     :     +- Project [d_date_sk#89]\n   :     :     :        +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n   :     :     +- Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n   :     :        +- Filter isnotnull(i_item_sk#146)\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n   :     +- Project [s_store_sk#117, s_state#141]\n   :        +- Filter isnotnull(s_store_sk#117)\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n   +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n      +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n         :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n         :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n         :     :  +- Project [d_date_sk#566]\n         :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n         :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n         :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n         +- Project [d_date_sk#566]\n            +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1059653606,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] Arguments: [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST, sr_ticket_number#43L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -890592534,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 66267360,
            "rowCount" : 1656684,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] Arguments: 7 "
          },
          "1" : {
            "sign" : 1857257119,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 70538258315,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [3]: [ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L] Right keys [3]: [sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -8389595,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 62198759795,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] Input [11]: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
          },
          "2" : {
            "sign" : 134783180,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] Arguments: [ss_customer_sk#14 ASC NULLS FIRST, ss_item_sk#13 ASC NULLS FIRST, ss_ticket_number#20L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1694394048,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1435575760,
            "rowCount" : 7485401,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n+- SortMergeJoin [ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L], [sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L], Inner\n   :- Sort [ss_customer_sk#14 ASC NULLS FIRST, ss_item_sk#13 ASC NULLS FIRST, ss_ticket_number#20L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 9\n   :     +- Exchange hashpartitioning(ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1467]\n   :        +- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n   :           +- *(11) BroadcastHashJoin [ss_store_sk#18], [s_store_sk#117], Inner, BuildRight, false\n   :              :- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n   :              :  +- *(11) SortMergeJoin [ss_item_sk#13], [i_item_sk#146], Inner\n   :              :     :- *(9) Sort [ss_item_sk#13 ASC NULLS FIRST], false, 0\n   :              :     :  +- AQEShuffleRead coalesced\n   :              :     :     +- ShuffleQueryStage 6\n   :              :     :        +- Exchange hashpartitioning(ss_item_sk#13, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n   :              :     :           +- *(6) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n   :              :     :              +- *(6) BroadcastHashJoin [ss_sold_date_sk#34], [d_date_sk#89], Inner, BuildRight, false\n   :              :     :                 :- *(6) Filter (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18))\n   :              :     :                 :  +- *(6) ColumnarToRow\n   :              :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#13,ss_customer_sk#14,ss_store_sk#18,ss_ticket_number#20L,ss_quantity#21,ss_sold_date_sk#34] Batched: true, DataFilters: [isnotnull(ss_customer_sk#14), isnotnull(ss_item_sk#13), isnotnull(ss_ticket_number#20L), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :              :     :                 :           +- SubqueryBroadcast dynamicpruning#847, 0, [d_date_sk#89], [id=#810]\n   :              :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#89], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                                               +- Project [d_date_sk#89]\n                                                                  +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   :              :     :                 +- BroadcastQueryStage 0\n   :              :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :              :     :                       +- *(1) Project [d_date_sk#89]\n   :              :     :                          +- *(1) Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :              :     :                             +- *(1) ColumnarToRow\n   :              :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   :              :     +- *(10) Sort [i_item_sk#146 ASC NULLS FIRST], false, 0\n   :              :        +- AQEShuffleRead coalesced\n   :              :           +- ShuffleQueryStage 1\n   :              :              +- Exchange hashpartitioning(i_item_sk#146, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              :                 +- *(2) Filter isnotnull(i_item_sk#146)\n   :              :                    +- *(2) ColumnarToRow\n   :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_item_desc#150] Batched: true, DataFilters: [isnotnull(i_item_sk#146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   :              +- BroadcastQueryStage 2\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n   :                    +- *(3) Filter isnotnull(s_store_sk#117)\n   :                       +- *(3) ColumnarToRow\n   :                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#117,s_state#141] Batched: true, DataFilters: [isnotnull(s_store_sk#117)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n   +- Sort [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST, sr_ticket_number#43L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 7\n         +- Exchange hashpartitioning(sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L, 200), ENSURE_REQUIREMENTS, [plan_id=1065]\n            +- *(7) Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               +- *(7) BroadcastHashJoin [sr_returned_date_sk#54], [d_date_sk#566], Inner, BuildRight, false\n                  :- *(7) Filter ((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L))\n                  :  +- *(7) ColumnarToRow\n                  :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#36,sr_customer_sk#37,sr_ticket_number#43L,sr_return_quantity#44,sr_returned_date_sk#54] Batched: true, DataFilters: [isnotnull(sr_customer_sk#37), isnotnull(sr_item_sk#36), isnotnull(sr_ticket_number#43L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#54), dynamicpruningexpression(sr_returned_date_sk#54 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n                  :           +- SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n                  :              +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       BroadcastQueryStage 1\n                                       +- ReusedExchange [d_date_sk#566], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                    +- == Initial Plan ==\n                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1036]\n                                       +- Project [d_date_sk#566]\n                                          +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n                  +- BroadcastQueryStage 3\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                        +- *(4) Project [d_date_sk#566]\n                           +- *(4) Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n                              +- *(4) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1501843120,
        "inputRowCount" : 9142085
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 194263, 201341, 199038, 196935, 199138, 197558, 193744, 196443, 196342, 196466, 194934, 198180, 197051, 194027, 198918, 199444, 199565, 201359, 197450, 200753, 193120, 196932, 195032, 200744, 197259, 201105, 197145, 193032, 195961, 198630, 192948, 198746, 199920, 197070, 195635, 200983, 198727, 194525, 197796, 201473, 192210, 198281, 199167, 195775, 196449, 194421, 194875, 198423, 198650, 200485, 202475, 198001, 196109, 194332, 197095, 195600, 200233, 196281, 197565, 194459, 194818, 198840, 198369, 196541, 200254, 200836, 199160, 198793, 196148, 193822, 196676, 196026, 202430, 197987, 196579, 199941, 195885, 193020, 194471, 193399, 203460, 196765, 197908, 192794, 200330, 202169, 198350, 193629, 201959, 194946, 200048, 190745, 201429, 197134, 197417, 197899, 194235, 193713, 198397, 193091, 197679, 192561, 198328, 200254, 198453, 197625, 196004, 200321, 199622, 201494, 200011, 194487, 200387, 190991, 197681, 194880, 197904, 197899, 195921, 199211, 199225, 198109, 196585, 203127, 203046, 196429, 200038, 199041, 194818, 193512, 199541, 199449, 199778, 197767, 194195, 203302, 200097, 191779, 198460, 197398, 191020, 197129, 199902, 196815, 200301, 197564, 194383, 196292, 197188, 200925, 194755, 193386, 199416, 202813, 200810, 198421, 196619, 195355, 201138, 198667, 198969, 190521, 201838, 197831, 201453, 199600, 196978, 195947, 196193, 200184, 192364, 197477, 192776, 199171, 197007, 200427, 195354, 195245, 195491, 205420, 196003, 197308, 197590, 202306, 194260, 200945, 196255, 198668, 200472, 193823, 194954, 194522, 200112, 196102, 194832, 196264, 201477, 194648, 202709, 197410 ],
        "4" : [ 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3937205, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3937205, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3937205, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3937205, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3910754, 3937205 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 2326,
        "TotalTasksDurationInMs" : 18956,
        "IOBytes" : {
          "Total" : 861937342,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 795715531,
            "SW" : 66221811
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1580388450,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#12, ss_item_sk#13, ss_customer_sk#14, ss_cdemo_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_promo_sk#19, ss_ticket_number#20L, ss_quantity#21, ss_wholesale_cost#22, ss_list_price#23, ss_sales_price#24, ss_ext_discount_amt#25, ss_ext_sales_price#26, ss_ext_wholesale_cost#27, ss_ext_list_price#28, ss_ext_tax#29, ss_coupon_amt#30, ss_net_paid#31, ss_net_paid_inc_tax#32, ss_net_profit#33, ss_sold_date_sk#34], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1160975739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#89 = ss_sold_date_sk#34) "
          },
          "0" : {
            "sign" : 1501226113,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] "
          },
          "2" : {
            "sign" : 567948219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9030741984,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 9030741984,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] "
          },
          "3" : {
            "sign" : -1569833122,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n+- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n   :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n   :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n   :     :  +- Project [d_date_sk#89]\n   :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n   +- Project [d_date_sk#89]\n      +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 862090399,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#89] Arguments: 0 "
          },
          "1" : {
            "sign" : -969644535,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#34] Right keys [1]: [d_date_sk#89] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -541505077,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] Input [7]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34, d_date_sk#89] "
          },
          "2" : {
            "sign" : -1330985886,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] Condition : (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18)) "
          },
          "3" : {
            "sign" : 1591386957,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)] PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n+- BroadcastHashJoin [ss_sold_date_sk#34], [d_date_sk#89], Inner, BuildRight, false\n   :- Filter (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#13,ss_customer_sk#14,ss_store_sk#18,ss_ticket_number#20L,ss_quantity#21,ss_sold_date_sk#34] Batched: true, DataFilters: [isnotnull(ss_customer_sk#14), isnotnull(ss_item_sk#13), isnotnull(ss_ticket_number#20L), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :        +- SubqueryBroadcast dynamicpruning#847, 0, [d_date_sk#89], [id=#810]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n   :                 +- Project [d_date_sk#89]\n   :                    +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n         +- *(1) Project [d_date_sk#89]\n            +- *(1) Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9031791288,
        "inputRowCount" : 250854035
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 4022.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1462.0, 1462.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 8918,
        "TotalTasksDurationInMs" : 64959,
        "IOBytes" : {
          "Total" : 239504555,
          "Details" : {
            "IR" : 52845714,
            "IW" : 0,
            "SR" : 0,
            "SW" : 186658841
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1702259148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565] "
          },
          "1" : {
            "sign" : -700474897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 348028682050,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 348028682050,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] "
          },
          "2" : {
            "sign" : -1760969151,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 379848447266,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 379848447266,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n+- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n   +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n      :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n      :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n      :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n      :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n      :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n      :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n      :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n      :     :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n      :     :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n      :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n      :     :     :     :     :     :  +- Project [d_date_sk#89]\n      :     :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n      :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n      :     :     :     :     +- Project [d_date_sk#89]\n      :     :     :     :        +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n      :     :     :     +- Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n      :     :     :        +- Filter isnotnull(i_item_sk#146)\n      :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n      :     :     +- Project [s_store_sk#117, s_state#141]\n      :     :        +- Filter isnotnull(s_store_sk#117)\n      :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n      :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n      :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n      :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n      :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n      :           :     :  +- Project [d_date_sk#566]\n      :           :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n      :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n      :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n      :           +- Project [d_date_sk#566]\n      :              +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n      :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n      +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n         +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n            :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n            :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n            :     :  +- Project [d_date_sk#594]\n            :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n            +- Project [d_date_sk#594]\n               +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -348055104,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 107494664,
            "rowCount" : 560288,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] Arguments: 10 "
          },
          "5" : {
            "sign" : -1320243728,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] Arguments: [cs_bill_customer_sk#57 ASC NULLS FIRST, cs_item_sk#69 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -693811063,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 508042144,
            "rowCount" : 15876317,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] Arguments: 8 "
          },
          "1" : {
            "sign" : -389934670,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 348028682050,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] Input [10]: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44, cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
          },
          "0" : {
            "sign" : -215605602,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 515082449434,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150] Keys [3]: [i_item_id#147, i_item_desc#150, s_state#141] Functions [9]: [partial_count(ss_quantity#21), partial_avg(ss_quantity#21), partial_stddev_samp(cast(ss_quantity#21 as double)), partial_count(sr_return_quantity#44), partial_avg(sr_return_quantity#44), partial_stddev_samp(cast(sr_return_quantity#44 as double)), partial_count(cs_quantity#72), partial_avg(cs_quantity#72), partial_stddev_samp(cast(cs_quantity#72 as double))] Aggregate Attributes [18]: [count#850L, sum#851, count#852L, n#736, avg#737, m2#738, count#853L, sum#854, count#855L, n#752, avg#753, m2#754, count#856L, sum#857, count#858L, n#768, avg#769, m2#770] Results [21]: [i_item_id#147, i_item_desc#150, s_state#141, count#859L, sum#860, count#861L, n#741, avg#742, m2#743, count#862L, sum#863, count#864L, n#757, avg#758, m2#759, count#865L, sum#866, count#867L, n#773, avg#774, m2#775] "
          },
          "2" : {
            "sign" : 1459864434,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 379848447266,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [sr_customer_sk#37, sr_item_sk#36] Right keys [2]: [cs_bill_customer_sk#57, cs_item_sk#69] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1877796879,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44] Arguments: [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#147, i_item_desc#150, s_state#141], functions=[partial_count(ss_quantity#21), partial_avg(ss_quantity#21), partial_stddev_samp(cast(ss_quantity#21 as double)), partial_count(sr_return_quantity#44), partial_avg(sr_return_quantity#44), partial_stddev_samp(cast(sr_return_quantity#44 as double)), partial_count(cs_quantity#72), partial_avg(cs_quantity#72), partial_stddev_samp(cast(cs_quantity#72 as double))], output=[i_item_id#147, i_item_desc#150, s_state#141, count#859L, sum#860, count#861L, n#741, avg#742, m2#743, count#862L, sum#863, count#864L, n#757, avg#758, m2#759, count#865L, sum#866, count#867L, n#773, avg#774, m2#775])\n+- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n   +- SortMergeJoin [sr_customer_sk#37, sr_item_sk#36], [cs_bill_customer_sk#57, cs_item_sk#69], Inner\n      :- Sort [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 10\n      :     +- Exchange hashpartitioning(sr_customer_sk#37, sr_item_sk#36, 200), ENSURE_REQUIREMENTS, [plan_id=1581]\n      :        +- *(14) Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n      :           +- *(14) SortMergeJoin [ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L], [sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L], Inner\n      :              :- *(12) Sort [ss_customer_sk#14 ASC NULLS FIRST, ss_item_sk#13 ASC NULLS FIRST, ss_ticket_number#20L ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 9\n      :              :        +- Exchange hashpartitioning(ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1467]\n      :              :           +- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n      :              :              +- *(11) BroadcastHashJoin [ss_store_sk#18], [s_store_sk#117], Inner, BuildRight, false\n      :              :                 :- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n      :              :                 :  +- *(11) SortMergeJoin [ss_item_sk#13], [i_item_sk#146], Inner\n      :              :                 :     :- *(9) Sort [ss_item_sk#13 ASC NULLS FIRST], false, 0\n      :              :                 :     :  +- AQEShuffleRead coalesced\n      :              :                 :     :     +- ShuffleQueryStage 6\n      :              :                 :     :        +- Exchange hashpartitioning(ss_item_sk#13, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n      :              :                 :     :           +- *(6) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n      :              :                 :     :              +- *(6) BroadcastHashJoin [ss_sold_date_sk#34], [d_date_sk#89], Inner, BuildRight, false\n      :              :                 :     :                 :- *(6) Filter (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18))\n      :              :                 :     :                 :  +- *(6) ColumnarToRow\n      :              :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#13,ss_customer_sk#14,ss_store_sk#18,ss_ticket_number#20L,ss_quantity#21,ss_sold_date_sk#34] Batched: true, DataFilters: [isnotnull(ss_customer_sk#14), isnotnull(ss_item_sk#13), isnotnull(ss_ticket_number#20L), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n      :              :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#847, 0, [d_date_sk#89], [id=#810]\n      :              :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#89], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                                                                    +- Project [d_date_sk#89]\n                                                                                       +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n      :              :                 :     :                 +- BroadcastQueryStage 0\n      :              :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n      :              :                 :     :                       +- *(1) Project [d_date_sk#89]\n      :              :                 :     :                          +- *(1) Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n      :              :                 :     :                             +- *(1) ColumnarToRow\n      :              :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n      :              :                 :     +- *(10) Sort [i_item_sk#146 ASC NULLS FIRST], false, 0\n      :              :                 :        +- AQEShuffleRead coalesced\n      :              :                 :           +- ShuffleQueryStage 1\n      :              :                 :              +- Exchange hashpartitioning(i_item_sk#146, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n      :              :                 :                 +- *(2) Filter isnotnull(i_item_sk#146)\n      :              :                 :                    +- *(2) ColumnarToRow\n      :              :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_item_desc#150] Batched: true, DataFilters: [isnotnull(i_item_sk#146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n      :              :                 +- BroadcastQueryStage 2\n      :              :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n      :              :                       +- *(3) Filter isnotnull(s_store_sk#117)\n      :              :                          +- *(3) ColumnarToRow\n      :              :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#117,s_state#141] Batched: true, DataFilters: [isnotnull(s_store_sk#117)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n      :              +- *(13) Sort [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST, sr_ticket_number#43L ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 7\n      :                       +- Exchange hashpartitioning(sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L, 200), ENSURE_REQUIREMENTS, [plan_id=1065]\n      :                          +- *(7) Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n      :                             +- *(7) BroadcastHashJoin [sr_returned_date_sk#54], [d_date_sk#566], Inner, BuildRight, false\n      :                                :- *(7) Filter ((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L))\n      :                                :  +- *(7) ColumnarToRow\n      :                                :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#36,sr_customer_sk#37,sr_ticket_number#43L,sr_return_quantity#44,sr_returned_date_sk#54] Batched: true, DataFilters: [isnotnull(sr_customer_sk#37), isnotnull(sr_item_sk#36), isnotnull(sr_ticket_number#43L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#54), dynamicpruningexpression(sr_returned_date_sk#54 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n      :                                :           +- SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n      :                                :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#566], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1036]\n                                                            +- Project [d_date_sk#566]\n                                                               +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n      :                                +- BroadcastQueryStage 3\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n      :                                      +- *(4) Project [d_date_sk#566]\n      :                                         +- *(4) Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n      :                                            +- *(4) ColumnarToRow\n      :                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n      +- Sort [cs_bill_customer_sk#57 ASC NULLS FIRST, cs_item_sk#69 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 8\n            +- Exchange hashpartitioning(cs_bill_customer_sk#57, cs_item_sk#69, 200), ENSURE_REQUIREMENTS, [plan_id=1118]\n               +- *(8) Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- *(8) BroadcastHashJoin [cs_sold_date_sk#88], [d_date_sk#594], Inner, BuildRight, false\n                     :- *(8) Filter (isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69))\n                     :  +- *(8) ColumnarToRow\n                     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#57,cs_item_sk#69,cs_quantity#72,cs_sold_date_sk#88] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#57), isnotnull(cs_item_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#88), dynamicpruningexpression(cs_sold_date_sk#88 IN dynamicpruning#848)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n                     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n                     +- BroadcastQueryStage 5\n                        +- ReusedExchange [d_date_sk#594], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 615536808,
        "inputRowCount" : 16436605
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 339445, 338461, 334540, 340633, 347794, 338957, 345515, 359478, 353760, 345759, 347525, 339201, 347574, 344596, 351100, 347525, 341642, 343587, 362109, 358265, 341886, 344571, 352920, 357961, 349453, 340658, 355276, 342130, 330381, 346028, 342448, 348855, 346193, 358803, 325255, 341398, 357777, 347256, 351911, 354083, 351398, 357227, 339445, 350150, 343020, 337948, 348259, 341642, 351344, 348200, 345705, 358230, 355605, 347012, 363356, 341911, 354527, 358290, 345245, 336516, 354823, 349906, 339445, 336760, 341642, 340877, 348390, 356201, 338382, 360462, 345515, 342130, 336760, 347550, 355032, 356524, 355092, 353760, 355605, 353785, 350431, 343264, 349697, 340579, 340633, 344620, 341557, 342155, 345759, 363685, 356524, 348982, 354029, 347256, 357777, 340363, 353104, 343264, 354823, 351398, 351129, 359722, 344840, 342179, 336760, 338138, 344571, 362109, 331390, 348855, 352920, 344780, 349376, 346028, 344620, 352138, 356714, 348444, 340227, 338192, 339935, 337225, 348469, 354273, 349906, 353104, 343157, 354029, 354823, 347525, 346003, 334540, 345759, 333531, 348903, 335019, 341886, 355067, 356689, 343020, 344327, 346028, 345305, 348982, 343020, 355336, 352138, 345705, 339714, 355580, 342155, 345759, 349453, 359912, 353760, 337273, 356983, 348659, 338651, 344327, 344620, 350162, 347465, 345705, 343073, 349201, 351075, 349966, 339201, 338957, 349662, 350944, 345759, 344571, 352895, 356470, 337029, 333746, 346170, 340877, 338957, 339910, 339201, 367479, 339201, 345759, 347256, 356201, 347012, 352138, 341886, 347734, 339410, 349941, 346768, 352138, 343264, 344571, 353785, 355336 ],
        "3" : [ 1323537, 1298209, 1315876, 1309544, 1310873, 1315876, 1323537, 1304541, 1323537, 1322208, 1323537, 1315876, 1317205, 1310873, 1309544, 1310873, 1308856, 1317205, 1304541, 1317205, 1310873, 1310873, 1329869, 1310873, 1309544, 1303212, 1304541, 1310873, 1296880, 1323537, 1303212, 1304541, 1298209, 1315876, 1325757, 1315876, 1303212, 1298209, 1303212, 1313093, 1323537, 1303212, 1309544, 1305432, 1310873, 1296880, 1309544, 1298209, 1310873, 1309544, 1298209, 1315876, 1315876, 1296880, 1328540, 1296880, 1307527, 1310873, 1322208, 1277884, 1298209, 1303212, 1304541, 1317205, 1322208, 1309544, 1304541, 1329869, 1303212, 1303212, 1310873, 1317205, 1317205, 1304541, 1315876, 1325757, 1303212, 1317205, 1329869, 1322208, 1323537, 1323537, 1290548, 1309544, 1309544, 1329869, 1317205, 1322208, 1310873, 1315876, 1323537, 1317205, 1291877, 1303212, 1310873, 1310873, 1322208, 1329869, 1310873, 1323537, 1304541, 1309544, 1303212, 1309544, 1317205, 1290548, 1298209, 1304541, 1310873, 1296880, 1317205, 1329869, 1298209, 1310873, 1303212, 1329869, 1310873, 1317205, 1322208, 1310873, 1323537, 1323537, 1304541, 1322208, 1304541, 1328540, 1315876, 1315876, 1317205, 1303212, 1317205, 1310873, 1296880, 1310873, 1315876, 1329869, 1310873, 1303212, 1309544, 1304541, 1317205, 1303212, 1323537, 1315876, 1317205, 1310873, 1310873, 1325757, 1304541, 1310873, 1315876, 1315876, 1315876, 1301195, 1323537, 1317205, 1323537, 1304541, 1303212, 1315876, 1328540, 1309544, 1303212, 1322208, 1310873, 1310873, 1305432, 1304541, 1323537, 1315876, 1304541, 1290548, 1323537, 1323537, 1323537, 1317205, 1323537, 1310873, 1315876, 1303212, 1315876, 1309544, 1310873, 1303212, 1317205, 1319425, 1296880, 1310873, 1296880, 1303212, 1304541, 1317205, 1291877, 1317205, 1294863, 1317205, 1309544, 1317205, 1315876, 1309544 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 24 ],
      "Objectives" : {
        "DurationInMs" : 3953,
        "TotalTasksDurationInMs" : 18186,
        "IOBytes" : {
          "Total" : 315184053,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 315174888,
            "SW" : 9165
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 623626769,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#35, sr_item_sk#36, sr_customer_sk#37, sr_cdemo_sk#38, sr_hdemo_sk#39, sr_addr_sk#40, sr_store_sk#41, sr_reason_sk#42, sr_ticket_number#43L, sr_return_quantity#44, sr_return_amt#45, sr_return_tax#46, sr_return_amt_inc_tax#47, sr_fee#48, sr_return_ship_cost#49, sr_refunded_cash#50, sr_reversed_charge#51, sr_store_credit#52, sr_net_loss#53, sr_returned_date_sk#54], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -785445387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 970408620,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 970408620,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#54 = d_date_sk#566) "
          },
          "0" : {
            "sign" : -877175451,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 754762260,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 754762260,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] "
          },
          "2" : {
            "sign" : 47437971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858275424,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 858275424,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] "
          },
          "3" : {
            "sign" : 1497422940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n+- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n   :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n   :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n   :     :  +- Project [d_date_sk#566]\n   :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n   +- Project [d_date_sk#566]\n      +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1265789827,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1050768,
            "rowCount" : 274,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#566] Arguments: 3 "
          },
          "1" : {
            "sign" : 1672750090,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 970408620,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#54] Right keys [1]: [d_date_sk#566] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1505129460,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44] Input [6]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54, d_date_sk#566] "
          },
          "2" : {
            "sign" : 2047792061,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] Condition : ((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) "
          },
          "3" : {
            "sign" : -236420596,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [5]: [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#54), dynamicpruningexpression(sr_returned_date_sk#54 IN dynamicpruning#848)] PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)] ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n+- BroadcastHashJoin [sr_returned_date_sk#54], [d_date_sk#566], Inner, BuildRight, false\n   :- Filter ((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#36,sr_customer_sk#37,sr_ticket_number#43L,sr_return_quantity#44,sr_returned_date_sk#54] Batched: true, DataFilters: [isnotnull(sr_customer_sk#37), isnotnull(sr_item_sk#36), isnotnull(sr_ticket_number#43L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#54), dynamicpruningexpression(sr_returned_date_sk#54 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n   :        +- SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1036]\n   :                 +- Project [d_date_sk#566]\n   :                    +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n         +- *(4) Project [d_date_sk#566]\n            +- *(4) Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 859326192,
        "inputRowCount" : 26821381
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 4022.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1462.0, 1462.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 8675,
        "TotalTasksDurationInMs" : 20588,
        "IOBytes" : {
          "Total" : 63600597,
          "Details" : {
            "IR" : 25908321,
            "IW" : 0,
            "SR" : 0,
            "SW" : 37692276
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1838066803,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16400,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 16400,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 2034662622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 778694519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 515082449434,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#147, i_item_desc#150, s_state#141], [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21) AS store_sales_quantitycount#554L, avg(ss_quantity#21) AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double)) AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double)) / avg(ss_quantity#21)) AS store_sales_quantitycov#557, count(sr_return_quantity#44) AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44) AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double)) AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double)) / avg(sr_return_quantity#44)) AS store_returns_quantitycov#561, count(cs_quantity#72) AS catalog_sales_quantitycount#562L, avg(cs_quantity#72) AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double)) / avg(cs_quantity#72)) AS catalog_sales_quantitycov#565]\n         +- Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n            +- Join Inner, ((sr_customer_sk#37 = cs_bill_customer_sk#57) AND (sr_item_sk#36 = cs_item_sk#69))\n               :- Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n               :  +- Join Inner, (((ss_customer_sk#14 = sr_customer_sk#37) AND (ss_item_sk#13 = sr_item_sk#36)) AND (ss_ticket_number#20L = sr_ticket_number#43L))\n               :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n               :     :  +- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n               :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n               :     :     :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n               :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n               :     :     :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n               :     :     :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n               :     :     :     :     :     :  +- Project [d_date_sk#89]\n               :     :     :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n               :     :     :     :     +- Project [d_date_sk#89]\n               :     :     :     :        +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n               :     :     :        +- Filter isnotnull(i_item_sk#146)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n               :     :     +- Project [s_store_sk#117, s_state#141]\n               :     :        +- Filter isnotnull(s_store_sk#117)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n               :        +- Join Inner, (sr_returned_date_sk#54 = d_date_sk#566)\n               :           :- Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44, sr_returned_date_sk#54]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L)) AND isnotnull(sr_returned_date_sk#54)) AND dynamicpruning#848 [sr_returned_date_sk#54])\n               :           :     :  +- Project [d_date_sk#566]\n               :           :     :     +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#35,sr_item_sk#36,sr_customer_sk#37,sr_cdemo_sk#38,sr_hdemo_sk#39,sr_addr_sk#40,sr_store_sk#41,sr_reason_sk#42,sr_ticket_number#43L,sr_return_quantity#44,sr_return_amt#45,sr_return_tax#46,sr_return_amt_inc_tax#47,sr_fee#48,sr_return_ship_cost#49,sr_refunded_cash#50,sr_reversed_charge#51,sr_store_credit#52,sr_net_loss#53,sr_returned_date_sk#54] parquet\n               :           +- Project [d_date_sk#566]\n               :              +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                  +- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n                     :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n                     :     :  +- Project [d_date_sk#594]\n                     :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n                     +- Project [d_date_sk#594]\n                        +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1217526552,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 16400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [15]: [i_item_id#147, i_item_desc#150, s_state#141, store_sales_quantitycount#554L, store_sales_quantityave#555, store_sales_quantitystdev#556, store_sales_quantitycov#557, as_store_returns_quantitycount#558L, as_store_returns_quantityave#559, as_store_returns_quantitystdev#560, store_returns_quantitycov#561, catalog_sales_quantitycount#562L, catalog_sales_quantityave#563, catalog_sales_quantitystdev#564, catalog_sales_quantitycov#565] Arguments: 100, [i_item_id#147 ASC NULLS FIRST, i_item_desc#150 ASC NULLS FIRST, s_state#141 ASC NULLS FIRST], [i_item_id#147, i_item_desc#150, s_state#141, store_sales_quantitycount#554L, store_sales_quantityave#555, store_sales_quantitystdev#556, store_sales_quantitycov#557, as_store_returns_quantitycount#558L, as_store_returns_quantityave#559, as_store_returns_quantitystdev#560, store_returns_quantitycov#561, catalog_sales_quantitycount#562L, catalog_sales_quantityave#563, catalog_sales_quantitystdev#564, catalog_sales_quantitycov#565] "
          },
          "1" : {
            "sign" : 417610033,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 11264,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [21]: [i_item_id#147, i_item_desc#150, s_state#141, count#859L, sum#860, count#861L, n#741, avg#742, m2#743, count#862L, sum#863, count#864L, n#757, avg#758, m2#759, count#865L, sum#866, count#867L, n#773, avg#774, m2#775] Keys [3]: [i_item_id#147, i_item_desc#150, s_state#141] Functions [9]: [count(ss_quantity#21), avg(ss_quantity#21), stddev_samp(cast(ss_quantity#21 as double)), count(sr_return_quantity#44), avg(sr_return_quantity#44), stddev_samp(cast(sr_return_quantity#44 as double)), count(cs_quantity#72), avg(cs_quantity#72), stddev_samp(cast(cs_quantity#72 as double))] Aggregate Attributes [9]: [count(ss_quantity#21)#622L, avg(ss_quantity#21)#623, stddev_samp(cast(ss_quantity#21 as double))#632, count(sr_return_quantity#44)#643L, avg(sr_return_quantity#44)#644, stddev_samp(cast(sr_return_quantity#44 as double))#653, count(cs_quantity#72)#664L, avg(cs_quantity#72)#665, stddev_samp(cast(cs_quantity#72 as double))#674] Results [15]: [i_item_id#147, i_item_desc#150, s_state#141, count(ss_quantity#21)#622L AS store_sales_quantitycount#554L, avg(ss_quantity#21)#623 AS store_sales_quantityave#555, stddev_samp(cast(ss_quantity#21 as double))#632 AS store_sales_quantitystdev#556, (stddev_samp(cast(ss_quantity#21 as double))#632 / avg(ss_quantity#21)#623) AS store_sales_quantitycov#557, count(sr_return_quantity#44)#643L AS as_store_returns_quantitycount#558L, avg(sr_return_quantity#44)#644 AS as_store_returns_quantityave#559, stddev_samp(cast(sr_return_quantity#44 as double))#653 AS as_store_returns_quantitystdev#560, (stddev_samp(cast(sr_return_quantity#44 as double))#653 / avg(sr_return_quantity#44)#644) AS store_returns_quantitycov#561, count(cs_quantity#72)#664L AS catalog_sales_quantitycount#562L, avg(cs_quantity#72)#665 AS catalog_sales_quantityave#563, (stddev_samp(cast(cs_quantity#72 as double))#674 / avg(cs_quantity#72)#665) AS catalog_sales_quantitystdev#564, (stddev_samp(cast(cs_quantity#72 as double))#674 / avg(cs_quantity#72)#665) AS catalog_sales_quantitycov#565] "
          },
          "2" : {
            "sign" : 863763352,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 515082449434,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [21]: [i_item_id#147, i_item_desc#150, s_state#141, count#859L, sum#860, count#861L, n#741, avg#742, m2#743, count#862L, sum#863, count#864L, n#757, avg#758, m2#759, count#865L, sum#866, count#867L, n#773, avg#774, m2#775] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[i_item_id#147 ASC NULLS FIRST,i_item_desc#150 ASC NULLS FIRST,s_state#141 ASC NULLS FIRST], output=[i_item_id#147,i_item_desc#150,s_state#141,store_sales_quantitycount#554L,store_sales_quantityave#555,store_sales_quantitystdev#556,store_sales_quantitycov#557,as_store_returns_quantitycount#558L,as_store_returns_quantityave#559,as_store_returns_quantitystdev#560,store_returns_quantitycov#561,catalog_sales_quantitycount#562L,catalog_sales_quantityave#563,catalog_sales_quantitystdev#564,catalog_sales_quantitycov#565])\n+- HashAggregate(keys=[i_item_id#147, i_item_desc#150, s_state#141], functions=[count(ss_quantity#21), avg(ss_quantity#21), stddev_samp(cast(ss_quantity#21 as double)), count(sr_return_quantity#44), avg(sr_return_quantity#44), stddev_samp(cast(sr_return_quantity#44 as double)), count(cs_quantity#72), avg(cs_quantity#72), stddev_samp(cast(cs_quantity#72 as double))], output=[i_item_id#147, i_item_desc#150, s_state#141, store_sales_quantitycount#554L, store_sales_quantityave#555, store_sales_quantitystdev#556, store_sales_quantitycov#557, as_store_returns_quantitycount#558L, as_store_returns_quantityave#559, as_store_returns_quantitystdev#560, store_returns_quantitycov#561, catalog_sales_quantitycount#562L, catalog_sales_quantityave#563, catalog_sales_quantitystdev#564, catalog_sales_quantitycov#565])\n   +- ShuffleQueryStage 11\n      +- Exchange hashpartitioning(i_item_id#147, i_item_desc#150, s_state#141, 200), ENSURE_REQUIREMENTS, [plan_id=1665]\n         +- *(17) HashAggregate(keys=[i_item_id#147, i_item_desc#150, s_state#141], functions=[partial_count(ss_quantity#21), partial_avg(ss_quantity#21), partial_stddev_samp(cast(ss_quantity#21 as double)), partial_count(sr_return_quantity#44), partial_avg(sr_return_quantity#44), partial_stddev_samp(cast(sr_return_quantity#44 as double)), partial_count(cs_quantity#72), partial_avg(cs_quantity#72), partial_stddev_samp(cast(cs_quantity#72 as double))], output=[i_item_id#147, i_item_desc#150, s_state#141, count#859L, sum#860, count#861L, n#741, avg#742, m2#743, count#862L, sum#863, count#864L, n#757, avg#758, m2#759, count#865L, sum#866, count#867L, n#773, avg#774, m2#775])\n            +- *(17) Project [ss_quantity#21, sr_return_quantity#44, cs_quantity#72, s_state#141, i_item_id#147, i_item_desc#150]\n               +- *(17) SortMergeJoin [sr_customer_sk#37, sr_item_sk#36], [cs_bill_customer_sk#57, cs_item_sk#69], Inner\n                  :- *(15) Sort [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 10\n                  :        +- Exchange hashpartitioning(sr_customer_sk#37, sr_item_sk#36, 200), ENSURE_REQUIREMENTS, [plan_id=1581]\n                  :           +- *(14) Project [ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141, sr_item_sk#36, sr_customer_sk#37, sr_return_quantity#44]\n                  :              +- *(14) SortMergeJoin [ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L], [sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L], Inner\n                  :                 :- *(12) Sort [ss_customer_sk#14 ASC NULLS FIRST, ss_item_sk#13 ASC NULLS FIRST, ss_ticket_number#20L ASC NULLS FIRST], false, 0\n                  :                 :  +- AQEShuffleRead coalesced\n                  :                 :     +- ShuffleQueryStage 9\n                  :                 :        +- Exchange hashpartitioning(ss_customer_sk#14, ss_item_sk#13, ss_ticket_number#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1467]\n                  :                 :           +- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n                  :                 :              +- *(11) BroadcastHashJoin [ss_store_sk#18], [s_store_sk#117], Inner, BuildRight, false\n                  :                 :                 :- *(11) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n                  :                 :                 :  +- *(11) SortMergeJoin [ss_item_sk#13], [i_item_sk#146], Inner\n                  :                 :                 :     :- *(9) Sort [ss_item_sk#13 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :     +- ShuffleQueryStage 6\n                  :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#13, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n                  :                 :                 :     :           +- *(6) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n                  :                 :                 :     :              +- *(6) BroadcastHashJoin [ss_sold_date_sk#34], [d_date_sk#89], Inner, BuildRight, false\n                  :                 :                 :     :                 :- *(6) Filter (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18))\n                  :                 :                 :     :                 :  +- *(6) ColumnarToRow\n                  :                 :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#13,ss_customer_sk#14,ss_store_sk#18,ss_ticket_number#20L,ss_quantity#21,ss_sold_date_sk#34] Batched: true, DataFilters: [isnotnull(ss_customer_sk#14), isnotnull(ss_item_sk#13), isnotnull(ss_ticket_number#20L), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n                  :                 :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#847, 0, [d_date_sk#89], [id=#810]\n                  :                 :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   BroadcastQueryStage 1\n                                                                                                   +- ReusedExchange [d_date_sk#89], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                                +- == Initial Plan ==\n                                                                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                                                                                   +- Project [d_date_sk#89]\n                                                                                                      +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n                  :                 :                 :     :                 +- BroadcastQueryStage 0\n                  :                 :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                  :                 :                 :     :                       +- *(1) Project [d_date_sk#89]\n                  :                 :                 :     :                          +- *(1) Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n                  :                 :                 :     :                             +- *(1) ColumnarToRow\n                  :                 :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n                  :                 :                 :     +- *(10) Sort [i_item_sk#146 ASC NULLS FIRST], false, 0\n                  :                 :                 :        +- AQEShuffleRead coalesced\n                  :                 :                 :           +- ShuffleQueryStage 1\n                  :                 :                 :              +- Exchange hashpartitioning(i_item_sk#146, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n                  :                 :                 :                 +- *(2) Filter isnotnull(i_item_sk#146)\n                  :                 :                 :                    +- *(2) ColumnarToRow\n                  :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_item_desc#150] Batched: true, DataFilters: [isnotnull(i_item_sk#146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n                  :                 :                 +- BroadcastQueryStage 2\n                  :                 :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n                  :                 :                       +- *(3) Filter isnotnull(s_store_sk#117)\n                  :                 :                          +- *(3) ColumnarToRow\n                  :                 :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#117,s_state#141] Batched: true, DataFilters: [isnotnull(s_store_sk#117)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n                  :                 +- *(13) Sort [sr_customer_sk#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST, sr_ticket_number#43L ASC NULLS FIRST], false, 0\n                  :                    +- AQEShuffleRead coalesced\n                  :                       +- ShuffleQueryStage 7\n                  :                          +- Exchange hashpartitioning(sr_customer_sk#37, sr_item_sk#36, sr_ticket_number#43L, 200), ENSURE_REQUIREMENTS, [plan_id=1065]\n                  :                             +- *(7) Project [sr_item_sk#36, sr_customer_sk#37, sr_ticket_number#43L, sr_return_quantity#44]\n                  :                                +- *(7) BroadcastHashJoin [sr_returned_date_sk#54], [d_date_sk#566], Inner, BuildRight, false\n                  :                                   :- *(7) Filter ((isnotnull(sr_customer_sk#37) AND isnotnull(sr_item_sk#36)) AND isnotnull(sr_ticket_number#43L))\n                  :                                   :  +- *(7) ColumnarToRow\n                  :                                   :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#36,sr_customer_sk#37,sr_ticket_number#43L,sr_return_quantity#44,sr_returned_date_sk#54] Batched: true, DataFilters: [isnotnull(sr_customer_sk#37), isnotnull(sr_item_sk#36), isnotnull(sr_ticket_number#43L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#54), dynamicpruningexpression(sr_returned_date_sk#54 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n                  :                                   :           +- SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n                  :                                   :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#566], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1036]\n                                                                           +- Project [d_date_sk#566]\n                                                                              +- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n                  :                                   +- BroadcastQueryStage 3\n                  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                  :                                         +- *(4) Project [d_date_sk#566]\n                  :                                            +- *(4) Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n                  :                                               +- *(4) ColumnarToRow\n                  :                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n                  +- *(16) Sort [cs_bill_customer_sk#57 ASC NULLS FIRST, cs_item_sk#69 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 8\n                           +- Exchange hashpartitioning(cs_bill_customer_sk#57, cs_item_sk#69, 200), ENSURE_REQUIREMENTS, [plan_id=1118]\n                              +- *(8) Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n                                 +- *(8) BroadcastHashJoin [cs_sold_date_sk#88], [d_date_sk#594], Inner, BuildRight, false\n                                    :- *(8) Filter (isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69))\n                                    :  +- *(8) ColumnarToRow\n                                    :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#57,cs_item_sk#69,cs_quantity#72,cs_sold_date_sk#88] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#57), isnotnull(cs_item_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#88), dynamicpruningexpression(cs_sold_date_sk#88 IN dynamicpruning#848)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n                                    :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n                                    +- BroadcastQueryStage 5\n                                       +- ReusedExchange [d_date_sk#594], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11264,
        "inputRowCount" : 37
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 276, 0, 0, 0, 0, 0, 189, 0, 378, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 334, 0, 334, 0, 276, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 304, 0, 276, 251, 304, 142, 0, 0, 0, 0, 0, 0, 228, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 251, 334, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 334, 0, 0, 0, 0, 276, 0, 541, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 251, 0, 0, 334, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 189, 0, 0, 0, 0, 0, 0, 0, 0, 334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 240,
        "TotalTasksDurationInMs" : 231,
        "IOBytes" : {
          "Total" : 9165,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 9165,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1677773466,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#55, cs_ship_date_sk#56, cs_bill_customer_sk#57, cs_bill_cdemo_sk#58, cs_bill_hdemo_sk#59, cs_bill_addr_sk#60, cs_ship_customer_sk#61, cs_ship_cdemo_sk#62, cs_ship_hdemo_sk#63, cs_ship_addr_sk#64, cs_call_center_sk#65, cs_catalog_page_sk#66, cs_ship_mode_sk#67, cs_warehouse_sk#68, cs_item_sk#69, cs_promo_sk#70, cs_order_number#71L, cs_quantity#72, cs_wholesale_cost#73, cs_list_price#74, cs_sales_price#75, cs_ext_discount_amt#76, cs_ext_sales_price#77, cs_ext_wholesale_cost#78, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1326249300,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#88 = d_date_sk#594) "
          },
          "0" : {
            "sign" : 211045423,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] "
          },
          "2" : {
            "sign" : -1276797059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3421353792,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 3421353792,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] "
          },
          "3" : {
            "sign" : -400963880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n+- Join Inner, (cs_sold_date_sk#88 = d_date_sk#594)\n   :- Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88]\n   :  +- Filter (((isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) AND isnotnull(cs_sold_date_sk#88)) AND dynamicpruning#849 [cs_sold_date_sk#88])\n   :     :  +- Project [d_date_sk#594]\n   :     :     +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#55,cs_ship_date_sk#56,cs_bill_customer_sk#57,cs_bill_cdemo_sk#58,cs_bill_hdemo_sk#59,cs_bill_addr_sk#60,cs_ship_customer_sk#61,cs_ship_cdemo_sk#62,cs_ship_hdemo_sk#63,cs_ship_addr_sk#64,cs_call_center_sk#65,cs_catalog_page_sk#66,cs_ship_mode_sk#67,cs_warehouse_sk#68,cs_item_sk#69,cs_promo_sk#70,cs_order_number#71L,cs_quantity#72,cs_wholesale_cost#73,cs_list_price#74,cs_sales_price#75,cs_ext_discount_amt#76,cs_ext_sales_price#77,cs_ext_wholesale_cost#78,... 10 more fields] parquet\n   +- Project [d_date_sk#594]\n      +- Filter (d_quarter_name#609 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#594))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#594,d_date_id#595,d_date#596,d_month_seq#597,d_week_seq#598,d_quarter_seq#599,d_year#600,d_dow#601,d_moy#602,d_dom#603,d_qoy#604,d_fy_year#605,d_fy_quarter_seq#606,d_fy_week_seq#607,d_day_name#608,d_quarter_name#609,d_holiday#610,d_weekend#611,d_following_holiday#612,d_first_dom#613,d_last_dom#614,d_same_day_ly#615,d_same_day_lq#616,d_current_day#617,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1279926893,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1050768,
            "rowCount" : 274,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#594] Arguments: 5 "
          },
          "1" : {
            "sign" : -869387987,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#88] Right keys [1]: [d_date_sk#594] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 734988164,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72] Input [5]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88, d_date_sk#594] "
          },
          "2" : {
            "sign" : -731331776,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] Condition : (isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69)) "
          },
          "3" : {
            "sign" : -164431360,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72, cs_sold_date_sk#88] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#88), dynamicpruningexpression(cs_sold_date_sk#88 IN dynamicpruning#848)] PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)] ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#57, cs_item_sk#69, cs_quantity#72]\n+- BroadcastHashJoin [cs_sold_date_sk#88], [d_date_sk#594], Inner, BuildRight, false\n   :- Filter (isnotnull(cs_bill_customer_sk#57) AND isnotnull(cs_item_sk#69))\n   :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#57,cs_item_sk#69,cs_quantity#72,cs_sold_date_sk#88] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#57), isnotnull(cs_item_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#88), dynamicpruningexpression(cs_sold_date_sk#88 IN dynamicpruning#848)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#848, 0, [d_date_sk#566], [id=#1039]\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [d_date_sk#594], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3422404560,
        "inputRowCount" : 142556682
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 4022.0,
        "FinishedTasksDistributionInMs" : [ 1249.0, 1249.0, 1311.0, 1462.0, 1462.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 6591,
        "TotalTasksDurationInMs" : 17399,
        "IOBytes" : {
          "Total" : 350509352,
          "Details" : {
            "IR" : 101556275,
            "IW" : 0,
            "SR" : 0,
            "SW" : 248953077
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -898837227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10452,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 10452,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#117, s_state#141] "
          },
          "1" : {
            "sign" : 633032996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#117) "
          },
          "2" : {
            "sign" : 36810635,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#117, s_store_id#118, s_rec_start_date#119, s_rec_end_date#120, s_closed_date_sk#121, s_store_name#122, s_number_employees#123, s_floor_space#124, s_hours#125, s_manager#126, s_market_id#127, s_geography_class#128, s_market_desc#129, s_market_manager#130, s_division_id#131, s_division_name#132, s_company_id#133, s_company_name#134, s_street_number#135, s_street_name#136, s_street_type#137, s_suite_number#138, s_city#139, s_county#140, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#117, s_state#141]\n+- Filter isnotnull(s_store_sk#117)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2052977121,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 10452,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#117, s_state#141] Condition : isnotnull(s_store_sk#117) "
          },
          "1" : {
            "sign" : 586560712,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 10452,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#117, s_state#141] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#117)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#117,s_state#141] Batched: true, DataFilters: [isnotnull(s_store_sk#117)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10452,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1226,
        "TotalTasksDurationInMs" : 1221,
        "IOBytes" : {
          "Total" : 14365,
          "Details" : {
            "IR" : 14365,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 270499216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1140,
                "rowCount" : 95
              },
              "compileTime" : {
                "sizeInBytes" : 1140,
                "rowCount" : 95
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#89] "
          },
          "1" : {
            "sign" : -431383277,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23370,
                "rowCount" : 95
              },
              "compileTime" : {
                "sizeInBytes" : 23370,
                "rowCount" : 95
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89)) "
          },
          "2" : {
            "sign" : 1833733500,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#89, d_date_id#90, d_date#91, d_month_seq#92, d_week_seq#93, d_quarter_seq#94, d_year#95, d_dow#96, d_moy#97, d_dom#98, d_qoy#99, d_fy_year#100, d_fy_quarter_seq#101, d_fy_week_seq#102, d_day_name#103, d_quarter_name#104, d_holiday#105, d_weekend#106, d_following_holiday#107, d_first_dom#108, d_last_dom#109, d_same_day_ly#110, d_same_day_lq#111, d_current_day#112, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#89]\n+- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -433320079,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#89] Input [2]: [d_date_sk#89, d_quarter_name#104] "
          },
          "1" : {
            "sign" : -1713037746,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#89, d_quarter_name#104] Condition : ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89)) "
          },
          "2" : {
            "sign" : 1097118981,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1140,
            "rowCount" : 95,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#89, d_quarter_name#104] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_quarter_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#89]\n+- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1140,
        "inputRowCount" : 95
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1526,
        "TotalTasksDurationInMs" : 1518,
        "IOBytes" : {
          "Total" : 98961,
          "Details" : {
            "IR" : 98961,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1714101204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3408,
                "rowCount" : 284
              },
              "compileTime" : {
                "sizeInBytes" : 3408,
                "rowCount" : 284
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#566] "
          },
          "1" : {
            "sign" : -724266125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 69864,
                "rowCount" : 284
              },
              "compileTime" : {
                "sizeInBytes" : 69864,
                "rowCount" : 284
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566)) "
          },
          "2" : {
            "sign" : 1203644936,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#566, d_date_id#567, d_date#568, d_month_seq#569, d_week_seq#570, d_quarter_seq#571, d_year#572, d_dow#573, d_moy#574, d_dom#575, d_qoy#576, d_fy_year#577, d_fy_quarter_seq#578, d_fy_week_seq#579, d_day_name#580, d_quarter_name#581, d_holiday#582, d_weekend#583, d_following_holiday#584, d_first_dom#585, d_last_dom#586, d_same_day_ly#587, d_same_day_lq#588, d_current_day#589, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#566]\n+- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_date_id#567,d_date#568,d_month_seq#569,d_week_seq#570,d_quarter_seq#571,d_year#572,d_dow#573,d_moy#574,d_dom#575,d_qoy#576,d_fy_year#577,d_fy_quarter_seq#578,d_fy_week_seq#579,d_day_name#580,d_quarter_name#581,d_holiday#582,d_weekend#583,d_following_holiday#584,d_first_dom#585,d_last_dom#586,d_same_day_ly#587,d_same_day_lq#588,d_current_day#589,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1942522057,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#566] Input [2]: [d_date_sk#566, d_quarter_name#581] "
          },
          "1" : {
            "sign" : -1824792968,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#566, d_quarter_name#581] Condition : (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566)) "
          },
          "2" : {
            "sign" : 1434121091,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3408,
            "rowCount" : 284,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#566, d_quarter_name#581] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_quarter_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#566]\n+- Filter (d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3) AND isnotnull(d_date_sk#566))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#566,d_quarter_name#581] Batched: true, DataFilters: [d_quarter_name#581 IN (1998Q1,1998Q2,1998Q3), isnotnull(d_date_sk#566)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [1998Q1,1998Q2,1998Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3408,
        "inputRowCount" : 284
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1316,
        "TotalTasksDurationInMs" : 1310,
        "IOBytes" : {
          "Total" : 98961,
          "Details" : {
            "IR" : 98961,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -928376355,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 105747106137,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 105747106137,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] "
          },
          "1" : {
            "sign" : 1524205148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 110369930449,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 110369930449,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#117 = ss_store_sk#18) "
          },
          "2" : {
            "sign" : -273688141,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 49695620333,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 49695620333,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] "
          },
          "3" : {
            "sign" : 1330702045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#146 = ss_item_sk#13) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n+- Join Inner, (s_store_sk#117 = ss_store_sk#18)\n   :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n   :  +- Join Inner, (i_item_sk#146 = ss_item_sk#13)\n   :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n   :     :  +- Join Inner, (d_date_sk#89 = ss_sold_date_sk#34)\n   :     :     :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, ss_sold_date_sk#34]\n   :     :     :  +- Filter (((((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_sold_date_sk#34)) AND isnotnull(ss_store_sk#18)) AND dynamicpruning#847 [ss_sold_date_sk#34])\n   :     :     :     :  +- Project [d_date_sk#89]\n   :     :     :     :     +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#12,ss_item_sk#13,ss_customer_sk#14,ss_cdemo_sk#15,ss_hdemo_sk#16,ss_addr_sk#17,ss_store_sk#18,ss_promo_sk#19,ss_ticket_number#20L,ss_quantity#21,ss_wholesale_cost#22,ss_list_price#23,ss_sales_price#24,ss_ext_discount_amt#25,ss_ext_sales_price#26,ss_ext_wholesale_cost#27,ss_ext_list_price#28,ss_ext_tax#29,ss_coupon_amt#30,ss_net_paid#31,ss_net_paid_inc_tax#32,ss_net_profit#33,ss_sold_date_sk#34] parquet\n   :     :     +- Project [d_date_sk#89]\n   :     :        +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_date_id#90,d_date#91,d_month_seq#92,d_week_seq#93,d_quarter_seq#94,d_year#95,d_dow#96,d_moy#97,d_dom#98,d_qoy#99,d_fy_year#100,d_fy_quarter_seq#101,d_fy_week_seq#102,d_day_name#103,d_quarter_name#104,d_holiday#105,d_weekend#106,d_following_holiday#107,d_first_dom#108,d_last_dom#109,d_same_day_ly#110,d_same_day_lq#111,d_current_day#112,... 4 more fields] parquet\n   :     +- Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n   :        +- Filter isnotnull(i_item_sk#146)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n   +- Project [s_store_sk#117, s_state#141]\n      +- Filter isnotnull(s_store_sk#117)\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#117,s_store_id#118,s_rec_start_date#119,s_rec_end_date#120,s_closed_date_sk#121,s_store_name#122,s_number_employees#123,s_floor_space#124,s_hours#125,s_manager#126,s_market_id#127,s_geography_class#128,s_market_desc#129,s_market_manager#130,s_division_id#131,s_division_name#132,s_company_id#133,s_company_name#134,s_street_number#135,s_street_name#136,s_street_type#137,s_suite_number#138,s_city#139,s_county#140,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1635133420,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_store_sk#117, s_state#141] Arguments: 2 "
          },
          "4" : {
            "sign" : 2035936899,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] Arguments: [ss_item_sk#13 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 505029035,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 359299248,
            "rowCount" : 7485401,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21] Arguments: 6 "
          },
          "6" : {
            "sign" : 1065935506,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [i_item_sk#146, i_item_id#147, i_item_desc#150] Arguments: [i_item_sk#146 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 78709472,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 110369930449,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#18] Right keys [1]: [s_store_sk#117] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1672667939,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 105747106137,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141] Input [9]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_store_sk#117, s_state#141] "
          },
          "2" : {
            "sign" : 1022725086,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150] Input [8]: [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_sk#146, i_item_id#147, i_item_desc#150] "
          },
          "7" : {
            "sign" : -1208806398,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_item_sk#146, i_item_id#147, i_item_desc#150] Arguments: 1 "
          },
          "3" : {
            "sign" : -911524248,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_item_sk#13] Right keys [1]: [i_item_sk#146] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#13, ss_customer_sk#14, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150, s_state#141]\n+- BroadcastHashJoin [ss_store_sk#18], [s_store_sk#117], Inner, BuildRight, false\n   :- Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21, i_item_id#147, i_item_desc#150]\n   :  +- SortMergeJoin [ss_item_sk#13], [i_item_sk#146], Inner\n   :     :- Sort [ss_item_sk#13 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 6\n   :     :     +- Exchange hashpartitioning(ss_item_sk#13, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n   :     :        +- *(6) Project [ss_item_sk#13, ss_customer_sk#14, ss_store_sk#18, ss_ticket_number#20L, ss_quantity#21]\n   :     :           +- *(6) BroadcastHashJoin [ss_sold_date_sk#34], [d_date_sk#89], Inner, BuildRight, false\n   :     :              :- *(6) Filter (((isnotnull(ss_customer_sk#14) AND isnotnull(ss_item_sk#13)) AND isnotnull(ss_ticket_number#20L)) AND isnotnull(ss_store_sk#18))\n   :     :              :  +- *(6) ColumnarToRow\n   :     :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#13,ss_customer_sk#14,ss_store_sk#18,ss_ticket_number#20L,ss_quantity#21,ss_sold_date_sk#34] Batched: true, DataFilters: [isnotnull(ss_customer_sk#14), isnotnull(ss_item_sk#13), isnotnull(ss_ticket_number#20L), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#847)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :     :              :           +- SubqueryBroadcast dynamicpruning#847, 0, [d_date_sk#89], [id=#810]\n   :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#89], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                             +- Project [d_date_sk#89]\n                                                +- Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   :     :              +- BroadcastQueryStage 0\n   :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :     :                    +- *(1) Project [d_date_sk#89]\n   :     :                       +- *(1) Filter ((isnotnull(d_quarter_name#104) AND (d_quarter_name#104 = 1998Q1)) AND isnotnull(d_date_sk#89))\n   :     :                          +- *(1) ColumnarToRow\n   :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#89,d_quarter_name#104] Batched: true, DataFilters: [isnotnull(d_quarter_name#104), (d_quarter_name#104 = 1998Q1), isnotnull(d_date_sk#89)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,1998Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>\n   :     +- Sort [i_item_sk#146 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 1\n   :           +- Exchange hashpartitioning(i_item_sk#146, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              +- *(2) Filter isnotnull(i_item_sk#146)\n   :                 +- *(2) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_item_desc#150] Batched: true, DataFilters: [isnotnull(i_item_sk#146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n         +- *(3) Filter isnotnull(s_store_sk#117)\n            +- *(3) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#117,s_state#141] Batched: true, DataFilters: [isnotnull(s_store_sk#117)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 391349464,
        "inputRowCount" : 7689803
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 933069, 938825, 1052395, 956723, 1046639, 1001047, 1032707, 932547, 870752, 975719, 1038463, 988383, 957821, 963055, 951489, 932547, 938825, 970485, 1001047, 938303, 956723, 994715, 938303, 933069, 1059361, 956723, 975719, 950391, 882264, 982051, 969387, 933069, 1108123, 1020043, 969387, 995813, 1001047, 1013711, 957821, 963055, 950391, 945157, 969387, 939401, 944059, 963055, 1032707, 956723, 921557, 859240, 1073293, 963055, 1007379, 994715, 956723, 1026375, 1032707, 988383, 988383, 982051, 1007379, 982051, 982051, 1026375, 853484, 983149, 975719, 951489, 1032707, 1026375, 994715, 938825, 982051, 1013711, 938825, 1026375, 927313, 1073293, 994715, 956723, 950391, 950391, 950391, 956723, 1038463, 975719, 983149, 969387, 1032707, 982051, 1032707, 1059361, 963055, 898533, 1032707, 1038463, 950391, 944059, 1026375, 938825, 988383, 1032707, 951489, 950391, 982051, 975719, 1032131, 1026375, 876508, 970485, 933069, 950391, 950391, 1007379, 1013711, 1013711, 950391, 963055, 938303, 1007379, 933069, 1013711, 1032131, 975719, 1026375, 969387, 963055, 1020043, 1001047, 950391, 969387, 1039673, 927313, 945157, 933069, 938825, 938825, 1046639, 994715, 1020043, 1039673, 927313, 982051, 1053605, 944059, 1026375, 956723, 988383, 1001047, 1026375, 944059, 875509, 1001047, 1032131, 964153, 994715, 1001047, 921557, 1020043, 904289, 1007379, 1052395, 1059361, 1039673, 975719, 982051, 1007379, 982051, 975719, 994715, 1013711, 1032707, 976817, 1007379, 982051, 994715, 887021, 910045, 969387, 1007379, 1032707, 904289, 1032707, 933069, 982051, 1001047, 994715, 945157, 963055, 963055, 994715, 945157, 938825, 853484, 1001047, 950391, 950391, 921557, 988383, 1026375 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 6517,
        "TotalTasksDurationInMs" : 21135,
        "IOBytes" : {
          "Total" : 962849987,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 204826732,
            "SW" : 758023255
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1307397105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#146, i_item_id#147, i_item_desc#150] "
          },
          "1" : {
            "sign" : -1502856378,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#146) "
          },
          "2" : {
            "sign" : 1528163749,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#146, i_item_id#147, i_rec_start_date#148, i_rec_end_date#149, i_item_desc#150, i_current_price#151, i_wholesale_cost#152, i_brand_id#153, i_brand#154, i_class_id#155, i_class#156, i_category_id#157, i_category#158, i_manufact_id#159, i_manufact#160, i_size#161, i_formulation#162, i_color#163, i_units#164, i_container#165, i_manager_id#166, i_product_name#167], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#146, i_item_id#147, i_item_desc#150]\n+- Filter isnotnull(i_item_sk#146)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_rec_start_date#148,i_rec_end_date#149,i_item_desc#150,i_current_price#151,i_wholesale_cost#152,i_brand_id#153,i_brand#154,i_class_id#155,i_class#156,i_category_id#157,i_category#158,i_manufact_id#159,i_manufact#160,i_size#161,i_formulation#162,i_color#163,i_units#164,i_container#165,i_manager_id#166,i_product_name#167] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1387724079,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#146, i_item_id#147, i_item_desc#150] Condition : isnotnull(i_item_sk#146) "
          },
          "1" : {
            "sign" : 1115896432,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#146, i_item_id#147, i_item_desc#150] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#146)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#146,i_item_id#147,i_item_desc#150] Batched: true, DataFilters: [isnotnull(i_item_sk#146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 31212000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2476,
        "TotalTasksDurationInMs" : 8803,
        "IOBytes" : {
          "Total" : 30535140,
          "Details" : {
            "IR" : 12367249,
            "IW" : 0,
            "SR" : 0,
            "SW" : 18167891
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226640510,
  "SQLEndTimeInMs" : 1702226665666,
  "Objectives" : {
    "DurationInMs" : 25156,
    "IOBytes" : {
      "Total" : 2824342478,
      "Details" : {
        "IR" : 192889846,
        "IW" : 0,
        "SR" : 1315726316,
        "SW" : 1315726316
      }
    }
  }
}
