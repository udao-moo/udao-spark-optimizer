{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -199355329,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 316800,
          "rowCount" : 7200,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#84, hd_income_band_sk#85, hd_buy_potential#86, hd_dep_count#87, hd_vehicle_count#88], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : -587731316,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#120, ca_address_id#121, ca_street_number#122, ca_street_name#123, ca_street_type#124, ca_suite_number#125, ca_city#126, ca_county#127, ca_state#128, ca_zip#129, ca_country#130, ca_gmt_offset#131, ca_location_type#132], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : 1891196123,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106)) "
        },
        "19" : {
          "sign" : 1955543122,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 16297837500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#8 = hd_demo_sk#84) "
        },
        "23" : {
          "sign" : -2096358152,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 34775225760,
          "rowCount" : 228784380,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#151 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#154 [], xxhash64(ss_store_sk#10, 42)))) "
        },
        "4" : {
          "sign" : 101452709,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 34930581777,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#126 = bought_city#0)) "
        },
        "15" : {
          "sign" : -1132150973,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 44494684003,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
        },
        "11" : {
          "sign" : 1753243598,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 238630578,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#120) AND isnotnull(ca_city#126)) "
        },
        "9" : {
          "sign" : 85726556,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#102, c_customer_id#103, c_current_cdemo_sk#104, c_current_hdemo_sk#105, c_current_addr_sk#106, c_first_shipto_date_sk#107, c_first_sales_date_sk#108, c_salutation#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_day#113, c_birth_month#114, c_birth_year#115, c_birth_country#116, c_login#117, c_email_address#118, c_last_review_date#119], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "33" : {
          "sign" : 355097791,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 80608,
          "rowCount" : 1832,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84)) "
        },
        "22" : {
          "sign" : -360708,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13727062800,
          "rowCount" : 228784380,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] "
        },
        "26" : {
          "sign" : -419243679,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 17958,
          "rowCount" : 73,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27)) "
        },
        "37" : {
          "sign" : -1635005631,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#89, ca_address_id#90, ca_street_number#91, ca_street_name#92, ca_street_type#93, ca_suite_number#94, ca_city#95, ca_county#96, ca_state#97, ca_zip#98, ca_country#99, ca_gmt_offset#100, ca_location_type#101], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : -1317227168,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 37560447535,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#0, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#1, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#2, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#3] "
        },
        "24" : {
          "sign" : 1769386681,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_cdemo_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_promo_sk#11, ss_ticket_number#12L, ss_quantity#13, ss_wholesale_cost#14, ss_list_price#15, ss_sales_price#16, ss_ext_discount_amt#17, ss_ext_sales_price#18, ss_ext_wholesale_cost#19, ss_ext_list_price#20, ss_ext_tax#21, ss_coupon_amt#22, ss_net_paid#23, ss_net_paid_inc_tax#24, ss_net_profit#25, ss_sold_date_sk#26], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "35" : {
          "sign" : -145282446,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32011419,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#89, ca_city#95] "
        },
        "16" : {
          "sign" : -1873618607,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 20092015424,
          "rowCount" : 275233088,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
        },
        "5" : {
          "sign" : 1814015345,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 140711200,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#126] "
        },
        "10" : {
          "sign" : -285341981,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32011419,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#120, ca_city#126] "
        },
        "21" : {
          "sign" : -37088263,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 16994597440,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#26 = d_date_sk#27) "
        },
        "32" : {
          "sign" : -1430953660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 21984,
          "rowCount" : 1832,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [hd_demo_sk#84] "
        },
        "6" : {
          "sign" : -1659268550,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 156792480,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#120) "
        },
        "36" : {
          "sign" : 57914410,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 238630578,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#89) AND isnotnull(ca_city#95)) "
        },
        "1" : {
          "sign" : 479155711,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 32730230169,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -1617755758,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 21192947776,
          "rowCount" : 275233088,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
        },
        "25" : {
          "sign" : -929710994,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 876,
          "rowCount" : 73,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#27] "
        },
        "14" : {
          "sign" : -1057437557,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 39871859691,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
        },
        "31" : {
          "sign" : 2066238734,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#55, s_store_id#56, s_rec_start_date#57, s_rec_end_date#58, s_closed_date_sk#59, s_store_name#60, s_number_employees#61, s_floor_space#62, s_hours#63, s_manager#64, s_market_id#65, s_geography_class#66, s_market_desc#67, s_market_manager#68, s_division_id#69, s_division_name#70, s_company_id#71, s_company_name#72, s_street_number#73, s_street_name#74, s_street_type#75, s_suite_number#76, s_city#77, s_county#78, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -43814860,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 12000,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -797329637,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14870272760,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
        },
        "27" : {
          "sign" : 1120105147,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#27, d_date_id#28, d_date#29, d_month_seq#30, d_week_seq#31, d_quarter_seq#32, d_year#33, d_dow#34, d_moy#35, d_dom#36, d_qoy#37, d_fy_year#38, d_fy_quarter_seq#39, d_fy_week_seq#40, d_day_name#41, d_quarter_name#42, d_holiday#43, d_weekend#44, d_following_holiday#45, d_first_dom#46, d_last_dom#47, d_same_day_ly#48, d_same_day_lq#49, d_current_day#50, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : -708550498,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 32730230169,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -1107467950,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14124792500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
        },
        "30" : {
          "sign" : -1234400053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 21555,
          "rowCount" : 45,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
        },
        "7" : {
          "sign" : 1132319224,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 106000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] "
        },
        "29" : {
          "sign" : 1135016761,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 540,
          "rowCount" : 45,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#55] "
        },
        "3" : {
          "sign" : -1926000749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32730230169,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#126, bought_city#0, ss_ticket_number#12L, extended_price#1, extended_tax#3, list_price#2] "
        },
        "28" : {
          "sign" : -1294399437,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#153] "
        }
      },
      "links" : [ {
        "fromId" : 9,
        "fromName" : "LogicalRelation",
        "toId" : 8,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Filter",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Aggregate",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Join",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "LogicalRelation",
        "toId" : 36,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Filter",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Join",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#126, bought_city#0, ss_ticket_number#12L, extended_price#1, extended_tax#3, list_price#2]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#126 = bought_city#0))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#126]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#120)\n            :     :- Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111]\n            :     :  +- Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n            :     :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#102,c_customer_id#103,c_current_cdemo_sk#104,c_current_hdemo_sk#105,c_current_addr_sk#106,c_first_shipto_date_sk#107,c_first_sales_date_sk#108,c_salutation#109,c_first_name#110,c_last_name#111,c_preferred_cust_flag#112,c_birth_day#113,c_birth_month#114,c_birth_year#115,c_birth_country#116,c_login#117,c_email_address#118,c_last_review_date#119] parquet\n            :     +- Project [ca_address_sk#120, ca_city#126]\n            :        +- Filter (isnotnull(ca_address_sk#120) AND isnotnull(ca_city#126))\n            :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#120,ca_address_id#121,ca_street_number#122,ca_street_name#123,ca_street_type#124,ca_suite_number#125,ca_city#126,ca_county#127,ca_state#128,ca_zip#129,ca_country#130,ca_gmt_offset#131,ca_location_type#132] parquet\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#0, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#1, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#2, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#3]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :  +- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n                     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n                     :     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#151 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#154 [], xxhash64(ss_store_sk#10, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#27]\n                     :     :     :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#153]\n                     :     :     :     :     :     +- Project [s_store_sk#55]\n                     :     :     :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n                     :     :     :     +- Project [d_date_sk#27]\n                     :     :     :        +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n                     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n                     :     :     +- Project [hd_demo_sk#84]\n                     :     :        +- Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n                     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_income_band_sk#85,hd_buy_potential#86,hd_dep_count#87,hd_vehicle_count#88] parquet\n                     :     +- Project [ca_address_sk#89, ca_city#95]\n                     :        +- Filter (isnotnull(ca_address_sk#89) AND isnotnull(ca_city#95))\n                     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#89,ca_address_id#90,ca_street_number#91,ca_street_name#92,ca_street_type#93,ca_suite_number#94,ca_city#95,ca_county#96,ca_state#97,ca_zip#98,ca_country#99,ca_gmt_offset#100,ca_location_type#101] parquet\n                     +- Project [s_store_sk#55]\n                        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42817373068,
      "inputRowCount" : 279126004
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -706947158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7250144580000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "5" : {
            "sign" : 540178896,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : 570436686,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1954528,
            "rowCount" : 28625,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : 611425465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1516541840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 2051402202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -2078279195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- LogicalQueryStage Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8\n            +- LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 142665728,
        "inputRowCount" : 2038785
      },
      "PD" : {
        "5" : [ 7071, 7778, 5844, 6428, 5844, 6428, 5313, 6428, 6428, 6428, 5844, 5844, 5844, 5844, 5844, 6428, 7071, 7071, 6428, 6428, 5844, 7071, 5844, 5844, 5844, 5844, 5313, 7071, 6428, 5844, 6428, 5844, 5844, 5844, 6428, 5844, 5313, 6428, 5844, 6428, 5844, 5844, 6428, 5313, 5844, 5844, 5844, 5313, 6428, 5844, 5844, 7071, 5844, 6428, 6428, 5313, 5844, 5844, 6428, 6428, 5844, 6428, 6428, 5844, 6428, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 6428, 7778, 5844, 6428, 5313, 5844, 6428, 5313, 6428, 6428, 5844, 5313, 7071, 5313, 5844, 5844, 7071, 5844, 7071, 7071, 6428, 6428, 6428, 6428, 5844, 7071, 5313, 7071, 6428, 5844, 5313, 6428, 5844, 5313, 5844, 5844, 5844, 5313, 5844, 5844, 6428, 6428, 5844, 5313, 6428, 6428, 7071, 5844, 7071, 6428, 5313, 7071, 5844, 6428, 5313, 6428, 5313, 5844, 5844, 6428, 4830, 7071, 5844, 5844, 6428, 5313, 7071, 6428, 5844, 6428, 6428, 6428, 6428, 7071, 5313, 5844, 6428, 5844, 5844, 5844, 6428, 6428, 5844, 5844, 6428, 5844, 6428, 5313, 5313, 5313, 6428, 5844, 6428, 6428, 6428, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 5313, 6428, 5844, 6428, 6428, 6428, 6428, 7071, 6428, 5844, 6428, 6428, 5313, 6428, 6428, 6428, 6428, 7071, 6428, 6428, 5844, 6428, 7071, 5844, 6428 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 928.0,
        "FinishedTasksDistributionInMs" : [ 928.0, 928.0, 928.0, 928.0, 928.0 ]
      },
      "StartTimeInMs" : 1702227251521,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2033,
        "IOBytes" : {
          "Total" : 225650032,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 152222390,
            "SW" : 73427642
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1692873005,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 208,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 18,
        "FinishedTasksTotalTimeInMs" : 34050.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 1284.0, 1481.0, 2854.0, 4800.0 ]
      },
      "StartTimeInMs" : 1702227231613,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21941,
        "IOBytes" : {
          "Total" : 509769311,
          "Details" : {
            "IR" : 176372187,
            "IW" : 0,
            "SR" : 173776463,
            "SW" : 159620661
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -583071443,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7250144580000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "5" : {
            "sign" : 540178896,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : -1545318191,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5242880,
            "rowCount" : 28625,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9, BroadcastQueryStage 10 "
          },
          "1" : {
            "sign" : 2078477180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1046823539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2072617123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1903414872,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- LogicalQueryStage Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8\n            +- LogicalQueryStage LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9, BroadcastQueryStage 10\n"
      },
      "IM" : {
        "inputSizeInBytes" : 145954080,
        "inputRowCount" : 2038785
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 928.0,
        "FinishedTasksDistributionInMs" : [ 928.0, 928.0, 928.0, 928.0, 928.0 ]
      },
      "StartTimeInMs" : 1702227251697,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1857,
        "IOBytes" : {
          "Total" : 224482414,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 151054772,
            "SW" : 73427642
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1443041917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18971523818415000,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "8" : {
            "sign" : -461705607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1 "
          },
          "4" : {
            "sign" : 615836812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 85783421069781399320160000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "15" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : -958509066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 760968899827535000,
            "rowCount" : 10012748681941250,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "9" : {
            "sign" : 1175991059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 640815915644240000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "13" : {
            "sign" : 1821392618,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20025497363882500,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "16" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 1513286735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 133865934000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "10" : {
            "sign" : 1773170250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 680866910372005000,
            "rowCount" : 10012748681941250,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "6" : {
            "sign" : 57578593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 149386622000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          },
          "1" : {
            "sign" : -1301174797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 80421957252920061862650000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 798397367,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 1294738054,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1080810908,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 80421957252920061862650000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -2059102709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0 "
          },
          "3" : {
            "sign" : 1801752327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 80421957252920061862650000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n            :     :- LogicalQueryStage Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14302276676,
        "inputRowCount" : 275570749
      },
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 32250.0,
        "FinishedTasksDistributionInMs" : [ 1284.0, 1336.0, 1662.0, 2901.0, 4800.0 ]
      },
      "StartTimeInMs" : 1702227232137,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21417,
        "IOBytes" : {
          "Total" : 490287616,
          "Details" : {
            "IR" : 171046294,
            "IW" : 0,
            "SR" : 173776214,
            "SW" : 145465108
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -583071443,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7108181984000,
            "rowCount" : 55532671750,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "5" : {
            "sign" : 540178896,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : -1545318191,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5242880,
            "rowCount" : 28625,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9, BroadcastQueryStage 10 "
          },
          "1" : {
            "sign" : 2078477180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6663920610000,
            "rowCount" : 55532671750,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1046823539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2072617123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6663920610000,
            "rowCount" : 55532671750,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1903414872,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6663920610000,
            "rowCount" : 55532671750,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- LogicalQueryStage Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8\n            +- LogicalQueryStage LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9, BroadcastQueryStage 10\n"
      },
      "IM" : {
        "inputSizeInBytes" : 138261480,
        "inputRowCount" : 1968631
      },
      "PD" : {
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227252792,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 762,
        "IOBytes" : {
          "Total" : 73427642,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 73427642,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1443041917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18971523818415000,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "8" : {
            "sign" : -461705607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1 "
          },
          "4" : {
            "sign" : 615836812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 89513135029337112334080000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "15" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : -958509066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 760968899827535000,
            "rowCount" : 10012748681941250,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "9" : {
            "sign" : 1175991059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 640815915644240000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "13" : {
            "sign" : 1821392618,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20025497363882500,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "16" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 1513286735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 139686192000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "10" : {
            "sign" : 1773170250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 680866910372005000,
            "rowCount" : 10012748681941250,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "6" : {
            "sign" : 57578593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 155206880000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          },
          "1" : {
            "sign" : -1301174797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 83918564090003542813200000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 798397367,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 1294738054,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1080810908,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 83918564090003542813200000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -2059102709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 112527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0 "
          },
          "3" : {
            "sign" : 1801752327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 83918564090003542813200000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n            :     :- LogicalQueryStage Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14308804524,
        "inputRowCount" : 275570749
      },
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "0" : [ 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 157015.0,
        "FinishedTasksDistributionInMs" : [ 530.0, 7883.0, 10024.0, 14707.0, 16834.0 ]
      },
      "StartTimeInMs" : 1702227249512,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4042,
        "IOBytes" : {
          "Total" : 404029050,
          "Details" : {
            "IR" : 148259305,
            "IW" : 0,
            "SR" : 173776214,
            "SW" : 81993531
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1272215793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20092015424,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "8" : {
            "sign" : -461705607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1 "
          },
          "19" : {
            "sign" : -611813032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34775225760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42)))) "
          },
          "23" : {
            "sign" : 1120105147,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#27, d_date_id#28, d_date#29, d_month_seq#30, d_week_seq#31, d_quarter_seq#32, d_year#33, d_dow#34, d_moy#35, d_dom#36, d_qoy#37, d_fy_year#38, d_fy_quarter_seq#39, d_fy_week_seq#40, d_day_name#41, d_quarter_name#42, d_holiday#43, d_weekend#44, d_following_holiday#45, d_first_dom#46, d_last_dom#47, d_same_day_ly#48, d_same_day_lq#49, d_current_day#50, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -789626406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34930581777,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "15" : {
            "sign" : -1479597753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16297837500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#8 = hd_demo_sk#84) "
          },
          "11" : {
            "sign" : -975039268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 805332015488,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "9" : {
            "sign" : -1288890567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 679825727360,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "22" : {
            "sign" : -419243679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17958,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27)) "
          },
          "26" : {
            "sign" : -1234400053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 21555,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "13" : {
            "sign" : 735805418,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21192947776,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "24" : {
            "sign" : 329531539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186] "
          },
          "16" : {
            "sign" : 692599960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "5" : {
            "sign" : 1513286735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "10" : {
            "sign" : 1673217884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 721661156736,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "21" : {
            "sign" : -929710994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#27] "
          },
          "6" : {
            "sign" : 57578593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          },
          "1" : {
            "sign" : 1420093849,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1337671354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16994597440,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#26 = d_date_sk#27) "
          },
          "25" : {
            "sign" : 1135016761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#55] "
          },
          "14" : {
            "sign" : 577653825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "31" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -1267236448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1769386681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_cdemo_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_promo_sk#11, ss_ticket_number#12L, ss_quantity#13, ss_wholesale_cost#14, ss_list_price#15, ss_sales_price#16, ss_ext_discount_amt#17, ss_ext_sales_price#18, ss_ext_wholesale_cost#19, ss_ext_list_price#20, ss_ext_tax#21, ss_coupon_amt#22, ss_net_paid#23, ss_net_paid_inc_tax#24, ss_net_profit#25, ss_sold_date_sk#26], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 2066238734,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#55, s_store_id#56, s_rec_start_date#57, s_rec_end_date#58, s_closed_date_sk#59, s_store_name#60, s_number_employees#61, s_floor_space#62, s_hours#63, s_manager#64, s_market_id#65, s_geography_class#66, s_market_desc#67, s_market_manager#68, s_division_id#69, s_division_name#70, s_company_id#71, s_company_name#72, s_street_number#73, s_street_name#74, s_street_type#75, s_suite_number#76, s_city#77, s_county#78, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -1076137142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 410340188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13727062800,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] "
          },
          "30" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "7" : {
            "sign" : -2059102709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0 "
          },
          "29" : {
            "sign" : -1153399594,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#84], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : -1788779795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          },
          "28" : {
            "sign" : -1455903739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#27], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n            :     :- LogicalQueryStage Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :  +- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n                     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n                     :     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#27]\n                     :     :     :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n                     :     :     :     :     :     +- Project [s_store_sk#55]\n                     :     :     :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n                     :     :     :     +- LogicalQueryStage Project [d_date_sk#27], BroadcastQueryStage 2\n                     :     :     +- LogicalQueryStage Project [hd_demo_sk#84], BroadcastQueryStage 3\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41977991050,
        "inputRowCount" : 278987382
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 12,
        "FinishedTasksNum" : 11,
        "FinishedTasksTotalTimeInMs" : 11349.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 139.0, 1285.0, 1381.0, 1662.0 ]
      },
      "StartTimeInMs" : 1702227228090,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 25464,
        "IOBytes" : {
          "Total" : 509911238,
          "Details" : {
            "IR" : 176513865,
            "IW" : 0,
            "SR" : 173776463,
            "SW" : 159620910
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1272215793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20092015424,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "8" : {
            "sign" : -461705607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1 "
          },
          "19" : {
            "sign" : -611813032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34775225760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42)))) "
          },
          "23" : {
            "sign" : 1120105147,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#27, d_date_id#28, d_date#29, d_month_seq#30, d_week_seq#31, d_quarter_seq#32, d_year#33, d_dow#34, d_moy#35, d_dom#36, d_qoy#37, d_fy_year#38, d_fy_quarter_seq#39, d_fy_week_seq#40, d_day_name#41, d_quarter_name#42, d_holiday#43, d_weekend#44, d_following_holiday#45, d_first_dom#46, d_last_dom#47, d_same_day_ly#48, d_same_day_lq#49, d_current_day#50, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -789626406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34930581777,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "15" : {
            "sign" : -1479597753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 28678383180000,
            "rowCount" : 477973053000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#8 = hd_demo_sk#84) "
          },
          "11" : {
            "sign" : -975039268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 805332015488,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "9" : {
            "sign" : -1288890567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 679825727360,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "22" : {
            "sign" : -419243679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17958,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27)) "
          },
          "26" : {
            "sign" : -1234400053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 21555,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "13" : {
            "sign" : 735805418,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21192947776,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "24" : {
            "sign" : 329531539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186] "
          },
          "16" : {
            "sign" : 692599960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "5" : {
            "sign" : 1513286735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "10" : {
            "sign" : 1673217884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 721661156736,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "21" : {
            "sign" : -929710994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#27] "
          },
          "6" : {
            "sign" : 57578593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          },
          "1" : {
            "sign" : 1420093849,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1337671354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16994597440,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#26 = d_date_sk#27) "
          },
          "25" : {
            "sign" : 1135016761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#55] "
          },
          "14" : {
            "sign" : 577653825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24854598756000,
            "rowCount" : 477973053000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "31" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -1267236448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1769386681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_cdemo_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_promo_sk#11, ss_ticket_number#12L, ss_quantity#13, ss_wholesale_cost#14, ss_list_price#15, ss_sales_price#16, ss_ext_discount_amt#17, ss_ext_sales_price#18, ss_ext_wholesale_cost#19, ss_ext_list_price#20, ss_ext_tax#21, ss_coupon_amt#22, ss_net_paid#23, ss_net_paid_inc_tax#24, ss_net_profit#25, ss_sold_date_sk#26], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 2066238734,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#55, s_store_id#56, s_rec_start_date#57, s_rec_end_date#58, s_closed_date_sk#59, s_store_name#60, s_number_employees#61, s_floor_space#62, s_hours#63, s_manager#64, s_market_id#65, s_geography_class#66, s_market_desc#67, s_market_manager#68, s_division_id#69, s_division_name#70, s_company_id#71, s_company_name#72, s_street_number#73, s_street_name#74, s_street_type#75, s_suite_number#76, s_city#77, s_county#78, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -1076137142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 410340188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13727062800,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] "
          },
          "30" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "7" : {
            "sign" : -2059102709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0 "
          },
          "29" : {
            "sign" : -1153399594,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 1800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#84], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : -1788779795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          },
          "28" : {
            "sign" : -1455903739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#27], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n            :     :- LogicalQueryStage Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :  +- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n                     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n                     :     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#27]\n                     :     :     :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n                     :     :     :     :     :     +- Project [s_store_sk#55]\n                     :     :     :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n                     :     :     :     +- LogicalQueryStage Project [d_date_sk#27], BroadcastQueryStage 2\n                     :     :     +- LogicalQueryStage Project [hd_demo_sk#84], BroadcastQueryStage 3\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41979066602,
        "inputRowCount" : 278987350
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 11,
        "FinishedTasksTotalTimeInMs" : 11349.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 139.0, 1285.0, 1381.0, 1662.0 ]
      },
      "StartTimeInMs" : 1702227228173,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 25381,
        "IOBytes" : {
          "Total" : 509879499,
          "Details" : {
            "IR" : 176482126,
            "IW" : 0,
            "SR" : 173776463,
            "SW" : 159620910
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "8" : {
            "sign" : -958509066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 906002786589784,
            "rowCount" : 11921089297234,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "4" : {
            "sign" : -93152963,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 107355569940540980531200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "11" : {
            "sign" : 798397367,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 20697664,
            "rowCount" : 323401,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7 "
          },
          "9" : {
            "sign" : 1443041917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 22587327089496,
            "rowCount" : 313712876243,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "13" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 540178896,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8 "
          },
          "10" : {
            "sign" : 1821392618,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 23842178594468,
            "rowCount" : 313712876243,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "6" : {
            "sign" : 1175991059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 762949715022976,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "1" : {
            "sign" : 1729607038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 100645846819257169248000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -2134256457,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 2026945229,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 100645846819257169248000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1773170250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 810634072211912,
            "rowCount" : 11921089297234,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "3" : {
            "sign" : 621650474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 100645846819257169248000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- LogicalQueryStage Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 197676800,
        "inputRowCount" : 3303642
      },
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "3" : [ 39373, 37353, 40899, 35538, 37167, 39453, 39031, 41372, 37859, 40552, 40735, 40572, 44648, 40637, 37899, 37296, 37733, 41160, 45094, 36402, 38400, 42152, 39861, 35644, 40484, 37557, 33365, 40895, 40888, 36655, 39922, 34064, 36195, 37207, 34600, 38545, 35564, 38051, 37739, 39818, 36820, 37524, 38087, 35140, 37777, 40766, 41153, 39823, 39602, 39805, 38861, 36276, 41721, 38041, 35607, 38860, 41251, 39828, 35131, 40375, 33922, 39930, 37509, 37695, 40071, 34049, 39621, 40041, 42724, 42197, 37865, 33837, 40778, 48020, 38293, 38830, 38276, 38641, 37140, 43502, 36419, 40860, 41273, 32567, 34961, 44204, 38632, 38535, 37961, 46641, 36677, 38385, 36736, 38086, 41299, 40155, 43832, 39287, 40948, 40847, 39824, 39886, 39731, 40973, 35943, 40004, 39240, 44004, 35589, 37889, 40525, 30031, 37227, 40384, 42934, 37701, 37428, 39331, 45655, 38613, 33703, 44704, 38795, 41499, 39875, 38423, 41060, 35534, 35386, 35613, 43551, 43301, 37932, 36410, 40616, 35085, 38218, 38728, 32072, 38132, 40335, 40037, 41213, 41422, 39708, 38310, 41143, 38822, 36688, 41445, 41208, 41240, 38639, 35029, 41166, 30807, 34924, 36289, 39104, 38624, 36298, 34066, 36329, 34579, 41736, 33778, 44085, 39746, 43241, 39920, 42846, 43184, 42631, 43756, 41224, 38910, 37064, 36390, 39451, 38358, 39268, 39841, 40398, 32679, 41144, 34306, 41955, 36088, 34569, 32486, 41857, 38653, 39406, 37704, 38607, 33016, 39249, 36783, 40689, 38334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227249930,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3624,
        "IOBytes" : {
          "Total" : 248371474,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 173776214,
            "SW" : 74595260
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1272215793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20092015424,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "8" : {
            "sign" : -461705607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1 "
          },
          "19" : {
            "sign" : -611813032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34775225760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42)))) "
          },
          "23" : {
            "sign" : 1120105147,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#27, d_date_id#28, d_date#29, d_month_seq#30, d_week_seq#31, d_quarter_seq#32, d_year#33, d_dow#34, d_moy#35, d_dom#36, d_qoy#37, d_fy_year#38, d_fy_quarter_seq#39, d_fy_week_seq#40, d_day_name#41, d_quarter_name#42, d_holiday#43, d_weekend#44, d_following_holiday#45, d_first_dom#46, d_last_dom#47, d_same_day_ly#48, d_same_day_lq#49, d_current_day#50, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -789626406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34930581777,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "15" : {
            "sign" : -1479597753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1779027338880000,
            "rowCount" : 29650455648000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#8 = hd_demo_sk#84) "
          },
          "11" : {
            "sign" : -975039268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 805332015488,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "9" : {
            "sign" : -1288890567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 679825727360,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "22" : {
            "sign" : -419243679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17958,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27)) "
          },
          "26" : {
            "sign" : -1234400053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 21555,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "13" : {
            "sign" : 735805418,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21192947776,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "24" : {
            "sign" : 329531539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186] "
          },
          "16" : {
            "sign" : 692599960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 922458620160,
            "rowCount" : 16472475360,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "5" : {
            "sign" : 1513286735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "10" : {
            "sign" : 1673217884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 721661156736,
            "rowCount" : 10458857344,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "21" : {
            "sign" : -929710994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#27] "
          },
          "6" : {
            "sign" : 57578593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          },
          "1" : {
            "sign" : 1420093849,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1337671354,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1054238423040,
            "rowCount" : 16472475360,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#26 = d_date_sk#27) "
          },
          "25" : {
            "sign" : 1135016761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#55] "
          },
          "14" : {
            "sign" : 577653825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1541823693696000,
            "rowCount" : 29650455648000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "31" : {
            "sign" : -428181152,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#55], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -1267236448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1769386681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_cdemo_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_promo_sk#11, ss_ticket_number#12L, ss_quantity#13, ss_wholesale_cost#14, ss_list_price#15, ss_sales_price#16, ss_ext_discount_amt#17, ss_ext_sales_price#18, ss_ext_wholesale_cost#19, ss_ext_list_price#20, ss_ext_tax#21, ss_coupon_amt#22, ss_net_paid#23, ss_net_paid_inc_tax#24, ss_net_profit#25, ss_sold_date_sk#26], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 2066238734,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#55, s_store_id#56, s_rec_start_date#57, s_rec_end_date#58, s_closed_date_sk#59, s_store_name#60, s_number_employees#61, s_floor_space#62, s_hours#63, s_manager#64, s_market_id#65, s_geography_class#66, s_market_desc#67, s_market_manager#68, s_division_id#69, s_division_name#70, s_company_id#71, s_company_name#72, s_street_number#73, s_street_name#74, s_street_type#75, s_suite_number#76, s_city#77, s_county#78, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -1076137142,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 410340188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13727062800,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] "
          },
          "30" : {
            "sign" : -1349469411,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5 "
          },
          "7" : {
            "sign" : -2059102709,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0 "
          },
          "29" : {
            "sign" : -1153399594,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 1800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#84], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : -1788779795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          },
          "28" : {
            "sign" : -1455903739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1052672,
            "rowCount" : 72,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#27], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n            :  +- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n            :     :- LogicalQueryStage Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#159, ca_city#165], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n               +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                  +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n                     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                     :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n                     :     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :  +- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n                     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n                     :     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#27]\n                     :     :     :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n                     :     :     :     :     :     +- Project [s_store_sk#55]\n                     :     :     :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n                     :     :     :     +- LogicalQueryStage Project [d_date_sk#27], BroadcastQueryStage 2\n                     :     :     +- LogicalQueryStage Project [hd_demo_sk#84], BroadcastQueryStage 3\n                     :     +- LogicalQueryStage Project [ca_address_sk#89, ca_city#95], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#55], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41980118398,
        "inputRowCount" : 278987349
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 29250.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 1284.0, 1381.0, 2788.0, 3947.0 ]
      },
      "StartTimeInMs" : 1702227230810,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22744,
        "IOBytes" : {
          "Total" : 509784396,
          "Details" : {
            "IR" : 176387023,
            "IW" : 0,
            "SR" : 173776463,
            "SW" : 159620910
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1571506421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 140711200,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 140711200,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] "
          },
          "1" : {
            "sign" : 770595619,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 156792480,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 156792480,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#106 = ca_address_sk#159) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n+- Join Inner, (c_current_addr_sk#106 = ca_address_sk#159)\n   :- Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111]\n   :  +- Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n   :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#102,c_customer_id#103,c_current_cdemo_sk#104,c_current_hdemo_sk#105,c_current_addr_sk#106,c_first_shipto_date_sk#107,c_first_sales_date_sk#108,c_salutation#109,c_first_name#110,c_last_name#111,c_preferred_cust_flag#112,c_birth_day#113,c_birth_month#114,c_birth_year#115,c_birth_country#116,c_login#117,c_email_address#118,c_last_review_date#119] parquet\n   +- Project [ca_address_sk#159, ca_city#165]\n      +- Filter (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165))\n         +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#159,ca_address_id#160,ca_street_number#161,ca_street_name#162,ca_street_type#163,ca_suite_number#164,ca_city#165,ca_county#166,ca_state#167,ca_zip#168,ca_country#169,ca_gmt_offset#170,ca_location_type#171] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -763552541,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#159, ca_city#165] Arguments: [ca_address_sk#159 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1344406923,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#159, ca_city#165] Arguments: 1 "
          },
          "1" : {
            "sign" : 111277814,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_current_addr_sk#106] Right keys [1]: [ca_address_sk#159] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1891548724,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] Input [6]: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111, ca_address_sk#159, ca_city#165] "
          },
          "2" : {
            "sign" : 329974400,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] Arguments: [c_current_addr_sk#106 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 270623998,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 112527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n+- SortMergeJoin [c_current_addr_sk#106], [ca_address_sk#159], Inner\n   :- Sort [c_current_addr_sk#106 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(c_current_addr_sk#106, 200), ENSURE_REQUIREMENTS, [plan_id=232]\n   :        +- *(1) Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#102,c_current_addr_sk#106,c_first_name#110,c_last_name#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#102), isnotnull(c_current_addr_sk#106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n   +- Sort [ca_address_sk#159 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(ca_address_sk#159, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n            +- *(2) Filter (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#159,ca_city#165] Batched: true, DataFilters: [isnotnull(ca_address_sk#159), isnotnull(ca_city#165)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 147744088,
        "inputRowCount" : 2970043
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "0" : [ 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 157015.0,
        "FinishedTasksDistributionInMs" : [ 530.0, 7883.0, 10024.0, 14707.0, 16834.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 3147,
        "TotalTasksDurationInMs" : 4066,
        "IOBytes" : {
          "Total" : 151054772,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 77627130,
            "SW" : 73427642
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 726157608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32011419,
                "rowCount" : 970043
              },
              "compileTime" : {
                "sizeInBytes" : 32011419,
                "rowCount" : 970043
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#159, ca_city#165] "
          },
          "1" : {
            "sign" : 64099144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 238630578,
                "rowCount" : 970043
              },
              "compileTime" : {
                "sizeInBytes" : 238630578,
                "rowCount" : 970043
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165)) "
          },
          "2" : {
            "sign" : 1212576561,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#159, ca_address_id#160, ca_street_number#161, ca_street_name#162, ca_street_type#163, ca_suite_number#164, ca_city#165, ca_county#166, ca_state#167, ca_zip#168, ca_country#169, ca_gmt_offset#170, ca_location_type#171], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#159, ca_city#165]\n+- Filter (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#159,ca_address_id#160,ca_street_number#161,ca_street_name#162,ca_street_type#163,ca_suite_number#164,ca_city#165,ca_county#166,ca_state#167,ca_zip#168,ca_country#169,ca_gmt_offset#170,ca_location_type#171] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 83210447,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#159, ca_city#165] Condition : (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165)) "
          },
          "1" : {
            "sign" : -124434824,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#159, ca_city#165] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)] ReadSchema: struct<ca_address_sk:int,ca_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165))\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#159,ca_city#165] Batched: true, DataFilters: [isnotnull(ca_address_sk#159), isnotnull(ca_city#165)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 32011419,
        "inputRowCount" : 970043
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 5667,
        "TotalTasksDurationInMs" : 6133,
        "IOBytes" : {
          "Total" : 19481446,
          "Details" : {
            "IR" : 5325893,
            "IW" : 0,
            "SR" : 0,
            "SW" : 14155553
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -706947158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7250144580000,
                "rowCount" : 57540830000
              },
              "compileTime" : {
                "sizeInBytes" : 7250144580000,
                "rowCount" : 57540830000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155)) "
          },
          "5" : {
            "sign" : 540178896,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 133018600,
                "rowCount" : 1940006
              },
              "compileTime" : {
                "sizeInBytes" : 140711200,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8 "
          },
          "1" : {
            "sign" : 611425465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              },
              "compileTime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1516541840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 2051402202,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              },
              "compileTime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -2078279195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              },
              "compileTime" : {
                "sizeInBytes" : 6789817940000,
                "rowCount" : 57540830000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], true\n      +- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n         +- Join Inner, ((ss_customer_sk#6 = c_customer_sk#102) AND NOT (ca_city#165 = bought_city#155))\n            :- LogicalQueryStage Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165], ShuffleQueryStage 8\n            +- LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1990909568,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 5242880,
            "rowCount" : 28625,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [6]: [ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158] Arguments: 10 "
          },
          "1" : {
            "sign" : 646810841,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6789817940000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] Input [10]: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165, ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158] "
          },
          "0" : {
            "sign" : -1036926742,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 12000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [8]: [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] Arguments: 100, [c_last_name#111 ASC NULLS FIRST, ss_ticket_number#12L ASC NULLS FIRST], [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157] "
          },
          "2" : {
            "sign" : -846631342,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7250144580000,
            "rowCount" : 57540830000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [c_customer_sk#102] Right keys [1]: [ss_customer_sk#6] Join type: Inner Join condition: NOT (ca_city#165 = bought_city#155) "
          },
          "3" : {
            "sign" : 1825815638,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[c_last_name#111 ASC NULLS FIRST,ss_ticket_number#12L ASC NULLS FIRST], output=[c_last_name#111,c_first_name#110,ca_city#165,bought_city#155,ss_ticket_number#12L,extended_price#156,extended_tax#158,list_price#157])\n+- Project [c_last_name#111, c_first_name#110, ca_city#165, bought_city#155, ss_ticket_number#12L, extended_price#156, extended_tax#158, list_price#157]\n   +- BroadcastHashJoin [c_customer_sk#102], [ss_customer_sk#6], Inner, BuildRight, NOT (ca_city#165 = bought_city#155), false\n      :- ShuffleQueryStage 8\n      :  +- Exchange hashpartitioning(c_customer_sk#102, 200), ENSURE_REQUIREMENTS, [plan_id=1083]\n      :     +- *(10) Project [c_customer_sk#102, c_first_name#110, c_last_name#111, ca_city#165]\n      :        +- *(10) SortMergeJoin [c_current_addr_sk#106], [ca_address_sk#159], Inner\n      :           :- *(8) Sort [c_current_addr_sk#106 ASC NULLS FIRST], false, 0\n      :           :  +- AQEShuffleRead coalesced\n      :           :     +- ShuffleQueryStage 0\n      :           :        +- Exchange hashpartitioning(c_current_addr_sk#106, 200), ENSURE_REQUIREMENTS, [plan_id=232]\n      :           :           +- *(1) Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n      :           :              +- *(1) ColumnarToRow\n      :           :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#102,c_current_addr_sk#106,c_first_name#110,c_last_name#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#102), isnotnull(c_current_addr_sk#106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n      :           +- *(9) Sort [ca_address_sk#159 ASC NULLS FIRST], false, 0\n      :              +- AQEShuffleRead coalesced\n      :                 +- ShuffleQueryStage 1\n      :                    +- Exchange hashpartitioning(ca_address_sk#159, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n      :                       +- *(2) Filter (isnotnull(ca_address_sk#159) AND isnotnull(ca_city#165))\n      :                          +- *(2) ColumnarToRow\n      :                             +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#159,ca_city#165] Batched: true, DataFilters: [isnotnull(ca_address_sk#159), isnotnull(ca_city#165)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n      +- BroadcastQueryStage 10\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=1236]\n            +- AQEShuffleRead local\n               +- ShuffleQueryStage 9\n                  +- Exchange hashpartitioning(ss_customer_sk#6, 200), ENSURE_REQUIREMENTS, [plan_id=1184]\n                     +- *(13) HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[sum(UnscaledValue(ss_ext_sales_price#18)), sum(UnscaledValue(ss_ext_list_price#20)), sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158])\n                        +- *(13) HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#18)), partial_sum(UnscaledValue(ss_ext_list_price#20)), partial_sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95, sum#191L, sum#192L, sum#193L])\n                           +- *(13) Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                              +- *(13) BroadcastHashJoin [ss_store_sk#10], [s_store_sk#55], Inner, BuildRight, false\n                                 :- *(13) Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n                                 :  +- *(13) SortMergeJoin [ss_addr_sk#9], [ca_address_sk#89], Inner\n                                 :     :- *(11) Sort [ss_addr_sk#9 ASC NULLS FIRST], false, 0\n                                 :     :  +- AQEShuffleRead coalesced\n                                 :     :     +- ShuffleQueryStage 7\n                                 :     :        +- Exchange hashpartitioning(ss_addr_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=843]\n                                 :     :           +- *(7) Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                                 :     :              +- *(7) BroadcastHashJoin [ss_hdemo_sk#8], [hd_demo_sk#84], Inner, BuildRight, false\n                                 :     :                 :- *(7) Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n                                 :     :                 :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight, false\n                                 :     :                 :     :- *(7) Filter ((((isnotnull(ss_store_sk#10) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND might_contain(Subquery subquery#187, [id=#128], xxhash64(ss_store_sk#10, 42)))\n                                 :     :                 :     :  :  +- Subquery subquery#187, [id=#128]\n                                 :     :                 :     :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                           +- == Final Plan ==\n                                                                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                                              +- ShuffleQueryStage 0\n                                                                                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=907]\n                                                                                    +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                                                       +- *(1) Project [s_store_sk#55]\n                                                                                          +- *(1) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                                                             +- *(1) ColumnarToRow\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                                                           +- == Initial Plan ==\n                                                                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                                              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n                                                                                 +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                                                    +- Project [s_store_sk#55]\n                                                                                       +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                 :     :                 :     :  +- *(7) ColumnarToRow\n                                 :     :                 :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#6,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_ticket_number#12L,ss_ext_sales_price#18,ss_ext_list_price#20,ss_ext_tax#21,ss_sold_date_sk#26] Batched: true, DataFilters: [isnotnull(ss_store_sk#10), isnotnull(ss_hdemo_sk#8), isnotnull(ss_addr_sk#9), isnotnull(ss_custo..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#184)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n                                 :     :                 :     :           +- SubqueryBroadcast dynamicpruning#184, 0, [d_date_sk#27], [id=#806]\n                                 :     :                 :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#27], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=803]\n                                                                                    +- Project [d_date_sk#27]\n                                                                                       +- Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n                                 :     :                 :     +- BroadcastQueryStage 2\n                                 :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                 :     :                 :           +- *(3) Project [d_date_sk#27]\n                                 :     :                 :              +- *(3) Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n                                 :     :                 :                 +- *(3) ColumnarToRow\n                                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n                                 :     :                 +- BroadcastQueryStage 3\n                                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n                                 :     :                       +- *(4) Project [hd_demo_sk#84]\n                                 :     :                          +- *(4) Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n                                 :     :                             +- *(4) ColumnarToRow\n                                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_dep_count#87,hd_vehicle_count#88] Batched: true, DataFilters: [((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)), isnotnull(hd_demo_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n                                 :     +- *(12) Sort [ca_address_sk#89 ASC NULLS FIRST], false, 0\n                                 :        +- AQEShuffleRead coalesced\n                                 :           +- ShuffleQueryStage 5\n                                 :              +- ReusedExchange [ca_address_sk#89, ca_city#95], Exchange hashpartitioning(ca_address_sk#159, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n                                 +- BroadcastQueryStage 6\n                                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=407]\n                                       +- *(6) Project [s_store_sk#55]\n                                          +- *(6) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                             +- *(6) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 138261480,
        "inputRowCount" : 1968631
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 639,
        "TotalTasksDurationInMs" : 957,
        "IOBytes" : {
          "Total" : 73427642,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 73427642,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 609439218,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21192947776,
                "rowCount" : 275233088
              },
              "compileTime" : {
                "sizeInBytes" : 21192947776,
                "rowCount" : 275233088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#9 = ca_address_sk#89) "
          },
          "1" : {
            "sign" : 249068779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39871859691,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 39871859691,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          },
          "0" : {
            "sign" : 1235277376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37560447535,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 37560447535,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158] "
          },
          "2" : {
            "sign" : 1358738339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 44494684003,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 44494684003,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#10 = s_store_sk#55) "
          },
          "3" : {
            "sign" : -485924623,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20092015424,
                "rowCount" : 275233088
              },
              "compileTime" : {
                "sizeInBytes" : 20092015424,
                "rowCount" : 275233088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158]\n+- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n   +- Join Inner, (ss_store_sk#10 = s_store_sk#55)\n      :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n      :  +- Join Inner, (ss_addr_sk#9 = ca_address_sk#89)\n      :     :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n      :     :  +- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n      :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n      :     :     :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n      :     :     :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n      :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42))))\n      :     :     :     :     :  :- Project [d_date_sk#27]\n      :     :     :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n      :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n      :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n      :     :     :     :     :     +- Project [s_store_sk#55]\n      :     :     :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n      :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n      :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n      :     :     :     +- Project [d_date_sk#27]\n      :     :     :        +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n      :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n      :     :     +- Project [hd_demo_sk#84]\n      :     :        +- Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n      :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_income_band_sk#85,hd_buy_potential#86,hd_dep_count#87,hd_vehicle_count#88] parquet\n      :     +- Project [ca_address_sk#89, ca_city#95]\n      :        +- Filter (isnotnull(ca_address_sk#89) AND isnotnull(ca_city#95))\n      :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#89,ca_address_id#90,ca_street_number#91,ca_street_name#92,ca_street_type#93,ca_suite_number#94,ca_city#95,ca_county#96,ca_state#97,ca_zip#98,ca_country#99,ca_gmt_offset#100,ca_location_type#101] parquet\n      +- Project [s_store_sk#55]\n         +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n            +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 567081394,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#89, ca_city#95] Arguments: [ca_address_sk#89 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -363168882,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 20092015424,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] Input [9]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_address_sk#89, ca_city#95] "
          },
          "9" : {
            "sign" : 612600278,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#89, ca_city#95] Arguments: 5 "
          },
          "5" : {
            "sign" : 1726013083,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 21192947776,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_addr_sk#9] Right keys [1]: [ca_address_sk#89] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : 319535921,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051696,
            "rowCount" : 38,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [s_store_sk#55] Arguments: 6 "
          },
          "6" : {
            "sign" : 932685049,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] Arguments: [ss_addr_sk#9 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 549836487,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 37560447535,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [7]: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] Keys [4]: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95] Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#18)), partial_sum(UnscaledValue(ss_ext_list_price#20)), partial_sum(UnscaledValue(ss_ext_tax#21))] Aggregate Attributes [3]: [sum#188L, sum#189L, sum#190L] Results [7]: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95, sum#191L, sum#192L, sum#193L] "
          },
          "0" : {
            "sign" : 1093569673,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 37560447535,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [7]: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95, sum#191L, sum#192L, sum#193L] Keys [4]: [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95] Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#18)), sum(UnscaledValue(ss_ext_list_price#20)), sum(UnscaledValue(ss_ext_tax#21))] Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#18))#172L, sum(UnscaledValue(ss_ext_list_price#20))#173L, sum(UnscaledValue(ss_ext_tax#21))#174L] Results [6]: [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18))#172L,17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20))#173L,17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21))#174L,17,2) AS extended_tax#158] "
          },
          "2" : {
            "sign" : -396079530,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 39871859691,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95] Input [9]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95, s_store_sk#55] "
          },
          "7" : {
            "sign" : -30010370,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 20697664,
            "rowCount" : 323401,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] Arguments: 7 "
          },
          "3" : {
            "sign" : -788877656,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 44494684003,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#10] Right keys [1]: [s_store_sk#55] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[sum(UnscaledValue(ss_ext_sales_price#18)), sum(UnscaledValue(ss_ext_list_price#20)), sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158])\n+- HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#18)), partial_sum(UnscaledValue(ss_ext_list_price#20)), partial_sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95, sum#191L, sum#192L, sum#193L])\n   +- Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n      +- BroadcastHashJoin [ss_store_sk#10], [s_store_sk#55], Inner, BuildRight, false\n         :- Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n         :  +- SortMergeJoin [ss_addr_sk#9], [ca_address_sk#89], Inner\n         :     :- Sort [ss_addr_sk#9 ASC NULLS FIRST], false, 0\n         :     :  +- ShuffleQueryStage 7\n         :     :     +- Exchange hashpartitioning(ss_addr_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=843]\n         :     :        +- *(7) Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n         :     :           +- *(7) BroadcastHashJoin [ss_hdemo_sk#8], [hd_demo_sk#84], Inner, BuildRight, false\n         :     :              :- *(7) Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n         :     :              :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight, false\n         :     :              :     :- *(7) Filter ((((isnotnull(ss_store_sk#10) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND might_contain(Subquery subquery#187, [id=#128], xxhash64(ss_store_sk#10, 42)))\n         :     :              :     :  :  +- Subquery subquery#187, [id=#128]\n         :     :              :     :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                   +- ShuffleQueryStage 0\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=907]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                            +- *(1) Project [s_store_sk#55]\n                                                               +- *(1) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                                  +- *(1) ColumnarToRow\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                                +- == Initial Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                         +- Project [s_store_sk#55]\n                                                            +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n         :     :              :     :  +- *(7) ColumnarToRow\n         :     :              :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#6,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_ticket_number#12L,ss_ext_sales_price#18,ss_ext_list_price#20,ss_ext_tax#21,ss_sold_date_sk#26] Batched: true, DataFilters: [isnotnull(ss_store_sk#10), isnotnull(ss_hdemo_sk#8), isnotnull(ss_addr_sk#9), isnotnull(ss_custo..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#184)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n         :     :              :     :           +- SubqueryBroadcast dynamicpruning#184, 0, [d_date_sk#27], [id=#806]\n         :     :              :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#27], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=803]\n                                                         +- Project [d_date_sk#27]\n                                                            +- Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n         :     :              :     +- BroadcastQueryStage 2\n         :     :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n         :     :              :           +- *(3) Project [d_date_sk#27]\n         :     :              :              +- *(3) Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n         :     :              :                 +- *(3) ColumnarToRow\n         :     :              :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n         :     :              +- BroadcastQueryStage 3\n         :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n         :     :                    +- *(4) Project [hd_demo_sk#84]\n         :     :                       +- *(4) Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n         :     :                          +- *(4) ColumnarToRow\n         :     :                             +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_dep_count#87,hd_vehicle_count#88] Batched: true, DataFilters: [((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)), isnotnull(hd_demo_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n         :     +- Sort [ca_address_sk#89 ASC NULLS FIRST], false, 0\n         :        +- ShuffleQueryStage 5\n         :           +- ReusedExchange [ca_address_sk#89, ca_city#95], Exchange hashpartitioning(ca_address_sk#159, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n         +- BroadcastQueryStage 6\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=407]\n               +- *(6) Project [s_store_sk#55]\n                  +- *(6) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                     +- *(6) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56965600,
        "inputRowCount" : 1293482
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "3" : [ 39373, 37353, 40899, 35538, 37167, 39453, 39031, 41372, 37859, 40552, 40735, 40572, 44648, 40637, 37899, 37296, 37733, 41160, 45094, 36402, 38400, 42152, 39861, 35644, 40484, 37557, 33365, 40895, 40888, 36655, 39922, 34064, 36195, 37207, 34600, 38545, 35564, 38051, 37739, 39818, 36820, 37524, 38087, 35140, 37777, 40766, 41153, 39823, 39602, 39805, 38861, 36276, 41721, 38041, 35607, 38860, 41251, 39828, 35131, 40375, 33922, 39930, 37509, 37695, 40071, 34049, 39621, 40041, 42724, 42197, 37865, 33837, 40778, 48020, 38293, 38830, 38276, 38641, 37140, 43502, 36419, 40860, 41273, 32567, 34961, 44204, 38632, 38535, 37961, 46641, 36677, 38385, 36736, 38086, 41299, 40155, 43832, 39287, 40948, 40847, 39824, 39886, 39731, 40973, 35943, 40004, 39240, 44004, 35589, 37889, 40525, 30031, 37227, 40384, 42934, 37701, 37428, 39331, 45655, 38613, 33703, 44704, 38795, 41499, 39875, 38423, 41060, 35534, 35386, 35613, 43551, 43301, 37932, 36410, 40616, 35085, 38218, 38728, 32072, 38132, 40335, 40037, 41213, 41422, 39708, 38310, 41143, 38822, 36688, 41445, 41208, 41240, 38639, 35029, 41166, 30807, 34924, 36289, 39104, 38624, 36298, 34066, 36329, 34579, 41736, 33778, 44085, 39746, 43241, 39920, 42846, 43184, 42631, 43756, 41224, 38910, 37064, 36390, 39451, 38358, 39268, 39841, 40398, 32679, 41144, 34306, 41955, 36088, 34569, 32486, 41857, 38653, 39406, 37704, 38607, 33016, 39249, 36783, 40689, 38334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 1336,
        "TotalTasksDurationInMs" : 1325,
        "IOBytes" : {
          "Total" : 22721442,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 21553824,
            "SW" : 1167618
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 329531539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n+- Project [s_store_sk#55]\n   +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n      +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -351333725,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [s_store_sk#55] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)] Aggregate Attributes [1]: [buf#194] Results [1]: [buf#195] "
          },
          "1" : {
            "sign" : -59180982,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#55] Input [2]: [s_store_sk#55, s_city#77] "
          },
          "2" : {
            "sign" : 1765304156,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#55, s_city#77] Condition : (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "3" : {
            "sign" : 282141151,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#55, s_city#77] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n+- Project [s_store_sk#55]\n   +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 540,
        "inputRowCount" : 45
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 29250.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 1284.0, 1381.0, 2788.0, 3947.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 682,
        "TotalTasksDurationInMs" : 649,
        "IOBytes" : {
          "Total" : 15085,
          "Details" : {
            "IR" : 14836,
            "IW" : 0,
            "SR" : 0,
            "SW" : 249
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 570436686,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1954528,
                "rowCount" : 28625
              },
              "compileTime" : {
                "sizeInBytes" : 37560447535,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], [ss_ticket_number#12L, ss_customer_sk#6, ca_city#95 AS bought_city#155, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18)),17,2) AS extended_price#156, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#20)),17,2) AS list_price#157, MakeDecimal(sum(UnscaledValue(ss_ext_tax#21)),17,2) AS extended_tax#158], ShuffleQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1828746562,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1954528,
            "rowCount" : 28625,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158] Arguments: 9 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 9\n+- Exchange hashpartitioning(ss_customer_sk#6, 200), ENSURE_REQUIREMENTS, [plan_id=1184]\n   +- *(13) HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[sum(UnscaledValue(ss_ext_sales_price#18)), sum(UnscaledValue(ss_ext_list_price#20)), sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, bought_city#155, extended_price#156, list_price#157, extended_tax#158])\n      +- *(13) HashAggregate(keys=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#18)), partial_sum(UnscaledValue(ss_ext_list_price#20)), partial_sum(UnscaledValue(ss_ext_tax#21))], output=[ss_ticket_number#12L, ss_customer_sk#6, ss_addr_sk#9, ca_city#95, sum#191L, sum#192L, sum#193L])\n         +- *(13) Project [ss_customer_sk#6, ss_addr_sk#9, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n            +- *(13) BroadcastHashJoin [ss_store_sk#10], [s_store_sk#55], Inner, BuildRight, false\n               :- *(13) Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ca_city#95]\n               :  +- *(13) SortMergeJoin [ss_addr_sk#9], [ca_address_sk#89], Inner\n               :     :- *(11) Sort [ss_addr_sk#9 ASC NULLS FIRST], false, 0\n               :     :  +- AQEShuffleRead coalesced\n               :     :     +- ShuffleQueryStage 7\n               :     :        +- Exchange hashpartitioning(ss_addr_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=843]\n               :     :           +- *(7) Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n               :     :              +- *(7) BroadcastHashJoin [ss_hdemo_sk#8], [hd_demo_sk#84], Inner, BuildRight, false\n               :     :                 :- *(7) Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n               :     :                 :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight, false\n               :     :                 :     :- *(7) Filter ((((isnotnull(ss_store_sk#10) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND might_contain(Subquery subquery#187, [id=#128], xxhash64(ss_store_sk#10, 42)))\n               :     :                 :     :  :  +- Subquery subquery#187, [id=#128]\n               :     :                 :     :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=907]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                                     +- *(1) Project [s_store_sk#55]\n                                                                        +- *(1) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n                                                                  +- Project [s_store_sk#55]\n                                                                     +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n               :     :                 :     :  +- *(7) ColumnarToRow\n               :     :                 :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#6,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_ticket_number#12L,ss_ext_sales_price#18,ss_ext_list_price#20,ss_ext_tax#21,ss_sold_date_sk#26] Batched: true, DataFilters: [isnotnull(ss_store_sk#10), isnotnull(ss_hdemo_sk#8), isnotnull(ss_addr_sk#9), isnotnull(ss_custo..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#184)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n               :     :                 :     :           +- SubqueryBroadcast dynamicpruning#184, 0, [d_date_sk#27], [id=#806]\n               :     :                 :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  BroadcastQueryStage 1\n                                                                  +- ReusedExchange [d_date_sk#27], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                                               +- == Initial Plan ==\n                                                                  BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=803]\n                                                                  +- Project [d_date_sk#27]\n                                                                     +- Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n               :     :                 :     +- BroadcastQueryStage 2\n               :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n               :     :                 :           +- *(3) Project [d_date_sk#27]\n               :     :                 :              +- *(3) Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n               :     :                 :                 +- *(3) ColumnarToRow\n               :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n               :     :                 +- BroadcastQueryStage 3\n               :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n               :     :                       +- *(4) Project [hd_demo_sk#84]\n               :     :                          +- *(4) Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n               :     :                             +- *(4) ColumnarToRow\n               :     :                                +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_dep_count#87,hd_vehicle_count#88] Batched: true, DataFilters: [((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)), isnotnull(hd_demo_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n               :     +- *(12) Sort [ca_address_sk#89 ASC NULLS FIRST], false, 0\n               :        +- AQEShuffleRead coalesced\n               :           +- ShuffleQueryStage 5\n               :              +- ReusedExchange [ca_address_sk#89, ca_city#95], Exchange hashpartitioning(ca_address_sk#159, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n               +- BroadcastQueryStage 6\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=407]\n                     +- *(6) Project [s_store_sk#55]\n                        +- *(6) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n                           +- *(6) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1954528,
        "inputRowCount" : 28625
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 7071, 7778, 5844, 6428, 5844, 6428, 5313, 6428, 6428, 6428, 5844, 5844, 5844, 5844, 5844, 6428, 7071, 7071, 6428, 6428, 5844, 7071, 5844, 5844, 5844, 5844, 5313, 7071, 6428, 5844, 6428, 5844, 5844, 5844, 6428, 5844, 5313, 6428, 5844, 6428, 5844, 5844, 6428, 5313, 5844, 5844, 5844, 5313, 6428, 5844, 5844, 7071, 5844, 6428, 6428, 5313, 5844, 5844, 6428, 6428, 5844, 6428, 6428, 5844, 6428, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 6428, 7778, 5844, 6428, 5313, 5844, 6428, 5313, 6428, 6428, 5844, 5313, 7071, 5313, 5844, 5844, 7071, 5844, 7071, 7071, 6428, 6428, 6428, 6428, 5844, 7071, 5313, 7071, 6428, 5844, 5313, 6428, 5844, 5313, 5844, 5844, 5844, 5313, 5844, 5844, 6428, 6428, 5844, 5313, 6428, 6428, 7071, 5844, 7071, 6428, 5313, 7071, 5844, 6428, 5313, 6428, 5313, 5844, 5844, 6428, 4830, 7071, 5844, 5844, 6428, 5313, 7071, 6428, 5844, 6428, 6428, 6428, 6428, 7071, 5313, 5844, 6428, 5844, 5844, 5844, 6428, 6428, 5844, 5844, 6428, 5844, 6428, 5313, 5313, 5313, 6428, 5844, 6428, 6428, 6428, 5844, 5844, 5844, 5844, 5844, 5844, 5844, 5313, 6428, 5844, 6428, 6428, 6428, 6428, 7071, 6428, 5844, 6428, 6428, 5313, 6428, 6428, 6428, 6428, 7071, 6428, 6428, 5844, 6428, 7071, 5844, 6428 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 928.0,
        "FinishedTasksDistributionInMs" : [ 928.0, 928.0, 928.0, 928.0, 928.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 99,
        "TotalTasksDurationInMs" : 94,
        "IOBytes" : {
          "Total" : 1167618,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1167618,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1692873005,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1319106917,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 208,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#195] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)#185] Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)#185 AS bloomFilter#186] "
          },
          "1" : {
            "sign" : 1253240948,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#195] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=907]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n         +- *(1) Project [s_store_sk#55]\n            +- *(1) Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 251 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 18,
        "FinishedTasksTotalTimeInMs" : 34050.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 1284.0, 1481.0, 2854.0, 4800.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 361,
        "TotalTasksDurationInMs" : 345,
        "IOBytes" : {
          "Total" : 249,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 249,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1430953660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21984,
                "rowCount" : 1832
              },
              "compileTime" : {
                "sizeInBytes" : 21984,
                "rowCount" : 1832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [hd_demo_sk#84] "
          },
          "1" : {
            "sign" : 355097791,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80608,
                "rowCount" : 1832
              },
              "compileTime" : {
                "sizeInBytes" : 80608,
                "rowCount" : 1832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84)) "
          },
          "2" : {
            "sign" : -199355329,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              },
              "compileTime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#84, hd_income_band_sk#85, hd_buy_potential#86, hd_dep_count#87, hd_vehicle_count#88], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#84]\n+- Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n   +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_income_band_sk#85,hd_buy_potential#86,hd_dep_count#87,hd_vehicle_count#88] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -684031081,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [hd_demo_sk#84] Input [3]: [hd_demo_sk#84, hd_dep_count#87, hd_vehicle_count#88] "
          },
          "1" : {
            "sign" : 383362770,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [hd_demo_sk#84, hd_dep_count#87, hd_vehicle_count#88] Condition : (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84)) "
          },
          "2" : {
            "sign" : 270384722,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.household_demographics Output [3]: [hd_demo_sk#84, hd_dep_count#87, hd_vehicle_count#88] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household_demographics] PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)] ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.household_demographics",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#84]\n+- Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n   +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_dep_count#87,hd_vehicle_count#88] Batched: true, DataFilters: [((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)), isnotnull(hd_demo_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 21984,
        "inputRowCount" : 1832
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1872,
        "TotalTasksDurationInMs" : 605,
        "IOBytes" : {
          "Total" : 31739,
          "Details" : {
            "IR" : 31739,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -929710994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 876,
                "rowCount" : 73
              },
              "compileTime" : {
                "sizeInBytes" : 876,
                "rowCount" : 73
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#27] "
          },
          "1" : {
            "sign" : -419243679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17958,
                "rowCount" : 73
              },
              "compileTime" : {
                "sizeInBytes" : 17958,
                "rowCount" : 73
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27)) "
          },
          "2" : {
            "sign" : 1120105147,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#27, d_date_id#28, d_date#29, d_month_seq#30, d_week_seq#31, d_quarter_seq#32, d_year#33, d_dow#34, d_moy#35, d_dom#36, d_qoy#37, d_fy_year#38, d_fy_quarter_seq#39, d_fy_week_seq#40, d_day_name#41, d_quarter_name#42, d_holiday#43, d_weekend#44, d_following_holiday#45, d_first_dom#46, d_last_dom#47, d_same_day_ly#48, d_same_day_lq#49, d_current_day#50, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#27]\n+- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 902979827,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#27] Input [3]: [d_date_sk#27, d_year#33, d_dom#36] "
          },
          "1" : {
            "sign" : -421905188,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#27, d_year#33, d_dom#36] Condition : ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27)) "
          },
          "2" : {
            "sign" : 1133634084,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 876,
            "rowCount" : 73,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#27, d_year#33, d_dom#36] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#27]\n+- Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 876,
        "inputRowCount" : 73
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4510,
        "TotalTasksDurationInMs" : 3246,
        "IOBytes" : {
          "Total" : 95103,
          "Details" : {
            "IR" : 95103,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1135016761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 540,
                "rowCount" : 45
              },
              "compileTime" : {
                "sizeInBytes" : 540,
                "rowCount" : 45
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#55] "
          },
          "1" : {
            "sign" : -1234400053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21555,
                "rowCount" : 45
              },
              "compileTime" : {
                "sizeInBytes" : 21555,
                "rowCount" : 45
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "2" : {
            "sign" : 2066238734,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#55, s_store_id#56, s_rec_start_date#57, s_rec_end_date#58, s_closed_date_sk#59, s_store_name#60, s_number_employees#61, s_floor_space#62, s_hours#63, s_manager#64, s_market_id#65, s_geography_class#66, s_market_desc#67, s_market_manager#68, s_division_id#69, s_division_name#70, s_company_id#71, s_company_name#72, s_street_number#73, s_street_name#74, s_street_type#75, s_suite_number#76, s_city#77, s_county#78, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#55]\n+- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -59180982,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#55] Input [2]: [s_store_sk#55, s_city#77] "
          },
          "1" : {
            "sign" : 1765304156,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#55, s_city#77] Condition : (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55)) "
          },
          "2" : {
            "sign" : 282141151,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 540,
            "rowCount" : 45,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#55, s_city#77] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#55]\n+- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 540,
        "inputRowCount" : 45
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1703,
        "TotalTasksDurationInMs" : 456,
        "IOBytes" : {
          "Total" : 14836,
          "Details" : {
            "IR" : 14836,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 410340188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13727062800,
                "rowCount" : 228784380
              },
              "compileTime" : {
                "sizeInBytes" : 13727062800,
                "rowCount" : 228784380
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] "
          },
          "5" : {
            "sign" : -611813032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34775225760,
                "rowCount" : 228784380
              },
              "compileTime" : {
                "sizeInBytes" : 34775225760,
                "rowCount" : 228784380
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42)))) "
          },
          "6" : {
            "sign" : 1769386681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_cdemo_sk#7, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_promo_sk#11, ss_ticket_number#12L, ss_quantity#13, ss_wholesale_cost#14, ss_list_price#15, ss_sales_price#16, ss_ext_discount_amt#17, ss_ext_sales_price#18, ss_ext_wholesale_cost#19, ss_ext_list_price#20, ss_ext_tax#21, ss_coupon_amt#22, ss_net_paid#23, ss_net_paid_inc_tax#24, ss_net_profit#25, ss_sold_date_sk#26], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 922712050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16297837500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 16297837500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#8 = hd_demo_sk#84) "
          },
          "0" : {
            "sign" : 804030706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "2" : {
            "sign" : -388108613,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] "
          },
          "3" : {
            "sign" : 1637374041,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16994597440,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 16994597440,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#26 = d_date_sk#27) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalRelation",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n+- Join Inner, (ss_hdemo_sk#8 = hd_demo_sk#84)\n   :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n   :  +- Join Inner, (ss_sold_date_sk#26 = d_date_sk#27)\n   :     :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26]\n   :     :  +- Filter (((((isnotnull(ss_sold_date_sk#26) AND isnotnull(ss_store_sk#10)) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND (dynamicpruning#184 [ss_sold_date_sk#26] AND might_contain(scalar-subquery#187 [], xxhash64(ss_store_sk#10, 42))))\n   :     :     :  :- Project [d_date_sk#27]\n   :     :     :  :  +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n   :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n   :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0) AS bloomFilter#186]\n   :     :     :     +- Project [s_store_sk#55]\n   :     :     :        +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n   :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#55,s_store_id#56,s_rec_start_date#57,s_rec_end_date#58,s_closed_date_sk#59,s_store_name#60,s_number_employees#61,s_floor_space#62,s_hours#63,s_manager#64,s_market_id#65,s_geography_class#66,s_market_desc#67,s_market_manager#68,s_division_id#69,s_division_name#70,s_company_id#71,s_company_name#72,s_street_number#73,s_street_name#74,s_street_type#75,s_suite_number#76,s_city#77,s_county#78,... 5 more fields] parquet\n   :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#4,ss_item_sk#5,ss_customer_sk#6,ss_cdemo_sk#7,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_promo_sk#11,ss_ticket_number#12L,ss_quantity#13,ss_wholesale_cost#14,ss_list_price#15,ss_sales_price#16,ss_ext_discount_amt#17,ss_ext_sales_price#18,ss_ext_wholesale_cost#19,ss_ext_list_price#20,ss_ext_tax#21,ss_coupon_amt#22,ss_net_paid#23,ss_net_paid_inc_tax#24,ss_net_profit#25,ss_sold_date_sk#26] parquet\n   :     +- Project [d_date_sk#27]\n   :        +- Filter ((isnotnull(d_dom#36) AND (((d_dom#36 >= 1) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001))) AND isnotnull(d_date_sk#27))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_date_id#28,d_date#29,d_month_seq#30,d_week_seq#31,d_quarter_seq#32,d_year#33,d_dow#34,d_moy#35,d_dom#36,d_qoy#37,d_fy_year#38,d_fy_quarter_seq#39,d_fy_week_seq#40,d_day_name#41,d_quarter_name#42,d_holiday#43,d_weekend#44,d_following_holiday#45,d_first_dom#46,d_last_dom#47,d_same_day_ly#48,d_same_day_lq#49,d_current_day#50,... 4 more fields] parquet\n   +- Project [hd_demo_sk#84]\n      +- Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n         +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_income_band_sk#85,hd_buy_potential#86,hd_dep_count#87,hd_vehicle_count#88] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1253535521,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 13727062800,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] Condition : ((((isnotnull(ss_store_sk#10) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND might_contain(Subquery subquery#187, [id=#128], xxhash64(ss_store_sk#10, 42))) "
          },
          "5" : {
            "sign" : 1295440479,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 13727062800,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [9]: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#184)] PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)> "
          },
          "6" : {
            "sign" : -917081423,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1052672,
            "rowCount" : 72,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#27] Arguments: 2 "
          },
          "1" : {
            "sign" : 983560032,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 16297837500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_hdemo_sk#8] Right keys [1]: [hd_demo_sk#84] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -475616830,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] Input [9]: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, hd_demo_sk#84] "
          },
          "2" : {
            "sign" : 1245798641,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21] Input [10]: [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21, ss_sold_date_sk#26, d_date_sk#27] "
          },
          "7" : {
            "sign" : 734277774,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1097536,
            "rowCount" : 1800,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [hd_demo_sk#84] Arguments: 3 "
          },
          "3" : {
            "sign" : 166836717,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 16994597440,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#26] Right keys [1]: [d_date_sk#27] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#6, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n+- BroadcastHashJoin [ss_hdemo_sk#8], [hd_demo_sk#84], Inner, BuildRight, false\n   :- Project [ss_customer_sk#6, ss_hdemo_sk#8, ss_addr_sk#9, ss_store_sk#10, ss_ticket_number#12L, ss_ext_sales_price#18, ss_ext_list_price#20, ss_ext_tax#21]\n   :  +- BroadcastHashJoin [ss_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight, false\n   :     :- Filter ((((isnotnull(ss_store_sk#10) AND isnotnull(ss_hdemo_sk#8)) AND isnotnull(ss_addr_sk#9)) AND isnotnull(ss_customer_sk#6)) AND might_contain(Subquery subquery#187, [id=#128], xxhash64(ss_store_sk#10, 42)))\n   :     :  :  +- Subquery subquery#187, [id=#128]\n   :     :  :     +- AdaptiveSparkPlan isFinalPlan=false\n   :     :  :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[bloomFilter#186])\n   :     :  :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n   :     :  :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#55, 42), 45, 1395, 0, 0)], output=[buf#195])\n   :     :  :                 +- Project [s_store_sk#55]\n   :     :  :                    +- Filter (s_city#77 IN (Oakland,Riverside) AND isnotnull(s_store_sk#55))\n   :     :  :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#55,s_city#77] Batched: true, DataFilters: [s_city#77 IN (Oakland,Riverside), isnotnull(s_store_sk#55)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Oakland,Riverside]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n   :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#6,ss_hdemo_sk#8,ss_addr_sk#9,ss_store_sk#10,ss_ticket_number#12L,ss_ext_sales_price#18,ss_ext_list_price#20,ss_ext_tax#21,ss_sold_date_sk#26] Batched: true, DataFilters: [isnotnull(ss_store_sk#10), isnotnull(ss_hdemo_sk#8), isnotnull(ss_addr_sk#9), isnotnull(ss_custo..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#184)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n   :     :        +- SubqueryBroadcast dynamicpruning#184, 0, [d_date_sk#27], [id=#806]\n   :     :           +- AdaptiveSparkPlan isFinalPlan=false\n   :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=803]\n   :     :                 +- Project [d_date_sk#27]\n   :     :                    +- Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n   :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n   :           +- *(3) Project [d_date_sk#27]\n   :              +- *(3) Filter ((((isnotnull(d_dom#36) AND (d_dom#36 >= 1)) AND (d_dom#36 <= 2)) AND d_year#33 IN (1999,2000,2001)) AND isnotnull(d_date_sk#27))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#27,d_year#33,d_dom#36] Batched: true, DataFilters: [isnotnull(d_dom#36), (d_dom#36 >= 1), (d_dom#36 <= 2), d_year#33 IN (1999,2000,2001), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2..., ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n         +- *(4) Project [hd_demo_sk#84]\n            +- *(4) Filter (((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)) AND isnotnull(hd_demo_sk#84))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#84,hd_dep_count#87,hd_vehicle_count#88] Batched: true, DataFilters: [((hd_dep_count#87 = 6) OR (hd_vehicle_count#88 = 3)), isnotnull(hd_demo_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13729213008,
        "inputRowCount" : 228786252
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 29250.0,
        "FinishedTasksDistributionInMs" : [ 29.0, 1284.0, 1381.0, 2788.0, 3947.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 17801,
        "TotalTasksDurationInMs" : 192330,
        "IOBytes" : {
          "Total" : 155657576,
          "Details" : {
            "IR" : 148259305,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7398271
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1132319224,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 106000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 106000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] "
          },
          "1" : {
            "sign" : 1891196123,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106)) "
          },
          "2" : {
            "sign" : 85726556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#102, c_customer_id#103, c_current_cdemo_sk#104, c_current_hdemo_sk#105, c_current_addr_sk#106, c_first_shipto_date_sk#107, c_first_sales_date_sk#108, c_salutation#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_day#113, c_birth_month#114, c_birth_year#115, c_birth_country#116, c_login#117, c_email_address#118, c_last_review_date#119], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111]\n+- Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#102,c_customer_id#103,c_current_cdemo_sk#104,c_current_hdemo_sk#105,c_current_addr_sk#106,c_first_shipto_date_sk#107,c_first_sales_date_sk#108,c_salutation#109,c_first_name#110,c_last_name#111,c_preferred_cust_flag#112,c_birth_day#113,c_birth_month#114,c_birth_year#115,c_birth_country#116,c_login#117,c_email_address#118,c_last_review_date#119] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1804616913,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] Condition : (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106)) "
          },
          "1" : {
            "sign" : -542511790,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [4]: [c_customer_sk#102, c_current_addr_sk#106, c_first_name#110, c_last_name#111] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)] ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#102) AND isnotnull(c_current_addr_sk#106))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#102,c_current_addr_sk#106,c_first_name#110,c_last_name#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#102), isnotnull(c_current_addr_sk#106)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 106000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 23288,
        "TotalTasksDurationInMs" : 61706,
        "IOBytes" : {
          "Total" : 86258566,
          "Details" : {
            "IR" : 22786989,
            "IW" : 0,
            "SR" : 0,
            "SW" : 63471577
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227225441,
  "SQLEndTimeInMs" : 1702227253554,
  "Objectives" : {
    "DurationInMs" : 28113,
    "IOBytes" : {
      "Total" : 509926074,
      "Details" : {
        "IR" : 176528701,
        "IW" : 0,
        "SR" : 173776463,
        "SW" : 159620910
      }
    }
  }
}
