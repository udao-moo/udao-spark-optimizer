{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : 1029737199,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3324390288,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] "
        },
        "12" : {
          "sign" : 333249911,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9559461060,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
        },
        "8" : {
          "sign" : 870887512,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 125394109463,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
        },
        "19" : {
          "sign" : 757488456,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 905486313,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 22512,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#108, s_store_id#109, s_store_name#113] "
        },
        "4" : {
          "sign" : 1591536241,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
        },
        "40" : {
          "sign" : 1053646635,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 83640,
          "rowCount" : 340,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#195) AND isnotnull(d_year#193)) AND (((d_moy#195 >= 4) AND (d_moy#195 <= 10)) AND (d_year#193 = 2000))) AND isnotnull(d_date_sk#187)) "
        },
        "15" : {
          "sign" : -1972014065,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 38129799488,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#233 [ss_sold_date_sk#25]) "
        },
        "11" : {
          "sign" : 2134431307,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 51993683701,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
        },
        "9" : {
          "sign" : -394680588,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 130016933775,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
        },
        "33" : {
          "sign" : 15522791,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#159, d_date_id#160, d_date#161, d_month_seq#162, d_week_seq#163, d_quarter_seq#164, d_year#165, d_dow#166, d_moy#167, d_dom#168, d_qoy#169, d_fy_year#170, d_fy_quarter_seq#171, d_fy_week_seq#172, d_day_name#173, d_quarter_name#174, d_holiday#175, d_weekend#176, d_following_holiday#177, d_first_dom#178, d_last_dom#179, d_same_day_ly#180, d_same_day_lq#181, d_current_day#182, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 56198239,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#137, i_item_id#138, i_rec_start_date#139, i_rec_end_date#140, i_item_desc#141, i_current_price#142, i_wholesale_cost#143, i_brand_id#144, i_brand#145, i_class_id#146, i_class#147, i_category_id#148, i_category#149, i_manufact_id#150, i_manufact#151, i_size#152, i_formulation#153, i_color#154, i_units#155, i_container#156, i_manager_id#157, i_product_name#158], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 624405626,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 862585440,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] "
        },
        "37" : {
          "sign" : 402010244,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651732864,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#235 [cs_sold_date_sk#79]) "
        },
        "13" : {
          "sign" : 59601451,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11683785740,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
        },
        "24" : {
          "sign" : 1662377663,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#108) "
        },
        "35" : {
          "sign" : -399220144,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#187) "
        },
        "16" : {
          "sign" : -628374504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -1686732952,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 463375330958,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
        },
        "10" : {
          "sign" : -1410932629,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 50844652017,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
        },
        "21" : {
          "sign" : 753925474,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#137) "
        },
        "32" : {
          "sign" : 1120199486,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 83640,
          "rowCount" : 340,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 10)) AND (d_year#165 = 2000))) AND isnotnull(d_date_sk#159)) "
        },
        "6" : {
          "sign" : -2009678115,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 75402965785,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
        },
        "36" : {
          "sign" : -1178580155,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3991579424,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] "
        },
        "1" : {
          "sign" : -884586475,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 663393259,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4080,
          "rowCount" : 340,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#187] "
        },
        "17" : {
          "sign" : -488425942,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
        },
        "25" : {
          "sign" : -1717782204,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#108, s_store_id#109, s_rec_start_date#110, s_rec_end_date#111, s_closed_date_sk#112, s_store_name#113, s_number_employees#114, s_floor_space#115, s_hours#116, s_manager#117, s_market_id#118, s_geography_class#119, s_market_desc#120, s_market_manager#121, s_division_id#122, s_division_name#123, s_company_id#124, s_company_name#125, s_street_number#126, s_street_name#127, s_street_type#128, s_suite_number#129, s_city#130, s_county#131, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 1876283322,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10034157760,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
        },
        "31" : {
          "sign" : -474095023,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4080,
          "rowCount" : 340,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#159] "
        },
        "0" : {
          "sign" : 1200439158,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 11200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1585649225,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31212000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#137, i_item_id#138, i_item_desc#141] "
        },
        "27" : {
          "sign" : 163330977,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1078231800,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#159) "
        },
        "2" : {
          "sign" : 1759631308,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -2002916628,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : 2093141778,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
        },
        "30" : {
          "sign" : 58525475,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -237590055,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 83742464305,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
        },
        "29" : {
          "sign" : 92468494,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433101696,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#234 [sr_returned_date_sk#45]) "
        },
        "41" : {
          "sign" : 1567725832,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#187, d_date_id#188, d_date#189, d_month_seq#190, d_week_seq#191, d_quarter_seq#192, d_year#193, d_dow#194, d_moy#195, d_dom#196, d_qoy#197, d_fy_year#198, d_fy_quarter_seq#199, d_fy_week_seq#200, d_day_name#201, d_quarter_name#202, d_holiday#203, d_weekend#204, d_following_holiday#205, d_first_dom#206, d_last_dom#207, d_same_day_ly#208, d_same_day_lq#209, d_current_day#210, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 366900033,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#0, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#1, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#2] "
        },
        "28" : {
          "sign" : -264916210,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 965559852,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Join",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#0, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#1, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#2]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#233 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- Project [d_date_sk#80]\n               :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n               :     :     :        +- Filter isnotnull(i_item_sk#137)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n               :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n               :     :        +- Filter isnotnull(s_store_sk#108)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#159)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#234 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#159]\n               :           :     :     +- Filter (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 10)) AND (d_year#165 = 2000))) AND isnotnull(d_date_sk#159))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#159,d_date_id#160,d_date#161,d_month_seq#162,d_week_seq#163,d_quarter_seq#164,d_year#165,d_dow#166,d_moy#167,d_dom#168,d_qoy#169,d_fy_year#170,d_fy_quarter_seq#171,d_fy_week_seq#172,d_day_name#173,d_quarter_name#174,d_holiday#175,d_weekend#176,d_following_holiday#177,d_first_dom#178,d_last_dom#179,d_same_day_ly#180,d_same_day_lq#181,d_current_day#182,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- Project [d_date_sk#159]\n               :              +- Filter (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 10)) AND (d_year#165 = 2000))) AND isnotnull(d_date_sk#159))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#159,d_date_id#160,d_date#161,d_month_seq#162,d_week_seq#163,d_quarter_seq#164,d_year#165,d_dow#166,d_moy#167,d_dom#168,d_qoy#169,d_fy_year#170,d_fy_quarter_seq#171,d_fy_week_seq#172,d_day_name#173,d_quarter_name#174,d_holiday#175,d_weekend#176,d_following_holiday#177,d_first_dom#178,d_last_dom#179,d_same_day_ly#180,d_same_day_lq#181,d_current_day#182,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#187)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#235 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#187]\n                     :     :     +- Filter (((isnotnull(d_moy#195) AND isnotnull(d_year#193)) AND (((d_moy#195 >= 4) AND (d_moy#195 <= 10)) AND (d_year#193 = 2000))) AND isnotnull(d_date_sk#187))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#187,d_date_id#188,d_date#189,d_month_seq#190,d_week_seq#191,d_quarter_seq#192,d_year#193,d_dow#194,d_moy#195,d_dom#196,d_qoy#197,d_fy_year#198,d_fy_quarter_seq#199,d_fy_week_seq#200,d_day_name#201,d_quarter_name#202,d_holiday#203,d_weekend#204,d_following_holiday#205,d_first_dom#206,d_last_dom#207,d_same_day_ly#208,d_same_day_lq#209,d_current_day#210,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- Project [d_date_sk#187]\n                        +- Filter (((isnotnull(d_moy#195) AND isnotnull(d_year#193)) AND (((d_moy#195 >= 4) AND (d_moy#195 <= 10)) AND (d_year#193 = 2000))) AND isnotnull(d_date_sk#187))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#187,d_date_id#188,d_date#189,d_month_seq#190,d_week_seq#191,d_quarter_seq#192,d_year#193,d_dow#194,d_moy#195,d_dom#196,d_qoy#197,d_fy_year#198,d_fy_quarter_seq#199,d_fy_week_seq#200,d_day_name#201,d_quarter_name#202,d_holiday#203,d_weekend#204,d_following_holiday#205,d_first_dom#206,d_last_dom#207,d_same_day_ly#208,d_same_day_lq#209,d_current_day#210,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 75306294440,
      "inputRowCount" : 446535720
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -711272923,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 125394109463,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9 "
          },
          "4" : {
            "sign" : -542027434,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4805897906763183815573184,
            "rowCount" : 22146994962042321730752,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102445440,
            "rowCount" : 2561136,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 965426121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5160249826155860963265216,
            "rowCount" : 22146994962042321730752,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 478866816,
            "rowCount" : 14964588,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "6" : {
            "sign" : -155908077,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 321151367933629968,
            "rowCount" : 1479960220892304,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : -1006720217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 346263690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -757438304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1480830553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 356670413235045264,
            "rowCount" : 1479960220892304,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -394263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 125975421719,
        "inputRowCount" : 595378763
      },
      "PD" : {
        "2" : [ 1236704, 1258059, 1234869, 1249368, 1244139, 1251727, 1259894, 1245133, 1237807, 1234869, 1244139, 1245133, 1228537, 1251727, 1245133, 1251727, 1264391, 1243036, 1258059, 1252568, 1245974, 1249368, 1261991, 1243298, 1259894, 1257797, 1245133, 1249630, 1249368, 1258900, 1241201, 1241201, 1251465, 1247230, 1246236, 1260156, 1243298, 1236966, 1243036, 1274655, 1257797, 1259894, 1243298, 1254665, 1234869, 1245133, 1243298, 1249368, 1258059, 1255659, 1244139, 1253562, 1236704, 1230372, 1266226, 1245395, 1241201, 1255962, 1241201, 1243298, 1251727, 1258059, 1243298, 1253824, 1266226, 1253562, 1266488, 1251727, 1253562, 1258059, 1238801, 1236966, 1243298, 1237807, 1243036, 1245133, 1251727, 1249368, 1245133, 1236966, 1262832, 1249630, 1236966, 1236704, 1245133, 1253562, 1253562, 1251727, 1251727, 1261991, 1270420, 1228537, 1251727, 1257797, 1255962, 1258059, 1243298, 1236966, 1236704, 1236704, 1236966, 1251727, 1245133, 1228537, 1253562, 1243298, 1244139, 1251465, 1249630, 1259894, 1256500, 1266226, 1236966, 1251465, 1228537, 1228537, 1274917, 1230372, 1236966, 1238801, 1249630, 1245395, 1257797, 1238801, 1251465, 1245133, 1251727, 1268323, 1241201, 1249630, 1258059, 1249630, 1241201, 1243036, 1238801, 1243298, 1245133, 1237807, 1243298, 1253562, 1245974, 1234869, 1236966, 1259894, 1251465, 1253562, 1241201, 1258900, 1247230, 1260156, 1234869, 1258059, 1253562, 1230372, 1249630, 1245133, 1253562, 1239642, 1234869, 1260156, 1228537, 1255962, 1249630, 1259894, 1255659, 1234869, 1251727, 1238801, 1251465, 1245133, 1249630, 1236966, 1234869, 1234869, 1249368, 1245395, 1236966, 1258059, 1249630, 1258059, 1249630, 1236704, 1260156, 1259894, 1254403, 1234869, 1250060, 1253865, 1228537, 1243036, 1251465, 1273358, 1249630, 1254403, 1234869, 1243298, 1245133, 1243298, 1234869, 1234869 ],
        "1" : [ 317961, 311821, 318346, 325342, 316505, 317111, 322296, 316563, 319113, 319422, 326176, 321832, 317707, 316428, 314964, 317427, 318752, 314549, 314125, 317322, 321120, 321710, 322409, 321317, 318557, 319922, 316475, 319223, 323251, 320711, 322630, 323036, 317905, 313704, 320241, 313669, 317460, 319724, 314980, 325191, 320013, 325406, 319945, 322396, 318725, 316277, 323234, 325609, 317556, 316211, 319331, 318278, 318557, 323925, 316035, 319794, 317421, 317556, 318260, 320808, 320998, 307514, 316505, 321257, 316550, 317330, 324440, 323925, 318310, 320462, 321625, 322833, 320392, 314838, 322052, 317525, 327661, 319059, 327125, 320148, 317055, 324138, 318481, 314832, 319066, 317248, 317446, 315278, 321089, 326806, 318248, 312969, 327510, 315592, 319454, 324159, 311093, 320729, 317353, 318043, 322461, 317209, 324128, 319892, 319444, 315024, 318718, 318224, 316981, 326087, 323956, 322129, 322849, 313652, 320863, 314233, 327086, 323218, 319963, 316916, 319740, 317034, 322536, 313669, 320508, 314564, 310170, 317058, 315760, 316732, 320294, 320456, 321944, 318505, 317928, 319266, 318513, 318159, 320588, 321369, 318522, 320770, 316464, 321947, 321501, 316444, 317947, 325647, 315938, 322181, 318670, 325053, 322760, 329607, 313820, 322514, 317649, 320751, 319467, 321166, 319072, 320118, 314945, 316186, 321014, 316492, 323774, 317951, 317875, 320148, 318832, 315278, 311443, 321091, 320629, 322052, 323518, 322698, 318962, 321886, 322396, 327086, 311803, 318712, 320751, 321826, 322955, 322494, 321554, 319616, 323736, 312442, 325570, 317771, 319887, 322258, 319870, 321333, 316550, 319688 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1857.0,
        "FinishedTasksDistributionInMs" : [ 1857.0, 1857.0, 1857.0, 1857.0, 1857.0 ]
      },
      "StartTimeInMs" : 1702226781152,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9146,
        "IOBytes" : {
          "Total" : 1062391137,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 338771179
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1039555049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 270922259520,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
          },
          "8" : {
            "sign" : 993972098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24596746743546,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 1865158773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 423600624438,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : -2084316809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 1748055246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51993683701,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 241419252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25520568217482,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "13" : {
            "sign" : 354622065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 331127206080,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -275326078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 455420389654,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1740477364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "6" : {
            "sign" : 1364632858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 74013049365,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : 1251033060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -488425942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "14" : {
            "sign" : 2062506274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "0" : {
            "sign" : 717126081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "2" : {
            "sign" : -2127788437,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 2093141778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
          },
          "7" : {
            "sign" : -660448112,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 82352547885,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 1953632632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 46027181992,
        "inputRowCount" : 440721842
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3621.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 2155.0, 2155.0, 2155.0 ]
      },
      "StartTimeInMs" : 1702226755604,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 34694,
        "IOBytes" : {
          "Total" : 1673391036,
          "Details" : {
            "IR" : 226151120,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 723619958
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -348994345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1008,
            "rowCount" : 9,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1311071274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1792,
            "rowCount" : 9,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -280675091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1792,
            "rowCount" : 9,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -61673814,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1792,
            "rowCount" : 9,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238], HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(UnscaledValue(ss_net_profit#24)), sum(UnscaledValue(sr_net_loss#44)), sum(UnscaledValue(cs_net_profit#78))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238], HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(UnscaledValue(ss_net_profit#24)), sum(UnscaledValue(sr_net_loss#44)), sum(UnscaledValue(cs_net_profit#78))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1792,
        "inputRowCount" : 9
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226790045,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 253,
        "IOBytes" : {
          "Total" : 1999,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1999,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -711272923,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 544250320,
            "rowCount" : 2522171,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9 "
          },
          "4" : {
            "sign" : -542027434,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10826546754919524443136,
            "rowCount" : 96665596026067182528,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102445440,
            "rowCount" : 2561136,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 965426121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12373196291336599363584,
            "rowCount" : 96665596026067182528,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 478866816,
            "rowCount" : 14964588,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "6" : {
            "sign" : -155908077,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 723477769980672,
            "rowCount" : 6459622946256,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : -1006720217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 10826546754919524443136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 346263690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -757438304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10826546754919524443136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1480830553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 878508720690816,
            "rowCount" : 6459622946256,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -394263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 10826546754919524443136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1125562576,
        "inputRowCount" : 20047895
      },
      "PD" : {
        "2" : [ 1236704, 1258059, 1234869, 1249368, 1244139, 1251727, 1259894, 1245133, 1237807, 1234869, 1244139, 1245133, 1228537, 1251727, 1245133, 1251727, 1264391, 1243036, 1258059, 1252568, 1245974, 1249368, 1261991, 1243298, 1259894, 1257797, 1245133, 1249630, 1249368, 1258900, 1241201, 1241201, 1251465, 1247230, 1246236, 1260156, 1243298, 1236966, 1243036, 1274655, 1257797, 1259894, 1243298, 1254665, 1234869, 1245133, 1243298, 1249368, 1258059, 1255659, 1244139, 1253562, 1236704, 1230372, 1266226, 1245395, 1241201, 1255962, 1241201, 1243298, 1251727, 1258059, 1243298, 1253824, 1266226, 1253562, 1266488, 1251727, 1253562, 1258059, 1238801, 1236966, 1243298, 1237807, 1243036, 1245133, 1251727, 1249368, 1245133, 1236966, 1262832, 1249630, 1236966, 1236704, 1245133, 1253562, 1253562, 1251727, 1251727, 1261991, 1270420, 1228537, 1251727, 1257797, 1255962, 1258059, 1243298, 1236966, 1236704, 1236704, 1236966, 1251727, 1245133, 1228537, 1253562, 1243298, 1244139, 1251465, 1249630, 1259894, 1256500, 1266226, 1236966, 1251465, 1228537, 1228537, 1274917, 1230372, 1236966, 1238801, 1249630, 1245395, 1257797, 1238801, 1251465, 1245133, 1251727, 1268323, 1241201, 1249630, 1258059, 1249630, 1241201, 1243036, 1238801, 1243298, 1245133, 1237807, 1243298, 1253562, 1245974, 1234869, 1236966, 1259894, 1251465, 1253562, 1241201, 1258900, 1247230, 1260156, 1234869, 1258059, 1253562, 1230372, 1249630, 1245133, 1253562, 1239642, 1234869, 1260156, 1228537, 1255962, 1249630, 1259894, 1255659, 1234869, 1251727, 1238801, 1251465, 1245133, 1249630, 1236966, 1234869, 1234869, 1249368, 1245395, 1236966, 1258059, 1249630, 1258059, 1249630, 1236704, 1260156, 1259894, 1254403, 1234869, 1250060, 1253865, 1228537, 1243036, 1251465, 1273358, 1249630, 1254403, 1234869, 1243298, 1245133, 1243298, 1234869, 1234869 ],
        "4" : [ 1602683, 1689018, 1602683, 1567477, 1602683, 1724224, 1689018, 1567477, 1602683, 1724224, 1567477, 1602683, 1567477, 1567477, 1567477, 1602683, 1724224, 1567477, 1724224, 1724224, 1724224, 1689018, 1689018, 1724224, 1567477, 1602683, 1724224, 1724224, 1724224, 1567477, 1602683, 1724224, 1689018, 1567477, 1602683, 1689018, 1567477, 1724224, 1602683, 1689018, 1724224, 1724224, 1724224, 1724224, 1567477, 1689018, 1689018, 1724224, 1602683, 1567477, 1567477, 1724224, 1689018, 1689018, 1689018, 1724224, 1602683, 1567477, 1724224, 1567477, 1602683, 1602683, 1724224, 1724224, 1602683, 1602683, 1724224, 1724224, 1602683, 1724224, 1567477, 1567477, 1567477, 1724224, 1724224, 1602683, 1724224, 1602683, 1602683, 1689018, 1689018, 1602683, 1689018, 1724224, 1689018, 1567477, 1689018, 1567477, 1724224, 1724224, 1724224, 1567477, 1689018, 1689018, 1602683, 1689018, 1689018, 1689018, 1724224, 1689018, 1567477, 1724224, 1689018, 1602683, 1689018, 1724224, 1602683, 1602683, 1602683, 1567477, 1602683, 1724224, 1567477, 1602683, 1724224, 1567477, 1724224, 1567477, 1567477, 1689018, 1567477, 1602683, 1724224, 1567477, 1567477, 1602683, 1567477, 1689018, 1689018, 1567477, 1724224, 1602683, 1602683, 1724224, 1602683, 1689018, 1602683, 1724224, 1602683, 1724224, 1602683, 1602683, 1724224, 1567477, 1724224, 1689018, 1602683, 1602683, 1724224, 1689018, 1724224, 1724224, 1724224, 1724224, 1689018, 1724224, 1724224, 1689018, 1567477, 1689018, 1567477, 1724224, 1689018, 1602683, 1567477, 1602683, 1602683, 1567477, 1689018, 1689018, 1602683, 1567477, 1724224, 1567477, 1602683, 1602683, 1724224, 1724224, 1602683, 1724224, 1689018, 1689018, 1567477, 1689018, 1602683, 1602683, 1689018, 1689018, 1567477, 1602683, 1689018, 1724224, 1602683, 1602683, 1724224, 1724224, 1724224, 1724224, 1689018, 1567477 ],
        "1" : [ 317961, 311821, 318346, 325342, 316505, 317111, 322296, 316563, 319113, 319422, 326176, 321832, 317707, 316428, 314964, 317427, 318752, 314549, 314125, 317322, 321120, 321710, 322409, 321317, 318557, 319922, 316475, 319223, 323251, 320711, 322630, 323036, 317905, 313704, 320241, 313669, 317460, 319724, 314980, 325191, 320013, 325406, 319945, 322396, 318725, 316277, 323234, 325609, 317556, 316211, 319331, 318278, 318557, 323925, 316035, 319794, 317421, 317556, 318260, 320808, 320998, 307514, 316505, 321257, 316550, 317330, 324440, 323925, 318310, 320462, 321625, 322833, 320392, 314838, 322052, 317525, 327661, 319059, 327125, 320148, 317055, 324138, 318481, 314832, 319066, 317248, 317446, 315278, 321089, 326806, 318248, 312969, 327510, 315592, 319454, 324159, 311093, 320729, 317353, 318043, 322461, 317209, 324128, 319892, 319444, 315024, 318718, 318224, 316981, 326087, 323956, 322129, 322849, 313652, 320863, 314233, 327086, 323218, 319963, 316916, 319740, 317034, 322536, 313669, 320508, 314564, 310170, 317058, 315760, 316732, 320294, 320456, 321944, 318505, 317928, 319266, 318513, 318159, 320588, 321369, 318522, 320770, 316464, 321947, 321501, 316444, 317947, 325647, 315938, 322181, 318670, 325053, 322760, 329607, 313820, 322514, 317649, 320751, 319467, 321166, 319072, 320118, 314945, 316186, 321014, 316492, 323774, 317951, 317875, 320148, 318832, 315278, 311443, 321091, 320629, 322052, 323518, 322698, 318962, 321886, 322396, 327086, 311803, 318712, 320751, 321826, 322955, 322494, 321554, 319616, 323736, 312442, 325570, 317771, 319887, 322258, 319870, 321333, 316550, 319688 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226783285,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7013,
        "IOBytes" : {
          "Total" : 666607865,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 641555545,
            "SW" : 25052320
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1989542456,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24], ShuffleQueryStage 8 "
          },
          "8" : {
            "sign" : -2058058733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2438962657004160000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "4" : {
            "sign" : -499941436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 222738356512,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "11" : {
            "sign" : -1157574149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4333622347200000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : -1426953689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2613174275361600000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "13" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : -585470545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 254558121728,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1536134371,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4116941229840000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "6" : {
            "sign" : 795156523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38917659760,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : 143049105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : -957863024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -155718918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 639288765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 47257158280,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 346761829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24], ShuffleQueryStage 8\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13778487004,
        "inputRowCount" : 431217044
      },
      "PD" : {
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 101006.0,
        "FinishedTasksDistributionInMs" : [ 2107.0, 13621.0, 15487.0, 19682.0, 19971.0 ]
      },
      "StartTimeInMs" : 1702226776009,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14289,
        "IOBytes" : {
          "Total" : 1642855896,
          "Details" : {
            "IR" : 213783871,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 705452067
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 857628736,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 316837440138240,
            "rowCount" : 2828905715520,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "5" : {
            "sign" : 1732807513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 362099931586560,
            "rowCount" : 2828905715520,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "6" : {
            "sign" : -1426550607,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 40827392,
            "rowCount" : 189040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44], ShuffleQueryStage 10 "
          },
          "1" : {
            "sign" : -1122445257,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 316837440138240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -636471540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 2105722998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 316837440138240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 478866816,
            "rowCount" : 14964588,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "3" : {
            "sign" : -1010467165,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 316837440138240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- LogicalQueryStage Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44], ShuffleQueryStage 10\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 519694208,
        "inputRowCount" : 15153628
      },
      "PD" : {
        "2" : [ 1236704, 1258059, 1234869, 1249368, 1244139, 1251727, 1259894, 1245133, 1237807, 1234869, 1244139, 1245133, 1228537, 1251727, 1245133, 1251727, 1264391, 1243036, 1258059, 1252568, 1245974, 1249368, 1261991, 1243298, 1259894, 1257797, 1245133, 1249630, 1249368, 1258900, 1241201, 1241201, 1251465, 1247230, 1246236, 1260156, 1243298, 1236966, 1243036, 1274655, 1257797, 1259894, 1243298, 1254665, 1234869, 1245133, 1243298, 1249368, 1258059, 1255659, 1244139, 1253562, 1236704, 1230372, 1266226, 1245395, 1241201, 1255962, 1241201, 1243298, 1251727, 1258059, 1243298, 1253824, 1266226, 1253562, 1266488, 1251727, 1253562, 1258059, 1238801, 1236966, 1243298, 1237807, 1243036, 1245133, 1251727, 1249368, 1245133, 1236966, 1262832, 1249630, 1236966, 1236704, 1245133, 1253562, 1253562, 1251727, 1251727, 1261991, 1270420, 1228537, 1251727, 1257797, 1255962, 1258059, 1243298, 1236966, 1236704, 1236704, 1236966, 1251727, 1245133, 1228537, 1253562, 1243298, 1244139, 1251465, 1249630, 1259894, 1256500, 1266226, 1236966, 1251465, 1228537, 1228537, 1274917, 1230372, 1236966, 1238801, 1249630, 1245395, 1257797, 1238801, 1251465, 1245133, 1251727, 1268323, 1241201, 1249630, 1258059, 1249630, 1241201, 1243036, 1238801, 1243298, 1245133, 1237807, 1243298, 1253562, 1245974, 1234869, 1236966, 1259894, 1251465, 1253562, 1241201, 1258900, 1247230, 1260156, 1234869, 1258059, 1253562, 1230372, 1249630, 1245133, 1253562, 1239642, 1234869, 1260156, 1228537, 1255962, 1249630, 1259894, 1255659, 1234869, 1251727, 1238801, 1251465, 1245133, 1249630, 1236966, 1234869, 1234869, 1249368, 1245395, 1236966, 1258059, 1249630, 1258059, 1249630, 1236704, 1260156, 1259894, 1254403, 1234869, 1250060, 1253865, 1228537, 1243036, 1251465, 1273358, 1249630, 1254403, 1234869, 1243298, 1245133, 1243298, 1234869, 1234869 ],
        "5" : [ 127289, 127492, 136005, 133564, 140242, 127107, 139818, 138022, 133564, 123437, 123437, 135784, 131547, 127310, 133767, 123787, 135966, 138022, 123640, 137598, 133746, 125272, 129327, 133564, 127492, 131526, 136005, 120639, 133785, 129859, 125090, 135784, 131344, 140242, 135581, 137598, 127492, 129712, 138022, 133564, 127310, 131729, 125657, 125454, 133564, 123255, 131547, 133361, 134170, 127492, 129509, 133746, 131344, 127289, 127492, 129712, 131344, 131344, 129306, 134170, 137801, 131141, 127310, 139818, 125657, 128262, 129124, 139818, 131526, 123073, 132503, 125657, 129712, 140848, 132079, 125272, 137408, 138831, 123640, 139818, 137598, 129306, 127107, 127310, 125475, 131950, 133564, 133564, 125272, 140039, 129306, 121588, 131526, 129327, 127492, 127674, 125272, 135784, 129509, 131344, 135784, 132114, 131344, 123073, 131344, 131344, 133361, 137598, 136187, 140242, 129306, 131344, 135784, 133361, 127492, 135802, 127310, 135581, 129509, 129509, 126466, 136187, 127492, 140627, 125272, 123255, 129327, 127492, 131547, 137801, 143068, 129509, 134170, 135581, 129327, 131141, 121238, 137801, 136005, 117568, 129712, 131344, 119403, 133988, 131547, 142259, 136005, 125272, 135581, 127492, 123255, 133746, 133361, 133988, 135581, 135802, 125090, 136855, 125090, 136519, 125272, 131547, 138022, 133361, 136390, 125293, 135966, 129712, 131344, 129933, 131344, 140021, 121420, 129894, 135784, 138407, 123255, 127107, 131547, 133988, 133564, 131141, 137598, 136390, 124414, 129327, 127107, 123255, 124193, 133361, 131950, 132538, 131344, 135581, 129712, 139818, 127107, 133949, 131547, 129530 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226784995,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5303,
        "IOBytes" : {
          "Total" : 266922679,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 266920680,
            "SW" : 1999
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1989542456,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 121064208,
            "rowCount" : 2522171,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24], ShuffleQueryStage 8 "
          },
          "8" : {
            "sign" : -2058058733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23165878329216000,
            "rowCount" : 206838199368000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "4" : {
            "sign" : -499941436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 222738356512,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "11" : {
            "sign" : -1157574149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 41161830720000,
            "rowCount" : 514522884000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : -1426953689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24820583924160000,
            "rowCount" : 206838199368000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "13" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : -585470545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 254558121728,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1536134371,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39103739184000,
            "rowCount" : 514522884000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "6" : {
            "sign" : 795156523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 624454667237289006720000,
            "rowCount" : 5575488100332937560000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : 143049105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : -957863024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -155718918,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 639288765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 758266381645279508160000,
            "rowCount" : 5575488100332937560000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 346761829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24], ShuffleQueryStage 8\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4340090152,
        "inputRowCount" : 168198630
      },
      "PD" : {
        "3" : [ 318776, 312725, 333301, 322810, 346215, 314742, 352875, 308691, 302640, 326844, 364196, 332895, 339555, 322810, 333098, 330878, 333301, 343995, 359535, 355316, 333098, 355095, 332895, 326844, 341775, 348435, 339555, 343995, 337335, 341775, 346215, 327047, 350655, 326844, 337335, 330878, 333098, 335115, 324827, 361755, 329064, 333301, 325030, 316759, 312725, 346215, 337538, 337741, 314742, 322810, 366416, 341775, 333098, 333098, 331284, 366416, 361976, 335521, 328861, 350655, 328861, 333098, 322810, 350655, 307038, 339555, 355095, 329064, 346215, 333098, 359535, 322810, 359535, 339758, 324827, 322810, 311072, 348435, 335115, 328861, 333301, 314742, 359977, 333098, 355095, 318776, 310708, 341978, 355095, 348435, 346215, 348435, 333098, 304839, 346215, 339758, 330878, 322810, 359535, 308873, 337335, 346215, 339555, 357315, 330878, 352875, 343995, 366416, 324827, 331081, 327047, 320793, 316759, 350655, 333098, 350655, 352875, 308691, 313110, 331081, 331081, 318776, 352875, 335115, 324827, 343995, 328861, 310708, 343995, 322810, 337538, 335521, 330878, 333301, 339758, 337335, 320793, 348638, 339555, 341978, 348435, 327047, 339555, 352875, 333098, 346418, 328861, 327047, 341775, 343995, 343995, 295300, 348435, 325233, 348435, 337741, 361755, 327047, 339555, 314742, 322810, 352875, 333098, 355095, 339555, 337741, 328861, 305021, 361755, 339555, 331081, 361755, 357315, 337335, 339758, 339555, 282623, 324827, 320793, 337538, 339555, 339758, 333098, 314742, 352875, 353078, 335318, 324827, 328861, 310890, 339555, 333098, 333098, 308873, 341775, 305021, 330878, 324827, 348435, 355095 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 29,
        "FinishedTasksTotalTimeInMs" : 262810.0,
        "FinishedTasksDistributionInMs" : [ 566.0, 1191.0, 6227.0, 19600.0, 22119.0 ]
      },
      "StartTimeInMs" : 1702226778272,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12026,
        "IOBytes" : {
          "Total" : 1553182532,
          "Details" : {
            "IR" : 188007029,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 641555545
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -848732329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991579424,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] "
          },
          "12" : {
            "sign" : 1039555049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
          },
          "8" : {
            "sign" : 993972098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24596746743546,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -920971770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] "
          },
          "4" : {
            "sign" : 1236876969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 423600624438,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "40" : {
            "sign" : -1258900028,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#267], BroadcastQueryStage 5 "
          },
          "15" : {
            "sign" : -2084316809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 1748055246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51993683701,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 241419252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25520568217482,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "33" : {
            "sign" : 381528846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#267) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : 715854959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45]) "
          },
          "37" : {
            "sign" : -795827763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#267] "
          },
          "13" : {
            "sign" : 354622065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : -1848478279,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1078231800,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#239) "
          },
          "35" : {
            "sign" : -2083519366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79]) "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1043069632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 455420389654,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1740477364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "32" : {
            "sign" : 1192029817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] "
          },
          "6" : {
            "sign" : 321790125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 74013049365,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "36" : {
            "sign" : -2002916628,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1980904738,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1222183879,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#267, d_date_id#268, d_date#269, d_month_seq#270, d_week_seq#271, d_quarter_seq#272, d_year#273, d_dow#274, d_moy#275, d_dom#276, d_qoy#277, d_fy_year#278, d_fy_quarter_seq#279, d_fy_week_seq#280, d_day_name#281, d_quarter_name#282, d_holiday#283, d_weekend#284, d_following_holiday#285, d_first_dom#286, d_last_dom#287, d_same_day_ly#288, d_same_day_lq#289, d_current_day#290, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -488425942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "25" : {
            "sign" : -1106544171,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 965559852,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] "
          },
          "14" : {
            "sign" : 2062506274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "31" : {
            "sign" : 213264769,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#239], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : 247097461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 631596255,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1775412536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 83640,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267)) "
          },
          "18" : {
            "sign" : 2093141778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
          },
          "30" : {
            "sign" : -694123955,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : -25374869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 82352547885,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "29" : {
            "sign" : 371403280,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 83640,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239)) "
          },
          "3" : {
            "sign" : -1903571722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          },
          "28" : {
            "sign" : 146946920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#239] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#239]\n               :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#239], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#267]\n                     :     :     +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#267], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 75197560272,
        "inputRowCount" : 446317303
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1466.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 1466.0, 1466.0, 1466.0 ]
      },
      "StartTimeInMs" : 1702226754900,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35398,
        "IOBytes" : {
          "Total" : 1673578936,
          "Details" : {
            "IR" : 226339020,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 723619958
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -848732329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991579424,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] "
          },
          "12" : {
            "sign" : 1039555049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
          },
          "8" : {
            "sign" : 993972098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24596746743546,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -920971770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 183670940736,
            "rowCount" : 5739716898,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] "
          },
          "4" : {
            "sign" : 1236876969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 423600624438,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "40" : {
            "sign" : -1258900028,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1050288,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#267], BroadcastQueryStage 5 "
          },
          "15" : {
            "sign" : -2084316809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 1748055246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51993683701,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 241419252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25520568217482,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "33" : {
            "sign" : 381528846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 976226281984,
            "rowCount" : 30507071312,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#267) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : 715854959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45]) "
          },
          "37" : {
            "sign" : -795827763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#267] "
          },
          "13" : {
            "sign" : 354622065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : -1848478279,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 229588675920,
            "rowCount" : 5739716898,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#239) "
          },
          "35" : {
            "sign" : -2083519366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79]) "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1043069632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 455420389654,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1740477364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "32" : {
            "sign" : 1192029817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 732169711488,
            "rowCount" : 30507071312,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] "
          },
          "6" : {
            "sign" : 321790125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 74013049365,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "36" : {
            "sign" : -2002916628,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1980904738,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1222183879,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#267, d_date_id#268, d_date#269, d_month_seq#270, d_week_seq#271, d_quarter_seq#272, d_year#273, d_dow#274, d_moy#275, d_dom#276, d_qoy#277, d_fy_year#278, d_fy_quarter_seq#279, d_fy_week_seq#280, d_day_name#281, d_quarter_name#282, d_holiday#283, d_weekend#284, d_following_holiday#285, d_first_dom#286, d_last_dom#287, d_same_day_ly#288, d_same_day_lq#289, d_current_day#290, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -488425942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "25" : {
            "sign" : -1106544171,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 965559852,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] "
          },
          "14" : {
            "sign" : 2062506274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "31" : {
            "sign" : 213264769,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1050288,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#239], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : 247097461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 631596255,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1775412536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 83640,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267)) "
          },
          "18" : {
            "sign" : 2093141778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
          },
          "30" : {
            "sign" : -694123955,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : -25374869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 82352547885,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "29" : {
            "sign" : 371403280,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 83640,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239)) "
          },
          "3" : {
            "sign" : -1903571722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          },
          "28" : {
            "sign" : 146946920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#239] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#239]\n               :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#239], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#267]\n                     :     :     +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#267], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 75199652688,
        "inputRowCount" : 446317051
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1466.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 1466.0, 1466.0, 1466.0 ]
      },
      "StartTimeInMs" : 1702226755182,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35116,
        "IOBytes" : {
          "Total" : 1673484986,
          "Details" : {
            "IR" : 226245070,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 723619958
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -711272923,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 125394109463,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9 "
          },
          "4" : {
            "sign" : -542027434,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44484687022353087258539616,
            "rowCount" : 204998557706696254647648,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102445440,
            "rowCount" : 2561136,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 965426121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 47764663945660227332901984,
            "rowCount" : 204998557706696254647648,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "6" : {
            "sign" : -155908077,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 321151367933629968,
            "rowCount" : 1479960220892304,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : -1006720217,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 346263690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -757438304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1480830553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 356670413235045264,
            "rowCount" : 1479960220892304,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -394263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 9\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 128820945191,
        "inputRowCount" : 718930437
      },
      "PD" : {
        "1" : [ 317961, 311821, 318346, 325342, 316505, 317111, 322296, 316563, 319113, 319422, 326176, 321832, 317707, 316428, 314964, 317427, 318752, 314549, 314125, 317322, 321120, 321710, 322409, 321317, 318557, 319922, 316475, 319223, 323251, 320711, 322630, 323036, 317905, 313704, 320241, 313669, 317460, 319724, 314980, 325191, 320013, 325406, 319945, 322396, 318725, 316277, 323234, 325609, 317556, 316211, 319331, 318278, 318557, 323925, 316035, 319794, 317421, 317556, 318260, 320808, 320998, 307514, 316505, 321257, 316550, 317330, 324440, 323925, 318310, 320462, 321625, 322833, 320392, 314838, 322052, 317525, 327661, 319059, 327125, 320148, 317055, 324138, 318481, 314832, 319066, 317248, 317446, 315278, 321089, 326806, 318248, 312969, 327510, 315592, 319454, 324159, 311093, 320729, 317353, 318043, 322461, 317209, 324128, 319892, 319444, 315024, 318718, 318224, 316981, 326087, 323956, 322129, 322849, 313652, 320863, 314233, 327086, 323218, 319963, 316916, 319740, 317034, 322536, 313669, 320508, 314564, 310170, 317058, 315760, 316732, 320294, 320456, 321944, 318505, 317928, 319266, 318513, 318159, 320588, 321369, 318522, 320770, 316464, 321947, 321501, 316444, 317947, 325647, 315938, 322181, 318670, 325053, 322760, 329607, 313820, 322514, 317649, 320751, 319467, 321166, 319072, 320118, 314945, 316186, 321014, 316492, 323774, 317951, 317875, 320148, 318832, 315278, 311443, 321091, 320629, 322052, 323518, 322698, 318962, 321886, 322396, 327086, 311803, 318712, 320751, 321826, 322955, 322494, 321554, 319616, 323736, 312442, 325570, 317771, 319887, 322258, 319870, 321333, 316550, 319688 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 37374.0,
        "FinishedTasksDistributionInMs" : [ 566.0, 1122.0, 1205.0, 1702.0, 7259.0 ]
      },
      "StartTimeInMs" : 1702226780480,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9818,
        "IOBytes" : {
          "Total" : 1446249937,
          "Details" : {
            "IR" : 141990440,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 580639539
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1039555049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
          },
          "8" : {
            "sign" : 993972098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24596746743546,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1914909409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 1865158773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 423600624438,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : -2084316809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 1748055246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51993683701,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 241419252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25520568217482,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "13" : {
            "sign" : 354622065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : 974886472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7 "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -275326078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 455420389654,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1740477364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "6" : {
            "sign" : 1364632858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 74013049365,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : 1251033060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -488425942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "14" : {
            "sign" : 2062506274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "0" : {
            "sign" : 717126081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "2" : {
            "sign" : -2127788437,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 2093141778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
          },
          "7" : {
            "sign" : -660448112,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 82352547885,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 1953632632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 423600624438,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44], ShuffleQueryStage 6\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 46026133776,
        "inputRowCount" : 440721862
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3621.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 2155.0, 2155.0, 2155.0 ]
      },
      "StartTimeInMs" : 1702226755541,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 34757,
        "IOBytes" : {
          "Total" : 1673391036,
          "Details" : {
            "IR" : 226151120,
            "IW" : 0,
            "SR" : 723619958,
            "SW" : 723619958
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -611530136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 75402965785,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 75402965785,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] "
          },
          "1" : {
            "sign" : -1019775458,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 83742464305,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 83742464305,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n+- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n   :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n   :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n   :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n   :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n   :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :     :     :     :  +- Project [d_date_sk#80]\n   :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     :     +- Project [d_date_sk#80]\n   :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n   :     :        +- Filter isnotnull(i_item_sk#137)\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n   :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n   :        +- Filter isnotnull(s_store_sk#108)\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n   +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n      +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n         :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n         :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n         :     :  +- Project [d_date_sk#239]\n         :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n         :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n         :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [d_date_sk#239]\n            +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n               +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -644114290,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] Arguments: [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1839415730,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 102445440,
            "rowCount" : 2561136,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] Arguments: 6 "
          },
          "1" : {
            "sign" : 1417763289,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 83742464305,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [3]: [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L] Right keys [3]: [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 745005911,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 75402965785,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] Input [12]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] "
          },
          "2" : {
            "sign" : -512266924,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Arguments: [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -845806078,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 544250320,
            "rowCount" : 2522171,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n+- SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n   :- Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 9\n   :     +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1431]\n   :        +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n   :           +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n   :              :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n   :              :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n   :              :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :              :     :  +- AQEShuffleRead coalesced\n   :              :     :     +- ShuffleQueryStage 8\n   :              :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1194]\n   :              :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n   :              :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :              :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :              :     :                 :  +- *(8) ColumnarToRow\n   :              :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:de...\n   :              :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#1168]\n   :              :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1165]\n                                                               +- Project [d_date_sk#80]\n                                                                  +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :              :     :                 +- BroadcastQueryStage 0\n   :              :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :              :     :                       +- *(1) Project [d_date_sk#80]\n   :              :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n   :              :     :                             +- *(1) ColumnarToRow\n   :              :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :              :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n   :              :        +- AQEShuffleRead coalesced\n   :              :           +- ShuffleQueryStage 1\n   :              :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              :                 +- *(2) Filter isnotnull(i_item_sk#137)\n   :              :                    +- *(2) ColumnarToRow\n   :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   :              +- BroadcastQueryStage 2\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n   :                    +- *(3) Filter isnotnull(s_store_sk#108)\n   :                       +- *(3) ColumnarToRow\n   :                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n   +- Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 6\n         +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n            +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n               +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n                  :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n                  :  +- *(6) ColumnarToRow\n                  :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_net_loss#44,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)>\n                  :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n                  :              +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       BroadcastQueryStage 1\n                                       +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                    +- == Initial Plan ==\n                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                       +- Project [d_date_sk#239]\n                                          +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  +- BroadcastQueryStage 3\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                        +- *(4) Project [d_date_sk#239]\n                           +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                              +- *(4) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 646695760,
        "inputRowCount" : 5083307
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1602683, 1689018, 1602683, 1567477, 1602683, 1724224, 1689018, 1567477, 1602683, 1724224, 1567477, 1602683, 1567477, 1567477, 1567477, 1602683, 1724224, 1567477, 1724224, 1724224, 1724224, 1689018, 1689018, 1724224, 1567477, 1602683, 1724224, 1724224, 1724224, 1567477, 1602683, 1724224, 1689018, 1567477, 1602683, 1689018, 1567477, 1724224, 1602683, 1689018, 1724224, 1724224, 1724224, 1724224, 1567477, 1689018, 1689018, 1724224, 1602683, 1567477, 1567477, 1724224, 1689018, 1689018, 1689018, 1724224, 1602683, 1567477, 1724224, 1567477, 1602683, 1602683, 1724224, 1724224, 1602683, 1602683, 1724224, 1724224, 1602683, 1724224, 1567477, 1567477, 1567477, 1724224, 1724224, 1602683, 1724224, 1602683, 1602683, 1689018, 1689018, 1602683, 1689018, 1724224, 1689018, 1567477, 1689018, 1567477, 1724224, 1724224, 1724224, 1567477, 1689018, 1689018, 1602683, 1689018, 1689018, 1689018, 1724224, 1689018, 1567477, 1724224, 1689018, 1602683, 1689018, 1724224, 1602683, 1602683, 1602683, 1567477, 1602683, 1724224, 1567477, 1602683, 1724224, 1567477, 1724224, 1567477, 1567477, 1689018, 1567477, 1602683, 1724224, 1567477, 1567477, 1602683, 1567477, 1689018, 1689018, 1567477, 1724224, 1602683, 1602683, 1724224, 1602683, 1689018, 1602683, 1724224, 1602683, 1724224, 1602683, 1602683, 1724224, 1567477, 1724224, 1689018, 1602683, 1602683, 1724224, 1689018, 1724224, 1724224, 1724224, 1724224, 1689018, 1724224, 1724224, 1689018, 1567477, 1689018, 1567477, 1724224, 1689018, 1602683, 1567477, 1602683, 1602683, 1567477, 1689018, 1689018, 1602683, 1567477, 1724224, 1567477, 1602683, 1602683, 1724224, 1724224, 1602683, 1724224, 1689018, 1689018, 1567477, 1689018, 1602683, 1602683, 1689018, 1689018, 1567477, 1602683, 1689018, 1724224, 1602683, 1602683, 1724224, 1724224, 1724224, 1724224, 1689018, 1567477 ],
        "1" : [ 317961, 311821, 318346, 325342, 316505, 317111, 322296, 316563, 319113, 319422, 326176, 321832, 317707, 316428, 314964, 317427, 318752, 314549, 314125, 317322, 321120, 321710, 322409, 321317, 318557, 319922, 316475, 319223, 323251, 320711, 322630, 323036, 317905, 313704, 320241, 313669, 317460, 319724, 314980, 325191, 320013, 325406, 319945, 322396, 318725, 316277, 323234, 325609, 317556, 316211, 319331, 318278, 318557, 323925, 316035, 319794, 317421, 317556, 318260, 320808, 320998, 307514, 316505, 321257, 316550, 317330, 324440, 323925, 318310, 320462, 321625, 322833, 320392, 314838, 322052, 317525, 327661, 319059, 327125, 320148, 317055, 324138, 318481, 314832, 319066, 317248, 317446, 315278, 321089, 326806, 318248, 312969, 327510, 315592, 319454, 324159, 311093, 320729, 317353, 318043, 322461, 317209, 324128, 319892, 319444, 315024, 318718, 318224, 316981, 326087, 323956, 322129, 322849, 313652, 320863, 314233, 327086, 323218, 319963, 316916, 319740, 317034, 322536, 313669, 320508, 314564, 310170, 317058, 315760, 316732, 320294, 320456, 321944, 318505, 317928, 319266, 318513, 318159, 320588, 321369, 318522, 320770, 316464, 321947, 321501, 316444, 317947, 325647, 315938, 322181, 318670, 325053, 322760, 329607, 313820, 322514, 317649, 320751, 319467, 321166, 319072, 320118, 314945, 316186, 321014, 316492, 323774, 317951, 317875, 320148, 318832, 315278, 311443, 321091, 320629, 322052, 323518, 322698, 318962, 321886, 322396, 327086, 311803, 318712, 320751, 321826, 322955, 322494, 321554, 319616, 323736, 312442, 325570, 317771, 319887, 322258, 319870, 321333, 316550, 319688 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 1615,
        "TotalTasksDurationInMs" : 8770,
        "IOBytes" : {
          "Total" : 399685186,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 374634865,
            "SW" : 25050321
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 475055374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1078231800,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 1078231800,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#239) "
          },
          "0" : {
            "sign" : 1674943917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 862585440,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] "
          },
          "2" : {
            "sign" : -1106544171,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 965559852,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 965559852,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] "
          },
          "3" : {
            "sign" : 715854959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n+- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n   :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n   :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n   :     :  +- Project [d_date_sk#239]\n   :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n   +- Project [d_date_sk#239]\n      +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 485427947,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1050288,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#239] Arguments: 3 "
          },
          "1" : {
            "sign" : 1768224462,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1078231800,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#45] Right keys [1]: [d_date_sk#239] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 2061278231,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 862585440,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44] Input [6]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45, d_date_sk#239] "
          },
          "2" : {
            "sign" : -453860904,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 965559852,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] Condition : ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -523825067,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 965559852,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [5]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpruning#308)] PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)] ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n+- BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n   :- Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_net_loss#44,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n   :                 +- Project [d_date_sk#239]\n   :                    +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n         +- *(4) Project [d_date_sk#239]\n            +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 966610140,
        "inputRowCount" : 26821321
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1466.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 1466.0, 1466.0, 1466.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 25079,
        "TotalTasksDurationInMs" : 299219,
        "IOBytes" : {
          "Total" : 106932595,
          "Details" : {
            "IR" : 46016589,
            "IW" : 0,
            "SR" : 0,
            "SW" : 60916006
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1724911718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238] "
          },
          "1" : {
            "sign" : -430334897,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "2" : {
            "sign" : 1963200912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 463375330958,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 463375330958,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n+- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n   +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n      :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n      :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n      :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n      :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n      :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n      :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n      :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n      :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n      :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n      :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n      :     :     :     :     :     :  +- Project [d_date_sk#80]\n      :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n      :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n      :     :     :     :     +- Project [d_date_sk#80]\n      :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n      :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n      :     :     :        +- Filter isnotnull(i_item_sk#137)\n      :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n      :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n      :     :        +- Filter isnotnull(s_store_sk#108)\n      :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n      :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n      :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n      :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n      :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n      :           :     :  +- Project [d_date_sk#239]\n      :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n      :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n      :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n      :           +- Project [d_date_sk#239]\n      :              +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n      :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n      +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n         +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n            :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n            :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n            :     :  +- Project [d_date_sk#267]\n            :     :     +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n            +- Project [d_date_sk#267]\n               +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 415949947,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 40827392,
            "rowCount" : 189040,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] Arguments: 10 "
          },
          "5" : {
            "sign" : -2134479639,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] Arguments: [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1074170793,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 478866816,
            "rowCount" : 14964588,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] Arguments: 7 "
          },
          "1" : {
            "sign" : 1233551810,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] Input [11]: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44, cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] "
          },
          "0" : {
            "sign" : -1961969585,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [7]: [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] Keys [4]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Functions [3]: [partial_sum(UnscaledValue(ss_net_profit#24)), partial_sum(UnscaledValue(sr_net_loss#44)), partial_sum(UnscaledValue(cs_net_profit#78))] Aggregate Attributes [3]: [sum#310L, sum#311L, sum#312L] Results [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] "
          },
          "2" : {
            "sign" : 83734905,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 463375330958,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [sr_customer_sk#28, sr_item_sk#27] Right keys [2]: [cs_bill_customer_sk#48, cs_item_sk#60] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 924061502,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44] Arguments: [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[partial_sum(UnscaledValue(ss_net_profit#24)), partial_sum(UnscaledValue(sr_net_loss#44)), partial_sum(UnscaledValue(cs_net_profit#78))], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L])\n+- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n   +- SortMergeJoin [sr_customer_sk#28, sr_item_sk#27], [cs_bill_customer_sk#48, cs_item_sk#60], Inner\n      :- Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 10\n      :     +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=1627]\n      :        +- *(14) Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n      :           +- *(14) SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n      :              :- *(12) Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 9\n      :              :        +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1431]\n      :              :           +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n      :              :              +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n      :              :                 :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n      :              :                 :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n      :              :                 :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :                 :     :  +- AQEShuffleRead coalesced\n      :              :                 :     :     +- ShuffleQueryStage 8\n      :              :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1194]\n      :              :                 :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n      :              :                 :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n      :              :                 :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n      :              :                 :     :                 :  +- *(8) ColumnarToRow\n      :              :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:de...\n      :              :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#1168]\n      :              :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1165]\n                                                                                    +- Project [d_date_sk#80]\n                                                                                       +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :                 :     :                 +- BroadcastQueryStage 0\n      :              :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n      :              :                 :     :                       +- *(1) Project [d_date_sk#80]\n      :              :                 :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n      :              :                 :     :                             +- *(1) ColumnarToRow\n      :              :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :                 :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n      :              :                 :        +- AQEShuffleRead coalesced\n      :              :                 :           +- ShuffleQueryStage 1\n      :              :                 :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n      :              :                 :                 +- *(2) Filter isnotnull(i_item_sk#137)\n      :              :                 :                    +- *(2) ColumnarToRow\n      :              :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n      :              :                 +- BroadcastQueryStage 2\n      :              :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n      :              :                       +- *(3) Filter isnotnull(s_store_sk#108)\n      :              :                          +- *(3) ColumnarToRow\n      :              :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n      :              +- *(13) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 6\n      :                       +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n      :                          +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n      :                             +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n      :                                :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n      :                                :  +- *(6) ColumnarToRow\n      :                                :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_net_loss#44,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)>\n      :                                :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n      :                                :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                                            +- Project [d_date_sk#239]\n                                                               +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :                                +- BroadcastQueryStage 3\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n      :                                      +- *(4) Project [d_date_sk#239]\n      :                                         +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n      :                                            +- *(4) ColumnarToRow\n      :                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      +- Sort [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 7\n            +- Exchange hashpartitioning(cs_bill_customer_sk#48, cs_item_sk#60, 200), ENSURE_REQUIREMENTS, [plan_id=889]\n               +- *(7) Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                  +- *(7) BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n                     :- *(7) Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n                     :  +- *(7) ColumnarToRow\n                     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_net_profit#78,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#308)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>\n                     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n                     +- BroadcastQueryStage 5\n                        +- ReusedExchange [d_date_sk#267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 519694208,
        "inputRowCount" : 15153628
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 1236704, 1258059, 1234869, 1249368, 1244139, 1251727, 1259894, 1245133, 1237807, 1234869, 1244139, 1245133, 1228537, 1251727, 1245133, 1251727, 1264391, 1243036, 1258059, 1252568, 1245974, 1249368, 1261991, 1243298, 1259894, 1257797, 1245133, 1249630, 1249368, 1258900, 1241201, 1241201, 1251465, 1247230, 1246236, 1260156, 1243298, 1236966, 1243036, 1274655, 1257797, 1259894, 1243298, 1254665, 1234869, 1245133, 1243298, 1249368, 1258059, 1255659, 1244139, 1253562, 1236704, 1230372, 1266226, 1245395, 1241201, 1255962, 1241201, 1243298, 1251727, 1258059, 1243298, 1253824, 1266226, 1253562, 1266488, 1251727, 1253562, 1258059, 1238801, 1236966, 1243298, 1237807, 1243036, 1245133, 1251727, 1249368, 1245133, 1236966, 1262832, 1249630, 1236966, 1236704, 1245133, 1253562, 1253562, 1251727, 1251727, 1261991, 1270420, 1228537, 1251727, 1257797, 1255962, 1258059, 1243298, 1236966, 1236704, 1236704, 1236966, 1251727, 1245133, 1228537, 1253562, 1243298, 1244139, 1251465, 1249630, 1259894, 1256500, 1266226, 1236966, 1251465, 1228537, 1228537, 1274917, 1230372, 1236966, 1238801, 1249630, 1245395, 1257797, 1238801, 1251465, 1245133, 1251727, 1268323, 1241201, 1249630, 1258059, 1249630, 1241201, 1243036, 1238801, 1243298, 1245133, 1237807, 1243298, 1253562, 1245974, 1234869, 1236966, 1259894, 1251465, 1253562, 1241201, 1258900, 1247230, 1260156, 1234869, 1258059, 1253562, 1230372, 1249630, 1245133, 1253562, 1239642, 1234869, 1260156, 1228537, 1255962, 1249630, 1259894, 1255659, 1234869, 1251727, 1238801, 1251465, 1245133, 1249630, 1236966, 1234869, 1234869, 1249368, 1245395, 1236966, 1258059, 1249630, 1258059, 1249630, 1236704, 1260156, 1259894, 1254403, 1234869, 1250060, 1253865, 1228537, 1243036, 1251465, 1273358, 1249630, 1254403, 1234869, 1243298, 1245133, 1243298, 1234869, 1234869 ],
        "5" : [ 127289, 127492, 136005, 133564, 140242, 127107, 139818, 138022, 133564, 123437, 123437, 135784, 131547, 127310, 133767, 123787, 135966, 138022, 123640, 137598, 133746, 125272, 129327, 133564, 127492, 131526, 136005, 120639, 133785, 129859, 125090, 135784, 131344, 140242, 135581, 137598, 127492, 129712, 138022, 133564, 127310, 131729, 125657, 125454, 133564, 123255, 131547, 133361, 134170, 127492, 129509, 133746, 131344, 127289, 127492, 129712, 131344, 131344, 129306, 134170, 137801, 131141, 127310, 139818, 125657, 128262, 129124, 139818, 131526, 123073, 132503, 125657, 129712, 140848, 132079, 125272, 137408, 138831, 123640, 139818, 137598, 129306, 127107, 127310, 125475, 131950, 133564, 133564, 125272, 140039, 129306, 121588, 131526, 129327, 127492, 127674, 125272, 135784, 129509, 131344, 135784, 132114, 131344, 123073, 131344, 131344, 133361, 137598, 136187, 140242, 129306, 131344, 135784, 133361, 127492, 135802, 127310, 135581, 129509, 129509, 126466, 136187, 127492, 140627, 125272, 123255, 129327, 127492, 131547, 137801, 143068, 129509, 134170, 135581, 129327, 131141, 121238, 137801, 136005, 117568, 129712, 131344, 119403, 133988, 131547, 142259, 136005, 125272, 135581, 127492, 123255, 133746, 133361, 133988, 135581, 135802, 125090, 136855, 125090, 136519, 125272, 131547, 138022, 133361, 136390, 125293, 135966, 129712, 131344, 129933, 131344, 140021, 121420, 129894, 135784, 138407, 123255, 127107, 131547, 133988, 133564, 131141, 137598, 136390, 124414, 129327, 127107, 123255, 124193, 133361, 131950, 132538, 131344, 135581, 129712, 139818, 127107, 133949, 131547, 129530 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 24 ],
      "Objectives" : {
        "DurationInMs" : 4864,
        "TotalTasksDurationInMs" : 19051,
        "IOBytes" : {
          "Total" : 266920680,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 266918681,
            "SW" : 1999
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -2002916628,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -608574627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#267) "
          },
          "0" : {
            "sign" : -1867492926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3324390288,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3324390288,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] "
          },
          "2" : {
            "sign" : -848732329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991579424,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 3991579424,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] "
          },
          "3" : {
            "sign" : -2083519366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n+- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n   :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n   :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n   :     :  +- Project [d_date_sk#267]\n   :     :     +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n   +- Project [d_date_sk#267]\n      +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1475952528,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1050288,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#267] Arguments: 5 "
          },
          "1" : {
            "sign" : -843685079,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#79] Right keys [1]: [d_date_sk#267] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 75576748,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78] Input [5]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79, d_date_sk#267] "
          },
          "2" : {
            "sign" : -389434046,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3991579424,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] Condition : (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) "
          },
          "3" : {
            "sign" : -1501807529,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3991579424,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#308)] PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)] ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n+- BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n   :- Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n   :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_net_profit#78,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#308)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [d_date_sk#267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3992629712,
        "inputRowCount" : 142556622
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1466.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 1466.0, 1466.0, 1466.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 25678,
        "TotalTasksDurationInMs" : 44898,
        "IOBytes" : {
          "Total" : 383858800,
          "Details" : {
            "IR" : 141990440,
            "IW" : 0,
            "SR" : 0,
            "SW" : 241868360
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1582797315,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1333973102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2059894055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44)),17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78)),17,2) AS catalog_sales_profit#238]\n         +- Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- Project [d_date_sk#80]\n               :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n               :     :     :        +- Filter isnotnull(i_item_sk#137)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n               :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n               :     :        +- Filter isnotnull(s_store_sk#108)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#239]\n               :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- Project [d_date_sk#239]\n               :              +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#267]\n                     :     :     +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- Project [d_date_sk#267]\n                        +- Filter (((isnotnull(d_moy#275) AND isnotnull(d_year#273)) AND (((d_moy#275 >= 4) AND (d_moy#275 <= 10)) AND (d_year#273 = 2000))) AND isnotnull(d_date_sk#267))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1270003727,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_profit#236, store_returns_loss#237, catalog_sales_profit#238] Arguments: 100, [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_profit#236, store_returns_loss#237, catalog_sales_profit#238] "
          },
          "1" : {
            "sign" : -1318327357,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1792,
            "rowCount" : 9,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] Keys [4]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Functions [3]: [sum(UnscaledValue(ss_net_profit#24)), sum(UnscaledValue(sr_net_loss#44)), sum(UnscaledValue(cs_net_profit#78))] Aggregate Attributes [3]: [sum(UnscaledValue(ss_net_profit#24))#295L, sum(UnscaledValue(sr_net_loss#44))#296L, sum(UnscaledValue(cs_net_profit#78))#297L] Results [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, MakeDecimal(sum(UnscaledValue(ss_net_profit#24))#295L,17,2) AS store_sales_profit#236, MakeDecimal(sum(UnscaledValue(sr_net_loss#44))#296L,17,2) AS store_returns_loss#237, MakeDecimal(sum(UnscaledValue(cs_net_profit#78))#297L,17,2) AS catalog_sales_profit#238] "
          },
          "2" : {
            "sign" : 308412854,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[i_item_id#138 ASC NULLS FIRST,i_item_desc#141 ASC NULLS FIRST,s_store_id#109 ASC NULLS FIRST,s_store_name#113 ASC NULLS FIRST], output=[i_item_id#138,i_item_desc#141,s_store_id#109,s_store_name#113,store_sales_profit#236,store_returns_loss#237,catalog_sales_profit#238])\n+- HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(UnscaledValue(ss_net_profit#24)), sum(UnscaledValue(sr_net_loss#44)), sum(UnscaledValue(cs_net_profit#78))], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_profit#236, store_returns_loss#237, catalog_sales_profit#238])\n   +- ShuffleQueryStage 11\n      +- Exchange hashpartitioning(i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, 200), ENSURE_REQUIREMENTS, [plan_id=1711]\n         +- *(17) HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[partial_sum(UnscaledValue(ss_net_profit#24)), partial_sum(UnscaledValue(sr_net_loss#44)), partial_sum(UnscaledValue(cs_net_profit#78))], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L])\n            +- *(17) Project [ss_net_profit#24, sr_net_loss#44, cs_net_profit#78, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n               +- *(17) SortMergeJoin [sr_customer_sk#28, sr_item_sk#27], [cs_bill_customer_sk#48, cs_item_sk#60], Inner\n                  :- *(15) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 10\n                  :        +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=1627]\n                  :           +- *(14) Project [ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_net_loss#44]\n                  :              +- *(14) SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n                  :                 :- *(12) Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n                  :                 :  +- AQEShuffleRead coalesced\n                  :                 :     +- ShuffleQueryStage 9\n                  :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1431]\n                  :                 :           +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n                  :                 :              +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n                  :                 :                 :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n                  :                 :                 :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n                  :                 :                 :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :     +- ShuffleQueryStage 8\n                  :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1194]\n                  :                 :                 :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n                  :                 :                 :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n                  :                 :                 :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n                  :                 :                 :     :                 :  +- *(8) ColumnarToRow\n                  :                 :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:de...\n                  :                 :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#1168]\n                  :                 :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   BroadcastQueryStage 1\n                                                                                                   +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                                +- == Initial Plan ==\n                                                                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1165]\n                                                                                                   +- Project [d_date_sk#80]\n                                                                                                      +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :                 :     :                 +- BroadcastQueryStage 0\n                  :                 :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                  :                 :                 :     :                       +- *(1) Project [d_date_sk#80]\n                  :                 :                 :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n                  :                 :                 :     :                             +- *(1) ColumnarToRow\n                  :                 :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :                 :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n                  :                 :                 :        +- AQEShuffleRead coalesced\n                  :                 :                 :           +- ShuffleQueryStage 1\n                  :                 :                 :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n                  :                 :                 :                 +- *(2) Filter isnotnull(i_item_sk#137)\n                  :                 :                 :                    +- *(2) ColumnarToRow\n                  :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n                  :                 :                 +- BroadcastQueryStage 2\n                  :                 :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n                  :                 :                       +- *(3) Filter isnotnull(s_store_sk#108)\n                  :                 :                          +- *(3) ColumnarToRow\n                  :                 :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n                  :                 +- *(13) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n                  :                    +- AQEShuffleRead coalesced\n                  :                       +- ShuffleQueryStage 6\n                  :                          +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=836]\n                  :                             +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_net_loss#44]\n                  :                                +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n                  :                                   :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n                  :                                   :  +- *(6) ColumnarToRow\n                  :                                   :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_net_loss#44,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)>\n                  :                                   :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n                  :                                   :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                                                                           +- Project [d_date_sk#239]\n                                                                              +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                                   +- BroadcastQueryStage 3\n                  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                  :                                         +- *(4) Project [d_date_sk#239]\n                  :                                            +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                  :                                               +- *(4) ColumnarToRow\n                  :                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  +- *(16) Sort [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 7\n                           +- Exchange hashpartitioning(cs_bill_customer_sk#48, cs_item_sk#60, 200), ENSURE_REQUIREMENTS, [plan_id=889]\n                              +- *(7) Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_net_profit#78]\n                                 +- *(7) BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n                                    :- *(7) Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n                                    :  +- *(7) ColumnarToRow\n                                    :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_net_profit#78,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#308)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>\n                                    :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#810]\n                                    +- BroadcastQueryStage 5\n                                       +- ReusedExchange [d_date_sk#267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1792,
        "inputRowCount" : 9
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 207, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 96,
        "TotalTasksDurationInMs" : 86,
        "IOBytes" : {
          "Total" : 1999,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1999,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1867358147,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11683785740,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 11683785740,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "0" : {
            "sign" : -514736417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9559461060,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 9559461060,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] "
          },
          "2" : {
            "sign" : 2062506274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10034157760,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 10034157760,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "3" : {
            "sign" : -2084316809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n+- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n   :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :  +- Project [d_date_sk#80]\n   :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   +- Project [d_date_sk#80]\n      +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1769331835,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#80] Arguments: 0 "
          },
          "1" : {
            "sign" : -1688815289,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#25] Right keys [1]: [d_date_sk#80] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -166613979,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] Input [7]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25, d_date_sk#80] "
          },
          "2" : {
            "sign" : 1829185131,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] Condition : (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9)) "
          },
          "3" : {
            "sign" : 1070930274,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 10034157760,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)] PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n+- BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :- Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:de...\n   :        +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#1168]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1165]\n   :                 +- Project [d_date_sk#80]\n   :                    +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n         +- *(1) Project [d_date_sk#80]\n            +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10035206576,
        "inputRowCount" : 250853974
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3621.0,
        "FinishedTasksDistributionInMs" : [ 1466.0, 1466.0, 2155.0, 2155.0, 2155.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 22542,
        "TotalTasksDurationInMs" : 4780,
        "IOBytes" : {
          "Total" : 89673364,
          "Details" : {
            "IR" : 25776842,
            "IW" : 0,
            "SR" : 0,
            "SW" : 63896522
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 905486313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22512,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 22512,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#108, s_store_id#109, s_store_name#113] "
          },
          "1" : {
            "sign" : 1662377663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#108) "
          },
          "2" : {
            "sign" : -1717782204,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#108, s_store_id#109, s_rec_start_date#110, s_rec_end_date#111, s_closed_date_sk#112, s_store_name#113, s_number_employees#114, s_floor_space#115, s_hours#116, s_manager#117, s_market_id#118, s_geography_class#119, s_market_desc#120, s_market_manager#121, s_division_id#122, s_division_name#123, s_company_id#124, s_company_name#125, s_street_number#126, s_street_name#127, s_street_type#128, s_suite_number#129, s_city#130, s_county#131, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n+- Filter isnotnull(s_store_sk#108)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1355809318,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 22512,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Condition : isnotnull(s_store_sk#108) "
          },
          "1" : {
            "sign" : 238072065,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 22512,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#108)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 22512,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1452,
        "TotalTasksDurationInMs" : 1446,
        "IOBytes" : {
          "Total" : 15885,
          "Details" : {
            "IR" : 15885,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -488425942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "1" : {
            "sign" : 2093141778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80)) "
          },
          "2" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#80]\n+- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1863617961,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#80] Input [3]: [d_date_sk#80, d_year#86, d_moy#88] "
          },
          "1" : {
            "sign" : -719007937,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#80, d_year#86, d_moy#88] Condition : ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80)) "
          },
          "2" : {
            "sign" : 24675189,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#80, d_year#86, d_moy#88] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#80]\n+- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 600,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1889,
        "TotalTasksDurationInMs" : 1882,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 146946920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4080,
                "rowCount" : 340
              },
              "compileTime" : {
                "sizeInBytes" : 4080,
                "rowCount" : 340
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#239] "
          },
          "1" : {
            "sign" : 371403280,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 83640,
                "rowCount" : 340
              },
              "compileTime" : {
                "sizeInBytes" : 83640,
                "rowCount" : 340
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239)) "
          },
          "2" : {
            "sign" : -694123955,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#239]\n+- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000))) AND isnotnull(d_date_sk#239))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -983019871,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#239] Input [3]: [d_date_sk#239, d_year#245, d_moy#247] "
          },
          "1" : {
            "sign" : -1611553155,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#239, d_year#245, d_moy#247] Condition : (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239)) "
          },
          "2" : {
            "sign" : 540070464,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4080,
            "rowCount" : 340,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#239, d_year#245, d_moy#247] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2000), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#239]\n+- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 10)) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 10), (d_year#245 = ..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), Equ..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4080,
        "inputRowCount" : 340
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2331,
        "TotalTasksDurationInMs" : 2325,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1315424704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 125394109463,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 125394109463,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "1" : {
            "sign" : 745222796,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 130016933775,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 130016933775,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "2" : {
            "sign" : 1240817619,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] "
          },
          "3" : {
            "sign" : -455820365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 51993683701,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 51993683701,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n+- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n   :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n   :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n   :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, ss_sold_date_sk#25]\n   :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :     :     :  +- Project [d_date_sk#80]\n   :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     +- Project [d_date_sk#80]\n   :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 2000))) AND isnotnull(d_date_sk#80))\n   :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n   :        +- Filter isnotnull(i_item_sk#137)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n   +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n      +- Filter isnotnull(s_store_sk#108)\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1585101545,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Arguments: 2 "
          },
          "4" : {
            "sign" : -1537821988,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] Arguments: [ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1690604186,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 121064208,
            "rowCount" : 2522171,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24] Arguments: 8 "
          },
          "6" : {
            "sign" : -2144644184,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Arguments: [i_item_sk#137 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -809477628,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 130016933775,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#108] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -738051064,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 125394109463,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Input [10]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_sk#108, s_store_id#109, s_store_name#113] "
          },
          "2" : {
            "sign" : -1922243077,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141] Input [8]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_sk#137, i_item_id#138, i_item_desc#141] "
          },
          "7" : {
            "sign" : 1992427326,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Arguments: 1 "
          },
          "3" : {
            "sign" : 308035349,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 51993683701,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#137] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24, i_item_id#138, i_item_desc#141]\n   :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n   :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 8\n   :     :     +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1194]\n   :     :        +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_net_profit#24]\n   :     :           +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :     :              :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :     :              :  +- *(8) ColumnarToRow\n   :     :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_net_profit:de...\n   :     :              :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#1168]\n   :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1165]\n                                             +- Project [d_date_sk#80]\n                                                +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :              +- BroadcastQueryStage 0\n   :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :     :                    +- *(1) Project [d_date_sk#80]\n   :     :                       +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 2000)) AND isnotnull(d_date_sk#80))\n   :     :                          +- *(1) ColumnarToRow\n   :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 2000), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     +- Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 1\n   :           +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              +- *(2) Filter isnotnull(i_item_sk#137)\n   :                 +- *(2) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n         +- *(3) Filter isnotnull(s_store_sk#108)\n            +- *(3) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 153114424,
        "inputRowCount" : 2726573
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 318776, 312725, 333301, 322810, 346215, 314742, 352875, 308691, 302640, 326844, 364196, 332895, 339555, 322810, 333098, 330878, 333301, 343995, 359535, 355316, 333098, 355095, 332895, 326844, 341775, 348435, 339555, 343995, 337335, 341775, 346215, 327047, 350655, 326844, 337335, 330878, 333098, 335115, 324827, 361755, 329064, 333301, 325030, 316759, 312725, 346215, 337538, 337741, 314742, 322810, 366416, 341775, 333098, 333098, 331284, 366416, 361976, 335521, 328861, 350655, 328861, 333098, 322810, 350655, 307038, 339555, 355095, 329064, 346215, 333098, 359535, 322810, 359535, 339758, 324827, 322810, 311072, 348435, 335115, 328861, 333301, 314742, 359977, 333098, 355095, 318776, 310708, 341978, 355095, 348435, 346215, 348435, 333098, 304839, 346215, 339758, 330878, 322810, 359535, 308873, 337335, 346215, 339555, 357315, 330878, 352875, 343995, 366416, 324827, 331081, 327047, 320793, 316759, 350655, 333098, 350655, 352875, 308691, 313110, 331081, 331081, 318776, 352875, 335115, 324827, 343995, 328861, 310708, 343995, 322810, 337538, 335521, 330878, 333301, 339758, 337335, 320793, 348638, 339555, 341978, 348435, 327047, 339555, 352875, 333098, 346418, 328861, 327047, 341775, 343995, 343995, 295300, 348435, 325233, 348435, 337741, 361755, 327047, 339555, 314742, 322810, 352875, 333098, 355095, 339555, 337741, 328861, 305021, 361755, 339555, 331081, 361755, 357315, 337335, 339758, 339555, 282623, 324827, 320793, 337538, 339555, 339758, 333098, 314742, 352875, 353078, 335318, 324827, 328861, 310890, 339555, 333098, 333098, 308873, 341775, 305021, 330878, 324827, 348435, 355095 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 29,
        "FinishedTasksTotalTimeInMs" : 262810.0,
        "FinishedTasksDistributionInMs" : [ 566.0, 1191.0, 6227.0, 19600.0, 22119.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4801,
        "TotalTasksDurationInMs" : 6649,
        "IOBytes" : {
          "Total" : 395783272,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 82064413,
            "SW" : 313718859
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1585649225,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#137, i_item_id#138, i_item_desc#141] "
          },
          "1" : {
            "sign" : 753925474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#137) "
          },
          "2" : {
            "sign" : 56198239,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#137, i_item_id#138, i_rec_start_date#139, i_rec_end_date#140, i_item_desc#141, i_current_price#142, i_wholesale_cost#143, i_brand_id#144, i_brand#145, i_class_id#146, i_class#147, i_category_id#148, i_category#149, i_manufact_id#150, i_manufact#151, i_size#152, i_formulation#153, i_color#154, i_units#155, i_container#156, i_manager_id#157, i_product_name#158], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n+- Filter isnotnull(i_item_sk#137)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -695483387,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Condition : isnotnull(i_item_sk#137) "
          },
          "1" : {
            "sign" : 954171368,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#137)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 31212000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 22783,
        "TotalTasksDurationInMs" : 33019,
        "IOBytes" : {
          "Total" : 30535140,
          "Details" : {
            "IR" : 12367249,
            "IW" : 0,
            "SR" : 0,
            "SW" : 18167891
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226752582,
  "SQLEndTimeInMs" : 1702226790298,
  "Objectives" : {
    "DurationInMs" : 37716,
    "IOBytes" : {
      "Total" : 1673594821,
      "Details" : {
        "IR" : 226354905,
        "IW" : 0,
        "SR" : 723619958,
        "SW" : 723619958
      }
    }
  }
}
