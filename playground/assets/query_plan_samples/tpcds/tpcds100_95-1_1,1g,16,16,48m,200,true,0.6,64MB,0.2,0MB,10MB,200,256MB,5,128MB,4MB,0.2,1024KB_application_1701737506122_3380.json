{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : 1694012844,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2426217640,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
        },
        "12" : {
          "sign" : 1624979406,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#215] "
        },
        "8" : {
          "sign" : -80374449,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3165690088,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#158L = ws_order_number#23L) "
        },
        "19" : {
          "sign" : 88294007,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#69, ca_address_id#70, ca_street_number#71, ca_street_name#72, ca_street_type#73, ca_suite_number#74, ca_city#75, ca_county#76, ca_state#77, ca_zip#78, ca_country#79, ca_gmt_offset#80, ca_location_type#81], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 1377273635,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#82, web_site_id#83, web_rec_start_date#84, web_rec_end_date#85, web_name#86, web_open_date_sk#87, web_close_date_sk#88, web_class#89, web_manager#90, web_mkt_id#91, web_mkt_class#92, web_mkt_desc#93, web_market_manager#94, web_company_id#95, web_company_name#96, web_street_number#97, web_street_name#98, web_street_type#99, web_suite_number#100, web_city#101, web_county#102, web_state#103, web_zip#104, web_country#105, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 304717384,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3169482096,
          "rowCount" : 72033684,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#152 = ca_address_sk#69) "
        },
        "15" : {
          "sign" : -2023291712,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#41, d_date_id#42, d_date#43, d_month_seq#44, d_week_seq#45, d_quarter_seq#46, d_year#47, d_dow#48, d_moy#49, d_dom#50, d_qoy#51, d_fy_year#52, d_fy_quarter_seq#53, d_fy_week_seq#54, d_day_name#55, d_quarter_name#56, d_holiday#57, d_weekend#58, d_following_holiday#59, d_first_dom#60, d_last_dom#61, d_same_day_ly#62, d_same_day_lq#63, d_current_day#64, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1659461314,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#142, ws_ship_date_sk#143, ws_item_sk#144, ws_bill_customer_sk#145, ws_bill_cdemo_sk#146, ws_bill_hdemo_sk#147, ws_bill_addr_sk#148, ws_ship_customer_sk#149, ws_ship_cdemo_sk#150, ws_ship_hdemo_sk#151, ws_ship_addr_sk#152, ws_web_page_sk#153, ws_web_site_sk#154, ws_ship_mode_sk#155, ws_warehouse_sk#156, ws_promo_sk#157, ws_order_number#158L, ws_quantity#159, ws_wholesale_cost#160, ws_list_price#161, ws_sales_price#162, ws_ext_discount_amt#163, ws_ext_sales_price#164, ws_ext_wholesale_cost#165, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "9" : {
          "sign" : -796407655,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3165690088,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#143, ws_ship_addr_sk#152, ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174] "
        },
        "33" : {
          "sign" : -1900918675,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 34666602920,
          "rowCount" : 866665073,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#124L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#122)) "
        },
        "22" : {
          "sign" : -774249470,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1956,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82)) "
        },
        "26" : {
          "sign" : 1479729330,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1439672980,
          "rowCount" : 71983649,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#21, ws_order_number#23L] "
        },
        "37" : {
          "sign" : 363941090,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#176, wr_item_sk#177, wr_refunded_customer_sk#178, wr_refunded_cdemo_sk#179, wr_refunded_hdemo_sk#180, wr_refunded_addr_sk#181, wr_returning_customer_sk#182, wr_returning_cdemo_sk#183, wr_returning_hdemo_sk#184, wr_returning_addr_sk#185, wr_web_page_sk#186, wr_reason_sk#187, wr_order_number#188L, wr_return_quantity#189, wr_return_amt#190, wr_return_tax#191, wr_return_amt_inc_tax#192, wr_fee#193, wr_return_ship_cost#194, wr_refunded_cash#195, wr_reversed_charge#196, wr_account_credit#197, wr_net_loss#198, wr_returned_date_sk#199], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 1619007157,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 720,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#41] "
        },
        "24" : {
          "sign" : 309158293,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13866641168,
          "rowCount" : 866665073,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
        },
        "35" : {
          "sign" : 1023548804,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 115190224,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
        },
        "16" : {
          "sign" : 1632348414,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#218] "
        },
        "5" : {
          "sign" : -1417810628,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2785698440,
          "rowCount" : 69642461,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#152, ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174] "
        },
        "10" : {
          "sign" : -943301912,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14965080416,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_ship_date_sk#143) AND isnotnull(ws_ship_addr_sk#152)) AND isnotnull(ws_web_site_sk#154)) AND might_contain(scalar-subquery#216 [], xxhash64(ws_ship_date_sk#143, 42))) AND (might_contain(scalar-subquery#219 [], xxhash64(ws_ship_addr_sk#152, 42)) AND might_contain(scalar-subquery#222 [], xxhash64(ws_web_site_sk#154, 42)))) "
        },
        "21" : {
          "sign" : 275194275,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 48,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [web_site_sk#82] "
        },
        "32" : {
          "sign" : 1419075026,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13866641168,
          "rowCount" : 866665073,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
        },
        "6" : {
          "sign" : 1694703811,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3342838128,
          "rowCount" : 69642461,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#143 = d_date_sk#41) "
        },
        "36" : {
          "sign" : -1874018209,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(wr_order_number#188L) "
        },
        "1" : {
          "sign" : 1854874064,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2710355648,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174] "
        },
        "17" : {
          "sign" : 588163364,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 215484,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#69] "
        },
        "25" : {
          "sign" : 1623147243,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 27733282336,
          "rowCount" : 866665073,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#124L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#122)) "
        },
        "14" : {
          "sign" : 818283794,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14760,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41)) "
        },
        "31" : {
          "sign" : 851771108,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#108, ws_ship_date_sk#109, ws_item_sk#110, ws_bill_customer_sk#111, ws_bill_cdemo_sk#112, ws_bill_hdemo_sk#113, ws_bill_addr_sk#114, ws_ship_customer_sk#115, ws_ship_cdemo_sk#116, ws_ship_hdemo_sk#117, ws_ship_addr_sk#118, ws_web_page_sk#119, ws_web_site_sk#120, ws_ship_mode_sk#121, ws_warehouse_sk#122, ws_promo_sk#123, ws_order_number#124L, ws_quantity#125, ws_wholesale_cost#126, ws_list_price#127, ws_sales_price#128, ws_ext_discount_amt#129, ws_ext_sales_price#130, ws_ext_wholesale_cost#131, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : 198536704,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 32,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#158L) AS order count#0L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#169)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(ws_net_profit#174)),17,2) AS total net profit#2] "
        },
        "20" : {
          "sign" : 912641810,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#221] "
        },
        "27" : {
          "sign" : 567187487,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972598992,
          "rowCount" : 71983649,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21)) "
        },
        "2" : {
          "sign" : -130460135,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3387944560,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#154 = web_site_sk#82) "
        },
        "18" : {
          "sign" : 1796804393,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4417422,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69)) "
        },
        "30" : {
          "sign" : 77811962,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972598992,
          "rowCount" : 71983649,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_order_number#124L) AND isnotnull(ws_warehouse_sk#122)) "
        },
        "7" : {
          "sign" : -740436313,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3165690088,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#158L = wr_order_number#188L) "
        },
        "29" : {
          "sign" : 1173297125,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1439672980,
          "rowCount" : 71983649,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#122, ws_order_number#124L] "
        },
        "3" : {
          "sign" : -1635086484,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2593212624,
          "rowCount" : 72033684,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174] "
        },
        "28" : {
          "sign" : -2038853797,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#7, ws_ship_date_sk#8, ws_item_sk#9, ws_bill_customer_sk#10, ws_bill_cdemo_sk#11, ws_bill_hdemo_sk#12, ws_bill_addr_sk#13, ws_ship_customer_sk#14, ws_ship_cdemo_sk#15, ws_ship_hdemo_sk#16, ws_ship_addr_sk#17, ws_web_page_sk#18, ws_web_site_sk#19, ws_ship_mode_sk#20, ws_warehouse_sk#21, ws_promo_sk#22, ws_order_number#23L, ws_quantity#24, ws_wholesale_cost#25, ws_list_price#26, ws_sales_price#27, ws_ext_discount_amt#28, ws_ext_sales_price#29, ws_ext_wholesale_cost#30, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 11,
        "fromName" : "LogicalRelation",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Aggregate",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Aggregate",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Aggregate",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 10,
        "fromName" : "Filter",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Join",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "LogicalRelation",
        "toId" : 36,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Filter",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 34,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 34,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Join",
        "toId" : 33,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 33,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Join",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Aggregate [count(distinct ws_order_number#158L) AS order count#0L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#169)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(ws_net_profit#174)),17,2) AS total net profit#2]\n+- Project [ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174]\n   +- Join Inner, (ws_web_site_sk#154 = web_site_sk#82)\n      :- Project [ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174]\n      :  +- Join Inner, (ws_ship_addr_sk#152 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#152, ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174]\n      :     :  +- Join Inner, (ws_ship_date_sk#143 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#158L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#158L = ws_order_number#23L)\n      :     :     :  :  :- Project [ws_ship_date_sk#143, ws_ship_addr_sk#152, ws_web_site_sk#154, ws_order_number#158L, ws_ext_ship_cost#169, ws_net_profit#174]\n      :     :     :  :  :  +- Filter ((((isnotnull(ws_ship_date_sk#143) AND isnotnull(ws_ship_addr_sk#152)) AND isnotnull(ws_web_site_sk#154)) AND might_contain(scalar-subquery#216 [], xxhash64(ws_ship_date_sk#143, 42))) AND (might_contain(scalar-subquery#219 [], xxhash64(ws_ship_addr_sk#152, 42)) AND might_contain(scalar-subquery#222 [], xxhash64(ws_web_site_sk#154, 42))))\n      :     :     :  :  :     :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#215]\n      :     :     :  :  :     :  :  +- Project [d_date_sk#41]\n      :     :     :  :  :     :  :     +- Filter ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41))\n      :     :     :  :  :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date_id#42,d_date#43,d_month_seq#44,d_week_seq#45,d_quarter_seq#46,d_year#47,d_dow#48,d_moy#49,d_dom#50,d_qoy#51,d_fy_year#52,d_fy_quarter_seq#53,d_fy_week_seq#54,d_day_name#55,d_quarter_name#56,d_holiday#57,d_weekend#58,d_following_holiday#59,d_first_dom#60,d_last_dom#61,d_same_day_ly#62,d_same_day_lq#63,d_current_day#64,... 4 more fields] parquet\n      :     :     :  :  :     :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#218]\n      :     :     :  :  :     :  :  +- Project [ca_address_sk#69]\n      :     :     :  :  :     :  :     +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n      :     :     :  :  :     :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_address_id#70,ca_street_number#71,ca_street_name#72,ca_street_type#73,ca_suite_number#74,ca_city#75,ca_county#76,ca_state#77,ca_zip#78,ca_country#79,ca_gmt_offset#80,ca_location_type#81] parquet\n      :     :     :  :  :     :  +- Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#221]\n      :     :     :  :  :     :     +- Project [web_site_sk#82]\n      :     :     :  :  :     :        +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n      :     :     :  :  :     :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#82,web_site_id#83,web_rec_start_date#84,web_rec_end_date#85,web_name#86,web_open_date_sk#87,web_close_date_sk#88,web_class#89,web_manager#90,web_mkt_id#91,web_mkt_class#92,web_mkt_desc#93,web_market_manager#94,web_company_id#95,web_company_name#96,web_street_number#97,web_street_name#98,web_street_type#99,web_suite_number#100,web_city#101,web_county#102,web_state#103,web_zip#104,web_country#105,... 2 more fields] parquet\n      :     :     :  :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#142,ws_ship_date_sk#143,ws_item_sk#144,ws_bill_customer_sk#145,ws_bill_cdemo_sk#146,ws_bill_hdemo_sk#147,ws_bill_addr_sk#148,ws_ship_customer_sk#149,ws_ship_cdemo_sk#150,ws_ship_hdemo_sk#151,ws_ship_addr_sk#152,ws_web_page_sk#153,ws_web_site_sk#154,ws_ship_mode_sk#155,ws_warehouse_sk#156,ws_promo_sk#157,ws_order_number#158L,ws_quantity#159,ws_wholesale_cost#160,ws_list_price#161,ws_sales_price#162,ws_ext_discount_amt#163,ws_ext_sales_price#164,ws_ext_wholesale_cost#165,... 10 more fields] parquet\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#124L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#122))\n      :     :     :  :        :- Project [ws_warehouse_sk#21, ws_order_number#23L]\n      :     :     :  :        :  +- Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n      :     :     :  :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#7,ws_ship_date_sk#8,ws_item_sk#9,ws_bill_customer_sk#10,ws_bill_cdemo_sk#11,ws_bill_hdemo_sk#12,ws_bill_addr_sk#13,ws_ship_customer_sk#14,ws_ship_cdemo_sk#15,ws_ship_hdemo_sk#16,ws_ship_addr_sk#17,ws_web_page_sk#18,ws_web_site_sk#19,ws_ship_mode_sk#20,ws_warehouse_sk#21,ws_promo_sk#22,ws_order_number#23L,ws_quantity#24,ws_wholesale_cost#25,ws_list_price#26,ws_sales_price#27,ws_ext_discount_amt#28,ws_ext_sales_price#29,ws_ext_wholesale_cost#30,... 10 more fields] parquet\n      :     :     :  :        +- Project [ws_warehouse_sk#122, ws_order_number#124L]\n      :     :     :  :           +- Filter (isnotnull(ws_order_number#124L) AND isnotnull(ws_warehouse_sk#122))\n      :     :     :  :              +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#108,ws_ship_date_sk#109,ws_item_sk#110,ws_bill_customer_sk#111,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124L,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#129,ws_ext_sales_price#130,ws_ext_wholesale_cost#131,... 10 more fields] parquet\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#124L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#122))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- Project [wr_order_number#188L]\n      :     :     :        :  :  +- Filter isnotnull(wr_order_number#188L)\n      :     :     :        :  :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#176,wr_item_sk#177,wr_refunded_customer_sk#178,wr_refunded_cdemo_sk#179,wr_refunded_hdemo_sk#180,wr_refunded_addr_sk#181,wr_returning_customer_sk#182,wr_returning_cdemo_sk#183,wr_returning_hdemo_sk#184,wr_returning_addr_sk#185,wr_web_page_sk#186,wr_reason_sk#187,wr_order_number#188L,wr_return_quantity#189,wr_return_amt#190,wr_return_tax#191,wr_return_amt_inc_tax#192,wr_fee#193,wr_return_ship_cost#194,wr_refunded_cash#195,wr_reversed_charge#196,wr_account_credit#197,wr_net_loss#198,wr_returned_date_sk#199] parquet\n      :     :     :        :  +- Project [ws_warehouse_sk#21, ws_order_number#23L]\n      :     :     :        :     +- Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n      :     :     :        :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#7,ws_ship_date_sk#8,ws_item_sk#9,ws_bill_customer_sk#10,ws_bill_cdemo_sk#11,ws_bill_hdemo_sk#12,ws_bill_addr_sk#13,ws_ship_customer_sk#14,ws_ship_cdemo_sk#15,ws_ship_hdemo_sk#16,ws_ship_addr_sk#17,ws_web_page_sk#18,ws_web_site_sk#19,ws_ship_mode_sk#20,ws_warehouse_sk#21,ws_promo_sk#22,ws_order_number#23L,ws_quantity#24,ws_wholesale_cost#25,ws_list_price#26,ws_sales_price#27,ws_ext_discount_amt#28,ws_ext_sales_price#29,ws_ext_wholesale_cost#30,... 10 more fields] parquet\n      :     :     :        +- Project [ws_warehouse_sk#122, ws_order_number#124L]\n      :     :     :           +- Filter (isnotnull(ws_order_number#124L) AND isnotnull(ws_warehouse_sk#122))\n      :     :     :              +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#108,ws_ship_date_sk#109,ws_item_sk#110,ws_bill_customer_sk#111,ws_bill_cdemo_sk#112,ws_bill_hdemo_sk#113,ws_bill_addr_sk#114,ws_ship_customer_sk#115,ws_ship_cdemo_sk#116,ws_ship_hdemo_sk#117,ws_ship_addr_sk#118,ws_web_page_sk#119,ws_web_site_sk#120,ws_ship_mode_sk#121,ws_warehouse_sk#122,ws_promo_sk#123,ws_order_number#124L,ws_quantity#125,ws_wholesale_cost#126,ws_list_price#127,ws_sales_price#128,ws_ext_discount_amt#129,ws_ext_sales_price#130,ws_ext_wholesale_cost#131,... 10 more fields] parquet\n      :     :     +- Project [d_date_sk#41]\n      :     :        +- Filter ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date_id#42,d_date#43,d_month_seq#44,d_week_seq#45,d_quarter_seq#46,d_year#47,d_dow#48,d_moy#49,d_dom#50,d_qoy#51,d_fy_year#52,d_fy_quarter_seq#53,d_fy_week_seq#54,d_day_name#55,d_quarter_name#56,d_holiday#57,d_weekend#58,d_following_holiday#59,d_first_dom#60,d_last_dom#61,d_same_day_ly#62,d_same_day_lq#63,d_current_day#64,... 4 more fields] parquet\n      :     +- Project [ca_address_sk#69]\n      :        +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n      :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_address_id#70,ca_street_number#71,ca_street_name#72,ca_street_type#73,ca_suite_number#74,ca_city#75,ca_county#76,ca_state#77,ca_zip#78,ca_country#79,ca_gmt_offset#80,ca_location_type#81] parquet\n      +- Project [web_site_sk#82]\n         +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n            +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#82,web_site_id#83,web_rec_start_date#84,web_rec_end_date#85,web_name#86,web_open_date_sk#87,web_close_date_sk#88,web_class#89,web_manager#90,web_mkt_id#91,web_mkt_class#92,web_mkt_desc#93,web_market_manager#94,web_company_id#95,web_company_name#96,web_street_number#97,web_street_name#98,web_street_type#99,web_suite_number#100,web_city#101,web_county#102,web_state#103,web_zip#104,web_country#105,... 2 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 76182371326,
      "inputRowCount" : 368280527
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1244995050,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056,
            "rowCount" : 33,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1056,
        "inputRowCount" : 33
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227589413,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 114,
        "IOBytes" : {
          "Total" : 2467,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2467,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -239015960,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1 "
          },
          "8" : {
            "sign" : -29006189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = ws_order_number#23L) "
          },
          "19" : {
            "sign" : 313536687,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -2028518752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#277 = ca_address_sk#69) "
          },
          "15" : {
            "sign" : -931687549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34666602920,
            "rowCount" : 866665073,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "11" : {
            "sign" : 445884188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27733282336,
            "rowCount" : 866665073,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "9" : {
            "sign" : 749453919,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15074304,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : -1987435525,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#82], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : 313536532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3 "
          },
          "16" : {
            "sign" : -1013248352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2426217640,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
          },
          "5" : {
            "sign" : 1621496792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "10" : {
            "sign" : 1535665958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13866641168,
            "rowCount" : 866665073,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
          },
          "21" : {
            "sign" : -619207322,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#69], BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : 1614330265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#268 = d_date_sk#41) "
          },
          "1" : {
            "sign" : -375923092,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "17" : {
            "sign" : -1671426843,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#188L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1115947236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13866641168,
            "rowCount" : 866665073,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "0" : {
            "sign" : -901870180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228] "
          },
          "20" : {
            "sign" : 281205670,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#41], BroadcastQueryStage 9 "
          },
          "2" : {
            "sign" : -1444807505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#279 = web_site_sk#82) "
          },
          "18" : {
            "sign" : -239015805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6 "
          },
          "7" : {
            "sign" : 1669057258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = wr_order_number#188L) "
          },
          "3" : {
            "sign" : -1921906714,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228]\n+- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n   +- Join Inner, (ws_web_site_sk#279 = web_site_sk#82)\n      :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :  +- Join Inner, (ws_ship_addr_sk#277 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :     :  +- Join Inner, (ws_ship_date_sk#268 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#283L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#283L = ws_order_number#23L)\n      :     :     :  :  :- LogicalQueryStage Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :  :        :- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1\n      :     :     :  :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- LogicalQueryStage Project [wr_order_number#188L], ShuffleQueryStage 4\n      :     :     :        :  +- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6\n      :     :     :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8\n      :     :     +- LogicalQueryStage Project [d_date_sk#41], BroadcastQueryStage 9\n      :     +- LogicalQueryStage Project [ca_address_sk#69], BroadcastQueryStage 10\n      +- LogicalQueryStage Project [web_site_sk#82], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5897345704,
        "inputRowCount" : 295482680
      },
      "PD" : {
        "3" : [ 42981, 39737, 40202, 38945, 39684, 38295, 41735, 39556, 41051, 41844, 41319, 41023, 44089, 39246, 39675, 40775, 41298, 38596, 39136, 38444, 39942, 39391, 39329, 41474, 38149, 42410, 41923, 42416, 38925, 41188, 40721, 40446, 40183, 41296, 38143, 40763, 39063, 37875, 42974, 41431, 41040, 38418, 40047, 40283, 41700, 38959, 41770, 41198, 40951, 42298, 41591, 41072, 39308, 41865, 40093, 39723, 37742, 40823, 38560, 39942, 41148, 39430, 39931, 41980, 40554, 38760, 38427, 40079, 40110, 41735, 39458, 45035, 40309, 39038, 41107, 41826, 39595, 43501, 41709, 39571, 39666, 39629, 36798, 37504, 40069, 40343, 37740, 38155, 37966, 40422, 39286, 38559, 39827, 41061, 43070, 40826, 39866, 40045, 38058, 37999, 40498, 39427, 38491, 41866, 39328, 39975, 40352, 38290, 39347, 40407, 40809, 37974, 43217, 41499, 38975, 39571, 40339, 39148, 39591, 40700, 41062, 40158, 40197, 40871, 39548, 40344, 39363, 40034, 39147, 41691, 41763, 39901, 39295, 41290, 40663, 39621, 39319, 40875, 40784, 39668, 40229, 37163, 39111, 38205, 40400, 40977, 39778, 39792, 40375, 38883, 44058, 39339, 41353, 37993, 39968, 42503, 42950, 42672, 40713, 41309, 40479, 40087, 42719, 40209, 41434, 39079, 42501, 39703, 42618, 42049, 40672, 43662, 38723, 41907, 40187, 38679, 39765, 39458, 39548, 36982, 41329, 37962, 38077, 40082, 39551, 38721, 38855, 42015, 40912, 40763, 42789, 41908, 37650, 39807, 39581, 40244, 41483, 41048, 39333, 40631 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 94,
        "FinishedTasksTotalTimeInMs" : 375115.0,
        "FinishedTasksDistributionInMs" : [ 381.0, 457.0, 800.0, 4729.0, 23405.0 ]
      },
      "StartTimeInMs" : 1702227562544,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26983,
        "IOBytes" : {
          "Total" : 2490552419,
          "Details" : {
            "IR" : 169733091,
            "IW" : 0,
            "SR" : 1834730754,
            "SW" : 486088574
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -239015960,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1 "
          },
          "8" : {
            "sign" : -29006189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = ws_order_number#23L) "
          },
          "19" : {
            "sign" : 313536687,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -2028518752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#277 = ca_address_sk#69) "
          },
          "15" : {
            "sign" : -931687549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1492187287445756111626240,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "11" : {
            "sign" : 445884188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 165812658540412928,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "9" : {
            "sign" : 749453919,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15074304,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : -1987435525,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#82], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : 313536532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3 "
          },
          "16" : {
            "sign" : -1013248352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14510671940550016,
            "rowCount" : 518238283591072,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
          },
          "5" : {
            "sign" : 1621496792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "10" : {
            "sign" : 1535665958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82906329270206464,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
          },
          "21" : {
            "sign" : -619207322,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#69], BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : 1614330265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#268 = d_date_sk#41) "
          },
          "1" : {
            "sign" : -375923092,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "17" : {
            "sign" : -1671426843,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#188L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1115947236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 596874914978302444650496,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "0" : {
            "sign" : -901870180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228] "
          },
          "20" : {
            "sign" : 281205670,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#41], BroadcastQueryStage 9 "
          },
          "2" : {
            "sign" : -1444807505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#279 = web_site_sk#82) "
          },
          "18" : {
            "sign" : -239015805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6 "
          },
          "7" : {
            "sign" : 1669057258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = wr_order_number#188L) "
          },
          "3" : {
            "sign" : -1921906714,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228]\n+- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n   +- Join Inner, (ws_web_site_sk#279 = web_site_sk#82)\n      :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :  +- Join Inner, (ws_ship_addr_sk#277 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :     :  +- Join Inner, (ws_ship_date_sk#268 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#283L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#283L = ws_order_number#23L)\n      :     :     :  :  :- LogicalQueryStage Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :  :        :- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1\n      :     :     :  :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- LogicalQueryStage Project [wr_order_number#188L], ShuffleQueryStage 4\n      :     :     :        :  +- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6\n      :     :     :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8\n      :     :     +- LogicalQueryStage Project [d_date_sk#41], BroadcastQueryStage 9\n      :     +- LogicalQueryStage Project [ca_address_sk#69], BroadcastQueryStage 10\n      +- LogicalQueryStage Project [web_site_sk#82], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7049083992,
        "inputRowCount" : 295482676
      },
      "PD" : {
        "4" : [ 2307992, 2348845, 2361121, 2371358, 2371663, 2347662, 2313557, 2362100, 2354274, 2328692, 2355254, 2334740, 2348000, 2325273, 2340921, 2344055, 2354167, 2332242, 2360183, 2358205, 2349144, 2363951, 2379577, 2357785, 2343296, 2353889, 2338272, 2359339, 2332882, 2324510, 2314168, 2357195, 2323309, 2344025, 2319438, 2339226, 2343315, 2346126, 2344287, 2333397, 2347591, 2343864, 2326020, 2348080, 2352844, 2330184, 2364951, 2351458, 2342337, 2340079, 2336305, 2359185, 2316847, 2355532, 2361685, 2359211, 2344900, 2360783, 2358523, 2353595, 2329596, 2356273, 2328521, 2325046, 2341162, 2334659, 2333573, 2354403, 2331790, 2343172, 2320880, 2355122, 2317233, 2342410, 2359216, 2364970, 2340498, 2377316, 2331990, 2357261, 2350521, 2341754, 2322247, 2331519, 2344917, 2328693, 2349403, 2332442, 2316321, 2333449, 2349124, 2341099, 2353590, 2341410, 2331508, 2333887, 2344633, 2350014, 2319601, 2341233, 2335068, 2333163, 2348797, 2348833, 2381734, 2358819, 2338944, 2347519, 2345374, 2326829, 2336963, 2335603, 2349680, 2351694, 2346848, 2339933, 2333823, 2339171, 2357002, 2344953, 2324993, 2329644, 2327575, 2371906, 2340152, 2337180, 2325569, 2327702, 2343330, 2348125, 2330156, 2373782, 2319930, 2362090, 2331054, 2347673, 2357792, 2324652, 2340676, 2356969, 2373466, 2365460, 2318930, 2361526, 2360085, 2344239, 2340098, 2345215, 2353081, 2343605, 2351276, 2338931, 2346670, 2337667, 2333160, 2360745, 2352031, 2362532, 2342607, 2325269, 2368312, 2359795, 2337439, 2352160, 2362919, 2334686, 2357291, 2351456, 2350349, 2344905, 2379524, 2331690, 2361492, 2343832, 2349197, 2348165, 2336034, 2361726, 2346011, 2360896, 2346689, 2314680, 2332698, 2327846, 2308758, 2362659, 2313727, 2355847, 2345099, 2345403, 2351499, 2353082, 2326773, 2357232, 2328565, 2333035, 2358325, 2322622, 2329087, 2360087 ],
        "3" : [ 42981, 39737, 40202, 38945, 39684, 38295, 41735, 39556, 41051, 41844, 41319, 41023, 44089, 39246, 39675, 40775, 41298, 38596, 39136, 38444, 39942, 39391, 39329, 41474, 38149, 42410, 41923, 42416, 38925, 41188, 40721, 40446, 40183, 41296, 38143, 40763, 39063, 37875, 42974, 41431, 41040, 38418, 40047, 40283, 41700, 38959, 41770, 41198, 40951, 42298, 41591, 41072, 39308, 41865, 40093, 39723, 37742, 40823, 38560, 39942, 41148, 39430, 39931, 41980, 40554, 38760, 38427, 40079, 40110, 41735, 39458, 45035, 40309, 39038, 41107, 41826, 39595, 43501, 41709, 39571, 39666, 39629, 36798, 37504, 40069, 40343, 37740, 38155, 37966, 40422, 39286, 38559, 39827, 41061, 43070, 40826, 39866, 40045, 38058, 37999, 40498, 39427, 38491, 41866, 39328, 39975, 40352, 38290, 39347, 40407, 40809, 37974, 43217, 41499, 38975, 39571, 40339, 39148, 39591, 40700, 41062, 40158, 40197, 40871, 39548, 40344, 39363, 40034, 39147, 41691, 41763, 39901, 39295, 41290, 40663, 39621, 39319, 40875, 40784, 39668, 40229, 37163, 39111, 38205, 40400, 40977, 39778, 39792, 40375, 38883, 44058, 39339, 41353, 37993, 39968, 42503, 42950, 42672, 40713, 41309, 40479, 40087, 42719, 40209, 41434, 39079, 42501, 39703, 42618, 42049, 40672, 43662, 38723, 41907, 40187, 38679, 39765, 39458, 39548, 36982, 41329, 37962, 38077, 40082, 39551, 38721, 38855, 42015, 40912, 40763, 42789, 41908, 37650, 39807, 39581, 40244, 41483, 41048, 39333, 40631 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 67,
        "FinishedTasksTotalTimeInMs" : 19749.0,
        "FinishedTasksDistributionInMs" : [ 106.0, 237.0, 276.0, 340.0, 478.0 ]
      },
      "StartTimeInMs" : 1702227568603,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20924,
        "IOBytes" : {
          "Total" : 1931726821,
          "Details" : {
            "IR" : 57896740,
            "IW" : 0,
            "SR" : 1834730754,
            "SW" : 39099327
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -239015960,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1 "
          },
          "8" : {
            "sign" : -29006189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = ws_order_number#23L) "
          },
          "19" : {
            "sign" : 313536687,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -2028518752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#277 = ca_address_sk#69) "
          },
          "15" : {
            "sign" : -931687549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1492187287445756111626240,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "11" : {
            "sign" : 445884188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 165812658540412928,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "9" : {
            "sign" : 749453919,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15074304,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : -1987435525,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#82], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : 313536532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3 "
          },
          "16" : {
            "sign" : -1013248352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14510671940550016,
            "rowCount" : 518238283591072,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
          },
          "5" : {
            "sign" : 1621496792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "10" : {
            "sign" : 1535665958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82906329270206464,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
          },
          "21" : {
            "sign" : -619207322,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#69], BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : 1614330265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#268 = d_date_sk#41) "
          },
          "1" : {
            "sign" : -375923092,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "17" : {
            "sign" : -1671426843,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#188L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1115947236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 596874914978302444650496,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "0" : {
            "sign" : -901870180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228] "
          },
          "20" : {
            "sign" : 281205670,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#41], BroadcastQueryStage 9 "
          },
          "2" : {
            "sign" : -1444807505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#279 = web_site_sk#82) "
          },
          "18" : {
            "sign" : -239015805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6 "
          },
          "7" : {
            "sign" : 1669057258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = wr_order_number#188L) "
          },
          "3" : {
            "sign" : -1921906714,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228]\n+- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n   +- Join Inner, (ws_web_site_sk#279 = web_site_sk#82)\n      :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :  +- Join Inner, (ws_ship_addr_sk#277 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :     :  +- Join Inner, (ws_ship_date_sk#268 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#283L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#283L = ws_order_number#23L)\n      :     :     :  :  :- LogicalQueryStage Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :  :        :- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1\n      :     :     :  :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- LogicalQueryStage Project [wr_order_number#188L], ShuffleQueryStage 4\n      :     :     :        :  +- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6\n      :     :     :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8\n      :     :     +- LogicalQueryStage Project [d_date_sk#41], BroadcastQueryStage 9\n      :     +- LogicalQueryStage Project [ca_address_sk#69], BroadcastQueryStage 10\n      +- LogicalQueryStage Project [web_site_sk#82], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7049083992,
        "inputRowCount" : 295482676
      },
      "PD" : {
        "4" : [ 2307992, 2348845, 2361121, 2371358, 2371663, 2347662, 2313557, 2362100, 2354274, 2328692, 2355254, 2334740, 2348000, 2325273, 2340921, 2344055, 2354167, 2332242, 2360183, 2358205, 2349144, 2363951, 2379577, 2357785, 2343296, 2353889, 2338272, 2359339, 2332882, 2324510, 2314168, 2357195, 2323309, 2344025, 2319438, 2339226, 2343315, 2346126, 2344287, 2333397, 2347591, 2343864, 2326020, 2348080, 2352844, 2330184, 2364951, 2351458, 2342337, 2340079, 2336305, 2359185, 2316847, 2355532, 2361685, 2359211, 2344900, 2360783, 2358523, 2353595, 2329596, 2356273, 2328521, 2325046, 2341162, 2334659, 2333573, 2354403, 2331790, 2343172, 2320880, 2355122, 2317233, 2342410, 2359216, 2364970, 2340498, 2377316, 2331990, 2357261, 2350521, 2341754, 2322247, 2331519, 2344917, 2328693, 2349403, 2332442, 2316321, 2333449, 2349124, 2341099, 2353590, 2341410, 2331508, 2333887, 2344633, 2350014, 2319601, 2341233, 2335068, 2333163, 2348797, 2348833, 2381734, 2358819, 2338944, 2347519, 2345374, 2326829, 2336963, 2335603, 2349680, 2351694, 2346848, 2339933, 2333823, 2339171, 2357002, 2344953, 2324993, 2329644, 2327575, 2371906, 2340152, 2337180, 2325569, 2327702, 2343330, 2348125, 2330156, 2373782, 2319930, 2362090, 2331054, 2347673, 2357792, 2324652, 2340676, 2356969, 2373466, 2365460, 2318930, 2361526, 2360085, 2344239, 2340098, 2345215, 2353081, 2343605, 2351276, 2338931, 2346670, 2337667, 2333160, 2360745, 2352031, 2362532, 2342607, 2325269, 2368312, 2359795, 2337439, 2352160, 2362919, 2334686, 2357291, 2351456, 2350349, 2344905, 2379524, 2331690, 2361492, 2343832, 2349197, 2348165, 2336034, 2361726, 2346011, 2360896, 2346689, 2314680, 2332698, 2327846, 2308758, 2362659, 2313727, 2355847, 2345099, 2345403, 2351499, 2353082, 2326773, 2357232, 2328565, 2333035, 2358325, 2322622, 2329087, 2360087 ],
        "3" : [ 42981, 39737, 40202, 38945, 39684, 38295, 41735, 39556, 41051, 41844, 41319, 41023, 44089, 39246, 39675, 40775, 41298, 38596, 39136, 38444, 39942, 39391, 39329, 41474, 38149, 42410, 41923, 42416, 38925, 41188, 40721, 40446, 40183, 41296, 38143, 40763, 39063, 37875, 42974, 41431, 41040, 38418, 40047, 40283, 41700, 38959, 41770, 41198, 40951, 42298, 41591, 41072, 39308, 41865, 40093, 39723, 37742, 40823, 38560, 39942, 41148, 39430, 39931, 41980, 40554, 38760, 38427, 40079, 40110, 41735, 39458, 45035, 40309, 39038, 41107, 41826, 39595, 43501, 41709, 39571, 39666, 39629, 36798, 37504, 40069, 40343, 37740, 38155, 37966, 40422, 39286, 38559, 39827, 41061, 43070, 40826, 39866, 40045, 38058, 37999, 40498, 39427, 38491, 41866, 39328, 39975, 40352, 38290, 39347, 40407, 40809, 37974, 43217, 41499, 38975, 39571, 40339, 39148, 39591, 40700, 41062, 40158, 40197, 40871, 39548, 40344, 39363, 40034, 39147, 41691, 41763, 39901, 39295, 41290, 40663, 39621, 39319, 40875, 40784, 39668, 40229, 37163, 39111, 38205, 40400, 40977, 39778, 39792, 40375, 38883, 44058, 39339, 41353, 37993, 39968, 42503, 42950, 42672, 40713, 41309, 40479, 40087, 42719, 40209, 41434, 39079, 42501, 39703, 42618, 42049, 40672, 43662, 38723, 41907, 40187, 38679, 39765, 39458, 39548, 36982, 41329, 37962, 38077, 40082, 39551, 38721, 38855, 42015, 40912, 40763, 42789, 41908, 37650, 39807, 39581, 40244, 41483, 41048, 39333, 40631 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 67,
        "FinishedTasksTotalTimeInMs" : 19749.0,
        "FinishedTasksDistributionInMs" : [ 106.0, 237.0, 276.0, 340.0, 478.0 ]
      },
      "StartTimeInMs" : 1702227568635,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20892,
        "IOBytes" : {
          "Total" : 1931726821,
          "Details" : {
            "IR" : 57896740,
            "IW" : 0,
            "SR" : 1834730754,
            "SW" : 39099327
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -2027553447,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 56,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 27493.0,
        "FinishedTasksDistributionInMs" : [ 3159.0, 3409.0, 3428.0, 3577.0, 3656.0 ]
      },
      "StartTimeInMs" : 1702227520700,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 68827,
        "IOBytes" : {
          "Total" : 3303160332,
          "Details" : {
            "IR" : 974610302,
            "IW" : 0,
            "SR" : 1834758934,
            "SW" : 493791096
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 395695613,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 14077.0,
        "FinishedTasksDistributionInMs" : [ 3304.0, 3540.0, 3577.0, 3656.0, 3656.0 ]
      },
      "StartTimeInMs" : 1702227521847,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 67680,
        "IOBytes" : {
          "Total" : 3298143826,
          "Details" : {
            "IR" : 969594198,
            "IW" : 0,
            "SR" : 1834758837,
            "SW" : 493790791
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -239015960,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1 "
          },
          "8" : {
            "sign" : -29006189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = ws_order_number#23L) "
          },
          "19" : {
            "sign" : 313536687,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -2028518752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#277 = ca_address_sk#69) "
          },
          "15" : {
            "sign" : -931687549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1492187287445756111626240,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "11" : {
            "sign" : 445884188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 165812658540412928,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "9" : {
            "sign" : 749453919,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15074304,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : -1987435525,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#82], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : 313536532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3 "
          },
          "16" : {
            "sign" : -1013248352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14510671940550016,
            "rowCount" : 518238283591072,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
          },
          "5" : {
            "sign" : 1621496792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "10" : {
            "sign" : 1535665958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82906329270206464,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
          },
          "21" : {
            "sign" : -619207322,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#69], BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : 1614330265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#268 = d_date_sk#41) "
          },
          "1" : {
            "sign" : -375923092,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "17" : {
            "sign" : -1671426843,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#188L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1115947236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 596874914978302444650496,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "0" : {
            "sign" : -901870180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228] "
          },
          "20" : {
            "sign" : 281205670,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#41], BroadcastQueryStage 9 "
          },
          "2" : {
            "sign" : -1444807505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#279 = web_site_sk#82) "
          },
          "18" : {
            "sign" : -239015805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6 "
          },
          "7" : {
            "sign" : 1669057258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = wr_order_number#188L) "
          },
          "3" : {
            "sign" : -1921906714,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228]\n+- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n   +- Join Inner, (ws_web_site_sk#279 = web_site_sk#82)\n      :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :  +- Join Inner, (ws_ship_addr_sk#277 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :     :  +- Join Inner, (ws_ship_date_sk#268 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#283L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#283L = ws_order_number#23L)\n      :     :     :  :  :- LogicalQueryStage Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :  :        :- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1\n      :     :     :  :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- LogicalQueryStage Project [wr_order_number#188L], ShuffleQueryStage 4\n      :     :     :        :  +- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6\n      :     :     :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8\n      :     :     +- LogicalQueryStage Project [d_date_sk#41], BroadcastQueryStage 9\n      :     +- LogicalQueryStage Project [ca_address_sk#69], BroadcastQueryStage 10\n      +- LogicalQueryStage Project [web_site_sk#82], BroadcastQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7049083992,
        "inputRowCount" : 295482676
      },
      "PD" : {
        "5" : [ 202908, 205424, 205273, 207157, 204697, 205630, 205714, 205459, 204161, 204218, 207947, 202968, 208826, 202576, 202769, 205984, 207426, 204613, 209535, 206326, 202390, 209419, 204828, 205381, 201728, 208591, 201594, 207130, 201558, 204154, 201603, 205945, 202496, 207090, 203057, 207561, 205500, 205149, 207092, 206429, 205572, 206250, 204718, 205939, 204116, 203556, 206834, 205951, 204931, 205459, 205284, 204827, 204463, 207425, 205626, 204616, 202988, 202921, 206001, 205391, 201974, 207260, 202932, 200754, 205357, 202881, 205774, 204975, 204069, 202178, 202042, 204029, 204919, 207124, 204937, 207897, 204487, 207119, 204253, 205168, 207931, 208185, 206737, 203379, 202662, 204304, 204514, 204582, 204234, 204259, 207448, 205782, 205280, 208238, 205186, 202965, 205762, 207729, 199468, 201768, 207466, 204284, 206330, 206431, 208530, 208147, 204125, 204452, 205239, 204216, 205777, 203675, 204550, 203008, 205800, 206122, 202435, 205780, 206513, 203300, 206919, 203583, 202304, 206480, 203799, 204748, 207737, 204133, 204034, 202331, 201757, 207267, 203488, 204096, 204335, 204125, 207952, 201334, 205880, 206363, 209594, 207206, 203803, 205668, 206573, 203911, 204261, 203403, 205000, 206923, 203763, 205386, 206548, 204291, 204272, 203355, 205540, 204911, 208442, 203219, 207798, 208450, 206444, 205251, 203686, 206448, 205700, 206226, 205938, 205306, 209461, 203398, 207670, 203881, 206121, 208610, 203423, 205295, 205646, 203491, 205655, 203399, 201460, 200953, 199908, 205548, 205381, 204450, 206866, 204157, 207058, 206376, 203897, 207083, 203675, 203434, 207172, 201927, 204758, 204719 ],
        "4" : [ 2307992, 2348845, 2361121, 2371358, 2371663, 2347662, 2313557, 2362100, 2354274, 2328692, 2355254, 2334740, 2348000, 2325273, 2340921, 2344055, 2354167, 2332242, 2360183, 2358205, 2349144, 2363951, 2379577, 2357785, 2343296, 2353889, 2338272, 2359339, 2332882, 2324510, 2314168, 2357195, 2323309, 2344025, 2319438, 2339226, 2343315, 2346126, 2344287, 2333397, 2347591, 2343864, 2326020, 2348080, 2352844, 2330184, 2364951, 2351458, 2342337, 2340079, 2336305, 2359185, 2316847, 2355532, 2361685, 2359211, 2344900, 2360783, 2358523, 2353595, 2329596, 2356273, 2328521, 2325046, 2341162, 2334659, 2333573, 2354403, 2331790, 2343172, 2320880, 2355122, 2317233, 2342410, 2359216, 2364970, 2340498, 2377316, 2331990, 2357261, 2350521, 2341754, 2322247, 2331519, 2344917, 2328693, 2349403, 2332442, 2316321, 2333449, 2349124, 2341099, 2353590, 2341410, 2331508, 2333887, 2344633, 2350014, 2319601, 2341233, 2335068, 2333163, 2348797, 2348833, 2381734, 2358819, 2338944, 2347519, 2345374, 2326829, 2336963, 2335603, 2349680, 2351694, 2346848, 2339933, 2333823, 2339171, 2357002, 2344953, 2324993, 2329644, 2327575, 2371906, 2340152, 2337180, 2325569, 2327702, 2343330, 2348125, 2330156, 2373782, 2319930, 2362090, 2331054, 2347673, 2357792, 2324652, 2340676, 2356969, 2373466, 2365460, 2318930, 2361526, 2360085, 2344239, 2340098, 2345215, 2353081, 2343605, 2351276, 2338931, 2346670, 2337667, 2333160, 2360745, 2352031, 2362532, 2342607, 2325269, 2368312, 2359795, 2337439, 2352160, 2362919, 2334686, 2357291, 2351456, 2350349, 2344905, 2379524, 2331690, 2361492, 2343832, 2349197, 2348165, 2336034, 2361726, 2346011, 2360896, 2346689, 2314680, 2332698, 2327846, 2308758, 2362659, 2313727, 2355847, 2345099, 2345403, 2351499, 2353082, 2326773, 2357232, 2328565, 2333035, 2358325, 2322622, 2329087, 2360087 ],
        "3" : [ 42981, 39737, 40202, 38945, 39684, 38295, 41735, 39556, 41051, 41844, 41319, 41023, 44089, 39246, 39675, 40775, 41298, 38596, 39136, 38444, 39942, 39391, 39329, 41474, 38149, 42410, 41923, 42416, 38925, 41188, 40721, 40446, 40183, 41296, 38143, 40763, 39063, 37875, 42974, 41431, 41040, 38418, 40047, 40283, 41700, 38959, 41770, 41198, 40951, 42298, 41591, 41072, 39308, 41865, 40093, 39723, 37742, 40823, 38560, 39942, 41148, 39430, 39931, 41980, 40554, 38760, 38427, 40079, 40110, 41735, 39458, 45035, 40309, 39038, 41107, 41826, 39595, 43501, 41709, 39571, 39666, 39629, 36798, 37504, 40069, 40343, 37740, 38155, 37966, 40422, 39286, 38559, 39827, 41061, 43070, 40826, 39866, 40045, 38058, 37999, 40498, 39427, 38491, 41866, 39328, 39975, 40352, 38290, 39347, 40407, 40809, 37974, 43217, 41499, 38975, 39571, 40339, 39148, 39591, 40700, 41062, 40158, 40197, 40871, 39548, 40344, 39363, 40034, 39147, 41691, 41763, 39901, 39295, 41290, 40663, 39621, 39319, 40875, 40784, 39668, 40229, 37163, 39111, 38205, 40400, 40977, 39778, 39792, 40375, 38883, 44058, 39339, 41353, 37993, 39968, 42503, 42950, 42672, 40713, 41309, 40479, 40087, 42719, 40209, 41434, 39079, 42501, 39703, 42618, 42049, 40672, 43662, 38723, 41907, 40187, 38679, 39765, 39458, 39548, 36982, 41329, 37962, 38077, 40082, 39551, 38721, 38855, 42015, 40912, 40763, 42789, 41908, 37650, 39807, 39581, 40244, 41483, 41048, 39333, 40631 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227568956,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20571,
        "IOBytes" : {
          "Total" : 1834733221,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1834730754,
            "SW" : 2467
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -965373146,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227522514,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 67013,
        "IOBytes" : {
          "Total" : 3293282859,
          "Details" : {
            "IR" : 964761314,
            "IW" : 0,
            "SR" : 1834758532,
            "SW" : 493763013
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : -239015960,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727607552,
                "rowCount" : 71983648
              },
              "compileTime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1 "
          },
          "8" : {
            "sign" : -29006189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = ws_order_number#23L) "
          },
          "19" : {
            "sign" : 313536687,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727607552,
                "rowCount" : 71983648
              },
              "compileTime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -2028518752,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 57398929099776,
                "rowCount" : 1304521115904
              },
              "compileTime" : {
                "sizeInBytes" : 57398929099776,
                "rowCount" : 1304521115904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#277 = ca_address_sk#69) "
          },
          "15" : {
            "sign" : -931687549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1492187287445756111626240,
                "rowCount" : 37304682186143902790656
              },
              "compileTime" : {
                "sizeInBytes" : 1492187287445756111626240,
                "rowCount" : 37304682186143902790656
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "11" : {
            "sign" : 445884188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 165812658540412928,
                "rowCount" : 5181645579387904
              },
              "compileTime" : {
                "sizeInBytes" : 165812658540412928,
                "rowCount" : 5181645579387904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)) "
          },
          "9" : {
            "sign" : 749453919,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15074304,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 3165690088,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : -1987435525,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048736,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#82], BroadcastQueryStage 11 "
          },
          "13" : {
            "sign" : 313536532,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727607552,
                "rowCount" : 71983648
              },
              "compileTime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3 "
          },
          "16" : {
            "sign" : -1013248352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14510671940550016,
                "rowCount" : 518238283591072
              },
              "compileTime" : {
                "sizeInBytes" : 14510671940550016,
                "rowCount" : 518238283591072
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_order_number#188L = ws_order_number#23L) "
          },
          "5" : {
            "sign" : 1621496792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 656808960,
                "rowCount" : 16420224
              },
              "compileTime" : {
                "sizeInBytes" : 656808960,
                "rowCount" : 16420224
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "10" : {
            "sign" : 1535665958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 82906329270206464,
                "rowCount" : 5181645579387904
              },
              "compileTime" : {
                "sizeInBytes" : 82906329270206464,
                "rowCount" : 5181645579387904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#23L] "
          },
          "21" : {
            "sign" : -619207322,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6291456,
                "rowCount" : 79446
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#69], BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : 1614330265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 788170752,
                "rowCount" : 16420224
              },
              "compileTime" : {
                "sizeInBytes" : 788170752,
                "rowCount" : 16420224
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#268 = d_date_sk#41) "
          },
          "1" : {
            "sign" : -375923092,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 166978702835712,
                "rowCount" : 5218084463616
              },
              "compileTime" : {
                "sizeInBytes" : 166978702835712,
                "rowCount" : 5218084463616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "17" : {
            "sign" : -1671426843,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#188L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1115947236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 596874914978302444650496,
                "rowCount" : 37304682186143902790656
              },
              "compileTime" : {
                "sizeInBytes" : 596874914978302444650496,
                "rowCount" : 37304682186143902790656
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "0" : {
            "sign" : -901870180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228] "
          },
          "20" : {
            "sign" : 281205670,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1049064,
                "rowCount" : 61
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#41], BroadcastQueryStage 9 "
          },
          "2" : {
            "sign" : -1444807505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208723378544640,
                "rowCount" : 5218084463616
              },
              "compileTime" : {
                "sizeInBytes" : 208723378544640,
                "rowCount" : 5218084463616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#279 = web_site_sk#82) "
          },
          "18" : {
            "sign" : -239015805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727607552,
                "rowCount" : 71983648
              },
              "compileTime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6 "
          },
          "7" : {
            "sign" : 1669057258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ws_order_number#283L = wr_order_number#188L) "
          },
          "3" : {
            "sign" : -1921906714,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 46962760172544,
                "rowCount" : 1304521115904
              },
              "compileTime" : {
                "sizeInBytes" : 46962760172544,
                "rowCount" : 1304521115904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228]\n+- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n   +- Join Inner, (ws_web_site_sk#279 = web_site_sk#82)\n      :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :  +- Join Inner, (ws_ship_addr_sk#277 = ca_address_sk#69)\n      :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n      :     :  +- Join Inner, (ws_ship_date_sk#268 = d_date_sk#41)\n      :     :     :- Join LeftSemi, (ws_order_number#283L = wr_order_number#188L)\n      :     :     :  :- Join LeftSemi, (ws_order_number#283L = ws_order_number#23L)\n      :     :     :  :  :- LogicalQueryStage Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299], ShuffleQueryStage 0\n      :     :     :  :  +- Project [ws_order_number#23L]\n      :     :     :  :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :  :        :- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 1\n      :     :     :  :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 3\n      :     :     :  +- Project [wr_order_number#188L]\n      :     :     :     +- Join Inner, ((ws_order_number#23L = ws_order_number#249L) AND NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247))\n      :     :     :        :- Join Inner, (wr_order_number#188L = ws_order_number#23L)\n      :     :     :        :  :- LogicalQueryStage Project [wr_order_number#188L], ShuffleQueryStage 4\n      :     :     :        :  +- LogicalQueryStage Project [ws_warehouse_sk#21, ws_order_number#23L], ShuffleQueryStage 6\n      :     :     :        +- LogicalQueryStage Project [ws_warehouse_sk#247, ws_order_number#249L], ShuffleQueryStage 8\n      :     :     +- LogicalQueryStage Project [d_date_sk#41], BroadcastQueryStage 9\n      :     +- LogicalQueryStage Project [ca_address_sk#69], BroadcastQueryStage 10\n      +- LogicalQueryStage Project [web_site_sk#82], BroadcastQueryStage 11\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 722740546,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 15074304,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Arguments: 0 "
          },
          "8" : {
            "sign" : 1257222599,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_ship_date_sk#268] Right keys [1]: [d_date_sk#41] Join type: Inner Join condition: None "
          },
          "19" : {
            "sign" : 873860089,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 596874914978302444650496,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [wr_order_number#188L] Input [5]: [wr_order_number#188L, ws_warehouse_sk#21, ws_order_number#23L, ws_warehouse_sk#247, ws_order_number#249L] "
          },
          "23" : {
            "sign" : -1060405724,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [wr_order_number#188L] Arguments: 4 "
          },
          "4" : {
            "sign" : -755630476,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_web_site_sk#279] Right keys [1]: [web_site_sk#82] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -2017066129,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ws_warehouse_sk#21, ws_order_number#23L] Arguments: [ws_order_number#23L ASC NULLS FIRST], false, 0 "
          },
          "11" : {
            "sign" : -415627303,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Arguments: [ws_order_number#283L ASC NULLS FIRST], false, 0 "
          },
          "9" : {
            "sign" : 1619121304,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#283L] Right keys [1]: [wr_order_number#188L] Join type: LeftSemi Join condition: None "
          },
          "22" : {
            "sign" : 1780843824,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [wr_order_number#188L] Arguments: [wr_order_number#188L ASC NULLS FIRST], false, 0 "
          },
          "26" : {
            "sign" : -1144814425,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ws_warehouse_sk#247, ws_order_number#249L] Arguments: [ws_order_number#249L ASC NULLS FIRST], false, 0 "
          },
          "13" : {
            "sign" : 1694229481,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 82906329270206464,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ws_order_number#23L] Input [4]: [ws_warehouse_sk#21, ws_order_number#23L, ws_warehouse_sk#247, ws_order_number#249L] "
          },
          "24" : {
            "sign" : 942592291,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ws_warehouse_sk#21, ws_order_number#23L] Arguments: [ws_order_number#23L ASC NULLS FIRST], false, 0 "
          },
          "16" : {
            "sign" : 283215932,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ws_warehouse_sk#21, ws_order_number#23L] Arguments: 1 "
          },
          "5" : {
            "sign" : 1515282429,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Input [6]: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, ca_address_sk#69] "
          },
          "10" : {
            "sign" : 1188015972,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#283L] Right keys [1]: [ws_order_number#23L] Join type: LeftSemi Join condition: None "
          },
          "21" : {
            "sign" : 1890805783,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 14510671940550016,
            "rowCount" : 518238283591072,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [wr_order_number#188L] Right keys [1]: [ws_order_number#23L] Join type: Inner Join condition: None "
          },
          "6" : {
            "sign" : -852061467,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_ship_addr_sk#277] Right keys [1]: [ca_address_sk#69] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -1993539629,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#283L, sum#323L, sum#325L] Keys [1]: [ws_order_number#283L] Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299))] Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#294))#304L, sum(UnscaledValue(ws_net_profit#299))#305L] Results [3]: [ws_order_number#283L, sum#323L, sum#325L] "
          },
          "17" : {
            "sign" : -1449717812,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ws_warehouse_sk#247, ws_order_number#249L] Arguments: [ws_order_number#249L ASC NULLS FIRST], false, 0 "
          },
          "25" : {
            "sign" : -831617132,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ws_warehouse_sk#21, ws_order_number#23L] Arguments: 6 "
          },
          "14" : {
            "sign" : 1939392159,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 165812658540412928,
            "rowCount" : 5181645579387904,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#23L] Right keys [1]: [ws_order_number#249L] Join type: Inner Join condition: NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247) "
          },
          "0" : {
            "sign" : -575868717,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#283L, sum#323L, sum#325L] Keys: [] Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299)), partial_count(distinct ws_order_number#283L)] Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#294))#304L, sum(UnscaledValue(ws_net_profit#299))#305L, count(ws_order_number#283L)#303L] Results [3]: [sum#323L, sum#325L, count#328L] "
          },
          "20" : {
            "sign" : 1062188646,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 1492187287445756111626240,
            "rowCount" : 37304682186143902790656,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#23L] Right keys [1]: [ws_order_number#249L] Join type: Inner Join condition: NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247) "
          },
          "27" : {
            "sign" : -189344380,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ws_warehouse_sk#247, ws_order_number#249L] Arguments: 8 "
          },
          "2" : {
            "sign" : -1907248755,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Keys [1]: [ws_order_number#283L] Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#294)), partial_sum(UnscaledValue(ws_net_profit#299))] Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#294))#304L, sum(UnscaledValue(ws_net_profit#299))#305L] Results [3]: [ws_order_number#283L, sum#323L, sum#325L] "
          },
          "18" : {
            "sign" : -971332481,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1727607552,
            "rowCount" : 71983648,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ws_warehouse_sk#247, ws_order_number#249L] Arguments: 3 "
          },
          "30" : {
            "sign" : -156429793,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [web_site_sk#82] Arguments: 11 "
          },
          "7" : {
            "sign" : -239849398,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Input [7]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, d_date_sk#41] "
          },
          "29" : {
            "sign" : 812160923,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_address_sk#69] Arguments: 10 "
          },
          "3" : {
            "sign" : -875899735,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Input [5]: [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, web_site_sk#82] "
          },
          "28" : {
            "sign" : 629949108,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#41] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 11,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "ShuffleQueryStage",
          "toId" : 15,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Sort",
          "toId" : 14,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "ShuffleQueryStage",
          "toId" : 17,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Sort",
          "toId" : 14,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "SortMergeJoin",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "SortMergeJoin",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "ShuffleQueryStage",
          "toId" : 22,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Sort",
          "toId" : 21,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "ShuffleQueryStage",
          "toId" : 24,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Sort",
          "toId" : 21,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "SortMergeJoin",
          "toId" : 20,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "ShuffleQueryStage",
          "toId" : 26,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Sort",
          "toId" : 20,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "SortMergeJoin",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "SortMergeJoin",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299)), partial_count(distinct ws_order_number#283L)], output=[sum#323L, sum#325L, count#328L])\n+- HashAggregate(keys=[ws_order_number#283L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299))], output=[ws_order_number#283L, sum#323L, sum#325L])\n   +- HashAggregate(keys=[ws_order_number#283L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#294)), partial_sum(UnscaledValue(ws_net_profit#299))], output=[ws_order_number#283L, sum#323L, sum#325L])\n      +- Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n         +- BroadcastHashJoin [ws_web_site_sk#279], [web_site_sk#82], Inner, BuildRight, false\n            :- Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n            :  +- BroadcastHashJoin [ws_ship_addr_sk#277], [ca_address_sk#69], Inner, BuildRight, false\n            :     :- Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n            :     :  +- BroadcastHashJoin [ws_ship_date_sk#268], [d_date_sk#41], Inner, BuildRight, false\n            :     :     :- SortMergeJoin [ws_order_number#283L], [wr_order_number#188L], LeftSemi\n            :     :     :  :- SortMergeJoin [ws_order_number#283L], [ws_order_number#23L], LeftSemi\n            :     :     :  :  :- Sort [ws_order_number#283L ASC NULLS FIRST], false, 0\n            :     :     :  :  :  +- ShuffleQueryStage 0\n            :     :     :  :  :     +- Exchange hashpartitioning(ws_order_number#283L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n            :     :     :  :  :        +- *(1) Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n            :     :     :  :  :           +- *(1) Filter (((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(Subquery subquery#312, [id=#151], xxhash64(ws_ship_date_sk#268, 42))) AND might_contain(Subquery subquery#315, [id=#164], xxhash64(ws_ship_addr_sk#277, 42))) AND might_contain(Subquery subquery#318, [id=#177], xxhash64(ws_web_site_sk#279, 42)))\n            :     :     :  :  :              :  :- Subquery subquery#312, [id=#151]\n            :     :     :  :  :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n                                                         +- ShuffleQueryStage 0\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=641]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n                                                                  +- *(1) Project [d_date_sk#41]\n                                                                     +- *(1) Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n                                                                        +- *(1) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                      +- == Initial Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=149]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n                                                               +- Project [d_date_sk#41]\n                                                                  +- Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     :     :  :  :              :  :- Subquery subquery#315, [id=#164]\n            :     :     :  :  :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n                                                         +- ShuffleQueryStage 0\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=605]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n                                                                  +- *(1) Project [ca_address_sk#69]\n                                                                     +- *(1) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n                                                                        +- *(1) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                      +- == Initial Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=162]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n                                                               +- Project [ca_address_sk#69]\n                                                                  +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            :     :     :  :  :              :  +- Subquery subquery#318, [id=#177]\n            :     :     :  :  :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n                                                         +- ShuffleQueryStage 0\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=604]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n                                                                  +- *(1) Project [web_site_sk#82]\n                                                                     +- *(1) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                                                                        +- *(1) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                                                      +- == Initial Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=175]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n                                                               +- Project [web_site_sk#82]\n                                                                  +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n            :     :     :  :  :              +- *(1) ColumnarToRow\n            :     :     :  :  :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#268,ws_ship_addr_sk#277,ws_web_site_sk#279,ws_order_number#283L,ws_ext_ship_cost#294,ws_net_profit#299,ws_sold_date_sk#300] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#268), isnotnull(ws_ship_addr_sk#277), isnotnull(ws_web_site_sk#279)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:bigint,ws_ext_s...\n            :     :     :  :  +- Project [ws_order_number#23L]\n            :     :     :  :     +- SortMergeJoin [ws_order_number#23L], [ws_order_number#249L], Inner, NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)\n            :     :     :  :        :- Sort [ws_order_number#23L ASC NULLS FIRST], false, 0\n            :     :     :  :        :  +- ShuffleQueryStage 1\n            :     :     :  :        :     +- Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n            :     :     :  :        :        +- *(2) Project [ws_warehouse_sk#21, ws_order_number#23L]\n            :     :     :  :        :           +- *(2) Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n            :     :     :  :        :              +- *(2) ColumnarToRow\n            :     :     :  :        :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#21,ws_order_number#23L,ws_sold_date_sk#40] Batched: true, DataFilters: [isnotnull(ws_order_number#23L), isnotnull(ws_warehouse_sk#21)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n            :     :     :  :        +- Sort [ws_order_number#249L ASC NULLS FIRST], false, 0\n            :     :     :  :           +- ShuffleQueryStage 3\n            :     :     :  :              +- ReusedExchange [ws_warehouse_sk#247, ws_order_number#249L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n            :     :     :  +- Project [wr_order_number#188L]\n            :     :     :     +- SortMergeJoin [ws_order_number#23L], [ws_order_number#249L], Inner, NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)\n            :     :     :        :- SortMergeJoin [wr_order_number#188L], [ws_order_number#23L], Inner\n            :     :     :        :  :- Sort [wr_order_number#188L ASC NULLS FIRST], false, 0\n            :     :     :        :  :  +- ShuffleQueryStage 4\n            :     :     :        :  :     +- Exchange hashpartitioning(wr_order_number#188L, 200), ENSURE_REQUIREMENTS, [plan_id=449]\n            :     :     :        :  :        +- *(4) Project [wr_order_number#188L]\n            :     :     :        :  :           +- *(4) Filter isnotnull(wr_order_number#188L)\n            :     :     :        :  :              +- *(4) ColumnarToRow\n            :     :     :        :  :                 +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#188L,wr_returned_date_sk#199] Batched: true, DataFilters: [isnotnull(wr_order_number#188L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number)], ReadSchema: struct<wr_order_number:bigint>\n            :     :     :        :  +- Sort [ws_order_number#23L ASC NULLS FIRST], false, 0\n            :     :     :        :     +- ShuffleQueryStage 6\n            :     :     :        :        +- ReusedExchange [ws_warehouse_sk#21, ws_order_number#23L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n            :     :     :        +- Sort [ws_order_number#249L ASC NULLS FIRST], false, 0\n            :     :     :           +- ShuffleQueryStage 8\n            :     :     :              +- ReusedExchange [ws_warehouse_sk#247, ws_order_number#249L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n            :     :     +- BroadcastQueryStage 9\n            :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=520]\n            :     :           +- *(7) Project [d_date_sk#41]\n            :     :              +- *(7) Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n            :     :                 +- *(7) ColumnarToRow\n            :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     +- BroadcastQueryStage 10\n            :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=541]\n            :           +- *(8) Project [ca_address_sk#69]\n            :              +- *(8) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n            :                 +- *(8) ColumnarToRow\n            :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            +- BroadcastQueryStage 11\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=562]\n                  +- *(9) Project [web_site_sk#82]\n                     +- *(9) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                        +- *(9) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7049083992,
        "inputRowCount" : 295482676
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 202908, 205424, 205273, 207157, 204697, 205630, 205714, 205459, 204161, 204218, 207947, 202968, 208826, 202576, 202769, 205984, 207426, 204613, 209535, 206326, 202390, 209419, 204828, 205381, 201728, 208591, 201594, 207130, 201558, 204154, 201603, 205945, 202496, 207090, 203057, 207561, 205500, 205149, 207092, 206429, 205572, 206250, 204718, 205939, 204116, 203556, 206834, 205951, 204931, 205459, 205284, 204827, 204463, 207425, 205626, 204616, 202988, 202921, 206001, 205391, 201974, 207260, 202932, 200754, 205357, 202881, 205774, 204975, 204069, 202178, 202042, 204029, 204919, 207124, 204937, 207897, 204487, 207119, 204253, 205168, 207931, 208185, 206737, 203379, 202662, 204304, 204514, 204582, 204234, 204259, 207448, 205782, 205280, 208238, 205186, 202965, 205762, 207729, 199468, 201768, 207466, 204284, 206330, 206431, 208530, 208147, 204125, 204452, 205239, 204216, 205777, 203675, 204550, 203008, 205800, 206122, 202435, 205780, 206513, 203300, 206919, 203583, 202304, 206480, 203799, 204748, 207737, 204133, 204034, 202331, 201757, 207267, 203488, 204096, 204335, 204125, 207952, 201334, 205880, 206363, 209594, 207206, 203803, 205668, 206573, 203911, 204261, 203403, 205000, 206923, 203763, 205386, 206548, 204291, 204272, 203355, 205540, 204911, 208442, 203219, 207798, 208450, 206444, 205251, 203686, 206448, 205700, 206226, 205938, 205306, 209461, 203398, 207670, 203881, 206121, 208610, 203423, 205295, 205646, 203491, 205655, 203399, 201460, 200953, 199908, 205548, 205381, 204450, 206866, 204157, 207058, 206376, 203897, 207083, 203675, 203434, 207172, 201927, 204758, 204719 ],
        "4" : [ 2307992, 2348845, 2361121, 2371358, 2371663, 2347662, 2313557, 2362100, 2354274, 2328692, 2355254, 2334740, 2348000, 2325273, 2340921, 2344055, 2354167, 2332242, 2360183, 2358205, 2349144, 2363951, 2379577, 2357785, 2343296, 2353889, 2338272, 2359339, 2332882, 2324510, 2314168, 2357195, 2323309, 2344025, 2319438, 2339226, 2343315, 2346126, 2344287, 2333397, 2347591, 2343864, 2326020, 2348080, 2352844, 2330184, 2364951, 2351458, 2342337, 2340079, 2336305, 2359185, 2316847, 2355532, 2361685, 2359211, 2344900, 2360783, 2358523, 2353595, 2329596, 2356273, 2328521, 2325046, 2341162, 2334659, 2333573, 2354403, 2331790, 2343172, 2320880, 2355122, 2317233, 2342410, 2359216, 2364970, 2340498, 2377316, 2331990, 2357261, 2350521, 2341754, 2322247, 2331519, 2344917, 2328693, 2349403, 2332442, 2316321, 2333449, 2349124, 2341099, 2353590, 2341410, 2331508, 2333887, 2344633, 2350014, 2319601, 2341233, 2335068, 2333163, 2348797, 2348833, 2381734, 2358819, 2338944, 2347519, 2345374, 2326829, 2336963, 2335603, 2349680, 2351694, 2346848, 2339933, 2333823, 2339171, 2357002, 2344953, 2324993, 2329644, 2327575, 2371906, 2340152, 2337180, 2325569, 2327702, 2343330, 2348125, 2330156, 2373782, 2319930, 2362090, 2331054, 2347673, 2357792, 2324652, 2340676, 2356969, 2373466, 2365460, 2318930, 2361526, 2360085, 2344239, 2340098, 2345215, 2353081, 2343605, 2351276, 2338931, 2346670, 2337667, 2333160, 2360745, 2352031, 2362532, 2342607, 2325269, 2368312, 2359795, 2337439, 2352160, 2362919, 2334686, 2357291, 2351456, 2350349, 2344905, 2379524, 2331690, 2361492, 2343832, 2349197, 2348165, 2336034, 2361726, 2346011, 2360896, 2346689, 2314680, 2332698, 2327846, 2308758, 2362659, 2313727, 2355847, 2345099, 2345403, 2351499, 2353082, 2326773, 2357232, 2328565, 2333035, 2358325, 2322622, 2329087, 2360087 ],
        "3" : [ 42981, 39737, 40202, 38945, 39684, 38295, 41735, 39556, 41051, 41844, 41319, 41023, 44089, 39246, 39675, 40775, 41298, 38596, 39136, 38444, 39942, 39391, 39329, 41474, 38149, 42410, 41923, 42416, 38925, 41188, 40721, 40446, 40183, 41296, 38143, 40763, 39063, 37875, 42974, 41431, 41040, 38418, 40047, 40283, 41700, 38959, 41770, 41198, 40951, 42298, 41591, 41072, 39308, 41865, 40093, 39723, 37742, 40823, 38560, 39942, 41148, 39430, 39931, 41980, 40554, 38760, 38427, 40079, 40110, 41735, 39458, 45035, 40309, 39038, 41107, 41826, 39595, 43501, 41709, 39571, 39666, 39629, 36798, 37504, 40069, 40343, 37740, 38155, 37966, 40422, 39286, 38559, 39827, 41061, 43070, 40826, 39866, 40045, 38058, 37999, 40498, 39427, 38491, 41866, 39328, 39975, 40352, 38290, 39347, 40407, 40809, 37974, 43217, 41499, 38975, 39571, 40339, 39148, 39591, 40700, 41062, 40158, 40197, 40871, 39548, 40344, 39363, 40034, 39147, 41691, 41763, 39901, 39295, 41290, 40663, 39621, 39319, 40875, 40784, 39668, 40229, 37163, 39111, 38205, 40400, 40977, 39778, 39792, 40375, 38883, 44058, 39339, 41353, 37993, 39968, 42503, 42950, 42672, 40713, 41309, 40479, 40087, 42719, 40209, 41434, 39079, 42501, 39703, 42618, 42049, 40672, 43662, 38723, 41907, 40187, 38679, 39765, 39458, 39548, 36982, 41329, 37962, 38077, 40082, 39551, 38721, 38855, 42015, 40912, 40763, 42789, 41908, 37650, 39807, 39581, 40244, 41483, 41048, 39333, 40631 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 19941,
        "TotalTasksDurationInMs" : 250266,
        "IOBytes" : {
          "Total" : 1834730754,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1834728287,
            "SW" : 2467
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2027553447,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 56,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 207816953,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 56,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#332] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)#316] Results [1]: [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)#316 AS bloomFilter#317] "
          },
          "1" : {
            "sign" : -371211573,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#332] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=604]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n         +- *(1) Project [web_site_sk#82]\n            +- *(1) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 97 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 27493.0,
        "FinishedTasksDistributionInMs" : [ 3159.0, 3409.0, 3428.0, 3577.0, 3656.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 113,
        "TotalTasksDurationInMs" : 95,
        "IOBytes" : {
          "Total" : 27778,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 27778,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 395695613,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 428581262,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#330] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)#310] Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)#310 AS bloomFilter#311] "
          },
          "1" : {
            "sign" : 914552385,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#330] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=641]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n         +- *(1) Project [d_date_sk#41]\n            +- *(1) Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 14077.0,
        "FinishedTasksDistributionInMs" : [ 3304.0, 3540.0, 3577.0, 3656.0, 3656.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 313,
        "TotalTasksDurationInMs" : 292,
        "IOBytes" : {
          "Total" : 97,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 97,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1023548804,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#188L] "
          },
          "1" : {
            "sign" : -1874018209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(wr_order_number#188L) "
          },
          "2" : {
            "sign" : 363941090,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#176, wr_item_sk#177, wr_refunded_customer_sk#178, wr_refunded_cdemo_sk#179, wr_refunded_hdemo_sk#180, wr_refunded_addr_sk#181, wr_returning_customer_sk#182, wr_returning_cdemo_sk#183, wr_returning_hdemo_sk#184, wr_returning_addr_sk#185, wr_web_page_sk#186, wr_reason_sk#187, wr_order_number#188L, wr_return_quantity#189, wr_return_amt#190, wr_return_tax#191, wr_return_amt_inc_tax#192, wr_fee#193, wr_return_ship_cost#194, wr_refunded_cash#195, wr_reversed_charge#196, wr_account_credit#197, wr_net_loss#198, wr_returned_date_sk#199], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_order_number#188L]\n+- Filter isnotnull(wr_order_number#188L)\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#176,wr_item_sk#177,wr_refunded_customer_sk#178,wr_refunded_cdemo_sk#179,wr_refunded_hdemo_sk#180,wr_refunded_addr_sk#181,wr_returning_customer_sk#182,wr_returning_cdemo_sk#183,wr_returning_hdemo_sk#184,wr_returning_addr_sk#185,wr_web_page_sk#186,wr_reason_sk#187,wr_order_number#188L,wr_return_quantity#189,wr_return_amt#190,wr_return_tax#191,wr_return_amt_inc_tax#192,wr_fee#193,wr_return_ship_cost#194,wr_refunded_cash#195,wr_reversed_charge#196,wr_account_credit#197,wr_net_loss#198,wr_returned_date_sk#199] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1048483406,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [wr_order_number#188L] Input [2]: [wr_order_number#188L, wr_returned_date_sk#199] "
          },
          "1" : {
            "sign" : -1738929779,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [wr_order_number#188L, wr_returned_date_sk#199] Condition : isnotnull(wr_order_number#188L) "
          },
          "2" : {
            "sign" : 1155541776,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [2]: [wr_order_number#188L, wr_returned_date_sk#199] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] PushedFilters: [IsNotNull(wr_order_number)] ReadSchema: struct<wr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_order_number#188L]\n+- Filter isnotnull(wr_order_number#188L)\n   +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#188L,wr_returned_date_sk#199] Batched: true, DataFilters: [isnotnull(wr_order_number#188L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number)], ReadSchema: struct<wr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 115190224,
        "inputRowCount" : 7199389
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 6442,
        "TotalTasksDurationInMs" : 51800,
        "IOBytes" : {
          "Total" : 96993600,
          "Details" : {
            "IR" : 57896740,
            "IW" : 0,
            "SR" : 0,
            "SW" : 39096860
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 669778992,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3165690088,
                "rowCount" : 71947502
              },
              "compileTime" : {
                "sizeInBytes" : 3165690088,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] "
          },
          "1" : {
            "sign" : 704292991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14965080416,
                "rowCount" : 71947502
              },
              "compileTime" : {
                "sizeInBytes" : 14965080416,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(scalar-subquery#312 [], xxhash64(ws_ship_date_sk#268, 42))) AND (might_contain(scalar-subquery#315 [], xxhash64(ws_ship_addr_sk#277, 42)) AND might_contain(scalar-subquery#318 [], xxhash64(ws_web_site_sk#279, 42)))) "
          },
          "2" : {
            "sign" : 647962135,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#267, ws_ship_date_sk#268, ws_item_sk#269, ws_bill_customer_sk#270, ws_bill_cdemo_sk#271, ws_bill_hdemo_sk#272, ws_bill_addr_sk#273, ws_ship_customer_sk#274, ws_ship_cdemo_sk#275, ws_ship_hdemo_sk#276, ws_ship_addr_sk#277, ws_web_page_sk#278, ws_web_site_sk#279, ws_ship_mode_sk#280, ws_warehouse_sk#281, ws_promo_sk#282, ws_order_number#283L, ws_quantity#284, ws_wholesale_cost#285, ws_list_price#286, ws_sales_price#287, ws_ext_discount_amt#288, ws_ext_sales_price#289, ws_ext_wholesale_cost#290, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n+- Filter ((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(scalar-subquery#312 [], xxhash64(ws_ship_date_sk#268, 42))) AND (might_contain(scalar-subquery#315 [], xxhash64(ws_ship_addr_sk#277, 42)) AND might_contain(scalar-subquery#318 [], xxhash64(ws_web_site_sk#279, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311]\n   :  :  +- Project [d_date_sk#41]\n   :  :     +- Filter ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41))\n   :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date_id#42,d_date#43,d_month_seq#44,d_week_seq#45,d_quarter_seq#46,d_year#47,d_dow#48,d_moy#49,d_dom#50,d_qoy#51,d_fy_year#52,d_fy_quarter_seq#53,d_fy_week_seq#54,d_day_name#55,d_quarter_name#56,d_holiday#57,d_weekend#58,d_following_holiday#59,d_first_dom#60,d_last_dom#61,d_same_day_ly#62,d_same_day_lq#63,d_current_day#64,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314]\n   :  :  +- Project [ca_address_sk#69]\n   :  :     +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n   :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_address_id#70,ca_street_number#71,ca_street_name#72,ca_street_type#73,ca_suite_number#74,ca_city#75,ca_county#76,ca_state#77,ca_zip#78,ca_country#79,ca_gmt_offset#80,ca_location_type#81] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317]\n   :     +- Project [web_site_sk#82]\n   :        +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n   :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#82,web_site_id#83,web_rec_start_date#84,web_rec_end_date#85,web_name#86,web_open_date_sk#87,web_close_date_sk#88,web_class#89,web_manager#90,web_mkt_id#91,web_mkt_class#92,web_mkt_desc#93,web_market_manager#94,web_company_id#95,web_company_name#96,web_street_number#97,web_street_name#98,web_street_type#99,web_suite_number#100,web_city#101,web_county#102,web_state#103,web_zip#104,web_country#105,... 2 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#267,ws_ship_date_sk#268,ws_item_sk#269,ws_bill_customer_sk#270,ws_bill_cdemo_sk#271,ws_bill_hdemo_sk#272,ws_bill_addr_sk#273,ws_ship_customer_sk#274,ws_ship_cdemo_sk#275,ws_ship_hdemo_sk#276,ws_ship_addr_sk#277,ws_web_page_sk#278,ws_web_site_sk#279,ws_ship_mode_sk#280,ws_warehouse_sk#281,ws_promo_sk#282,ws_order_number#283L,ws_quantity#284,ws_wholesale_cost#285,ws_list_price#286,ws_sales_price#287,ws_ext_discount_amt#288,ws_ext_sales_price#289,ws_ext_wholesale_cost#290,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -416003662,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3165690088,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299] Input [7]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, ws_sold_date_sk#300] "
          },
          "1" : {
            "sign" : 1356074511,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3165690088,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, ws_sold_date_sk#300] Condition : (((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(Subquery subquery#312, [id=#151], xxhash64(ws_ship_date_sk#268, 42))) AND might_contain(Subquery subquery#315, [id=#164], xxhash64(ws_ship_addr_sk#277, 42))) AND might_contain(Subquery subquery#318, [id=#177], xxhash64(ws_web_site_sk#279, 42))) "
          },
          "2" : {
            "sign" : -1997806052,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3165690088,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [7]: [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299, ws_sold_date_sk#300] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales] PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)] ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:bigint,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n+- Filter (((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(Subquery subquery#312, [id=#151], xxhash64(ws_ship_date_sk#268, 42))) AND might_contain(Subquery subquery#315, [id=#164], xxhash64(ws_ship_addr_sk#277, 42))) AND might_contain(Subquery subquery#318, [id=#177], xxhash64(ws_web_site_sk#279, 42)))\n   :  :- Subquery subquery#312, [id=#151]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=149]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n   :  :              +- Project [d_date_sk#41]\n   :  :                 +- Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n   :  :- Subquery subquery#315, [id=#164]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=162]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n   :  :              +- Project [ca_address_sk#69]\n   :  :                 +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n   :  +- Subquery subquery#318, [id=#177]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=175]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n   :                 +- Project [web_site_sk#82]\n   :                    +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n   +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#268,ws_ship_addr_sk#277,ws_web_site_sk#279,ws_order_number#283L,ws_ext_ship_cost#294,ws_net_profit#299,ws_sold_date_sk#300] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#268), isnotnull(ws_ship_addr_sk#277), isnotnull(ws_web_site_sk#279)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:bigint,ws_ext_s...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3165690088,
        "inputRowCount" : 71947502
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 12133,
        "TotalTasksDurationInMs" : 131307,
        "IOBytes" : {
          "Total" : 802702662,
          "Details" : {
            "IR" : 795028223,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7674439
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1244995050,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1056,
                "rowCount" : 33
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct ws_order_number#283L) AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294)),17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299)),17,2) AS total net profit#228], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1237642947,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1056,
            "rowCount" : 33,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [sum#323L, sum#325L, count#328L] Keys: [] Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)] Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#294))#304L, sum(UnscaledValue(ws_net_profit#299))#305L, count(ws_order_number#283L)#303L] Results [3]: [count(ws_order_number#283L)#303L AS order count#226L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#294))#304L,17,2) AS total shipping cost#227, MakeDecimal(sum(UnscaledValue(ws_net_profit#299))#305L,17,2) AS total net profit#228] "
          },
          "1" : {
            "sign" : -542174393,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [sum#323L, sum#325L, count#328L] Arguments: 12 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#294)), sum(UnscaledValue(ws_net_profit#299)), count(distinct ws_order_number#283L)], output=[order count#226L, total shipping cost#227, total net profit#228])\n+- ShuffleQueryStage 12\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1312]\n      +- *(20) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299)), partial_count(distinct ws_order_number#283L)], output=[sum#323L, sum#325L, count#328L])\n         +- *(20) HashAggregate(keys=[ws_order_number#283L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#294)), merge_sum(UnscaledValue(ws_net_profit#299))], output=[ws_order_number#283L, sum#323L, sum#325L])\n            +- *(20) HashAggregate(keys=[ws_order_number#283L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#294)), partial_sum(UnscaledValue(ws_net_profit#299))], output=[ws_order_number#283L, sum#323L, sum#325L])\n               +- *(20) Project [ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n                  +- *(20) BroadcastHashJoin [ws_web_site_sk#279], [web_site_sk#82], Inner, BuildRight, false\n                     :- *(20) Project [ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n                     :  +- *(20) BroadcastHashJoin [ws_ship_addr_sk#277], [ca_address_sk#69], Inner, BuildRight, false\n                     :     :- *(20) Project [ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n                     :     :  +- *(20) BroadcastHashJoin [ws_ship_date_sk#268], [d_date_sk#41], Inner, BuildRight, false\n                     :     :     :- *(20) SortMergeJoin [ws_order_number#283L], [wr_order_number#188L], LeftSemi\n                     :     :     :  :- *(14) SortMergeJoin [ws_order_number#283L], [ws_order_number#23L], LeftSemi\n                     :     :     :  :  :- *(10) Sort [ws_order_number#283L ASC NULLS FIRST], false, 0\n                     :     :     :  :  :  +- AQEShuffleRead coalesced\n                     :     :     :  :  :     +- ShuffleQueryStage 0\n                     :     :     :  :  :        +- Exchange hashpartitioning(ws_order_number#283L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n                     :     :     :  :  :           +- *(1) Project [ws_ship_date_sk#268, ws_ship_addr_sk#277, ws_web_site_sk#279, ws_order_number#283L, ws_ext_ship_cost#294, ws_net_profit#299]\n                     :     :     :  :  :              +- *(1) Filter (((((isnotnull(ws_ship_date_sk#268) AND isnotnull(ws_ship_addr_sk#277)) AND isnotnull(ws_web_site_sk#279)) AND might_contain(Subquery subquery#312, [id=#151], xxhash64(ws_ship_date_sk#268, 42))) AND might_contain(Subquery subquery#315, [id=#164], xxhash64(ws_ship_addr_sk#277, 42))) AND might_contain(Subquery subquery#318, [id=#177], xxhash64(ws_web_site_sk#279, 42)))\n                     :     :     :  :  :                 :  :- Subquery subquery#312, [id=#151]\n                     :     :     :  :  :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=641]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n                                                                              +- *(1) Project [d_date_sk#41]\n                                                                                 +- *(1) Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[bloomFilter#311])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=149]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n                                                                           +- Project [d_date_sk#41]\n                                                                              +- Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     :     :  :  :                 :  :- Subquery subquery#315, [id=#164]\n                     :     :     :  :  :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=605]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n                                                                              +- *(1) Project [ca_address_sk#69]\n                                                                                 +- *(1) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=162]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n                                                                           +- Project [ca_address_sk#69]\n                                                                              +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     :     :     :  :  :                 :  +- Subquery subquery#318, [id=#177]\n                     :     :     :  :  :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=604]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n                                                                              +- *(1) Project [web_site_sk#82]\n                                                                                 +- *(1) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[bloomFilter#317])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=175]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n                                                                           +- Project [web_site_sk#82]\n                                                                              +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                     :     :     :  :  :                 +- *(1) ColumnarToRow\n                     :     :     :  :  :                    +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#268,ws_ship_addr_sk#277,ws_web_site_sk#279,ws_order_number#283L,ws_ext_ship_cost#294,ws_net_profit#299,ws_sold_date_sk#300] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#268), isnotnull(ws_ship_addr_sk#277), isnotnull(ws_web_site_sk#279)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:bigint,ws_ext_s...\n                     :     :     :  :  +- *(13) Project [ws_order_number#23L]\n                     :     :     :  :     +- *(13) SortMergeJoin [ws_order_number#23L], [ws_order_number#249L], Inner, NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)\n                     :     :     :  :        :- *(11) Sort [ws_order_number#23L ASC NULLS FIRST], false, 0\n                     :     :     :  :        :  +- AQEShuffleRead coalesced\n                     :     :     :  :        :     +- ShuffleQueryStage 1\n                     :     :     :  :        :        +- Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n                     :     :     :  :        :           +- *(2) Project [ws_warehouse_sk#21, ws_order_number#23L]\n                     :     :     :  :        :              +- *(2) Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n                     :     :     :  :        :                 +- *(2) ColumnarToRow\n                     :     :     :  :        :                    +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#21,ws_order_number#23L,ws_sold_date_sk#40] Batched: true, DataFilters: [isnotnull(ws_order_number#23L), isnotnull(ws_warehouse_sk#21)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n                     :     :     :  :        +- *(12) Sort [ws_order_number#249L ASC NULLS FIRST], false, 0\n                     :     :     :  :           +- AQEShuffleRead coalesced\n                     :     :     :  :              +- ShuffleQueryStage 3\n                     :     :     :  :                 +- ReusedExchange [ws_warehouse_sk#247, ws_order_number#249L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n                     :     :     :  +- *(19) Project [wr_order_number#188L]\n                     :     :     :     +- *(19) SortMergeJoin [ws_order_number#23L], [ws_order_number#249L], Inner, NOT (ws_warehouse_sk#21 = ws_warehouse_sk#247)\n                     :     :     :        :- *(17) SortMergeJoin [wr_order_number#188L], [ws_order_number#23L], Inner\n                     :     :     :        :  :- *(15) Sort [wr_order_number#188L ASC NULLS FIRST], false, 0\n                     :     :     :        :  :  +- AQEShuffleRead coalesced\n                     :     :     :        :  :     +- ShuffleQueryStage 4\n                     :     :     :        :  :        +- Exchange hashpartitioning(wr_order_number#188L, 200), ENSURE_REQUIREMENTS, [plan_id=449]\n                     :     :     :        :  :           +- *(4) Project [wr_order_number#188L]\n                     :     :     :        :  :              +- *(4) Filter isnotnull(wr_order_number#188L)\n                     :     :     :        :  :                 +- *(4) ColumnarToRow\n                     :     :     :        :  :                    +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#188L,wr_returned_date_sk#199] Batched: true, DataFilters: [isnotnull(wr_order_number#188L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number)], ReadSchema: struct<wr_order_number:bigint>\n                     :     :     :        :  +- *(16) Sort [ws_order_number#23L ASC NULLS FIRST], false, 0\n                     :     :     :        :     +- AQEShuffleRead coalesced\n                     :     :     :        :        +- ShuffleQueryStage 6\n                     :     :     :        :           +- ReusedExchange [ws_warehouse_sk#21, ws_order_number#23L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n                     :     :     :        +- *(18) Sort [ws_order_number#249L ASC NULLS FIRST], false, 0\n                     :     :     :           +- AQEShuffleRead coalesced\n                     :     :     :              +- ShuffleQueryStage 8\n                     :     :     :                 +- ReusedExchange [ws_warehouse_sk#247, ws_order_number#249L], Exchange hashpartitioning(ws_order_number#23L, 200), ENSURE_REQUIREMENTS, [plan_id=402]\n                     :     :     +- BroadcastQueryStage 9\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=520]\n                     :     :           +- *(7) Project [d_date_sk#41]\n                     :     :              +- *(7) Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n                     :     :                 +- *(7) ColumnarToRow\n                     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     +- BroadcastQueryStage 10\n                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=541]\n                     :           +- *(8) Project [ca_address_sk#69]\n                     :              +- *(8) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n                     :                 +- *(8) ColumnarToRow\n                     :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     +- BroadcastQueryStage 11\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=562]\n                           +- *(9) Project [web_site_sk#82]\n                              +- *(9) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n                                 +- *(9) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1056,
        "inputRowCount" : 33
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 2640 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 45,
        "TotalTasksDurationInMs" : 38,
        "IOBytes" : {
          "Total" : 2467,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2467,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1092773601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314]\n+- Project [ca_address_sk#69]\n   +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n      +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_address_id#70,ca_street_number#71,ca_street_name#72,ca_street_type#73,ca_suite_number#74,ca_city#75,ca_county#76,ca_state#77,ca_zip#78,ca_country#79,ca_gmt_offset#80,ca_location_type#81] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1318886597,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [ca_address_sk#69] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [buf#319] Results [1]: [buf#331] "
          },
          "1" : {
            "sign" : 1783040078,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#69] Input [2]: [ca_address_sk#69, ca_state#77] "
          },
          "2" : {
            "sign" : 973797865,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#69, ca_state#77] Condition : ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69)) "
          },
          "3" : {
            "sign" : 1446103643,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#69, ca_state#77] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n+- Project [ca_address_sk#69]\n   +- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4326,
        "TotalTasksDurationInMs" : 17733,
        "IOBytes" : {
          "Total" : 4832884,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1479729330,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              },
              "compileTime" : {
                "sizeInBytes" : 1439672980,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#21, ws_order_number#23L] "
          },
          "1" : {
            "sign" : 567187487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972598992,
                "rowCount" : 71983649
              },
              "compileTime" : {
                "sizeInBytes" : 14972598992,
                "rowCount" : 71983649
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21)) "
          },
          "2" : {
            "sign" : -2038853797,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#7, ws_ship_date_sk#8, ws_item_sk#9, ws_bill_customer_sk#10, ws_bill_cdemo_sk#11, ws_bill_hdemo_sk#12, ws_bill_addr_sk#13, ws_ship_customer_sk#14, ws_ship_cdemo_sk#15, ws_ship_hdemo_sk#16, ws_ship_addr_sk#17, ws_web_page_sk#18, ws_web_site_sk#19, ws_ship_mode_sk#20, ws_warehouse_sk#21, ws_promo_sk#22, ws_order_number#23L, ws_quantity#24, ws_wholesale_cost#25, ws_list_price#26, ws_sales_price#27, ws_ext_discount_amt#28, ws_ext_sales_price#29, ws_ext_wholesale_cost#30, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_warehouse_sk#21, ws_order_number#23L]\n+- Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#7,ws_ship_date_sk#8,ws_item_sk#9,ws_bill_customer_sk#10,ws_bill_cdemo_sk#11,ws_bill_hdemo_sk#12,ws_bill_addr_sk#13,ws_ship_customer_sk#14,ws_ship_cdemo_sk#15,ws_ship_hdemo_sk#16,ws_ship_addr_sk#17,ws_web_page_sk#18,ws_web_site_sk#19,ws_ship_mode_sk#20,ws_warehouse_sk#21,ws_promo_sk#22,ws_order_number#23L,ws_quantity#24,ws_wholesale_cost#25,ws_list_price#26,ws_sales_price#27,ws_ext_discount_amt#28,ws_ext_sales_price#29,ws_ext_wholesale_cost#30,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2033194943,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ws_warehouse_sk#21, ws_order_number#23L] Input [3]: [ws_warehouse_sk#21, ws_order_number#23L, ws_sold_date_sk#40] "
          },
          "1" : {
            "sign" : 342978676,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_warehouse_sk#21, ws_order_number#23L, ws_sold_date_sk#40] Condition : (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21)) "
          },
          "2" : {
            "sign" : -1043826504,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1439672980,
            "rowCount" : 71983649,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_warehouse_sk#21, ws_order_number#23L, ws_sold_date_sk#40] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales] PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)] ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_warehouse_sk#21, ws_order_number#23L]\n+- Filter (isnotnull(ws_order_number#23L) AND isnotnull(ws_warehouse_sk#21))\n   +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#21,ws_order_number#23L,ws_sold_date_sk#40] Batched: true, DataFilters: [isnotnull(ws_order_number#23L), isnotnull(ws_warehouse_sk#21)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1439672980,
        "inputRowCount" : 71983649
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 40842,
        "TotalTasksDurationInMs" : 399331,
        "IOBytes" : {
          "Total" : 558825598,
          "Details" : {
            "IR" : 111836351,
            "IW" : 0,
            "SR" : 0,
            "SW" : 446989247
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -965373146,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208360,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0) AS bloomFilter#314], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1366832219,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#331] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)#313] Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)#313 AS bloomFilter#314] "
          },
          "1" : {
            "sign" : 2023636065,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#331] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[bloomFilter#314])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=605]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#69, 42), 17957, 333110, 0, 0)], output=[buf#331])\n         +- *(1) Project [ca_address_sk#69]\n            +- *(1) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 27958 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 524,
        "TotalTasksDurationInMs" : 508,
        "IOBytes" : {
          "Total" : 305,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 305,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 588163364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#69] "
          },
          "1" : {
            "sign" : 1796804393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69)) "
          },
          "2" : {
            "sign" : 88294007,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#69, ca_address_id#70, ca_street_number#71, ca_street_name#72, ca_street_type#73, ca_suite_number#74, ca_city#75, ca_county#76, ca_state#77, ca_zip#78, ca_country#79, ca_gmt_offset#80, ca_location_type#81], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#69]\n+- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_address_id#70,ca_street_number#71,ca_street_name#72,ca_street_type#73,ca_suite_number#74,ca_city#75,ca_county#76,ca_state#77,ca_zip#78,ca_country#79,ca_gmt_offset#80,ca_location_type#81] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1783040078,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#69] Input [2]: [ca_address_sk#69, ca_state#77] "
          },
          "1" : {
            "sign" : 973797865,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#69, ca_state#77] Condition : ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69)) "
          },
          "2" : {
            "sign" : 1446103643,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#69, ca_state#77] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#69]\n+- Filter ((isnotnull(ca_state#77) AND (ca_state#77 = TX)) AND isnotnull(ca_address_sk#69))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#69,ca_state#77] Batched: true, DataFilters: [isnotnull(ca_state#77), (ca_state#77 = TX), isnotnull(ca_address_sk#69)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 5799,
        "TotalTasksDurationInMs" : 19744,
        "IOBytes" : {
          "Total" : 4860662,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 27778
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1619007157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#41] "
          },
          "1" : {
            "sign" : 818283794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41)) "
          },
          "2" : {
            "sign" : -2023291712,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#41, d_date_id#42, d_date#43, d_month_seq#44, d_week_seq#45, d_quarter_seq#46, d_year#47, d_dow#48, d_moy#49, d_dom#50, d_qoy#51, d_fy_year#52, d_fy_quarter_seq#53, d_fy_week_seq#54, d_day_name#55, d_quarter_name#56, d_holiday#57, d_weekend#58, d_following_holiday#59, d_first_dom#60, d_last_dom#61, d_same_day_ly#62, d_same_day_lq#63, d_current_day#64, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#41]\n+- Filter ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date_id#42,d_date#43,d_month_seq#44,d_week_seq#45,d_quarter_seq#46,d_year#47,d_dow#48,d_moy#49,d_dom#50,d_qoy#51,d_fy_year#52,d_fy_quarter_seq#53,d_fy_week_seq#54,d_day_name#55,d_quarter_name#56,d_holiday#57,d_weekend#58,d_following_holiday#59,d_first_dom#60,d_last_dom#61,d_same_day_ly#62,d_same_day_lq#63,d_current_day#64,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -902497529,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#41] Input [2]: [d_date_sk#41, d_date#43] "
          },
          "1" : {
            "sign" : 772601314,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#41, d_date#43] Condition : (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41)) "
          },
          "2" : {
            "sign" : 1411384456,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#41, d_date#43] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#41]\n+- Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 5029,
        "TotalTasksDurationInMs" : 4974,
        "IOBytes" : {
          "Total" : 172043,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 305
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 275194275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web_site_sk#82] "
          },
          "1" : {
            "sign" : -774249470,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1956,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 1956,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82)) "
          },
          "2" : {
            "sign" : 1377273635,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#82, web_site_id#83, web_rec_start_date#84, web_rec_end_date#85, web_name#86, web_open_date_sk#87, web_close_date_sk#88, web_class#89, web_manager#90, web_mkt_id#91, web_mkt_class#92, web_mkt_desc#93, web_market_manager#94, web_company_id#95, web_company_name#96, web_street_number#97, web_street_name#98, web_street_type#99, web_suite_number#100, web_city#101, web_county#102, web_state#103, web_zip#104, web_country#105, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#82]\n+- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n   +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#82,web_site_id#83,web_rec_start_date#84,web_rec_end_date#85,web_name#86,web_open_date_sk#87,web_close_date_sk#88,web_class#89,web_manager#90,web_mkt_id#91,web_mkt_class#92,web_mkt_desc#93,web_market_manager#94,web_company_id#95,web_company_name#96,web_street_number#97,web_street_name#98,web_street_type#99,web_suite_number#100,web_city#101,web_county#102,web_state#103,web_zip#104,web_country#105,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1955483955,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [web_site_sk#82] Input [2]: [web_site_sk#82, web_company_name#96] "
          },
          "1" : {
            "sign" : -985678894,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#82, web_company_name#96] Condition : ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82)) "
          },
          "2" : {
            "sign" : 977622707,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#82, web_company_name#96] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_company_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#82]\n+- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n   +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 3833,
        "TotalTasksDurationInMs" : 3818,
        "IOBytes" : {
          "Total" : 11579,
          "Details" : {
            "IR" : 11482,
            "IW" : 0,
            "SR" : 0,
            "SW" : 97
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1822658234,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0) AS bloomFilter#317]\n+- Project [web_site_sk#82]\n   +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n      +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#82,web_site_id#83,web_rec_start_date#84,web_rec_end_date#85,web_name#86,web_open_date_sk#87,web_close_date_sk#88,web_class#89,web_manager#90,web_mkt_id#91,web_mkt_class#92,web_mkt_desc#93,web_market_manager#94,web_company_id#95,web_company_name#96,web_street_number#97,web_street_name#98,web_street_type#99,web_suite_number#100,web_city#101,web_county#102,web_state#103,web_zip#104,web_country#105,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1692519086,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [web_site_sk#82] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)] Aggregate Attributes [1]: [buf#321] Results [1]: [buf#332] "
          },
          "1" : {
            "sign" : 1955483955,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [web_site_sk#82] Input [2]: [web_site_sk#82, web_company_name#96] "
          },
          "2" : {
            "sign" : -985678894,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#82, web_company_name#96] Condition : ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82)) "
          },
          "3" : {
            "sign" : 977622707,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#82, web_company_name#96] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_company_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#82, 42), 4, 144, 0, 0)], output=[buf#332])\n+- Project [web_site_sk#82]\n   +- Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))\n      +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#82,web_company_name#96] Batched: true, DataFilters: [isnotnull(web_company_name#96), (web_company_name#96 = pri), isnotnull(web_site_sk#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3829,
        "TotalTasksDurationInMs" : 3823,
        "IOBytes" : {
          "Total" : 11482,
          "Details" : {
            "IR" : 11482,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2040677071,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0) AS bloomFilter#311]\n+- Project [d_date_sk#41]\n   +- Filter ((isnotnull(d_date#43) AND ((d_date#43 >= 1999-05-01) AND (d_date#43 <= 1999-06-30))) AND isnotnull(d_date_sk#41))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date_id#42,d_date#43,d_month_seq#44,d_week_seq#45,d_quarter_seq#46,d_year#47,d_dow#48,d_moy#49,d_dom#50,d_qoy#51,d_fy_year#52,d_fy_quarter_seq#53,d_fy_week_seq#54,d_day_name#55,d_quarter_name#56,d_holiday#57,d_weekend#58,d_following_holiday#59,d_first_dom#60,d_last_dom#61,d_same_day_ly#62,d_same_day_lq#63,d_current_day#64,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 116394483,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [d_date_sk#41] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [buf#320] Results [1]: [buf#330] "
          },
          "1" : {
            "sign" : -902497529,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#41] Input [2]: [d_date_sk#41, d_date#43] "
          },
          "2" : {
            "sign" : 772601314,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#41, d_date#43] Condition : (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41)) "
          },
          "3" : {
            "sign" : 1411384456,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#41, d_date#43] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#41, 42), 60, 1825, 0, 0)], output=[buf#330])\n+- Project [d_date_sk#41]\n   +- Filter (((isnotnull(d_date#43) AND (d_date#43 >= 1999-05-01)) AND (d_date#43 <= 1999-06-30)) AND isnotnull(d_date_sk#41))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#41,d_date#43] Batched: true, DataFilters: [isnotnull(d_date#43), (d_date#43 >= 1999-05-01), (d_date#43 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2981,
        "TotalTasksDurationInMs" : 2970,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227515513,
  "SQLEndTimeInMs" : 1702227589527,
  "Objectives" : {
    "DurationInMs" : 74014,
    "IOBytes" : {
      "Total" : 3303343649,
      "Details" : {
        "IR" : 974793522,
        "IW" : 0,
        "SR" : 1834758934,
        "SW" : 493791193
      }
    }
  }
}
