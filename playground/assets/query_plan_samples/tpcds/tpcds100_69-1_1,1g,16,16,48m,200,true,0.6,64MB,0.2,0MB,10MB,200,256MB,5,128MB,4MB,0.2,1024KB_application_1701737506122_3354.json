{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 900414210,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "34" : {
          "sign" : 2045589980,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#175, d_date_id#176, d_date#177, d_month_seq#178, d_week_seq#179, d_quarter_seq#180, d_year#181, d_dow#182, d_moy#183, d_dom#184, d_qoy#185, d_fy_year#186, d_fy_quarter_seq#187, d_fy_week_seq#188, d_day_name#189, d_quarter_name#190, d_holiday#191, d_weekend#192, d_following_holiday#193, d_first_dom#194, d_last_dom#195, d_same_day_ly#196, d_same_day_lq#197, d_current_day#198, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 834691279,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 38601040,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] "
        },
        "8" : {
          "sign" : 557813053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 30880832,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
        },
        "19" : {
          "sign" : 847948611,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3186487020,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51] "
        },
        "23" : {
          "sign" : 1326326748,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#49, ss_item_sk#50, ss_customer_sk#51, ss_cdemo_sk#52, ss_hdemo_sk#53, ss_addr_sk#54, ss_store_sk#55, ss_promo_sk#56, ss_ticket_number#57L, ss_quantity#58, ss_wholesale_cost#59, ss_list_price#60, ss_sales_price#61, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, ss_ext_tax#66, ss_coupon_amt#67, ss_net_paid#68, ss_net_paid_inc_tax#69, ss_net_profit#70, ss_sold_date_sk#71], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 1999883163,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 153228479,
          "rowCount" : 1939601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
        },
        "40" : {
          "sign" : 274455345,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2568,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#203] "
        },
        "15" : {
          "sign" : 1158729262,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#243] "
        },
        "11" : {
          "sign" : -1064983404,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 38601040,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
        },
        "9" : {
          "sign" : 1764725045,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 38601040,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
        },
        "44" : {
          "sign" : 2029358198,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(cd_demo_sk#40) "
        },
        "33" : {
          "sign" : 874225672,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 52644,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#181) AND isnotnull(d_moy#183)) AND (((d_year#181 = 1999) AND (d_moy#183 >= 1)) AND (d_moy#183 <= 3))) AND isnotnull(d_date_sk#175)) "
        },
        "22" : {
          "sign" : -2007761493,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#239 [ss_sold_date_sk#71]) "
        },
        "26" : {
          "sign" : -272999708,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#72, d_date_id#73, d_date#74, d_month_seq#75, d_week_seq#76, d_quarter_seq#77, d_year#78, d_dow#79, d_moy#80, d_dom#81, d_qoy#82, d_fy_year#83, d_fy_quarter_seq#84, d_fy_week_seq#85, d_day_name#86, d_quarter_name#87, d_holiday#88, d_weekend#89, d_following_holiday#90, d_first_dom#91, d_last_dom#92, d_same_day_ly#93, d_same_day_lq#94, d_current_day#95, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : 981152526,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2292368272,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143, cs_sold_date_sk#170] "
        },
        "13" : {
          "sign" : -1485404362,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 482513000,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(scalar-subquery#244 [], xxhash64(c_current_addr_sk#13, 42))) "
        },
        "24" : {
          "sign" : 1198506067,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2568,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#72] "
        },
        "35" : {
          "sign" : 941822177,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1662195144,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143] "
        },
        "16" : {
          "sign" : 1656034900,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 666672,
          "rowCount" : 55556,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#27] "
        },
        "5" : {
          "sign" : 1921409356,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 168745287,
          "rowCount" : 1939601,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
        },
        "10" : {
          "sign" : 199640987,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 38601040,
          "rowCount" : 1930052,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
        },
        "21" : {
          "sign" : 980296461,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4400725648,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51, ss_sold_date_sk#71] "
        },
        "43" : {
          "sign" : -1746928700,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 159426400,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
        },
        "32" : {
          "sign" : -119847071,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2568,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#175] "
        },
        "6" : {
          "sign" : 1680236688,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24121920,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
        },
        "36" : {
          "sign" : -1742706854,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#170 = d_date_sk#203) "
        },
        "1" : {
          "sign" : -1305394516,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 576800,
          "rowCount" : 5600,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -265288399,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#137, cs_ship_date_sk#138, cs_bill_customer_sk#139, cs_bill_cdemo_sk#140, cs_bill_hdemo_sk#141, cs_bill_addr_sk#142, cs_ship_customer_sk#143, cs_ship_cdemo_sk#144, cs_ship_hdemo_sk#145, cs_ship_addr_sk#146, cs_call_center_sk#147, cs_catalog_page_sk#148, cs_ship_mode_sk#149, cs_warehouse_sk#150, cs_item_sk#151, cs_promo_sk#152, cs_order_number#153L, cs_quantity#154, cs_wholesale_cost#155, cs_list_price#156, cs_sales_price#157, cs_ext_discount_amt#158, cs_ext_sales_price#159, cs_ext_wholesale_cost#160, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "17" : {
          "sign" : -388259757,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13666776,
          "rowCount" : 55556,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27)) "
        },
        "25" : {
          "sign" : 449263908,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 52644,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72)) "
        },
        "14" : {
          "sign" : -1397996476,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#9, c_customer_id#10, c_current_cdemo_sk#11, c_current_hdemo_sk#12, c_current_addr_sk#13, c_first_shipto_date_sk#14, c_first_sales_date_sk#15, c_salutation#16, c_first_name#17, c_last_name#18, c_preferred_cust_flag#19, c_birth_day#20, c_birth_month#21, c_birth_year#22, c_birth_country#23, c_login#24, c_email_address#25, c_last_review_date#26], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : 1028127054,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#102, ws_ship_date_sk#103, ws_item_sk#104, ws_bill_customer_sk#105, ws_bill_cdemo_sk#106, ws_bill_hdemo_sk#107, ws_bill_addr_sk#108, ws_ship_customer_sk#109, ws_ship_cdemo_sk#110, ws_ship_hdemo_sk#111, ws_ship_addr_sk#112, ws_web_page_sk#113, ws_web_site_sk#114, ws_ship_mode_sk#115, ws_warehouse_sk#116, ws_promo_sk#117, ws_order_number#118L, ws_quantity#119, ws_wholesale_cost#120, ws_list_price#121, ws_sales_price#122, ws_ext_discount_amt#123, ws_ext_sales_price#124, ws_ext_wholesale_cost#125, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "42" : {
          "sign" : -1199601614,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#203, d_date_id#204, d_date#205, d_month_seq#206, d_week_seq#207, d_quarter_seq#208, d_year#209, d_dow#210, d_moy#211, d_dom#212, d_qoy#213, d_fy_year#214, d_fy_quarter_seq#215, d_fy_week_seq#216, d_day_name#217, d_quarter_name#218, d_holiday#219, d_weekend#220, d_following_holiday#221, d_first_dom#222, d_last_dom#223, d_same_day_ly#224, d_same_day_lq#225, d_current_day#226, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -255555555,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 11600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1067327951,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5310811700,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#71 = d_date_sk#72) "
        },
        "27" : {
          "sign" : -483090439,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 833947260,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105] "
        },
        "2" : {
          "sign" : 183325619,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 576800,
          "rowCount" : 5600,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 394318233,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#241 [cs_sold_date_sk#170]) "
        },
        "18" : {
          "sign" : 327025701,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#27, ca_address_id#28, ca_street_number#29, ca_street_name#30, ca_street_type#31, ca_suite_number#32, ca_city#33, ca_county#34, ca_state#35, ca_zip#36, ca_country#37, ca_gmt_offset#38, ca_location_type#39], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "30" : {
          "sign" : -600821579,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#240 [ws_sold_date_sk#135]) "
        },
        "7" : {
          "sign" : -1246911455,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 40203200,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
        },
        "29" : {
          "sign" : -1041537872,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1151737984,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105, ws_sold_date_sk#135] "
        },
        "41" : {
          "sign" : -1374002998,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 52644,
          "rowCount" : 214,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#209) AND isnotnull(d_moy#211)) AND (((d_year#209 = 1999) AND (d_moy#211 >= 1)) AND (d_moy#211 <= 3))) AND isnotnull(d_date_sk#203)) "
        },
        "3" : {
          "sign" : -316637896,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 576800,
          "rowCount" : 5600,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#0L, cd_purchase_estimate#44, count(1) AS cnt2#1L, cd_credit_rating#45, count(1) AS cnt3#2L] "
        },
        "28" : {
          "sign" : 446513149,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1389912100,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#135 = d_date_sk#175) "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Aggregate",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Join",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Join",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "LogicalRelation",
        "toId" : 38,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "LogicalRelation",
        "toId" : 41,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Filter",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 38,
        "fromName" : "Filter",
        "toId" : 37,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Project",
        "toId" : 36,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 36,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Join",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "LogicalRelation",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Filter",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#0L, cd_purchase_estimate#44, count(1) AS cnt2#1L, cd_credit_rating#45, count(1) AS cnt3#2L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :     :  :  :  +- Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(scalar-subquery#244 [], xxhash64(c_current_addr_sk#13, 42)))\n               :     :     :  :  :     :  +- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#243]\n               :     :     :  :  :     :     +- Project [ca_address_sk#27]\n               :     :     :  :  :     :        +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n               :     :     :  :  :     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n               :     :     :  :  :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#9,c_customer_id#10,c_current_cdemo_sk#11,c_current_hdemo_sk#12,c_current_addr_sk#13,c_first_shipto_date_sk#14,c_first_sales_date_sk#15,c_salutation#16,c_first_name#17,c_last_name#18,c_preferred_cust_flag#19,c_birth_day#20,c_birth_month#21,c_birth_year#22,c_birth_country#23,c_login#24,c_email_address#25,c_last_review_date#26] parquet\n               :     :     :  :  +- Project [ss_customer_sk#51]\n               :     :     :  :     +- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)\n               :     :     :  :        :- Project [ss_customer_sk#51, ss_sold_date_sk#71]\n               :     :     :  :        :  +- Filter (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#239 [ss_sold_date_sk#71])\n               :     :     :  :        :     :  +- Project [d_date_sk#72]\n               :     :     :  :        :     :     +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n               :     :     :  :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n               :     :     :  :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#49,ss_item_sk#50,ss_customer_sk#51,ss_cdemo_sk#52,ss_hdemo_sk#53,ss_addr_sk#54,ss_store_sk#55,ss_promo_sk#56,ss_ticket_number#57L,ss_quantity#58,ss_wholesale_cost#59,ss_list_price#60,ss_sales_price#61,ss_ext_discount_amt#62,ss_ext_sales_price#63,ss_ext_wholesale_cost#64,ss_ext_list_price#65,ss_ext_tax#66,ss_coupon_amt#67,ss_net_paid#68,ss_net_paid_inc_tax#69,ss_net_profit#70,ss_sold_date_sk#71] parquet\n               :     :     :  :        +- Project [d_date_sk#72]\n               :     :     :  :           +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n               :     :     :  :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n               :     :     :  +- Project [ws_bill_customer_sk#105]\n               :     :     :     +- Join Inner, (ws_sold_date_sk#135 = d_date_sk#175)\n               :     :     :        :- Project [ws_bill_customer_sk#105, ws_sold_date_sk#135]\n               :     :     :        :  +- Filter (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#240 [ws_sold_date_sk#135])\n               :     :     :        :     :  +- Project [d_date_sk#175]\n               :     :     :        :     :     +- Filter (((isnotnull(d_year#181) AND isnotnull(d_moy#183)) AND (((d_year#181 = 1999) AND (d_moy#183 >= 1)) AND (d_moy#183 <= 3))) AND isnotnull(d_date_sk#175))\n               :     :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#175,d_date_id#176,d_date#177,d_month_seq#178,d_week_seq#179,d_quarter_seq#180,d_year#181,d_dow#182,d_moy#183,d_dom#184,d_qoy#185,d_fy_year#186,d_fy_quarter_seq#187,d_fy_week_seq#188,d_day_name#189,d_quarter_name#190,d_holiday#191,d_weekend#192,d_following_holiday#193,d_first_dom#194,d_last_dom#195,d_same_day_ly#196,d_same_day_lq#197,d_current_day#198,... 4 more fields] parquet\n               :     :     :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#102,ws_ship_date_sk#103,ws_item_sk#104,ws_bill_customer_sk#105,ws_bill_cdemo_sk#106,ws_bill_hdemo_sk#107,ws_bill_addr_sk#108,ws_ship_customer_sk#109,ws_ship_cdemo_sk#110,ws_ship_hdemo_sk#111,ws_ship_addr_sk#112,ws_web_page_sk#113,ws_web_site_sk#114,ws_ship_mode_sk#115,ws_warehouse_sk#116,ws_promo_sk#117,ws_order_number#118L,ws_quantity#119,ws_wholesale_cost#120,ws_list_price#121,ws_sales_price#122,ws_ext_discount_amt#123,ws_ext_sales_price#124,ws_ext_wholesale_cost#125,... 10 more fields] parquet\n               :     :     :        +- Project [d_date_sk#175]\n               :     :     :           +- Filter (((isnotnull(d_year#181) AND isnotnull(d_moy#183)) AND (((d_year#181 = 1999) AND (d_moy#183 >= 1)) AND (d_moy#183 <= 3))) AND isnotnull(d_date_sk#175))\n               :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#175,d_date_id#176,d_date#177,d_month_seq#178,d_week_seq#179,d_quarter_seq#180,d_year#181,d_dow#182,d_moy#183,d_dom#184,d_qoy#185,d_fy_year#186,d_fy_quarter_seq#187,d_fy_week_seq#188,d_day_name#189,d_quarter_name#190,d_holiday#191,d_weekend#192,d_following_holiday#193,d_first_dom#194,d_last_dom#195,d_same_day_ly#196,d_same_day_lq#197,d_current_day#198,... 4 more fields] parquet\n               :     :     +- Project [cs_ship_customer_sk#143]\n               :     :        +- Join Inner, (cs_sold_date_sk#170 = d_date_sk#203)\n               :     :           :- Project [cs_ship_customer_sk#143, cs_sold_date_sk#170]\n               :     :           :  +- Filter (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#241 [cs_sold_date_sk#170])\n               :     :           :     :  +- Project [d_date_sk#203]\n               :     :           :     :     +- Filter (((isnotnull(d_year#209) AND isnotnull(d_moy#211)) AND (((d_year#209 = 1999) AND (d_moy#211 >= 1)) AND (d_moy#211 <= 3))) AND isnotnull(d_date_sk#203))\n               :     :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#203,d_date_id#204,d_date#205,d_month_seq#206,d_week_seq#207,d_quarter_seq#208,d_year#209,d_dow#210,d_moy#211,d_dom#212,d_qoy#213,d_fy_year#214,d_fy_quarter_seq#215,d_fy_week_seq#216,d_day_name#217,d_quarter_name#218,d_holiday#219,d_weekend#220,d_following_holiday#221,d_first_dom#222,d_last_dom#223,d_same_day_ly#224,d_same_day_lq#225,d_current_day#226,... 4 more fields] parquet\n               :     :           :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#137,cs_ship_date_sk#138,cs_bill_customer_sk#139,cs_bill_cdemo_sk#140,cs_bill_hdemo_sk#141,cs_bill_addr_sk#142,cs_ship_customer_sk#143,cs_ship_cdemo_sk#144,cs_ship_hdemo_sk#145,cs_ship_addr_sk#146,cs_call_center_sk#147,cs_catalog_page_sk#148,cs_ship_mode_sk#149,cs_warehouse_sk#150,cs_item_sk#151,cs_promo_sk#152,cs_order_number#153L,cs_quantity#154,cs_wholesale_cost#155,cs_list_price#156,cs_sales_price#157,cs_ext_discount_amt#158,cs_ext_sales_price#159,cs_ext_wholesale_cost#160,... 10 more fields] parquet\n               :     :           +- Project [d_date_sk#203]\n               :     :              +- Filter (((isnotnull(d_year#209) AND isnotnull(d_moy#211)) AND (((d_year#209 = 1999) AND (d_moy#211 >= 1)) AND (d_moy#211 <= 3))) AND isnotnull(d_date_sk#203))\n               :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#203,d_date_id#204,d_date#205,d_month_seq#206,d_week_seq#207,d_quarter_seq#208,d_year#209,d_dow#210,d_moy#211,d_dom#212,d_qoy#213,d_fy_year#214,d_fy_quarter_seq#215,d_fy_week_seq#216,d_day_name#217,d_quarter_name#218,d_holiday#219,d_weekend#220,d_following_holiday#221,d_first_dom#222,d_last_dom#223,d_same_day_ly#224,d_same_day_lq#225,d_current_day#226,... 4 more fields] parquet\n               :     +- Project [ca_address_sk#27]\n               :        +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n               :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n               +- Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n                  +- Filter isnotnull(cd_demo_sk#40)\n                     +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45,cd_dep_count#46,cd_dep_employed_count#47,cd_dep_college_count#48] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 87562661146,
      "inputRowCount" : 495441941
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1734844421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5891808137600,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "5" : {
            "sign" : 1556217422,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6404139280000,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "6" : {
            "sign" : 1454557157,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 533456,
            "rowCount" : 33341,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_cdemo_sk#11], ShuffleQueryStage 11 "
          },
          "1" : {
            "sign" : -1378098697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1168129414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1987233316,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "3" : {
            "sign" : -11722045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 182186256,
        "inputRowCount" : 1954141
      },
      "PD" : {
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ],
        "6" : [ 1051, 1156, 955, 955, 955, 1051, 1051, 955, 868, 1051, 1051, 955, 1051, 955, 955, 1051, 955, 955, 955, 955, 1051, 955, 955, 955, 955, 955, 955, 1156, 1051, 1051, 1156, 1051, 1051, 1051, 955, 1156, 868, 1156, 868, 1051, 1051, 955, 955, 955, 1051, 868, 1156, 955, 1051, 1051, 955, 1051, 955, 1156, 955, 1051, 1051, 868, 955, 1051, 1051, 1051, 955, 955, 955, 1051, 1051, 868, 868, 955, 955, 955, 1156, 1051, 1156, 1051, 1051, 1051, 1051, 955, 955, 1051, 789, 955, 955, 1156, 955, 1156, 955, 955, 955, 1051, 955, 955, 1156, 1051, 955, 1051, 955, 955, 955, 1051, 955, 955, 1051, 1051, 1156, 955, 955, 955, 955, 955, 1051, 1051, 955, 1051, 955, 1051, 955, 955, 955, 1051, 1051, 1051, 955, 955, 789, 955, 1051, 955, 1051, 1051, 868, 1051, 1051, 1051, 955, 1051, 1051, 1051, 955, 1156, 1051, 1051, 955, 868, 955, 955, 1051, 868, 955, 955, 1156, 1051, 955, 1271, 955, 1051, 868, 1051, 955, 955, 955, 868, 1051, 1051, 1051, 1051, 1156, 955, 1051, 1051, 955, 1051, 955, 955, 1051, 1156, 955, 955, 1051, 1051, 1156, 955, 955, 955, 1051, 955, 1156, 1051, 955, 955, 1051, 955, 955, 1051, 1271, 1051, 955, 955 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227256566,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1735,
        "IOBytes" : {
          "Total" : 52901433,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 52709253,
            "SW" : 192180
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 2141445547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "4" : {
            "sign" : 757731931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 153228479,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "15" : {
            "sign" : -1030503320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 64639616,
            "rowCount" : 4039976,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_customer_sk#143], ShuffleQueryStage 10 "
          },
          "11" : {
            "sign" : -254927857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : 361360785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "13" : {
            "sign" : 394092130,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3186487020,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#51], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 178224746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 168745287,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : 1888491358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "6" : {
            "sign" : -458923473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1817020434672,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "1" : {
            "sign" : -998045919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 159426400,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -1277048145,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#105], ShuffleQueryStage 9 "
          },
          "0" : {
            "sign" : -752994768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1513916070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 722537108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3028367391120,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "3" : {
            "sign" : 599938197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [ss_customer_sk#51], ShuffleQueryStage 8\n               :     :     :  +- LogicalQueryStage Project [ws_bill_customer_sk#105], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cs_ship_customer_sk#143], ShuffleQueryStage 10\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3490021564,
        "inputRowCount" : 275670868
      },
      "PD" : {
        "5" : [ 23562, 23414, 23072, 22720, 23747, 23141, 23844, 23075, 23299, 23716, 23523, 22863, 23161, 22570, 23747, 23475, 23032, 24406, 23330, 23284, 23856, 23171, 23762, 23172, 22991, 23295, 23254, 23481, 23562, 22696, 23195, 23423, 22581, 23592, 23311, 23773, 23300, 23226, 23464, 22207, 22570, 24108, 42799, 22961, 23588, 22848, 22906, 23171, 23624, 23439, 22473, 22529, 23146, 22978, 22683, 23561, 23465, 22894, 22164, 23747, 22848, 22924, 22138, 23114, 22654, 23491, 22905, 22764, 23624, 24375, 23717, 22683, 23115, 22482, 23300, 23481, 23198, 23002, 22709, 23026, 24333, 23067, 23002, 22863, 22863, 23773, 22457, 23562, 23535, 24205, 22961, 23363, 22345, 22837, 22894, 23788, 22052, 22874, 22683, 23762, 23310, 23781, 23002, 23182, 22921, 22991, 23196, 23115, 23389, 23547, 22416, 23321, 23284, 23315, 23789, 23044, 22735, 23260, 22893, 23541, 22694, 22972, 23666, 23033, 23608, 24545, 23141, 23115, 22262, 22709, 23742, 23627, 22759, 23902, 23157, 23311, 23747, 23984, 23579, 22879, 23562, 22095, 23943, 22859, 23438, 22872, 23284, 23130, 24672, 22946, 25167, 23141, 22559, 22651, 23172, 23577, 22405, 24333, 23701, 23172, 22750, 23677, 23773, 22720, 24087, 24544, 23115, 23269, 23465, 22991, 22735, 23742, 23002, 23141, 23773, 22750, 23161, 23342, 23886, 23927, 24178, 23141, 22698, 23172, 23805, 23439, 24395, 22681, 23002, 23160, 22889, 23603, 22301, 23434, 23486, 23254, 23423, 22596, 23966, 23747 ],
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 25,
        "FinishedTasksTotalTimeInMs" : 20974.0,
        "FinishedTasksDistributionInMs" : [ 74.0, 303.0, 719.0, 1237.0, 2835.0 ]
      },
      "StartTimeInMs" : 1702227246833,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11468,
        "IOBytes" : {
          "Total" : 171469715,
          "Details" : {
            "IR" : 38840759,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 63100046
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -157955016,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5891808137600,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "5" : {
            "sign" : -1866613391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6404139280000,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "6" : {
            "sign" : -1194138616,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3145728,
            "rowCount" : 33341,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11, BroadcastQueryStage 12 "
          },
          "1" : {
            "sign" : -1680260774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1660196995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 38771481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "3" : {
            "sign" : 1960331622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- LogicalQueryStage LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11, BroadcastQueryStage 12\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 184798528,
        "inputRowCount" : 1954141
      },
      "PD" : {
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227256700,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1601,
        "IOBytes" : {
          "Total" : 52709478,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 52517298,
            "SW" : 192180
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 2141445547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "4" : {
            "sign" : 757731931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26757685190371161600,
            "rowCount" : 290844404243164800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "15" : {
            "sign" : -1030503320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 64639616,
            "rowCount" : 4039976,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_customer_sk#143], ShuffleQueryStage 10 "
          },
          "11" : {
            "sign" : -254927857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : 361360785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "13" : {
            "sign" : 394092130,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3186487020,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#51], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 178224746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29084440424316480000,
            "rowCount" : 290844404243164800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : 1888491358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "6" : {
            "sign" : -458923473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1817020434672,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "1" : {
            "sign" : -998045919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -1277048145,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#105], ShuffleQueryStage 9 "
          },
          "0" : {
            "sign" : -752994768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1513916070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 722537108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3028367391120,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "3" : {
            "sign" : 599938197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [ss_customer_sk#51], ShuffleQueryStage 8\n               :     :     :  +- LogicalQueryStage Project [ws_bill_customer_sk#105], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cs_ship_customer_sk#143], ShuffleQueryStage 10\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3512247964,
        "inputRowCount" : 275670868
      },
      "PD" : {
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ],
        "5" : [ 23562, 23414, 23072, 22720, 23747, 23141, 23844, 23075, 23299, 23716, 23523, 22863, 23161, 22570, 23747, 23475, 23032, 24406, 23330, 23284, 23856, 23171, 23762, 23172, 22991, 23295, 23254, 23481, 23562, 22696, 23195, 23423, 22581, 23592, 23311, 23773, 23300, 23226, 23464, 22207, 22570, 24108, 42799, 22961, 23588, 22848, 22906, 23171, 23624, 23439, 22473, 22529, 23146, 22978, 22683, 23561, 23465, 22894, 22164, 23747, 22848, 22924, 22138, 23114, 22654, 23491, 22905, 22764, 23624, 24375, 23717, 22683, 23115, 22482, 23300, 23481, 23198, 23002, 22709, 23026, 24333, 23067, 23002, 22863, 22863, 23773, 22457, 23562, 23535, 24205, 22961, 23363, 22345, 22837, 22894, 23788, 22052, 22874, 22683, 23762, 23310, 23781, 23002, 23182, 22921, 22991, 23196, 23115, 23389, 23547, 22416, 23321, 23284, 23315, 23789, 23044, 22735, 23260, 22893, 23541, 22694, 22972, 23666, 23033, 23608, 24545, 23141, 23115, 22262, 22709, 23742, 23627, 22759, 23902, 23157, 23311, 23747, 23984, 23579, 22879, 23562, 22095, 23943, 22859, 23438, 22872, 23284, 23130, 24672, 22946, 25167, 23141, 22559, 22651, 23172, 23577, 22405, 24333, 23701, 23172, 22750, 23677, 23773, 22720, 24087, 24544, 23115, 23269, 23465, 22991, 22735, 23742, 23002, 23141, 23773, 22750, 23161, 23342, 23886, 23927, 24178, 23141, 22698, 23172, 23805, 23439, 24395, 22681, 23002, 23160, 22889, 23603, 22301, 23434, 23486, 23254, 23423, 22596, 23966, 23747 ],
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 25,
        "FinishedTasksTotalTimeInMs" : 27231.0,
        "FinishedTasksDistributionInMs" : [ 130.0, 326.0, 719.0, 1253.0, 6331.0 ]
      },
      "StartTimeInMs" : 1702227247866,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10435,
        "IOBytes" : {
          "Total" : 111338846,
          "Details" : {
            "IR" : 31035008,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 10774928
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -882174616,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1845584057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 528184,
            "rowCount" : 5585,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -68560878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 528184,
            "rowCount" : 5585,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -53012179,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 528184,
            "rowCount" : 5585,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L], HashAggregate(keys=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], functions=[count(1)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L], HashAggregate(keys=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], functions=[count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 528184,
        "inputRowCount" : 5585
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227257719,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 582,
        "IOBytes" : {
          "Total" : 192180,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 192180,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 2141445547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "4" : {
            "sign" : 757731931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26757685190371161600,
            "rowCount" : 290844404243164800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "15" : {
            "sign" : -1030503320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 64639616,
            "rowCount" : 4039976,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_customer_sk#143], ShuffleQueryStage 10 "
          },
          "11" : {
            "sign" : -254927857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : 361360785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "13" : {
            "sign" : 394092130,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 132412816,
            "rowCount" : 8275801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#51], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 178224746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29084440424316480000,
            "rowCount" : 290844404243164800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : 1888491358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "6" : {
            "sign" : -458923473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1817020434672,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "1" : {
            "sign" : -998045919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -1277048145,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#105], ShuffleQueryStage 9 "
          },
          "0" : {
            "sign" : -752994768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1513916070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 722537108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3028367391120,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "3" : {
            "sign" : 599938197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 33737950892207116800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [ss_customer_sk#51], ShuffleQueryStage 8\n               :     :     :  +- LogicalQueryStage Project [ws_bill_customer_sk#105], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cs_ship_customer_sk#143], ShuffleQueryStage 10\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 458173760,
        "inputRowCount" : 18406084
      },
      "PD" : {
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ],
        "5" : [ 23562, 23414, 23072, 22720, 23747, 23141, 23844, 23075, 23299, 23716, 23523, 22863, 23161, 22570, 23747, 23475, 23032, 24406, 23330, 23284, 23856, 23171, 23762, 23172, 22991, 23295, 23254, 23481, 23562, 22696, 23195, 23423, 22581, 23592, 23311, 23773, 23300, 23226, 23464, 22207, 22570, 24108, 42799, 22961, 23588, 22848, 22906, 23171, 23624, 23439, 22473, 22529, 23146, 22978, 22683, 23561, 23465, 22894, 22164, 23747, 22848, 22924, 22138, 23114, 22654, 23491, 22905, 22764, 23624, 24375, 23717, 22683, 23115, 22482, 23300, 23481, 23198, 23002, 22709, 23026, 24333, 23067, 23002, 22863, 22863, 23773, 22457, 23562, 23535, 24205, 22961, 23363, 22345, 22837, 22894, 23788, 22052, 22874, 22683, 23762, 23310, 23781, 23002, 23182, 22921, 22991, 23196, 23115, 23389, 23547, 22416, 23321, 23284, 23315, 23789, 23044, 22735, 23260, 22893, 23541, 22694, 22972, 23666, 23033, 23608, 24545, 23141, 23115, 22262, 22709, 23742, 23627, 22759, 23902, 23157, 23311, 23747, 23984, 23579, 22879, 23562, 22095, 23943, 22859, 23438, 22872, 23284, 23130, 24672, 22946, 25167, 23141, 22559, 22651, 23172, 23577, 22405, 24333, 23701, 23172, 22750, 23677, 23773, 22720, 24087, 24544, 23115, 23269, 23465, 22991, 22735, 23742, 23002, 23141, 23773, 22750, 23161, 23342, 23886, 23927, 24178, 23141, 22698, 23172, 23805, 23439, 24395, 22681, 23002, 23160, 22889, 23603, 22301, 23434, 23486, 23254, 23423, 22596, 23966, 23747 ],
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ],
        "3" : [ 40735, 40366, 40238, 40343, 40499, 41479, 38683, 38886, 40253, 40384, 40814, 40428, 41718, 41374, 39978, 40487, 41110, 41704, 40464, 39873, 39055, 40663, 40100, 40464, 39863, 40203, 40845, 40791, 39827, 39201, 40364, 40451, 41088, 40972, 39955, 40315, 40622, 39853, 38793, 39837, 40274, 40758, 108951, 40428, 40364, 39331, 39845, 39826, 39878, 40533, 40947, 41020, 38748, 40566, 40090, 41207, 39923, 39869, 41184, 40364, 39876, 41208, 39426, 40814, 40510, 40735, 40699, 39832, 40524, 40451, 41182, 40297, 40983, 40586, 41287, 39298, 40508, 40924, 40499, 41682, 39991, 41231, 41136, 39730, 40216, 39075, 41507, 40686, 39707, 41287, 41064, 40509, 40985, 39684, 40124, 41233, 40566, 40451, 40070, 39121, 39397, 39876, 40349, 39868, 39827, 39854, 39574, 41461, 39400, 40008, 40476, 39845, 40460, 38431, 40663, 39899, 39172, 39602, 39584, 39672, 40042, 40535, 41341, 40310, 41752, 42200, 40663, 38367, 40095, 40434, 40566, 40037, 41358, 39139, 38998, 39514, 39257, 39707, 40820, 40893, 40814, 39029, 40846, 40880, 42079, 40147, 41558, 39753, 41136, 39576, 41704, 39955, 40223, 42196, 40839, 40845, 40039, 40291, 40814, 38318, 40372, 39111, 42016, 40538, 40341, 40203, 39579, 40783, 40911, 40037, 40290, 40886, 41062, 39980, 38953, 39804, 40538, 39899, 39955, 40190, 40414, 40205, 39262, 40318, 41319, 41705, 41555, 40413, 40960, 40139, 40701, 40982, 40573, 40353, 41752, 41287, 40699, 40735, 41149, 39517 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 13426.0,
        "FinishedTasksDistributionInMs" : [ 130.0, 284.0, 719.0, 1253.0, 2835.0 ]
      },
      "StartTimeInMs" : 1702227249852,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8449,
        "IOBytes" : {
          "Total" : 96563536,
          "Details" : {
            "IR" : 24019979,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 3014647
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 626615273,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 562680,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 562680,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227238521,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19780,
        "IOBytes" : {
          "Total" : 186701067,
          "Details" : {
            "IR" : 47528142,
            "IW" : 0,
            "SR" : 69644015,
            "SW" : 69528910
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1192661590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#320 [cs_sold_date_sk#170]) "
          },
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 528557538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "19" : {
            "sign" : 449263908,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 52644,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72)) "
          },
          "23" : {
            "sign" : 1683398587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 129570523200,
            "rowCount" : 6478526160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#135 = d_date_sk#254) "
          },
          "4" : {
            "sign" : -270296760,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 153228479,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "40" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "15" : {
            "sign" : 792174479,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4400725648,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51, ss_sold_date_sk#71] "
          },
          "11" : {
            "sign" : -726796735,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : -431688270,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "33" : {
            "sign" : 961434101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2292368272,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143, cs_sold_date_sk#170] "
          },
          "22" : {
            "sign" : 1141931385,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 77742313920,
            "rowCount" : 6478526160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105] "
          },
          "26" : {
            "sign" : 1028127054,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#102, ws_ship_date_sk#103, ws_item_sk#104, ws_bill_customer_sk#105, ws_bill_cdemo_sk#106, ws_bill_hdemo_sk#107, ws_bill_addr_sk#108, ws_ship_customer_sk#109, ws_ship_cdemo_sk#110, ws_ship_hdemo_sk#111, ws_ship_addr_sk#112, ws_web_page_sk#113, ws_web_site_sk#114, ws_ship_mode_sk#115, ws_warehouse_sk#116, ws_promo_sk#117, ws_order_number#118L, ws_quantity#119, ws_wholesale_cost#120, ws_list_price#121, ws_sales_price#122, ws_ext_discount_amt#123, ws_ext_sales_price#124, ws_ext_wholesale_cost#125, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : -637449540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 52644,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282)) "
          },
          "13" : {
            "sign" : -1757736286,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 297048981240,
            "rowCount" : 24754081770,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51] "
          },
          "24" : {
            "sign" : -1354696343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1151737984,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105, ws_sold_date_sk#135] "
          },
          "35" : {
            "sign" : -265288399,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#137, cs_ship_date_sk#138, cs_bill_customer_sk#139, cs_bill_cdemo_sk#140, cs_bill_hdemo_sk#141, cs_bill_addr_sk#142, cs_ship_customer_sk#143, cs_ship_cdemo_sk#144, cs_ship_hdemo_sk#145, cs_ship_addr_sk#146, cs_call_center_sk#147, cs_catalog_page_sk#148, cs_ship_mode_sk#149, cs_warehouse_sk#150, cs_item_sk#151, cs_promo_sk#152, cs_order_number#153L, cs_quantity#154, cs_wholesale_cost#155, cs_list_price#156, cs_sales_price#157, cs_ext_discount_amt#158, cs_ext_sales_price#159, cs_ext_wholesale_cost#160, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 304262445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#318 [ss_sold_date_sk#71]) "
          },
          "5" : {
            "sign" : 560902511,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 168745287,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : -135470118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "21" : {
            "sign" : -1097900016,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#72], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : -2026068710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 257891430600,
            "rowCount" : 12894571530,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#170 = d_date_sk#282) "
          },
          "6" : {
            "sign" : 1082904784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1817020434672,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "36" : {
            "sign" : -1017052098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#282] "
          },
          "1" : {
            "sign" : -1960765608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 509228971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#282], BroadcastQueryStage 5 "
          },
          "17" : {
            "sign" : 1326326748,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#49, ss_item_sk#50, ss_customer_sk#51, ss_cdemo_sk#52, ss_hdemo_sk#53, ss_addr_sk#54, ss_store_sk#55, ss_promo_sk#56, ss_ticket_number#57L, ss_quantity#58, ss_wholesale_cost#59, ss_list_price#60, ss_sales_price#61, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, ss_ext_tax#66, ss_coupon_amt#67, ss_net_paid#68, ss_net_paid_inc_tax#69, ss_net_profit#70, ss_sold_date_sk#71], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : 1715957838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#319 [ws_sold_date_sk#135]) "
          },
          "14" : {
            "sign" : -1591812334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 495081635400,
            "rowCount" : 24754081770,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#71 = d_date_sk#72) "
          },
          "31" : {
            "sign" : 1044834909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 154734858360,
            "rowCount" : 12894571530,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143] "
          },
          "0" : {
            "sign" : -1935866285,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -272999708,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#72, d_date_id#73, d_date#74, d_month_seq#75, d_week_seq#76, d_quarter_seq#77, d_year#78, d_dow#79, d_moy#80, d_dom#81, d_qoy#82, d_fy_year#83, d_fy_quarter_seq#84, d_fy_week_seq#85, d_day_name#86, d_quarter_name#87, d_holiday#88, d_weekend#89, d_following_holiday#90, d_first_dom#91, d_last_dom#92, d_same_day_ly#93, d_same_day_lq#94, d_current_day#95, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1731412915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#254] "
          },
          "2" : {
            "sign" : 231367593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1081318410,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#282, d_date_id#283, d_date#284, d_month_seq#285, d_week_seq#286, d_quarter_seq#287, d_year#288, d_dow#289, d_moy#290, d_dom#291, d_qoy#292, d_fy_year#293, d_fy_quarter_seq#294, d_fy_week_seq#295, d_day_name#296, d_quarter_name#297, d_holiday#298, d_weekend#299, d_following_holiday#300, d_first_dom#301, d_last_dom#302, d_same_day_ly#303, d_same_day_lq#304, d_current_day#305, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 1198506067,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#72] "
          },
          "30" : {
            "sign" : 1981393768,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#254], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : -787561165,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3028367391120,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "29" : {
            "sign" : -1030755638,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#254, d_date_id#255, d_date#256, d_month_seq#257, d_week_seq#258, d_quarter_seq#259, d_year#260, d_dow#261, d_moy#262, d_dom#263, d_qoy#264, d_fy_year#265, d_fy_quarter_seq#266, d_fy_week_seq#267, d_day_name#268, d_quarter_name#269, d_holiday#270, d_weekend#271, d_following_holiday#272, d_first_dom#273, d_last_dom#274, d_same_day_ly#275, d_same_day_lq#276, d_current_day#277, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 159426400,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "3" : {
            "sign" : 1583870372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          },
          "28" : {
            "sign" : -1519287430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 52644,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- Project [ss_customer_sk#51]\n               :     :     :  :     +- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)\n               :     :     :  :        :- Project [ss_customer_sk#51, ss_sold_date_sk#71]\n               :     :     :  :        :  +- Filter (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#318 [ss_sold_date_sk#71])\n               :     :     :  :        :     :  +- Project [d_date_sk#72]\n               :     :     :  :        :     :     +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n               :     :     :  :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n               :     :     :  :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#49,ss_item_sk#50,ss_customer_sk#51,ss_cdemo_sk#52,ss_hdemo_sk#53,ss_addr_sk#54,ss_store_sk#55,ss_promo_sk#56,ss_ticket_number#57L,ss_quantity#58,ss_wholesale_cost#59,ss_list_price#60,ss_sales_price#61,ss_ext_discount_amt#62,ss_ext_sales_price#63,ss_ext_wholesale_cost#64,ss_ext_list_price#65,ss_ext_tax#66,ss_coupon_amt#67,ss_net_paid#68,ss_net_paid_inc_tax#69,ss_net_profit#70,ss_sold_date_sk#71] parquet\n               :     :     :  :        +- LogicalQueryStage Project [d_date_sk#72], BroadcastQueryStage 1\n               :     :     :  +- Project [ws_bill_customer_sk#105]\n               :     :     :     +- Join Inner, (ws_sold_date_sk#135 = d_date_sk#254)\n               :     :     :        :- Project [ws_bill_customer_sk#105, ws_sold_date_sk#135]\n               :     :     :        :  +- Filter (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#319 [ws_sold_date_sk#135])\n               :     :     :        :     :  +- Project [d_date_sk#254]\n               :     :     :        :     :     +- Filter (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254))\n               :     :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n               :     :     :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#102,ws_ship_date_sk#103,ws_item_sk#104,ws_bill_customer_sk#105,ws_bill_cdemo_sk#106,ws_bill_hdemo_sk#107,ws_bill_addr_sk#108,ws_ship_customer_sk#109,ws_ship_cdemo_sk#110,ws_ship_hdemo_sk#111,ws_ship_addr_sk#112,ws_web_page_sk#113,ws_web_site_sk#114,ws_ship_mode_sk#115,ws_warehouse_sk#116,ws_promo_sk#117,ws_order_number#118L,ws_quantity#119,ws_wholesale_cost#120,ws_list_price#121,ws_sales_price#122,ws_ext_discount_amt#123,ws_ext_sales_price#124,ws_ext_wholesale_cost#125,... 10 more fields] parquet\n               :     :     :        +- LogicalQueryStage Project [d_date_sk#254], BroadcastQueryStage 3\n               :     :     +- Project [cs_ship_customer_sk#143]\n               :     :        +- Join Inner, (cs_sold_date_sk#170 = d_date_sk#282)\n               :     :           :- Project [cs_ship_customer_sk#143, cs_sold_date_sk#170]\n               :     :           :  +- Filter (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#320 [cs_sold_date_sk#170])\n               :     :           :     :  +- Project [d_date_sk#282]\n               :     :           :     :     +- Filter (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282))\n               :     :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n               :     :           :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#137,cs_ship_date_sk#138,cs_bill_customer_sk#139,cs_bill_cdemo_sk#140,cs_bill_hdemo_sk#141,cs_bill_addr_sk#142,cs_ship_customer_sk#143,cs_ship_cdemo_sk#144,cs_ship_hdemo_sk#145,cs_ship_addr_sk#146,cs_call_center_sk#147,cs_catalog_page_sk#148,cs_ship_mode_sk#149,cs_warehouse_sk#150,cs_item_sk#151,cs_promo_sk#152,cs_order_number#153L,cs_quantity#154,cs_wholesale_cost#155,cs_list_price#156,cs_sales_price#157,cs_ext_discount_amt#158,cs_ext_sales_price#159,cs_ext_wholesale_cost#160,... 10 more fields] parquet\n               :     :           +- LogicalQueryStage Project [d_date_sk#282], BroadcastQueryStage 5\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86787741768,
        "inputRowCount" : 494231569
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227240179,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18122,
        "IOBytes" : {
          "Total" : 186585962,
          "Details" : {
            "IR" : 47528142,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 69528910
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5139840,
            "rowCount" : 160620,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 2141445547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2569920,
            "rowCount" : 160620,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "4" : {
            "sign" : 757731931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2226789431205696000,
            "rowCount" : 24204232947888000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "15" : {
            "sign" : -1030503320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 64639616,
            "rowCount" : 4039976,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_customer_sk#143], ShuffleQueryStage 10 "
          },
          "11" : {
            "sign" : -254927857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3212400,
            "rowCount" : 160620,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : 361360785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3212400,
            "rowCount" : 160620,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "13" : {
            "sign" : 394092130,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 132412816,
            "rowCount" : 8275801,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#51], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 178224746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2420423294788800000,
            "rowCount" : 24204232947888000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : 1888491358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3212400,
            "rowCount" : 160620,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "6" : {
            "sign" : -458923473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 151213450320,
            "rowCount" : 12601120860,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "1" : {
            "sign" : -998045919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2807691021955008000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -1277048145,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#105], ShuffleQueryStage 9 "
          },
          "0" : {
            "sign" : -752994768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1513916070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2807691021955008000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 722537108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 252022417200,
            "rowCount" : 12601120860,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "3" : {
            "sign" : 599938197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2807691021955008000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [ss_customer_sk#51], ShuffleQueryStage 8\n               :     :     :  +- LogicalQueryStage Project [ws_bill_customer_sk#105], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cs_ship_customer_sk#143], ShuffleQueryStage 10\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 424712560,
        "inputRowCount" : 16636652
      },
      "PD" : {
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ],
        "5" : [ 23562, 23414, 23072, 22720, 23747, 23141, 23844, 23075, 23299, 23716, 23523, 22863, 23161, 22570, 23747, 23475, 23032, 24406, 23330, 23284, 23856, 23171, 23762, 23172, 22991, 23295, 23254, 23481, 23562, 22696, 23195, 23423, 22581, 23592, 23311, 23773, 23300, 23226, 23464, 22207, 22570, 24108, 42799, 22961, 23588, 22848, 22906, 23171, 23624, 23439, 22473, 22529, 23146, 22978, 22683, 23561, 23465, 22894, 22164, 23747, 22848, 22924, 22138, 23114, 22654, 23491, 22905, 22764, 23624, 24375, 23717, 22683, 23115, 22482, 23300, 23481, 23198, 23002, 22709, 23026, 24333, 23067, 23002, 22863, 22863, 23773, 22457, 23562, 23535, 24205, 22961, 23363, 22345, 22837, 22894, 23788, 22052, 22874, 22683, 23762, 23310, 23781, 23002, 23182, 22921, 22991, 23196, 23115, 23389, 23547, 22416, 23321, 23284, 23315, 23789, 23044, 22735, 23260, 22893, 23541, 22694, 22972, 23666, 23033, 23608, 24545, 23141, 23115, 22262, 22709, 23742, 23627, 22759, 23902, 23157, 23311, 23747, 23984, 23579, 22879, 23562, 22095, 23943, 22859, 23438, 22872, 23284, 23130, 24672, 22946, 25167, 23141, 22559, 22651, 23172, 23577, 22405, 24333, 23701, 23172, 22750, 23677, 23773, 22720, 24087, 24544, 23115, 23269, 23465, 22991, 22735, 23742, 23002, 23141, 23773, 22750, 23161, 23342, 23886, 23927, 24178, 23141, 22698, 23172, 23805, 23439, 24395, 22681, 23002, 23160, 22889, 23603, 22301, 23434, 23486, 23254, 23423, 22596, 23966, 23747 ],
        "1" : [ 13780, 13780, 15158, 13780, 15158, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 15158, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 13780, 13780, 13780, 12527, 13780, 12527, 12527, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 12527, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 12527, 12527, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 13780, 13780, 13780, 12527, 13780, 13780, 15158, 13780, 15158, 13780, 12527, 13780, 13780, 13780, 12527, 13780, 13780, 12527, 12527, 12527, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 12527, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 12527, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780 ],
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ],
        "3" : [ 40735, 40366, 40238, 40343, 40499, 41479, 38683, 38886, 40253, 40384, 40814, 40428, 41718, 41374, 39978, 40487, 41110, 41704, 40464, 39873, 39055, 40663, 40100, 40464, 39863, 40203, 40845, 40791, 39827, 39201, 40364, 40451, 41088, 40972, 39955, 40315, 40622, 39853, 38793, 39837, 40274, 40758, 108951, 40428, 40364, 39331, 39845, 39826, 39878, 40533, 40947, 41020, 38748, 40566, 40090, 41207, 39923, 39869, 41184, 40364, 39876, 41208, 39426, 40814, 40510, 40735, 40699, 39832, 40524, 40451, 41182, 40297, 40983, 40586, 41287, 39298, 40508, 40924, 40499, 41682, 39991, 41231, 41136, 39730, 40216, 39075, 41507, 40686, 39707, 41287, 41064, 40509, 40985, 39684, 40124, 41233, 40566, 40451, 40070, 39121, 39397, 39876, 40349, 39868, 39827, 39854, 39574, 41461, 39400, 40008, 40476, 39845, 40460, 38431, 40663, 39899, 39172, 39602, 39584, 39672, 40042, 40535, 41341, 40310, 41752, 42200, 40663, 38367, 40095, 40434, 40566, 40037, 41358, 39139, 38998, 39514, 39257, 39707, 40820, 40893, 40814, 39029, 40846, 40880, 42079, 40147, 41558, 39753, 41136, 39576, 41704, 39955, 40223, 42196, 40839, 40845, 40039, 40291, 40814, 38318, 40372, 39111, 42016, 40538, 40341, 40203, 39579, 40783, 40911, 40037, 40290, 40886, 41062, 39980, 38953, 39804, 40538, 39899, 39955, 40190, 40414, 40205, 39262, 40318, 41319, 41705, 41555, 40413, 40960, 40139, 40701, 40982, 40573, 40353, 41752, 41287, 40699, 40735, 41149, 39517 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227249987,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8314,
        "IOBytes" : {
          "Total" : 69913045,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 384135
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1409490315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 2141445547,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "4" : {
            "sign" : 757731931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 153228479,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "15" : {
            "sign" : -1030503320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1662195144,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_customer_sk#143], ShuffleQueryStage 10 "
          },
          "11" : {
            "sign" : -254927857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "9" : {
            "sign" : 361360785,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          },
          "13" : {
            "sign" : 394092130,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3186487020,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#51], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : -1711712681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#27], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 178224746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 168745287,
            "rowCount" : 1939601,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "10" : {
            "sign" : 1888491358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "6" : {
            "sign" : -458923473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1817020434672,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "1" : {
            "sign" : -998045919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 159426400,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -1277048145,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#105], ShuffleQueryStage 9 "
          },
          "0" : {
            "sign" : -752994768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1513916070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 722537108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3028367391120,
            "rowCount" : 151418369556,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "3" : {
            "sign" : 599938197,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 576800,
            "rowCount" : 5600,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- Project [c_current_cdemo_sk#11]\n               :  +- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n               :     :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n               :     :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n               :     :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n               :     :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n               :     :     :  :  :- LogicalQueryStage Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [ss_customer_sk#51], ShuffleQueryStage 8\n               :     :     :  +- LogicalQueryStage Project [ws_bill_customer_sk#105], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cs_ship_customer_sk#143], ShuffleQueryStage 10\n               :     +- LogicalQueryStage Project [ca_address_sk#27], BroadcastQueryStage 6\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5087577092,
        "inputRowCount" : 410147154
      },
      "PD" : {
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 25,
        "FinishedTasksTotalTimeInMs" : 20974.0,
        "FinishedTasksDistributionInMs" : [ 74.0, 303.0, 719.0, 1237.0, 2835.0 ]
      },
      "StartTimeInMs" : 1702227242942,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 15359,
        "IOBytes" : {
          "Total" : 182037977,
          "Details" : {
            "IR" : 44958605,
            "IW" : 0,
            "SR" : 69528910,
            "SW" : 67550462
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1168129414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 11600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1378098697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1987233316,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], true\n      +- Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n         +- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n            +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n               :- LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11\n               +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1104602331,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 11600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [8]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cnt1#245L, cd_purchase_estimate#44, cnt2#246L, cd_credit_rating#45, cnt3#247L] Arguments: 100, [cd_gender#41 ASC NULLS FIRST, cd_marital_status#42 ASC NULLS FIRST, cd_education_status#43 ASC NULLS FIRST, cd_purchase_estimate#44 ASC NULLS FIRST, cd_credit_rating#45 ASC NULLS FIRST], [cd_gender#41, cd_marital_status#42, cd_education_status#43, cnt1#245L, cd_purchase_estimate#44, cnt2#246L, cd_credit_rating#45, cnt3#247L] "
          },
          "1" : {
            "sign" : 2124709664,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 528184,
            "rowCount" : 5585,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, count#325L] Keys [5]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Functions [1]: [count(1)] Aggregate Attributes [1]: [count(1)#251L] Results [8]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1)#251L AS cnt1#245L, cd_purchase_estimate#44, count(1)#251L AS cnt2#246L, cd_credit_rating#45, count(1)#251L AS cnt3#247L] "
          },
          "2" : {
            "sign" : 895307106,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, count#325L] Arguments: 13 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[cd_gender#41 ASC NULLS FIRST,cd_marital_status#42 ASC NULLS FIRST,cd_education_status#43 ASC NULLS FIRST,cd_purchase_estimate#44 ASC NULLS FIRST,cd_credit_rating#45 ASC NULLS FIRST], output=[cd_gender#41,cd_marital_status#42,cd_education_status#43,cnt1#245L,cd_purchase_estimate#44,cnt2#246L,cd_credit_rating#45,cnt3#247L])\n+- HashAggregate(keys=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], functions=[count(1)], output=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cnt1#245L, cd_purchase_estimate#44, cnt2#246L, cd_credit_rating#45, cnt3#247L])\n   +- ShuffleQueryStage 13\n      +- Exchange hashpartitioning(cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, 200), ENSURE_REQUIREMENTS, [plan_id=1405]\n         +- *(17) HashAggregate(keys=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], functions=[partial_count(1)], output=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, count#325L])\n            +- *(17) Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n               +- *(17) BroadcastHashJoin [c_current_cdemo_sk#11], [cd_demo_sk#40], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 12\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1353]\n                  :     +- AQEShuffleRead local\n                  :        +- ShuffleQueryStage 11\n                  :           +- Exchange hashpartitioning(c_current_cdemo_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=1265]\n                  :              +- *(16) Project [c_current_cdemo_sk#11]\n                  :                 +- *(16) BroadcastHashJoin [c_current_addr_sk#13], [ca_address_sk#27], Inner, BuildRight, false\n                  :                    :- *(16) Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n                  :                    :  +- *(16) SortMergeJoin [c_customer_sk#9], [cs_ship_customer_sk#143], LeftAnti\n                  :                    :     :- *(14) SortMergeJoin [c_customer_sk#9], [ws_bill_customer_sk#105], LeftAnti\n                  :                    :     :  :- *(12) SortMergeJoin [c_customer_sk#9], [ss_customer_sk#51], LeftSemi\n                  :                    :     :  :  :- *(10) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0\n                  :                    :     :  :  :  +- AQEShuffleRead coalesced\n                  :                    :     :  :  :     +- ShuffleQueryStage 0\n                  :                    :     :  :  :        +- Exchange hashpartitioning(c_customer_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=361]\n                  :                    :     :  :  :           +- *(1) Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42)))\n                  :                    :     :  :  :              :  +- Subquery subquery#323, [id=#140]\n                  :                    :     :  :  :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                           +- == Final Plan ==\n                                                                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                                              +- ShuffleQueryStage 0\n                                                                                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=506]\n                                                                                    +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                                                       +- *(1) Project [ca_address_sk#27]\n                                                                                          +- *(1) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                                                             +- *(1) ColumnarToRow\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                                           +- == Initial Plan ==\n                                                                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                                              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=138]\n                                                                                 +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                                                    +- Project [ca_address_sk#27]\n                                                                                       +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                  :                    :     :  :  :              +- *(1) ColumnarToRow\n                  :                    :     :  :  :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#13), isnotnull(c_current_cdemo_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)], ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>\n                  :                    :     :  :  +- *(11) Sort [ss_customer_sk#51 ASC NULLS FIRST], false, 0\n                  :                    :     :  :     +- AQEShuffleRead coalesced\n                  :                    :     :  :        +- ShuffleQueryStage 8\n                  :                    :     :  :           +- Exchange hashpartitioning(ss_customer_sk#51, 200), ENSURE_REQUIREMENTS, [plan_id=717]\n                  :                    :     :  :              +- *(7) Project [ss_customer_sk#51]\n                  :                    :     :  :                 +- *(7) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false\n                  :                    :     :  :                    :- *(7) ColumnarToRow\n                  :                    :     :  :                    :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#51,ss_sold_date_sk#71] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)], PushedFilters: [], ReadSchema: struct<ss_customer_sk:int>\n                  :                    :     :  :                    :        +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n                  :                    :     :  :                    :           +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#72], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=693]\n                                                                                       +- Project [d_date_sk#72]\n                                                                                          +- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                    :     :  :                    +- BroadcastQueryStage 1\n                  :                    :     :  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                  :                    :     :  :                          +- *(2) Project [d_date_sk#72]\n                  :                    :     :  :                             +- *(2) Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n                  :                    :     :  :                                +- *(2) ColumnarToRow\n                  :                    :     :  :                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                    :     :  +- *(13) Sort [ws_bill_customer_sk#105 ASC NULLS FIRST], false, 0\n                  :                    :     :     +- AQEShuffleRead coalesced\n                  :                    :     :        +- ShuffleQueryStage 9\n                  :                    :     :           +- Exchange hashpartitioning(ws_bill_customer_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=759]\n                  :                    :     :              +- *(8) Project [ws_bill_customer_sk#105]\n                  :                    :     :                 +- *(8) BroadcastHashJoin [ws_sold_date_sk#135], [d_date_sk#254], Inner, BuildRight, false\n                  :                    :     :                    :- *(8) ColumnarToRow\n                  :                    :     :                    :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#105,ws_sold_date_sk#135] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ws_bill_customer_sk:int>\n                  :                    :     :                    :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n                  :                    :     :                    +- BroadcastQueryStage 3\n                  :                    :     :                       +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                  :                    :     +- *(15) Sort [cs_ship_customer_sk#143 ASC NULLS FIRST], false, 0\n                  :                    :        +- AQEShuffleRead coalesced\n                  :                    :           +- ShuffleQueryStage 10\n                  :                    :              +- Exchange hashpartitioning(cs_ship_customer_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=801]\n                  :                    :                 +- *(9) Project [cs_ship_customer_sk#143]\n                  :                    :                    +- *(9) BroadcastHashJoin [cs_sold_date_sk#170], [d_date_sk#282], Inner, BuildRight, false\n                  :                    :                       :- *(9) ColumnarToRow\n                  :                    :                       :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_customer_sk#143,cs_sold_date_sk#170] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<cs_ship_customer_sk:int>\n                  :                    :                       :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n                  :                    :                       +- BroadcastQueryStage 5\n                  :                    :                          +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                  :                    +- BroadcastQueryStage 6\n                  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=457]\n                  :                          +- *(5) Project [ca_address_sk#27]\n                  :                             +- *(5) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                  :                                +- *(5) ColumnarToRow\n                  :                                   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                  +- AQEShuffleRead local\n                     +- ShuffleQueryStage 7\n                        +- Exchange hashpartitioning(cd_demo_sk#40, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n                           +- *(6) Filter isnotnull(cd_demo_sk#40)\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45] Batched: true, DataFilters: [isnotnull(cd_demo_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_pur...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 528184,
        "inputRowCount" : 5585
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "7" : [ 1051, 789, 789, 868, 789, 789, 1399, 868, 1051, 1051, 1051, 1051, 1051, 955, 1156, 955, 868, 1271, 868, 1156, 955, 1271, 1156, 868, 789, 1051, 789, 1271, 955, 868, 955, 789, 1051, 1051, 955, 1051, 868, 789, 1271, 868, 1156, 789, 955, 1051, 1051, 1051, 1051, 868, 955, 1399, 955, 1051, 1051, 1156, 1051, 868, 1051, 1399, 1271, 868, 1271, 1399, 1156, 1156, 955, 1051, 1051, 1271, 1156, 1051, 1051, 789, 1156, 868, 717, 868, 868, 717, 955, 1156, 789, 789, 868, 955, 789, 868, 1399, 1051, 1271, 1051, 1271, 868, 1271, 1271, 789, 1271, 868, 1399, 868, 1156, 955, 717, 955, 868, 955, 955, 789, 1051, 1051, 1156, 868, 789, 868, 1051, 1156, 955, 652, 1271, 1051, 1051, 1051, 955, 1271, 868, 1051, 868, 1051, 1051, 1051, 868, 955, 1156, 868, 955, 1051, 1051, 1051, 955, 955, 1051, 717, 1156, 789, 955, 955, 868, 1051, 868, 1271, 868, 1271, 868, 1156, 955, 1051, 789, 1271, 789, 1051, 1156, 1051, 955, 955, 868, 955, 868, 1156, 1271, 1051, 717, 1051, 1051, 1271, 955, 868, 868, 1156, 1156, 1156, 1051, 789, 1051, 789, 1271, 1051, 955, 1156, 789, 1051, 1271, 955, 1271, 789, 1051, 955, 789, 1051, 1051, 955, 955 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 28 ],
      "Objectives" : {
        "DurationInMs" : 450,
        "TotalTasksDurationInMs" : 442,
        "IOBytes" : {
          "Total" : 192180,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 192180,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -265288399,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#137, cs_ship_date_sk#138, cs_bill_customer_sk#139, cs_bill_cdemo_sk#140, cs_bill_hdemo_sk#141, cs_bill_addr_sk#142, cs_ship_customer_sk#143, cs_ship_cdemo_sk#144, cs_ship_hdemo_sk#145, cs_ship_addr_sk#146, cs_call_center_sk#147, cs_catalog_page_sk#148, cs_ship_mode_sk#149, cs_warehouse_sk#150, cs_item_sk#151, cs_promo_sk#152, cs_order_number#153L, cs_quantity#154, cs_wholesale_cost#155, cs_list_price#156, cs_sales_price#157, cs_ext_discount_amt#158, cs_ext_sales_price#159, cs_ext_wholesale_cost#160, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -494735877,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#170 = d_date_sk#282) "
          },
          "0" : {
            "sign" : 1811367628,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1662195144,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 1662195144,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143] "
          },
          "2" : {
            "sign" : 961434101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2292368272,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 2292368272,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_customer_sk#143, cs_sold_date_sk#170] "
          },
          "3" : {
            "sign" : -1192661590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#320 [cs_sold_date_sk#170]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_ship_customer_sk#143]\n+- Join Inner, (cs_sold_date_sk#170 = d_date_sk#282)\n   :- Project [cs_ship_customer_sk#143, cs_sold_date_sk#170]\n   :  +- Filter (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#320 [cs_sold_date_sk#170])\n   :     :  +- Project [d_date_sk#282]\n   :     :     +- Filter (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#137,cs_ship_date_sk#138,cs_bill_customer_sk#139,cs_bill_cdemo_sk#140,cs_bill_hdemo_sk#141,cs_bill_addr_sk#142,cs_ship_customer_sk#143,cs_ship_cdemo_sk#144,cs_ship_hdemo_sk#145,cs_ship_addr_sk#146,cs_call_center_sk#147,cs_catalog_page_sk#148,cs_ship_mode_sk#149,cs_warehouse_sk#150,cs_item_sk#151,cs_promo_sk#152,cs_order_number#153L,cs_quantity#154,cs_wholesale_cost#155,cs_list_price#156,cs_sales_price#157,cs_ext_discount_amt#158,cs_ext_sales_price#159,cs_ext_wholesale_cost#160,... 10 more fields] parquet\n   +- Project [d_date_sk#282]\n      +- Filter (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -678401988,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1662195144,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cs_ship_customer_sk#143] Input [3]: [cs_ship_customer_sk#143, cs_sold_date_sk#170, d_date_sk#282] "
          },
          "1" : {
            "sign" : -194209885,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#170] Right keys [1]: [d_date_sk#282] Join type: Inner Join condition: None "
          },
          "2" : {
            "sign" : 658934062,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2292368272,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [2]: [cs_ship_customer_sk#143, cs_sold_date_sk#170] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#318)] ReadSchema: struct<cs_ship_customer_sk:int> "
          },
          "3" : {
            "sign" : 546933899,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#282] Arguments: 5 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_ship_customer_sk#143]\n+- BroadcastHashJoin [cs_sold_date_sk#170], [d_date_sk#282], Inner, BuildRight, false\n   :- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_customer_sk#143,cs_sold_date_sk#170] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<cs_ship_customer_sk:int>\n   :     +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2293417568,
        "inputRowCount" : 143273107
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 6371,
        "TotalTasksDurationInMs" : 7085,
        "IOBytes" : {
          "Total" : 10568262,
          "Details" : {
            "IR" : 6117846,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4450416
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1214175435,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "1" : {
            "sign" : -1154870666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 482513000,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 482513000,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(scalar-subquery#323 [], xxhash64(c_current_addr_sk#13, 42))) "
          },
          "2" : {
            "sign" : -1397996476,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#9, c_customer_id#10, c_current_cdemo_sk#11, c_current_hdemo_sk#12, c_current_addr_sk#13, c_first_shipto_date_sk#14, c_first_sales_date_sk#15, c_salutation#16, c_first_name#17, c_last_name#18, c_preferred_cust_flag#19, c_birth_day#20, c_birth_month#21, c_birth_year#22, c_birth_country#23, c_login#24, c_email_address#25, c_last_review_date#26], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13]\n+- Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(scalar-subquery#323 [], xxhash64(c_current_addr_sk#13, 42)))\n   :  +- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322]\n   :     +- Project [ca_address_sk#27]\n   :        +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n   :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#9,c_customer_id#10,c_current_cdemo_sk#11,c_current_hdemo_sk#12,c_current_addr_sk#13,c_first_shipto_date_sk#14,c_first_sales_date_sk#15,c_salutation#16,c_first_name#17,c_last_name#18,c_preferred_cust_flag#19,c_birth_day#20,c_birth_month#21,c_birth_year#22,c_birth_country#23,c_login#24,c_email_address#25,c_last_review_date#26] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1123707763,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] Condition : ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42))) "
          },
          "1" : {
            "sign" : -932812064,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [3]: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)] ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42)))\n:  +- Subquery subquery#323, [id=#140]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=138]\n:              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n:                 +- Project [ca_address_sk#27]\n:                    +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n:                       +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#13), isnotnull(c_current_cdemo_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)], ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 38601040,
        "inputRowCount" : 1930052
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 9890,
        "TotalTasksDurationInMs" : 23307,
        "IOBytes" : {
          "Total" : 26650491,
          "Details" : {
            "IR" : 24019979,
            "IW" : 0,
            "SR" : 0,
            "SW" : 2630512
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -11722045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 7428801564800,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L] "
          },
          "1" : {
            "sign" : -1734844421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5891808137600,
                "rowCount" : 64041392800
              },
              "compileTime" : {
                "sizeInBytes" : 5891808137600,
                "rowCount" : 64041392800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "2" : {
            "sign" : 1556217422,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6404139280000,
                "rowCount" : 64041392800
              },
              "compileTime" : {
                "sizeInBytes" : 6404139280000,
                "rowCount" : 64041392800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11) "
          },
          "3" : {
            "sign" : -1437880771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 181652800,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 159426400,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], [cd_gender#41, cd_marital_status#42, cd_education_status#43, count(1) AS cnt1#245L, cd_purchase_estimate#44, count(1) AS cnt2#246L, cd_credit_rating#45, count(1) AS cnt3#247L]\n+- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n   +- Join Inner, (cd_demo_sk#40 = c_current_cdemo_sk#11)\n      :- LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11\n      +- LogicalQueryStage Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1426160539,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 181652800,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Arguments: 7 "
          },
          "1" : {
            "sign" : -864964500,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5891808137600,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Input [7]: [c_current_cdemo_sk#11, cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "0" : {
            "sign" : -1127584962,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 7428801564800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Keys [5]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Functions [1]: [partial_count(1)] Aggregate Attributes [1]: [count#324L] Results [6]: [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, count#325L] "
          },
          "2" : {
            "sign" : -1291810723,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6404139280000,
            "rowCount" : 64041392800,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [c_current_cdemo_sk#11] Right keys [1]: [cd_demo_sk#40] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1994804723,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 3145728,
            "rowCount" : 33341,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [c_current_cdemo_sk#11] Arguments: 12 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45], functions=[partial_count(1)], output=[cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, count#325L])\n+- Project [cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n   +- BroadcastHashJoin [c_current_cdemo_sk#11], [cd_demo_sk#40], Inner, BuildLeft, false\n      :- BroadcastQueryStage 12\n      :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1353]\n      :     +- AQEShuffleRead local\n      :        +- ShuffleQueryStage 11\n      :           +- Exchange hashpartitioning(c_current_cdemo_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=1265]\n      :              +- *(16) Project [c_current_cdemo_sk#11]\n      :                 +- *(16) BroadcastHashJoin [c_current_addr_sk#13], [ca_address_sk#27], Inner, BuildRight, false\n      :                    :- *(16) Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n      :                    :  +- *(16) SortMergeJoin [c_customer_sk#9], [cs_ship_customer_sk#143], LeftAnti\n      :                    :     :- *(14) SortMergeJoin [c_customer_sk#9], [ws_bill_customer_sk#105], LeftAnti\n      :                    :     :  :- *(12) SortMergeJoin [c_customer_sk#9], [ss_customer_sk#51], LeftSemi\n      :                    :     :  :  :- *(10) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0\n      :                    :     :  :  :  +- AQEShuffleRead coalesced\n      :                    :     :  :  :     +- ShuffleQueryStage 0\n      :                    :     :  :  :        +- Exchange hashpartitioning(c_customer_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=361]\n      :                    :     :  :  :           +- *(1) Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42)))\n      :                    :     :  :  :              :  +- Subquery subquery#323, [id=#140]\n      :                    :     :  :  :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                                  +- ShuffleQueryStage 0\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=506]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                                           +- *(1) Project [ca_address_sk#27]\n                                                                              +- *(1) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                                                 +- *(1) ColumnarToRow\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                               +- == Initial Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=138]\n                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                                        +- Project [ca_address_sk#27]\n                                                                           +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n      :                    :     :  :  :              +- *(1) ColumnarToRow\n      :                    :     :  :  :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#13), isnotnull(c_current_cdemo_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)], ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>\n      :                    :     :  :  +- *(11) Sort [ss_customer_sk#51 ASC NULLS FIRST], false, 0\n      :                    :     :  :     +- AQEShuffleRead coalesced\n      :                    :     :  :        +- ShuffleQueryStage 8\n      :                    :     :  :           +- Exchange hashpartitioning(ss_customer_sk#51, 200), ENSURE_REQUIREMENTS, [plan_id=717]\n      :                    :     :  :              +- *(7) Project [ss_customer_sk#51]\n      :                    :     :  :                 +- *(7) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false\n      :                    :     :  :                    :- *(7) ColumnarToRow\n      :                    :     :  :                    :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#51,ss_sold_date_sk#71] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)], PushedFilters: [], ReadSchema: struct<ss_customer_sk:int>\n      :                    :     :  :                    :        +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n      :                    :     :  :                    :           +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#72], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=693]\n                                                                           +- Project [d_date_sk#72]\n                                                                              +- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :                    :     :  :                    +- BroadcastQueryStage 1\n      :                    :     :  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n      :                    :     :  :                          +- *(2) Project [d_date_sk#72]\n      :                    :     :  :                             +- *(2) Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n      :                    :     :  :                                +- *(2) ColumnarToRow\n      :                    :     :  :                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :                    :     :  +- *(13) Sort [ws_bill_customer_sk#105 ASC NULLS FIRST], false, 0\n      :                    :     :     +- AQEShuffleRead coalesced\n      :                    :     :        +- ShuffleQueryStage 9\n      :                    :     :           +- Exchange hashpartitioning(ws_bill_customer_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=759]\n      :                    :     :              +- *(8) Project [ws_bill_customer_sk#105]\n      :                    :     :                 +- *(8) BroadcastHashJoin [ws_sold_date_sk#135], [d_date_sk#254], Inner, BuildRight, false\n      :                    :     :                    :- *(8) ColumnarToRow\n      :                    :     :                    :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#105,ws_sold_date_sk#135] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ws_bill_customer_sk:int>\n      :                    :     :                    :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n      :                    :     :                    +- BroadcastQueryStage 3\n      :                    :     :                       +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n      :                    :     +- *(15) Sort [cs_ship_customer_sk#143 ASC NULLS FIRST], false, 0\n      :                    :        +- AQEShuffleRead coalesced\n      :                    :           +- ShuffleQueryStage 10\n      :                    :              +- Exchange hashpartitioning(cs_ship_customer_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=801]\n      :                    :                 +- *(9) Project [cs_ship_customer_sk#143]\n      :                    :                    +- *(9) BroadcastHashJoin [cs_sold_date_sk#170], [d_date_sk#282], Inner, BuildRight, false\n      :                    :                       :- *(9) ColumnarToRow\n      :                    :                       :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_customer_sk#143,cs_sold_date_sk#170] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<cs_ship_customer_sk:int>\n      :                    :                       :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n      :                    :                       +- BroadcastQueryStage 5\n      :                    :                          +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n      :                    +- BroadcastQueryStage 6\n      :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=457]\n      :                          +- *(5) Project [ca_address_sk#27]\n      :                             +- *(5) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n      :                                +- *(5) ColumnarToRow\n      :                                   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n      +- ShuffleQueryStage 7\n         +- Exchange hashpartitioning(cd_demo_sk#40, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n            +- *(6) Filter isnotnull(cd_demo_sk#40)\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45] Batched: true, DataFilters: [isnotnull(cd_demo_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_pur...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 184798528,
        "inputRowCount" : 1954141
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 290960, 264509, 290960, 290960, 290960, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 290960, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 908,
        "TotalTasksDurationInMs" : 899,
        "IOBytes" : {
          "Total" : 52517298,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 52325118,
            "SW" : 192180
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -896941866,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105) "
          },
          "5" : {
            "sign" : -1712992554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (c_customer_sk#9 = ss_customer_sk#51) "
          },
          "1" : {
            "sign" : 979460059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40203200,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 40203200,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#13 = ca_address_sk#27) "
          },
          "0" : {
            "sign" : 1872083744,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24121920,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 24121920,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11] "
          },
          "2" : {
            "sign" : -1902111987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30880832,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 30880832,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "3" : {
            "sign" : 1693968891,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              },
              "compileTime" : {
                "sizeInBytes" : 38601040,
                "rowCount" : 1930052
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_current_cdemo_sk#11]\n+- Join Inner, (c_current_addr_sk#13 = ca_address_sk#27)\n   :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n   :  +- Join LeftAnti, (c_customer_sk#9 = cs_ship_customer_sk#143)\n   :     :- Join LeftAnti, (c_customer_sk#9 = ws_bill_customer_sk#105)\n   :     :  :- Join LeftSemi, (c_customer_sk#9 = ss_customer_sk#51)\n   :     :  :  :- Project [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13]\n   :     :  :  :  +- Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(scalar-subquery#323 [], xxhash64(c_current_addr_sk#13, 42)))\n   :     :  :  :     :  +- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322]\n   :     :  :  :     :     +- Project [ca_address_sk#27]\n   :     :  :  :     :        +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n   :     :  :  :     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n   :     :  :  :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#9,c_customer_id#10,c_current_cdemo_sk#11,c_current_hdemo_sk#12,c_current_addr_sk#13,c_first_shipto_date_sk#14,c_first_sales_date_sk#15,c_salutation#16,c_first_name#17,c_last_name#18,c_preferred_cust_flag#19,c_birth_day#20,c_birth_month#21,c_birth_year#22,c_birth_country#23,c_login#24,c_email_address#25,c_last_review_date#26] parquet\n   :     :  :  +- Project [ss_customer_sk#51]\n   :     :  :     +- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)\n   :     :  :        :- Project [ss_customer_sk#51, ss_sold_date_sk#71]\n   :     :  :        :  +- Filter (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#318 [ss_sold_date_sk#71])\n   :     :  :        :     :  +- Project [d_date_sk#72]\n   :     :  :        :     :     +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n   :     :  :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n   :     :  :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#49,ss_item_sk#50,ss_customer_sk#51,ss_cdemo_sk#52,ss_hdemo_sk#53,ss_addr_sk#54,ss_store_sk#55,ss_promo_sk#56,ss_ticket_number#57L,ss_quantity#58,ss_wholesale_cost#59,ss_list_price#60,ss_sales_price#61,ss_ext_discount_amt#62,ss_ext_sales_price#63,ss_ext_wholesale_cost#64,ss_ext_list_price#65,ss_ext_tax#66,ss_coupon_amt#67,ss_net_paid#68,ss_net_paid_inc_tax#69,ss_net_profit#70,ss_sold_date_sk#71] parquet\n   :     :  :        +- Project [d_date_sk#72]\n   :     :  :           +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n   :     :  :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n   :     :  +- Project [ws_bill_customer_sk#105]\n   :     :     +- Join Inner, (ws_sold_date_sk#135 = d_date_sk#254)\n   :     :        :- Project [ws_bill_customer_sk#105, ws_sold_date_sk#135]\n   :     :        :  +- Filter (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#319 [ws_sold_date_sk#135])\n   :     :        :     :  +- Project [d_date_sk#254]\n   :     :        :     :     +- Filter (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254))\n   :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n   :     :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#102,ws_ship_date_sk#103,ws_item_sk#104,ws_bill_customer_sk#105,ws_bill_cdemo_sk#106,ws_bill_hdemo_sk#107,ws_bill_addr_sk#108,ws_ship_customer_sk#109,ws_ship_cdemo_sk#110,ws_ship_hdemo_sk#111,ws_ship_addr_sk#112,ws_web_page_sk#113,ws_web_site_sk#114,ws_ship_mode_sk#115,ws_warehouse_sk#116,ws_promo_sk#117,ws_order_number#118L,ws_quantity#119,ws_wholesale_cost#120,ws_list_price#121,ws_sales_price#122,ws_ext_discount_amt#123,ws_ext_sales_price#124,ws_ext_wholesale_cost#125,... 10 more fields] parquet\n   :     :        +- Project [d_date_sk#254]\n   :     :           +- Filter (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254))\n   :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n   :     +- Project [cs_ship_customer_sk#143]\n   :        +- Join Inner, (cs_sold_date_sk#170 = d_date_sk#282)\n   :           :- Project [cs_ship_customer_sk#143, cs_sold_date_sk#170]\n   :           :  +- Filter (isnotnull(cs_sold_date_sk#170) AND dynamicpruning#320 [cs_sold_date_sk#170])\n   :           :     :  +- Project [d_date_sk#282]\n   :           :     :     +- Filter (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282))\n   :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n   :           :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#137,cs_ship_date_sk#138,cs_bill_customer_sk#139,cs_bill_cdemo_sk#140,cs_bill_hdemo_sk#141,cs_bill_addr_sk#142,cs_ship_customer_sk#143,cs_ship_cdemo_sk#144,cs_ship_hdemo_sk#145,cs_ship_addr_sk#146,cs_call_center_sk#147,cs_catalog_page_sk#148,cs_ship_mode_sk#149,cs_warehouse_sk#150,cs_item_sk#151,cs_promo_sk#152,cs_order_number#153L,cs_quantity#154,cs_wholesale_cost#155,cs_list_price#156,cs_sales_price#157,cs_ext_discount_amt#158,cs_ext_sales_price#159,cs_ext_wholesale_cost#160,... 10 more fields] parquet\n   :           +- Project [d_date_sk#282]\n   :              +- Filter (((isnotnull(d_year#288) AND isnotnull(d_moy#290)) AND (((d_year#288 = 1999) AND (d_moy#290 >= 1)) AND (d_moy#290 <= 3))) AND isnotnull(d_date_sk#282))\n   :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n   +- Project [ca_address_sk#27]\n      +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n         +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -348310908,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [cs_ship_customer_sk#143] Arguments: [cs_ship_customer_sk#143 ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 271409033,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [ss_customer_sk#51] Arguments: [ss_customer_sk#51 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : 180900155,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_customer_sk#9] Right keys [1]: [ws_bill_customer_sk#105] Join type: LeftAnti Join condition: None "
          },
          "11" : {
            "sign" : -1582163325,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 34576032,
            "rowCount" : 2161002,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [ws_bill_customer_sk#105] Arguments: 9 "
          },
          "9" : {
            "sign" : 1390998568,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 132412816,
            "rowCount" : 8275801,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [ss_customer_sk#51] Arguments: 8 "
          },
          "13" : {
            "sign" : 1278492326,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 64639616,
            "rowCount" : 4039976,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [cs_ship_customer_sk#143] Arguments: 10 "
          },
          "5" : {
            "sign" : -789677005,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_customer_sk#9] Right keys [1]: [ss_customer_sk#51] Join type: LeftSemi Join condition: None "
          },
          "10" : {
            "sign" : -666375652,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [ws_bill_customer_sk#105] Arguments: [ws_bill_customer_sk#105 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -781756418,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -534748512,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 40203200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [c_current_addr_sk#13] Right keys [1]: [ca_address_sk#27] Join type: Inner Join condition: None "
          },
          "14" : {
            "sign" : 50120840,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 78453,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_address_sk#27] Arguments: 6 "
          },
          "0" : {
            "sign" : -954515779,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24121920,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [c_current_cdemo_sk#11] Input [3]: [c_current_cdemo_sk#11, c_current_addr_sk#13, ca_address_sk#27] "
          },
          "2" : {
            "sign" : 655644312,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 30880832,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_current_cdemo_sk#11, c_current_addr_sk#13] Input [3]: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] "
          },
          "7" : {
            "sign" : 1562400249,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 5139840,
            "rowCount" : 160620,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [c_customer_sk#9, c_current_cdemo_sk#11, c_current_addr_sk#13] Arguments: 0 "
          },
          "3" : {
            "sign" : 2067173670,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 38601040,
            "rowCount" : 1930052,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_customer_sk#9] Right keys [1]: [cs_ship_customer_sk#143] Join type: LeftAnti Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_current_cdemo_sk#11]\n+- BroadcastHashJoin [c_current_addr_sk#13], [ca_address_sk#27], Inner, BuildRight, false\n   :- Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n   :  +- SortMergeJoin [c_customer_sk#9], [cs_ship_customer_sk#143], LeftAnti\n   :     :- SortMergeJoin [c_customer_sk#9], [ws_bill_customer_sk#105], LeftAnti\n   :     :  :- SortMergeJoin [c_customer_sk#9], [ss_customer_sk#51], LeftSemi\n   :     :  :  :- Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0\n   :     :  :  :  +- ShuffleQueryStage 0\n   :     :  :  :     +- Exchange hashpartitioning(c_customer_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=361]\n   :     :  :  :        +- *(1) Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42)))\n   :     :  :  :           :  +- Subquery subquery#323, [id=#140]\n   :     :  :  :           :     +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                       +- ShuffleQueryStage 0\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=506]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                +- *(1) Project [ca_address_sk#27]\n                                                   +- *(1) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                      +- *(1) ColumnarToRow\n                                                         +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                    +- == Initial Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=138]\n                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                             +- Project [ca_address_sk#27]\n                                                +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n   :     :  :  :           +- *(1) ColumnarToRow\n   :     :  :  :              +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#13), isnotnull(c_current_cdemo_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)], ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>\n   :     :  :  +- Sort [ss_customer_sk#51 ASC NULLS FIRST], false, 0\n   :     :  :     +- ShuffleQueryStage 8\n   :     :  :        +- Exchange hashpartitioning(ss_customer_sk#51, 200), ENSURE_REQUIREMENTS, [plan_id=717]\n   :     :  :           +- *(7) Project [ss_customer_sk#51]\n   :     :  :              +- *(7) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false\n   :     :  :                 :- *(7) ColumnarToRow\n   :     :  :                 :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#51,ss_sold_date_sk#71] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)], PushedFilters: [], ReadSchema: struct<ss_customer_sk:int>\n   :     :  :                 :        +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   :     :  :                 :           +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#72], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=693]\n                                                +- Project [d_date_sk#72]\n                                                   +- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :  :                 +- BroadcastQueryStage 1\n   :     :  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n   :     :  :                       +- *(2) Project [d_date_sk#72]\n   :     :  :                          +- *(2) Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n   :     :  :                             +- *(2) ColumnarToRow\n   :     :  :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :  +- Sort [ws_bill_customer_sk#105 ASC NULLS FIRST], false, 0\n   :     :     +- ShuffleQueryStage 9\n   :     :        +- Exchange hashpartitioning(ws_bill_customer_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=759]\n   :     :           +- *(8) Project [ws_bill_customer_sk#105]\n   :     :              +- *(8) BroadcastHashJoin [ws_sold_date_sk#135], [d_date_sk#254], Inner, BuildRight, false\n   :     :                 :- *(8) ColumnarToRow\n   :     :                 :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#105,ws_sold_date_sk#135] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ws_bill_customer_sk:int>\n   :     :                 :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   :     :                 +- BroadcastQueryStage 3\n   :     :                    +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n   :     +- Sort [cs_ship_customer_sk#143 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 10\n   :           +- Exchange hashpartitioning(cs_ship_customer_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=801]\n   :              +- *(9) Project [cs_ship_customer_sk#143]\n   :                 +- *(9) BroadcastHashJoin [cs_sold_date_sk#170], [d_date_sk#282], Inner, BuildRight, false\n   :                    :- *(9) ColumnarToRow\n   :                    :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_customer_sk#143,cs_sold_date_sk#170] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<cs_ship_customer_sk:int>\n   :                    :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   :                    +- BroadcastQueryStage 5\n   :                       +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n   +- BroadcastQueryStage 6\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=457]\n         +- *(5) Project [ca_address_sk#27]\n            +- *(5) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n               +- *(5) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 243059760,
        "inputRowCount" : 14715852
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 23562, 23414, 23072, 22720, 23747, 23141, 23844, 23075, 23299, 23716, 23523, 22863, 23161, 22570, 23747, 23475, 23032, 24406, 23330, 23284, 23856, 23171, 23762, 23172, 22991, 23295, 23254, 23481, 23562, 22696, 23195, 23423, 22581, 23592, 23311, 23773, 23300, 23226, 23464, 22207, 22570, 24108, 42799, 22961, 23588, 22848, 22906, 23171, 23624, 23439, 22473, 22529, 23146, 22978, 22683, 23561, 23465, 22894, 22164, 23747, 22848, 22924, 22138, 23114, 22654, 23491, 22905, 22764, 23624, 24375, 23717, 22683, 23115, 22482, 23300, 23481, 23198, 23002, 22709, 23026, 24333, 23067, 23002, 22863, 22863, 23773, 22457, 23562, 23535, 24205, 22961, 23363, 22345, 22837, 22894, 23788, 22052, 22874, 22683, 23762, 23310, 23781, 23002, 23182, 22921, 22991, 23196, 23115, 23389, 23547, 22416, 23321, 23284, 23315, 23789, 23044, 22735, 23260, 22893, 23541, 22694, 22972, 23666, 23033, 23608, 24545, 23141, 23115, 22262, 22709, 23742, 23627, 22759, 23902, 23157, 23311, 23747, 23984, 23579, 22879, 23562, 22095, 23943, 22859, 23438, 22872, 23284, 23130, 24672, 22946, 25167, 23141, 22559, 22651, 23172, 23577, 22405, 24333, 23701, 23172, 22750, 23677, 23773, 22720, 24087, 24544, 23115, 23269, 23465, 22991, 22735, 23742, 23002, 23141, 23773, 22750, 23161, 23342, 23886, 23927, 24178, 23141, 22698, 23172, 23805, 23439, 24395, 22681, 23002, 23160, 22889, 23603, 22301, 23434, 23486, 23254, 23423, 22596, 23966, 23747 ],
        "4" : [ 10434, 10680, 10642, 9864, 9922, 11189, 10504, 10584, 10563, 10302, 9674, 10202, 10782, 11178, 10226, 9977, 10581, 10196, 9925, 10249, 10241, 10357, 9891, 9851, 10749, 10605, 10763, 11131, 10118, 10245, 10401, 9663, 9957, 10758, 9976, 9668, 10224, 10241, 10124, 10434, 10322, 10650, 11701, 10460, 10489, 10339, 10035, 10036, 10652, 10715, 10582, 9986, 10538, 10966, 10171, 9967, 10707, 10063, 9999, 10205, 10161, 10183, 10375, 10347, 10827, 10641, 10025, 10188, 10533, 10521, 10516, 10047, 10121, 10578, 10424, 10429, 10674, 10551, 10686, 10357, 10038, 10772, 10659, 10239, 10357, 9905, 10963, 10687, 10093, 10893, 10212, 10280, 10489, 11134, 10190, 10710, 10352, 9386, 10732, 10456, 9827, 10337, 10683, 9804, 10573, 10254, 10087, 10337, 10575, 10785, 10502, 10232, 10974, 10296, 9868, 10049, 10258, 9889, 10203, 9638, 10603, 10310, 10560, 10563, 10744, 10795, 10402, 10736, 10548, 10485, 9397, 10755, 10604, 10232, 9815, 10283, 10191, 10681, 10575, 10363, 10551, 10086, 9879, 10615, 9938, 10281, 10155, 10862, 10615, 10537, 10416, 10320, 10653, 10901, 10519, 10639, 10824, 10219, 9945, 10578, 9468, 9855, 9949, 10282, 10458, 11050, 10472, 10542, 10653, 11032, 10404, 10155, 10128, 9684, 10560, 10240, 10345, 10132, 10030, 10237, 10273, 10482, 10564, 10378, 10342, 9996, 10424, 10614, 10189, 10783, 10511, 10564, 10431, 9868, 10083, 10781, 10285, 10366, 10500, 9971 ],
        "1" : [ 13780, 13780, 15158, 13780, 15158, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 15158, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 13780, 13780, 13780, 12527, 13780, 12527, 12527, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 12527, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 12527, 12527, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 13780, 13780, 13780, 12527, 13780, 13780, 15158, 13780, 15158, 13780, 12527, 13780, 13780, 13780, 12527, 13780, 13780, 12527, 12527, 12527, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 15158, 13780, 12527, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 13780, 15158, 13780, 13780, 13780, 15158, 13780, 13780, 15158, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 12527, 13780, 13780, 13780, 13780, 12527, 13780, 15158, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780, 13780 ],
        "3" : [ 40735, 40366, 40238, 40343, 40499, 41479, 38683, 38886, 40253, 40384, 40814, 40428, 41718, 41374, 39978, 40487, 41110, 41704, 40464, 39873, 39055, 40663, 40100, 40464, 39863, 40203, 40845, 40791, 39827, 39201, 40364, 40451, 41088, 40972, 39955, 40315, 40622, 39853, 38793, 39837, 40274, 40758, 108951, 40428, 40364, 39331, 39845, 39826, 39878, 40533, 40947, 41020, 38748, 40566, 40090, 41207, 39923, 39869, 41184, 40364, 39876, 41208, 39426, 40814, 40510, 40735, 40699, 39832, 40524, 40451, 41182, 40297, 40983, 40586, 41287, 39298, 40508, 40924, 40499, 41682, 39991, 41231, 41136, 39730, 40216, 39075, 41507, 40686, 39707, 41287, 41064, 40509, 40985, 39684, 40124, 41233, 40566, 40451, 40070, 39121, 39397, 39876, 40349, 39868, 39827, 39854, 39574, 41461, 39400, 40008, 40476, 39845, 40460, 38431, 40663, 39899, 39172, 39602, 39584, 39672, 40042, 40535, 41341, 40310, 41752, 42200, 40663, 38367, 40095, 40434, 40566, 40037, 41358, 39139, 38998, 39514, 39257, 39707, 40820, 40893, 40814, 39029, 40846, 40880, 42079, 40147, 41558, 39753, 41136, 39576, 41704, 39955, 40223, 42196, 40839, 40845, 40039, 40291, 40814, 38318, 40372, 39111, 42016, 40538, 40341, 40203, 39579, 40783, 40911, 40037, 40290, 40886, 41062, 39980, 38953, 39804, 40538, 39899, 39955, 40190, 40414, 40205, 39262, 40318, 41319, 41705, 41555, 40413, 40960, 40139, 40701, 40982, 40573, 40353, 41752, 41287, 40699, 40735, 41149, 39517 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 6320,
        "TotalTasksDurationInMs" : 6308,
        "IOBytes" : {
          "Total" : 17011612,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 16819657,
            "SW" : 191955
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1746928700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 159426400,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 159426400,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] "
          },
          "1" : {
            "sign" : 2029358198,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(cd_demo_sk#40) "
          },
          "2" : {
            "sign" : 900414210,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45]\n+- Filter isnotnull(cd_demo_sk#40)\n   +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45,cd_dep_count#46,cd_dep_employed_count#47,cd_dep_college_count#48] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1648261226,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 159426400,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Condition : isnotnull(cd_demo_sk#40) "
          },
          "1" : {
            "sign" : -434285686,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 159426400,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_demographics Output [6]: [cd_demo_sk#40, cd_gender#41, cd_marital_status#42, cd_education_status#43, cd_purchase_estimate#44, cd_credit_rating#45] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_demographics] PushedFilters: [IsNotNull(cd_demo_sk)] ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_demographics",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(cd_demo_sk#40)\n+- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_education_status#43,cd_purchase_estimate#44,cd_credit_rating#45] Batched: true, DataFilters: [isnotnull(cd_demo_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_pur...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 159426400,
        "inputRowCount" : 1920800
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 7725,
        "TotalTasksDurationInMs" : 7704,
        "IOBytes" : {
          "Total" : 60130869,
          "Details" : {
            "IR" : 7805751,
            "IW" : 0,
            "SR" : 0,
            "SW" : 52325118
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1454557157,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 533456,
                "rowCount" : 33341
              },
              "compileTime" : {
                "sizeInBytes" : 24121920,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_current_cdemo_sk#11], ShuffleQueryStage 11 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [c_current_cdemo_sk#11], ShuffleQueryStage 11\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1060942614,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 533456,
            "rowCount" : 33341,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [c_current_cdemo_sk#11] Arguments: 11 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 11\n+- Exchange hashpartitioning(c_current_cdemo_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=1265]\n   +- *(16) Project [c_current_cdemo_sk#11]\n      +- *(16) BroadcastHashJoin [c_current_addr_sk#13], [ca_address_sk#27], Inner, BuildRight, false\n         :- *(16) Project [c_current_cdemo_sk#11, c_current_addr_sk#13]\n         :  +- *(16) SortMergeJoin [c_customer_sk#9], [cs_ship_customer_sk#143], LeftAnti\n         :     :- *(14) SortMergeJoin [c_customer_sk#9], [ws_bill_customer_sk#105], LeftAnti\n         :     :  :- *(12) SortMergeJoin [c_customer_sk#9], [ss_customer_sk#51], LeftSemi\n         :     :  :  :- *(10) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0\n         :     :  :  :  +- AQEShuffleRead coalesced\n         :     :  :  :     +- ShuffleQueryStage 0\n         :     :  :  :        +- Exchange hashpartitioning(c_customer_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=361]\n         :     :  :  :           +- *(1) Filter ((isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11)) AND might_contain(Subquery subquery#323, [id=#140], xxhash64(c_current_addr_sk#13, 42)))\n         :     :  :  :              :  +- Subquery subquery#323, [id=#140]\n         :     :  :  :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                +- ShuffleQueryStage 0\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=506]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                         +- *(1) Project [ca_address_sk#27]\n                                                            +- *(1) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                               +- *(1) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                             +- == Initial Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=138]\n                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n                                                      +- Project [ca_address_sk#27]\n                                                         +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n         :     :  :  :              +- *(1) ColumnarToRow\n         :     :  :  :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#13), isnotnull(c_current_cdemo_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)], ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>\n         :     :  :  +- *(11) Sort [ss_customer_sk#51 ASC NULLS FIRST], false, 0\n         :     :  :     +- AQEShuffleRead coalesced\n         :     :  :        +- ShuffleQueryStage 8\n         :     :  :           +- Exchange hashpartitioning(ss_customer_sk#51, 200), ENSURE_REQUIREMENTS, [plan_id=717]\n         :     :  :              +- *(7) Project [ss_customer_sk#51]\n         :     :  :                 +- *(7) BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false\n         :     :  :                    :- *(7) ColumnarToRow\n         :     :  :                    :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#51,ss_sold_date_sk#71] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)], PushedFilters: [], ReadSchema: struct<ss_customer_sk:int>\n         :     :  :                    :        +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n         :     :  :                    :           +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#72], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=693]\n                                                         +- Project [d_date_sk#72]\n                                                            +- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         :     :  :                    +- BroadcastQueryStage 1\n         :     :  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n         :     :  :                          +- *(2) Project [d_date_sk#72]\n         :     :  :                             +- *(2) Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n         :     :  :                                +- *(2) ColumnarToRow\n         :     :  :                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         :     :  +- *(13) Sort [ws_bill_customer_sk#105 ASC NULLS FIRST], false, 0\n         :     :     +- AQEShuffleRead coalesced\n         :     :        +- ShuffleQueryStage 9\n         :     :           +- Exchange hashpartitioning(ws_bill_customer_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=759]\n         :     :              +- *(8) Project [ws_bill_customer_sk#105]\n         :     :                 +- *(8) BroadcastHashJoin [ws_sold_date_sk#135], [d_date_sk#254], Inner, BuildRight, false\n         :     :                    :- *(8) ColumnarToRow\n         :     :                    :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#105,ws_sold_date_sk#135] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ws_bill_customer_sk:int>\n         :     :                    :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n         :     :                    +- BroadcastQueryStage 3\n         :     :                       +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n         :     +- *(15) Sort [cs_ship_customer_sk#143 ASC NULLS FIRST], false, 0\n         :        +- AQEShuffleRead coalesced\n         :           +- ShuffleQueryStage 10\n         :              +- Exchange hashpartitioning(cs_ship_customer_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=801]\n         :                 +- *(9) Project [cs_ship_customer_sk#143]\n         :                    +- *(9) BroadcastHashJoin [cs_sold_date_sk#170], [d_date_sk#282], Inner, BuildRight, false\n         :                       :- *(9) ColumnarToRow\n         :                       :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_customer_sk#143,cs_sold_date_sk#170] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#170), dynamicpruningexpression(cs_sold_date_sk#170 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<cs_ship_customer_sk:int>\n         :                       :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n         :                       +- BroadcastQueryStage 5\n         :                          +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n         +- BroadcastQueryStage 6\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=457]\n               +- *(5) Project [ca_address_sk#27]\n                  +- *(5) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n                     +- *(5) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 533456,
        "inputRowCount" : 33341
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 1051, 1156, 955, 955, 955, 1051, 1051, 955, 868, 1051, 1051, 955, 1051, 955, 955, 1051, 955, 955, 955, 955, 1051, 955, 955, 955, 955, 955, 955, 1156, 1051, 1051, 1156, 1051, 1051, 1051, 955, 1156, 868, 1156, 868, 1051, 1051, 955, 955, 955, 1051, 868, 1156, 955, 1051, 1051, 955, 1051, 955, 1156, 955, 1051, 1051, 868, 955, 1051, 1051, 1051, 955, 955, 955, 1051, 1051, 868, 868, 955, 955, 955, 1156, 1051, 1156, 1051, 1051, 1051, 1051, 955, 955, 1051, 789, 955, 955, 1156, 955, 1156, 955, 955, 955, 1051, 955, 955, 1156, 1051, 955, 1051, 955, 955, 955, 1051, 955, 955, 1051, 1051, 1156, 955, 955, 955, 955, 955, 1051, 1051, 955, 1051, 955, 1051, 955, 955, 955, 1051, 1051, 1051, 955, 955, 789, 955, 1051, 955, 1051, 1051, 868, 1051, 1051, 1051, 955, 1051, 1051, 1051, 955, 1156, 1051, 1051, 955, 868, 955, 955, 1051, 868, 955, 955, 1156, 1051, 955, 1271, 955, 1051, 868, 1051, 955, 955, 955, 868, 1051, 1051, 1051, 1051, 1156, 955, 1051, 1051, 955, 1051, 955, 955, 1051, 1156, 955, 955, 1051, 1051, 1156, 955, 955, 955, 1051, 955, 1156, 1051, 955, 955, 1051, 955, 955, 1051, 1271, 1051, 955, 955 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 52,
        "TotalTasksDurationInMs" : 47,
        "IOBytes" : {
          "Total" : 191955,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 191955,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1326326748,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#49, ss_item_sk#50, ss_customer_sk#51, ss_cdemo_sk#52, ss_hdemo_sk#53, ss_addr_sk#54, ss_store_sk#55, ss_promo_sk#56, ss_ticket_number#57L, ss_quantity#58, ss_wholesale_cost#59, ss_list_price#60, ss_sales_price#61, ss_ext_discount_amt#62, ss_ext_sales_price#63, ss_ext_wholesale_cost#64, ss_ext_list_price#65, ss_ext_tax#66, ss_coupon_amt#67, ss_net_paid#68, ss_net_paid_inc_tax#69, ss_net_profit#70, ss_sold_date_sk#71], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -456745775,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#71 = d_date_sk#72) "
          },
          "0" : {
            "sign" : 605586817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3186487020,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 3186487020,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51] "
          },
          "2" : {
            "sign" : 792174479,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4400725648,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 4400725648,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#51, ss_sold_date_sk#71] "
          },
          "3" : {
            "sign" : 304262445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#318 [ss_sold_date_sk#71]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#51]\n+- Join Inner, (ss_sold_date_sk#71 = d_date_sk#72)\n   :- Project [ss_customer_sk#51, ss_sold_date_sk#71]\n   :  +- Filter (isnotnull(ss_sold_date_sk#71) AND dynamicpruning#318 [ss_sold_date_sk#71])\n   :     :  +- Project [d_date_sk#72]\n   :     :     +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#49,ss_item_sk#50,ss_customer_sk#51,ss_cdemo_sk#52,ss_hdemo_sk#53,ss_addr_sk#54,ss_store_sk#55,ss_promo_sk#56,ss_ticket_number#57L,ss_quantity#58,ss_wholesale_cost#59,ss_list_price#60,ss_sales_price#61,ss_ext_discount_amt#62,ss_ext_sales_price#63,ss_ext_wholesale_cost#64,ss_ext_list_price#65,ss_ext_tax#66,ss_coupon_amt#67,ss_net_paid#68,ss_net_paid_inc_tax#69,ss_net_profit#70,ss_sold_date_sk#71] parquet\n   +- Project [d_date_sk#72]\n      +- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 685860147,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3186487020,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ss_customer_sk#51] Input [3]: [ss_customer_sk#51, ss_sold_date_sk#71, d_date_sk#72] "
          },
          "1" : {
            "sign" : 726206401,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#71] Right keys [1]: [d_date_sk#72] Join type: Inner Join condition: None "
          },
          "2" : {
            "sign" : -456367349,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4400725648,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [2]: [ss_customer_sk#51, ss_sold_date_sk#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)] ReadSchema: struct<ss_customer_sk:int> "
          },
          "3" : {
            "sign" : 1806216165,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#72] Arguments: 1 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#51]\n+- BroadcastHashJoin [ss_sold_date_sk#71], [d_date_sk#72], Inner, BuildRight, false\n   :- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#51,ss_sold_date_sk#71] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#318)], PushedFilters: [], ReadSchema: struct<ss_customer_sk:int>\n   :     +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   :        +- AdaptiveSparkPlan isFinalPlan=false\n   :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=693]\n   :              +- Project [d_date_sk#72]\n   :                 +- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 1\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n         +- *(2) Project [d_date_sk#72]\n            +- *(2) Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4401774944,
        "inputRowCount" : 275045443
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 9501,
        "TotalTasksDurationInMs" : 63899,
        "IOBytes" : {
          "Total" : 14775310,
          "Details" : {
            "IR" : 7015029,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7760281
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1656034900,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 666672,
                "rowCount" : 55556
              },
              "compileTime" : {
                "sizeInBytes" : 666672,
                "rowCount" : 55556
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#27] "
          },
          "1" : {
            "sign" : -388259757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13666776,
                "rowCount" : 55556
              },
              "compileTime" : {
                "sizeInBytes" : 13666776,
                "rowCount" : 55556
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27)) "
          },
          "2" : {
            "sign" : 327025701,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#27, ca_address_id#28, ca_street_number#29, ca_street_name#30, ca_street_type#31, ca_suite_number#32, ca_city#33, ca_county#34, ca_state#35, ca_zip#36, ca_country#37, ca_gmt_offset#38, ca_location_type#39], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#27]\n+- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 392995621,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#27] Input [2]: [ca_address_sk#27, ca_state#35] "
          },
          "1" : {
            "sign" : 543782470,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#27, ca_state#35] Condition : (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27)) "
          },
          "2" : {
            "sign" : 1228328500,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#27, ca_state#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#27]\n+- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 666672,
        "inputRowCount" : 55556
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 5771,
        "TotalTasksDurationInMs" : 15506,
        "IOBytes" : {
          "Total" : 4947989,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 115105
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1198506067,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2568,
                "rowCount" : 214
              },
              "compileTime" : {
                "sizeInBytes" : 2568,
                "rowCount" : 214
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#72] "
          },
          "1" : {
            "sign" : 449263908,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 52644,
                "rowCount" : 214
              },
              "compileTime" : {
                "sizeInBytes" : 52644,
                "rowCount" : 214
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72)) "
          },
          "2" : {
            "sign" : -272999708,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#72, d_date_id#73, d_date#74, d_month_seq#75, d_week_seq#76, d_quarter_seq#77, d_year#78, d_dow#79, d_moy#80, d_dom#81, d_qoy#82, d_fy_year#83, d_fy_quarter_seq#84, d_fy_week_seq#85, d_day_name#86, d_quarter_name#87, d_holiday#88, d_weekend#89, d_following_holiday#90, d_first_dom#91, d_last_dom#92, d_same_day_ly#93, d_same_day_lq#94, d_current_day#95, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#72]\n+- Filter (((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (((d_year#78 = 1999) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3))) AND isnotnull(d_date_sk#72))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_date_id#73,d_date#74,d_month_seq#75,d_week_seq#76,d_quarter_seq#77,d_year#78,d_dow#79,d_moy#80,d_dom#81,d_qoy#82,d_fy_year#83,d_fy_quarter_seq#84,d_fy_week_seq#85,d_day_name#86,d_quarter_name#87,d_holiday#88,d_weekend#89,d_following_holiday#90,d_first_dom#91,d_last_dom#92,d_same_day_ly#93,d_same_day_lq#94,d_current_day#95,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 47118883,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#72] Input [3]: [d_date_sk#72, d_year#78, d_moy#80] "
          },
          "1" : {
            "sign" : 1802707842,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#72, d_year#78, d_moy#80] Condition : (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72)) "
          },
          "2" : {
            "sign" : 548206586,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2568,
            "rowCount" : 214,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#72, d_year#78, d_moy#80] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,3), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#72]\n+- Filter (((((isnotnull(d_year#78) AND isnotnull(d_moy#80)) AND (d_year#78 = 1999)) AND (d_moy#80 >= 1)) AND (d_moy#80 <= 3)) AND isnotnull(d_date_sk#72))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#72,d_year#78,d_moy#80] Batched: true, DataFilters: [isnotnull(d_year#78), isnotnull(d_moy#80), (d_year#78 = 1999), (d_moy#80 >= 1), (d_moy#80 <= 3),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), GreaterThanOrEqual(d_moy,1), LessThan..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2568,
        "inputRowCount" : 214
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1409,
        "TotalTasksDurationInMs" : 1404,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1615036780,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322]\n+- Project [ca_address_sk#27]\n   +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n      +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_address_id#28,ca_street_number#29,ca_street_name#30,ca_street_type#31,ca_suite_number#32,ca_city#33,ca_county#34,ca_state#35,ca_zip#36,ca_country#37,ca_gmt_offset#38,ca_location_type#39] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -294612355,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [ca_address_sk#27] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)] Aggregate Attributes [1]: [buf#326] Results [1]: [buf#327] "
          },
          "1" : {
            "sign" : 392995621,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#27] Input [2]: [ca_address_sk#27, ca_state#35] "
          },
          "2" : {
            "sign" : 543782470,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#27, ca_state#35] Condition : (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27)) "
          },
          "3" : {
            "sign" : 1228328500,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 666672,
            "rowCount" : 55556,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#27, ca_state#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n+- Project [ca_address_sk#27]\n   +- Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 666672,
        "inputRowCount" : 55556
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 3138,
        "TotalTasksDurationInMs" : 10525,
        "IOBytes" : {
          "Total" : 4832884,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1028127054,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#102, ws_ship_date_sk#103, ws_item_sk#104, ws_bill_customer_sk#105, ws_bill_cdemo_sk#106, ws_bill_hdemo_sk#107, ws_bill_addr_sk#108, ws_ship_customer_sk#109, ws_ship_cdemo_sk#110, ws_ship_hdemo_sk#111, ws_ship_addr_sk#112, ws_web_page_sk#113, ws_web_site_sk#114, ws_ship_mode_sk#115, ws_warehouse_sk#116, ws_promo_sk#117, ws_order_number#118L, ws_quantity#119, ws_wholesale_cost#120, ws_list_price#121, ws_sales_price#122, ws_ext_discount_amt#123, ws_ext_sales_price#124, ws_ext_wholesale_cost#125, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -351088006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#135 = d_date_sk#254) "
          },
          "0" : {
            "sign" : 1071288348,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 833947260,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 833947260,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105] "
          },
          "2" : {
            "sign" : -1354696343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1151737984,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 1151737984,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#105, ws_sold_date_sk#135] "
          },
          "3" : {
            "sign" : 1715957838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#319 [ws_sold_date_sk#135]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#105]\n+- Join Inner, (ws_sold_date_sk#135 = d_date_sk#254)\n   :- Project [ws_bill_customer_sk#105, ws_sold_date_sk#135]\n   :  +- Filter (isnotnull(ws_sold_date_sk#135) AND dynamicpruning#319 [ws_sold_date_sk#135])\n   :     :  +- Project [d_date_sk#254]\n   :     :     +- Filter (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#102,ws_ship_date_sk#103,ws_item_sk#104,ws_bill_customer_sk#105,ws_bill_cdemo_sk#106,ws_bill_hdemo_sk#107,ws_bill_addr_sk#108,ws_ship_customer_sk#109,ws_ship_cdemo_sk#110,ws_ship_hdemo_sk#111,ws_ship_addr_sk#112,ws_web_page_sk#113,ws_web_site_sk#114,ws_ship_mode_sk#115,ws_warehouse_sk#116,ws_promo_sk#117,ws_order_number#118L,ws_quantity#119,ws_wholesale_cost#120,ws_list_price#121,ws_sales_price#122,ws_ext_discount_amt#123,ws_ext_sales_price#124,ws_ext_wholesale_cost#125,... 10 more fields] parquet\n   +- Project [d_date_sk#254]\n      +- Filter (((isnotnull(d_year#260) AND isnotnull(d_moy#262)) AND (((d_year#260 = 1999) AND (d_moy#262 >= 1)) AND (d_moy#262 <= 3))) AND isnotnull(d_date_sk#254))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1214775041,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 833947260,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ws_bill_customer_sk#105] Input [3]: [ws_bill_customer_sk#105, ws_sold_date_sk#135, d_date_sk#254] "
          },
          "1" : {
            "sign" : 173817569,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1389912100,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#135] Right keys [1]: [d_date_sk#254] Join type: Inner Join condition: None "
          },
          "2" : {
            "sign" : -680758953,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1151737984,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [2]: [ws_bill_customer_sk#105, ws_sold_date_sk#135] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#318)] ReadSchema: struct<ws_bill_customer_sk:int> "
          },
          "3" : {
            "sign" : -128220156,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049296,
            "rowCount" : 90,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#254] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#105]\n+- BroadcastHashJoin [ws_sold_date_sk#135], [d_date_sk#254], Inner, BuildRight, false\n   :- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#105,ws_sold_date_sk#135] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#135), dynamicpruningexpression(ws_sold_date_sk#135 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ws_bill_customer_sk:int>\n   :     +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#72], [id=#696]\n   +- BroadcastQueryStage 3\n      +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=380]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1152787280,
        "inputRowCount" : 71983714
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 2528,
        "TotalTasksDurationInMs" : 3737,
        "IOBytes" : {
          "Total" : 4547985,
          "Details" : {
            "IR" : 2569537,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1978448
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 626615273,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 562680,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0) AS bloomFilter#322], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1682673762,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 562680,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#327] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)#321] Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)#321 AS bloomFilter#322] "
          },
          "1" : {
            "sign" : -2048755009,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#327] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[bloomFilter#322])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=506]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#27, 42), 55556, 899992, 0, 0)], output=[buf#327])\n         +- *(1) Project [ca_address_sk#27]\n            +- *(1) Filter (ca_state#35 IN (CO,IL,MN) AND isnotnull(ca_address_sk#27))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#27,ca_state#35] Batched: true, DataFilters: [ca_state#35 IN (CO,IL,MN), isnotnull(ca_address_sk#27)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [In(ca_state, [CO,IL,MN]), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 562680,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 126003 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1480,
        "TotalTasksDurationInMs" : 1462,
        "IOBytes" : {
          "Total" : 115105,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 115105,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227232123,
  "SQLEndTimeInMs" : 1702227258301,
  "Objectives" : {
    "DurationInMs" : 26178,
    "IOBytes" : {
      "Total" : 196575890,
      "Details" : {
        "IR" : 57287860,
        "IW" : 0,
        "SR" : 69644015,
        "SW" : 69644015
      }
    }
  }
}
