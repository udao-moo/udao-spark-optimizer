{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : 910655984,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#5, ws_ship_date_sk#6, ws_item_sk#7, ws_bill_customer_sk#8, ws_bill_cdemo_sk#9, ws_bill_hdemo_sk#10, ws_bill_addr_sk#11, ws_ship_customer_sk#12, ws_ship_cdemo_sk#13, ws_ship_hdemo_sk#14, ws_ship_addr_sk#15, ws_web_page_sk#16, ws_web_site_sk#17, ws_ship_mode_sk#18, ws_warehouse_sk#19, ws_promo_sk#20, ws_order_number#21L, ws_quantity#22, ws_wholesale_cost#23, ws_list_price#24, ws_sales_price#25, ws_ext_discount_amt#26, ws_ext_sales_price#27, ws_ext_wholesale_cost#28, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : 1993069543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3165690088,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
        },
        "19" : {
          "sign" : -1661834855,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4417422,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67)) "
        },
        "23" : {
          "sign" : -306450794,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1956,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80)) "
        },
        "4" : {
          "sign" : -149148497,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3169482096,
          "rowCount" : 72033684,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#15 = ca_address_sk#67) "
        },
        "15" : {
          "sign" : 677735090,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14760,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39)) "
        },
        "11" : {
          "sign" : -1943787002,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14965080416,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(scalar-subquery#178 [], xxhash64(ws_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#181 [], xxhash64(ws_ship_addr_sk#15, 42)) AND might_contain(scalar-subquery#184 [], xxhash64(ws_web_site_sk#17, 42)))) "
        },
        "9" : {
          "sign" : -1629591050,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3453480096,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, ((ws_order_number#21L = ws_order_number#151L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#149)) "
        },
        "22" : {
          "sign" : 1409364025,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 48,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [web_site_sk#80] "
        },
        "26" : {
          "sign" : -1694559102,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#135, ws_ship_date_sk#136, ws_item_sk#137, ws_bill_customer_sk#138, ws_bill_cdemo_sk#139, ws_bill_hdemo_sk#140, ws_bill_addr_sk#141, ws_ship_customer_sk#142, ws_ship_cdemo_sk#143, ws_ship_hdemo_sk#144, ws_ship_addr_sk#145, ws_web_page_sk#146, ws_web_site_sk#147, ws_ship_mode_sk#148, ws_warehouse_sk#149, ws_promo_sk#150, ws_order_number#151L, ws_quantity#152, ws_wholesale_cost#153, ws_list_price#154, ws_sales_price#155, ws_ext_discount_amt#156, ws_ext_sales_price#157, ws_ext_wholesale_cost#158, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : -633595469,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#177] "
        },
        "24" : {
          "sign" : 1688151097,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#80, web_site_id#81, web_rec_start_date#82, web_rec_end_date#83, web_name#84, web_open_date_sk#85, web_close_date_sk#86, web_class#87, web_manager#88, web_mkt_id#89, web_mkt_class#90, web_mkt_desc#91, web_market_manager#92, web_company_id#93, web_company_name#94, web_street_number#95, web_street_name#96, web_street_type#97, web_suite_number#98, web_city#99, web_county#100, web_state#101, web_zip#102, web_country#103, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 1227723257,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#39, d_date_id#40, d_date#41, d_month_seq#42, d_week_seq#43, d_quarter_seq#44, d_year#45, d_dow#46, d_moy#47, d_dom#48, d_qoy#49, d_fy_year#50, d_fy_quarter_seq#51, d_fy_week_seq#52, d_day_name#53, d_quarter_name#54, d_holiday#55, d_weekend#56, d_following_holiday#57, d_first_dom#58, d_last_dom#59, d_same_day_ly#60, d_same_day_lq#61, d_current_day#62, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -73684869,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2785698440,
          "rowCount" : 69642461,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
        },
        "10" : {
          "sign" : -1232171547,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3453480096,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
        },
        "21" : {
          "sign" : -220676447,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#183] "
        },
        "6" : {
          "sign" : -387038520,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3342838128,
          "rowCount" : 69642461,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#6 = d_date_sk#39) "
        },
        "1" : {
          "sign" : -1673879801,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2710355648,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
        },
        "17" : {
          "sign" : -1180872862,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#180] "
        },
        "25" : {
          "sign" : -192404384,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1440032260,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#149, ws_order_number#151L] "
        },
        "14" : {
          "sign" : -1690275106,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 720,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#39] "
        },
        "0" : {
          "sign" : -1585480975,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 32,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#21L) AS order count#0L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#2] "
        },
        "20" : {
          "sign" : -700350559,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -1489421956,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 115190224,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_order_number#119L] "
        },
        "2" : {
          "sign" : 693037640,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3387944560,
          "rowCount" : 84698614,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#17 = web_site_sk#80) "
        },
        "18" : {
          "sign" : -91353078,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 215484,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#67] "
        },
        "7" : {
          "sign" : 93405878,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3165690088,
          "rowCount" : 71947502,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftAnti, (ws_order_number#21L = wr_order_number#119L) "
        },
        "3" : {
          "sign" : 844494151,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2593212624,
          "rowCount" : 72033684,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
        },
        "28" : {
          "sign" : 1987993559,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#107, wr_item_sk#108, wr_refunded_customer_sk#109, wr_refunded_cdemo_sk#110, wr_refunded_hdemo_sk#111, wr_refunded_addr_sk#112, wr_returning_customer_sk#113, wr_returning_cdemo_sk#114, wr_returning_hdemo_sk#115, wr_returning_addr_sk#116, wr_web_page_sk#117, wr_reason_sk#118, wr_order_number#119L, wr_return_quantity#120, wr_return_amt#121, wr_return_tax#122, wr_return_amt_inc_tax#123, wr_fee#124, wr_return_ship_cost#125, wr_refunded_cash#126, wr_reversed_charge#127, wr_account_credit#128, wr_net_loss#129, wr_returned_date_sk#130], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Aggregate [count(distinct ws_order_number#21L) AS order count#0L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#2]\n+- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n   +- Join Inner, (ws_web_site_sk#17 = web_site_sk#80)\n      :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :  +- Join Inner, (ws_ship_addr_sk#15 = ca_address_sk#67)\n      :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :  +- Join Inner, (ws_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (ws_order_number#21L = wr_order_number#119L)\n      :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((ws_order_number#21L = ws_order_number#151L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#149))\n      :     :     :  :     :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :     :  +- Filter ((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(scalar-subquery#178 [], xxhash64(ws_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#181 [], xxhash64(ws_ship_addr_sk#15, 42)) AND might_contain(scalar-subquery#184 [], xxhash64(ws_web_site_sk#17, 42))))\n      :     :     :  :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#177]\n      :     :     :  :     :     :  :  +- Project [d_date_sk#39]\n      :     :     :  :     :     :  :     +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39))\n      :     :     :  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n      :     :     :  :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#180]\n      :     :     :  :     :     :  :  +- Project [ca_address_sk#67]\n      :     :     :  :     :     :  :     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n      :     :     :  :     :     :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n      :     :     :  :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#183]\n      :     :     :  :     :     :     +- Project [web_site_sk#80]\n      :     :     :  :     :     :        +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n      :     :     :  :     :     :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#80,web_site_id#81,web_rec_start_date#82,web_rec_end_date#83,web_name#84,web_open_date_sk#85,web_close_date_sk#86,web_class#87,web_manager#88,web_mkt_id#89,web_mkt_class#90,web_mkt_desc#91,web_market_manager#92,web_company_id#93,web_company_name#94,web_street_number#95,web_street_name#96,web_street_type#97,web_suite_number#98,web_city#99,web_county#100,web_state#101,web_zip#102,web_country#103,... 2 more fields] parquet\n      :     :     :  :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#5,ws_ship_date_sk#6,ws_item_sk#7,ws_bill_customer_sk#8,ws_bill_cdemo_sk#9,ws_bill_hdemo_sk#10,ws_bill_addr_sk#11,ws_ship_customer_sk#12,ws_ship_cdemo_sk#13,ws_ship_hdemo_sk#14,ws_ship_addr_sk#15,ws_web_page_sk#16,ws_web_site_sk#17,ws_ship_mode_sk#18,ws_warehouse_sk#19,ws_promo_sk#20,ws_order_number#21L,ws_quantity#22,ws_wholesale_cost#23,ws_list_price#24,ws_sales_price#25,ws_ext_discount_amt#26,ws_ext_sales_price#27,ws_ext_wholesale_cost#28,... 10 more fields] parquet\n      :     :     :  :     +- Project [ws_warehouse_sk#149, ws_order_number#151L]\n      :     :     :  :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#135,ws_ship_date_sk#136,ws_item_sk#137,ws_bill_customer_sk#138,ws_bill_cdemo_sk#139,ws_bill_hdemo_sk#140,ws_bill_addr_sk#141,ws_ship_customer_sk#142,ws_ship_cdemo_sk#143,ws_ship_hdemo_sk#144,ws_ship_addr_sk#145,ws_web_page_sk#146,ws_web_site_sk#147,ws_ship_mode_sk#148,ws_warehouse_sk#149,ws_promo_sk#150,ws_order_number#151L,ws_quantity#152,ws_wholesale_cost#153,ws_list_price#154,ws_sales_price#155,ws_ext_discount_amt#156,ws_ext_sales_price#157,ws_ext_wholesale_cost#158,... 10 more fields] parquet\n      :     :     :  +- Project [wr_order_number#119L]\n      :     :     :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#107,wr_item_sk#108,wr_refunded_customer_sk#109,wr_refunded_cdemo_sk#110,wr_refunded_hdemo_sk#111,wr_refunded_addr_sk#112,wr_returning_customer_sk#113,wr_returning_cdemo_sk#114,wr_returning_hdemo_sk#115,wr_returning_addr_sk#116,wr_web_page_sk#117,wr_reason_sk#118,wr_order_number#119L,wr_return_quantity#120,wr_return_amt#121,wr_return_tax#122,wr_return_amt_inc_tax#123,wr_fee#124,wr_return_ship_cost#125,wr_refunded_cash#126,wr_reversed_charge#127,wr_account_credit#128,wr_net_loss#129,wr_returned_date_sk#130] parquet\n      :     :     +- Project [d_date_sk#39]\n      :     :        +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n      :     +- Project [ca_address_sk#67]\n      :        +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n      :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n      +- Project [web_site_sk#80]\n         +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n            +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#80,web_site_id#81,web_rec_start_date#82,web_rec_end_date#83,web_name#84,web_open_date_sk#85,web_close_date_sk#86,web_class#87,web_manager#88,web_mkt_id#89,web_mkt_class#90,web_mkt_desc#91,web_market_manager#92,web_company_id#93,web_company_name#94,web_street_number#95,web_street_name#96,web_street_type#97,web_suite_number#98,web_city#99,web_county#100,web_state#101,web_zip#102,web_country#103,... 2 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 31253364814,
      "inputRowCount" : 152275688
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 329192399,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#119L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1287169052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "4" : {
            "sign" : 529265033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#15 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -1511623674,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 895634006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1440032260,
            "rowCount" : 72001613,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -826597565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12920832,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 434714060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "10" : {
            "sign" : 1464681249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17227776,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 1677612471,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : -321695014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 56524334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190] "
          },
          "2" : {
            "sign" : 1810507215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#17 = web_site_sk#80) "
          },
          "7" : {
            "sign" : 1241615848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (ws_order_number#21L = wr_order_number#119L) "
          },
          "3" : {
            "sign" : -153761373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190]\n+- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n   +- Join Inner, (ws_web_site_sk#17 = web_site_sk#80)\n      :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :  +- Join Inner, (ws_ship_addr_sk#15 = ca_address_sk#67)\n      :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :  +- Join Inner, (ws_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (ws_order_number#21L = wr_order_number#119L)\n      :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207))\n      :     :     :  :     :- LogicalQueryStage Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [wr_order_number#119L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [web_site_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1580839516,
        "inputRowCount" : 79549697
      },
      "PD" : {
        "3" : [ 48381, 45142, 46364, 44538, 45556, 43014, 46591, 45272, 46478, 48073, 47134, 46504, 49542, 44989, 45136, 47017, 47357, 44640, 45020, 43419, 45584, 44501, 44702, 47165, 42961, 49049, 48651, 49123, 44329, 46416, 46530, 46031, 45505, 47273, 43422, 46343, 44648, 42877, 49886, 47170, 46944, 43316, 45647, 46605, 47686, 43633, 47989, 47321, 47428, 47859, 47804, 47230, 45035, 47301, 46059, 45291, 43809, 46868, 43662, 45588, 47438, 44755, 45439, 47212, 46034, 43877, 43470, 45426, 45444, 47573, 45707, 50951, 46046, 44742, 46022, 47339, 44964, 49656, 47550, 45580, 45286, 45515, 41278, 42449, 45732, 45785, 42580, 43289, 43233, 46359, 44813, 43800, 45968, 47064, 48309, 46686, 45826, 44791, 43496, 43623, 46259, 44583, 43947, 47430, 44331, 45004, 45959, 43421, 44445, 45872, 46326, 43128, 49046, 46966, 44643, 45559, 45774, 44793, 44497, 46859, 46388, 45952, 45842, 46072, 44900, 46302, 45023, 46359, 44846, 47622, 46499, 45307, 44602, 47257, 46970, 45713, 44845, 46881, 46602, 45710, 45715, 42772, 44379, 44685, 45786, 46532, 45533, 45848, 46538, 44473, 50733, 45024, 47619, 43847, 46056, 47885, 48594, 48822, 46172, 47143, 45800, 45724, 48739, 45548, 47534, 44029, 48871, 45147, 49321, 47589, 46085, 49617, 44138, 48863, 45857, 44155, 45347, 44535, 44723, 41962, 46369, 43062, 43615, 45793, 44662, 44203, 44482, 47528, 46856, 46355, 48728, 47671, 43133, 45387, 44500, 45785, 46864, 46974, 44424, 45865 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 93,
        "FinishedTasksTotalTimeInMs" : 60438.0,
        "FinishedTasksDistributionInMs" : [ 339.0, 431.0, 498.0, 611.0, 4741.0 ]
      },
      "StartTimeInMs" : 1702227528326,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17099,
        "IOBytes" : {
          "Total" : 1149702560,
          "Details" : {
            "IR" : 169320970,
            "IW" : 0,
            "SR" : 494562397,
            "SW" : 485819193
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 329192399,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#119L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1287169052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "4" : {
            "sign" : 529265033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#15 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -1511623674,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 895634006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1728038712,
            "rowCount" : 72001613,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -826597565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12920832,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 434714060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "10" : {
            "sign" : 1464681249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17227776,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 1677612471,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : -321695014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 56524334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190] "
          },
          "2" : {
            "sign" : 1810507215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#17 = web_site_sk#80) "
          },
          "7" : {
            "sign" : 1241615848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (ws_order_number#21L = wr_order_number#119L) "
          },
          "3" : {
            "sign" : -153761373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190]\n+- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n   +- Join Inner, (ws_web_site_sk#17 = web_site_sk#80)\n      :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :  +- Join Inner, (ws_ship_addr_sk#15 = ca_address_sk#67)\n      :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :  +- Join Inner, (ws_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (ws_order_number#21L = wr_order_number#119L)\n      :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207))\n      :     :     :  :     :- LogicalQueryStage Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [wr_order_number#119L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [web_site_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1868845968,
        "inputRowCount" : 79549697
      },
      "PD" : {
        "4" : [ 2307992, 2345813, 2361121, 2371358, 2365459, 2347662, 2313557, 2358766, 2354274, 2328692, 2352300, 2336580, 2344137, 2326789, 2336569, 2344055, 2354167, 2333495, 2360183, 2358205, 2348081, 2363951, 2379577, 2357785, 2337926, 2353889, 2341166, 2359339, 2329928, 2324510, 2312501, 2357195, 2320624, 2338386, 2322470, 2335976, 2343315, 2346126, 2345540, 2332508, 2345756, 2343864, 2326020, 2348080, 2351009, 2327499, 2359260, 2352836, 2338763, 2340079, 2337683, 2359185, 2318363, 2352578, 2361685, 2353024, 2346416, 2360783, 2358523, 2352288, 2329596, 2354606, 2318688, 2321472, 2341162, 2332992, 2333284, 2355781, 2331790, 2343172, 2322396, 2356500, 2309809, 2337169, 2356456, 2366486, 2338982, 2377316, 2329036, 2354011, 2346051, 2340238, 2319562, 2331519, 2338982, 2328542, 2347345, 2332442, 2317574, 2334827, 2346439, 2335824, 2352303, 2339894, 2333024, 2332015, 2342966, 2350014, 2319187, 2335298, 2329133, 2333163, 2346601, 2346148, 2381734, 2352884, 2341002, 2344834, 2338550, 2321912, 2334009, 2332649, 2343152, 2348740, 2348364, 2339933, 2333823, 2339171, 2357002, 2338934, 2324993, 2329644, 2325908, 2373422, 2340152, 2334495, 2321995, 2329218, 2340080, 2349641, 2326582, 2372266, 2318828, 2362090, 2329387, 2345939, 2357792, 2326030, 2340676, 2356969, 2367531, 2362210, 2318930, 2361526, 2355464, 2342723, 2341476, 2346882, 2348813, 2343605, 2345506, 2336246, 2348048, 2336000, 2333725, 2362123, 2350593, 2360764, 2339922, 2322584, 2361488, 2361048, 2335772, 2349206, 2362919, 2336064, 2351574, 2351167, 2347395, 2344905, 2379524, 2331209, 2359825, 2338915, 2349197, 2346858, 2337412, 2361726, 2346011, 2357646, 2344004, 2311726, 2330013, 2326179, 2308758, 2364494, 2313727, 2355847, 2345099, 2342153, 2346817, 2349748, 2318517, 2355565, 2329943, 2329785, 2355640, 2318001, 2329087, 2358180 ],
        "3" : [ 48381, 45142, 46364, 44538, 45556, 43014, 46591, 45272, 46478, 48073, 47134, 46504, 49542, 44989, 45136, 47017, 47357, 44640, 45020, 43419, 45584, 44501, 44702, 47165, 42961, 49049, 48651, 49123, 44329, 46416, 46530, 46031, 45505, 47273, 43422, 46343, 44648, 42877, 49886, 47170, 46944, 43316, 45647, 46605, 47686, 43633, 47989, 47321, 47428, 47859, 47804, 47230, 45035, 47301, 46059, 45291, 43809, 46868, 43662, 45588, 47438, 44755, 45439, 47212, 46034, 43877, 43470, 45426, 45444, 47573, 45707, 50951, 46046, 44742, 46022, 47339, 44964, 49656, 47550, 45580, 45286, 45515, 41278, 42449, 45732, 45785, 42580, 43289, 43233, 46359, 44813, 43800, 45968, 47064, 48309, 46686, 45826, 44791, 43496, 43623, 46259, 44583, 43947, 47430, 44331, 45004, 45959, 43421, 44445, 45872, 46326, 43128, 49046, 46966, 44643, 45559, 45774, 44793, 44497, 46859, 46388, 45952, 45842, 46072, 44900, 46302, 45023, 46359, 44846, 47622, 46499, 45307, 44602, 47257, 46970, 45713, 44845, 46881, 46602, 45710, 45715, 42772, 44379, 44685, 45786, 46532, 45533, 45848, 46538, 44473, 50733, 45024, 47619, 43847, 46056, 47885, 48594, 48822, 46172, 47143, 45800, 45724, 48739, 45548, 47534, 44029, 48871, 45147, 49321, 47589, 46085, 49617, 44138, 48863, 45857, 44155, 45347, 44535, 44723, 41962, 46369, 43062, 43615, 45793, 44662, 44203, 44482, 47528, 46856, 46355, 48728, 47671, 43133, 45387, 44500, 45785, 46864, 46974, 44424, 45865 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227529307,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16118,
        "IOBytes" : {
          "Total" : 591458399,
          "Details" : {
            "IR" : 57798542,
            "IW" : 0,
            "SR" : 494562397,
            "SW" : 39097460
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 329192399,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#119L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1287169052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "4" : {
            "sign" : 529265033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#15 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -1511623674,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 895634006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1728038712,
            "rowCount" : 72001613,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -826597565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12920832,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 434714060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "10" : {
            "sign" : 1464681249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17227776,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 1677612471,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : -321695014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 56524334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190] "
          },
          "2" : {
            "sign" : 1810507215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#17 = web_site_sk#80) "
          },
          "7" : {
            "sign" : 1241615848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (ws_order_number#21L = wr_order_number#119L) "
          },
          "3" : {
            "sign" : -153761373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190]\n+- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n   +- Join Inner, (ws_web_site_sk#17 = web_site_sk#80)\n      :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :  +- Join Inner, (ws_ship_addr_sk#15 = ca_address_sk#67)\n      :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :  +- Join Inner, (ws_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (ws_order_number#21L = wr_order_number#119L)\n      :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207))\n      :     :     :  :     :- LogicalQueryStage Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [wr_order_number#119L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [web_site_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1868845968,
        "inputRowCount" : 79549697
      },
      "PD" : {
        "5" : [ 202908, 205424, 205273, 207157, 204697, 205630, 205714, 205459, 204161, 204218, 207947, 202968, 208826, 202576, 202769, 205984, 207426, 204613, 209535, 206326, 202390, 209419, 204828, 205381, 201728, 208591, 201594, 207130, 201558, 204154, 201603, 205945, 202496, 207090, 203057, 207561, 205500, 205149, 207092, 206429, 205572, 206250, 204718, 205939, 204116, 203556, 206834, 205951, 204931, 205459, 205284, 204827, 204463, 207425, 205626, 204616, 202988, 202921, 206001, 205391, 201974, 207260, 202932, 200754, 205357, 202881, 205774, 204975, 204069, 202178, 202042, 204029, 204919, 207124, 204937, 207897, 204487, 207119, 204253, 205168, 207931, 208185, 206737, 203379, 202662, 204304, 204514, 204582, 204234, 204259, 207448, 205782, 205280, 208238, 205186, 202965, 205762, 207729, 199468, 201768, 207466, 204284, 206330, 206431, 208530, 208147, 204125, 204452, 205239, 204216, 205777, 203675, 204550, 203008, 205800, 206122, 202435, 205780, 206513, 203300, 206919, 203583, 202304, 206480, 203799, 204748, 207737, 204133, 204034, 202331, 201757, 207267, 203488, 204096, 204335, 204125, 207952, 201334, 205880, 206363, 209594, 207206, 203803, 205668, 206573, 203911, 204261, 203403, 205000, 206923, 203763, 205386, 206548, 204291, 204272, 203355, 205540, 204911, 208442, 203219, 207798, 208450, 206444, 205251, 203686, 206448, 205700, 206226, 205938, 205306, 209461, 203398, 207670, 203881, 206121, 208610, 203423, 205295, 205646, 203491, 205655, 203399, 201460, 200953, 199908, 205548, 205381, 204450, 206866, 204157, 207058, 206376, 203897, 207083, 203675, 203434, 207172, 201927, 204758, 204719 ],
        "4" : [ 2307992, 2345813, 2361121, 2371358, 2365459, 2347662, 2313557, 2358766, 2354274, 2328692, 2352300, 2336580, 2344137, 2326789, 2336569, 2344055, 2354167, 2333495, 2360183, 2358205, 2348081, 2363951, 2379577, 2357785, 2337926, 2353889, 2341166, 2359339, 2329928, 2324510, 2312501, 2357195, 2320624, 2338386, 2322470, 2335976, 2343315, 2346126, 2345540, 2332508, 2345756, 2343864, 2326020, 2348080, 2351009, 2327499, 2359260, 2352836, 2338763, 2340079, 2337683, 2359185, 2318363, 2352578, 2361685, 2353024, 2346416, 2360783, 2358523, 2352288, 2329596, 2354606, 2318688, 2321472, 2341162, 2332992, 2333284, 2355781, 2331790, 2343172, 2322396, 2356500, 2309809, 2337169, 2356456, 2366486, 2338982, 2377316, 2329036, 2354011, 2346051, 2340238, 2319562, 2331519, 2338982, 2328542, 2347345, 2332442, 2317574, 2334827, 2346439, 2335824, 2352303, 2339894, 2333024, 2332015, 2342966, 2350014, 2319187, 2335298, 2329133, 2333163, 2346601, 2346148, 2381734, 2352884, 2341002, 2344834, 2338550, 2321912, 2334009, 2332649, 2343152, 2348740, 2348364, 2339933, 2333823, 2339171, 2357002, 2338934, 2324993, 2329644, 2325908, 2373422, 2340152, 2334495, 2321995, 2329218, 2340080, 2349641, 2326582, 2372266, 2318828, 2362090, 2329387, 2345939, 2357792, 2326030, 2340676, 2356969, 2367531, 2362210, 2318930, 2361526, 2355464, 2342723, 2341476, 2346882, 2348813, 2343605, 2345506, 2336246, 2348048, 2336000, 2333725, 2362123, 2350593, 2360764, 2339922, 2322584, 2361488, 2361048, 2335772, 2349206, 2362919, 2336064, 2351574, 2351167, 2347395, 2344905, 2379524, 2331209, 2359825, 2338915, 2349197, 2346858, 2337412, 2361726, 2346011, 2357646, 2344004, 2311726, 2330013, 2326179, 2308758, 2364494, 2313727, 2355847, 2345099, 2342153, 2346817, 2349748, 2318517, 2355565, 2329943, 2329785, 2355640, 2318001, 2329087, 2358180 ],
        "3" : [ 48381, 45142, 46364, 44538, 45556, 43014, 46591, 45272, 46478, 48073, 47134, 46504, 49542, 44989, 45136, 47017, 47357, 44640, 45020, 43419, 45584, 44501, 44702, 47165, 42961, 49049, 48651, 49123, 44329, 46416, 46530, 46031, 45505, 47273, 43422, 46343, 44648, 42877, 49886, 47170, 46944, 43316, 45647, 46605, 47686, 43633, 47989, 47321, 47428, 47859, 47804, 47230, 45035, 47301, 46059, 45291, 43809, 46868, 43662, 45588, 47438, 44755, 45439, 47212, 46034, 43877, 43470, 45426, 45444, 47573, 45707, 50951, 46046, 44742, 46022, 47339, 44964, 49656, 47550, 45580, 45286, 45515, 41278, 42449, 45732, 45785, 42580, 43289, 43233, 46359, 44813, 43800, 45968, 47064, 48309, 46686, 45826, 44791, 43496, 43623, 46259, 44583, 43947, 47430, 44331, 45004, 45959, 43421, 44445, 45872, 46326, 43128, 49046, 46966, 44643, 45559, 45774, 44793, 44497, 46859, 46388, 45952, 45842, 46072, 44900, 46302, 45023, 46359, 44846, 47622, 46499, 45307, 44602, 47257, 46970, 45713, 44845, 46881, 46602, 45710, 45715, 42772, 44379, 44685, 45786, 46532, 45533, 45848, 46538, 44473, 50733, 45024, 47619, 43847, 46056, 47885, 48594, 48822, 46172, 47143, 45800, 45724, 48739, 45548, 47534, 44029, 48871, 45147, 49321, 47589, 46085, 49617, 44138, 48863, 45857, 44155, 45347, 44535, 44723, 41962, 46369, 43062, 43615, 45793, 44662, 44203, 44482, 47528, 46856, 46355, 48728, 47671, 43133, 45387, 44500, 45785, 46864, 46974, 44424, 45865 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227533576,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11849,
        "IOBytes" : {
          "Total" : 494562997,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 494562397,
            "SW" : 600
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -880202637,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 56,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 26976.0,
        "FinishedTasksDistributionInMs" : [ 2971.0, 3322.0, 3457.0, 3511.0, 3635.0 ]
      },
      "StartTimeInMs" : 1702227509790,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35635,
        "IOBytes" : {
          "Total" : 2000136954,
          "Details" : {
            "IR" : 1010955897,
            "IW" : 0,
            "SR" : 494590577,
            "SW" : 494590480
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1555812283,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 13537.0,
        "FinishedTasksDistributionInMs" : [ 3225.0, 3353.0, 3457.0, 3502.0, 3502.0 ]
      },
      "StartTimeInMs" : 1702227509958,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35467,
        "IOBytes" : {
          "Total" : 1995276292,
          "Details" : {
            "IR" : 1006123013,
            "IW" : 0,
            "SR" : 494590577,
            "SW" : 494562702
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1692516304,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 256,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 8
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227545210,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 215,
        "IOBytes" : {
          "Total" : 600,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 600,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1283059436,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 13537.0,
        "FinishedTasksDistributionInMs" : [ 3225.0, 3353.0, 3457.0, 3502.0, 3502.0 ]
      },
      "StartTimeInMs" : 1702227510625,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 34800,
        "IOBytes" : {
          "Total" : 1994904636,
          "Details" : {
            "IR" : 1005779537,
            "IW" : 0,
            "SR" : 494562702,
            "SW" : 494562397
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : 329192399,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_order_number#119L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1287169052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "4" : {
            "sign" : 529265033,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 57398929099776,
                "rowCount" : 1304521115904
              },
              "compileTime" : {
                "sizeInBytes" : 57398929099776,
                "rowCount" : 1304521115904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_addr_sk#15 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -1511623674,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048736,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 895634006,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1728038712,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 1440032260,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -826597565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12920832,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 12920832,
                "rowCount" : 269184
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1049064,
                "rowCount" : 61
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 434714060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 656808960,
                "rowCount" : 16420224
              },
              "compileTime" : {
                "sizeInBytes" : 656808960,
                "rowCount" : 16420224
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "10" : {
            "sign" : 1464681249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17227776,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 3453480096,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 1677612471,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 788170752,
                "rowCount" : 16420224
              },
              "compileTime" : {
                "sizeInBytes" : 788170752,
                "rowCount" : 16420224
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : -321695014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 166978702835712,
                "rowCount" : 5218084463616
              },
              "compileTime" : {
                "sizeInBytes" : 166978702835712,
                "rowCount" : 5218084463616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6291456,
                "rowCount" : 79446
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 56524334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190] "
          },
          "2" : {
            "sign" : 1810507215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208723378544640,
                "rowCount" : 5218084463616
              },
              "compileTime" : {
                "sizeInBytes" : 208723378544640,
                "rowCount" : 5218084463616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_site_sk#17 = web_site_sk#80) "
          },
          "7" : {
            "sign" : 1241615848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              },
              "compileTime" : {
                "sizeInBytes" : 11844096,
                "rowCount" : 269184
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (ws_order_number#21L = wr_order_number#119L) "
          },
          "3" : {
            "sign" : -153761373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 46962760172544,
                "rowCount" : 1304521115904
              },
              "compileTime" : {
                "sizeInBytes" : 46962760172544,
                "rowCount" : 1304521115904
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190]\n+- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n   +- Join Inner, (ws_web_site_sk#17 = web_site_sk#80)\n      :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :  +- Join Inner, (ws_ship_addr_sk#15 = ca_address_sk#67)\n      :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :  +- Join Inner, (ws_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (ws_order_number#21L = wr_order_number#119L)\n      :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((ws_order_number#21L = ws_order_number#209L) AND NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207))\n      :     :     :  :     :- LogicalQueryStage Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [ws_warehouse_sk#207, ws_order_number#209L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [wr_order_number#119L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [web_site_sk#80], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -157983224,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Arguments: [ws_order_number#21L ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 1222660692,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 788170752,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_ship_date_sk#6] Right keys [1]: [d_date_sk#39] Join type: Inner Join condition: None "
          },
          "19" : {
            "sign" : -1612989950,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 79446,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_address_sk#67] Arguments: 4 "
          },
          "4" : {
            "sign" : 1522863711,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 208723378544640,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_web_site_sk#17] Right keys [1]: [web_site_sk#80] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -1009233084,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1728038712,
            "rowCount" : 72001613,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ws_warehouse_sk#207, ws_order_number#209L] Arguments: 1 "
          },
          "11" : {
            "sign" : 1956832281,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 12920832,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#21L] Right keys [1]: [ws_order_number#209L] Join type: LeftSemi Join condition: NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207) "
          },
          "9" : {
            "sign" : -1764524449,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_order_number#21L] Right keys [1]: [wr_order_number#119L] Join type: LeftAnti Join condition: None "
          },
          "13" : {
            "sign" : -1630117211,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17227776,
            "rowCount" : 269184,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Arguments: 0 "
          },
          "16" : {
            "sign" : -410207258,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [wr_order_number#119L] Arguments: [wr_order_number#119L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -723554715,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 46962760172544,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Input [6]: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, ca_address_sk#67] "
          },
          "10" : {
            "sign" : 1644158340,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11844096,
            "rowCount" : 269184,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Input [7]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "6" : {
            "sign" : 544411009,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 57398929099776,
            "rowCount" : 1304521115904,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_ship_addr_sk#15] Right keys [1]: [ca_address_sk#67] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 1725324560,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#21L, sum#247L, sum#249L] Keys [1]: [ws_order_number#21L] Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37))] Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#32))#228L, sum(UnscaledValue(ws_net_profit#37))#229L] Results [3]: [ws_order_number#21L, sum#247L, sum#249L] "
          },
          "17" : {
            "sign" : -180320484,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [wr_order_number#119L] Arguments: 2 "
          },
          "14" : {
            "sign" : -40965359,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ws_warehouse_sk#207, ws_order_number#209L] Arguments: [ws_order_number#209L ASC NULLS FIRST], false, 0 "
          },
          "0" : {
            "sign" : 82554804,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#21L, sum#247L, sum#249L] Keys: [] Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37)), partial_count(distinct ws_order_number#21L)] Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#32))#228L, sum(UnscaledValue(ws_net_profit#37))#229L, count(ws_order_number#21L)#227L] Results [3]: [sum#247L, sum#249L, count#252L] "
          },
          "20" : {
            "sign" : -1011123868,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048736,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [web_site_sk#80] Arguments: 5 "
          },
          "2" : {
            "sign" : -1588866192,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Keys [1]: [ws_order_number#21L] Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#32)), partial_sum(UnscaledValue(ws_net_profit#37))] Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#32))#228L, sum(UnscaledValue(ws_net_profit#37))#229L] Results [3]: [ws_order_number#21L, sum#247L, sum#249L] "
          },
          "18" : {
            "sign" : -1969931823,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#39] Arguments: 3 "
          },
          "7" : {
            "sign" : 1516821785,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 656808960,
            "rowCount" : 16420224,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Input [7]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, d_date_sk#39] "
          },
          "3" : {
            "sign" : -1412961832,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 166978702835712,
            "rowCount" : 5218084463616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Input [5]: [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, web_site_sk#80] "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 11,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "ShuffleQueryStage",
          "toId" : 14,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Sort",
          "toId" : 11,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "SortMergeJoin",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "ShuffleQueryStage",
          "toId" : 16,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Sort",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "SortMergeJoin",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37)), partial_count(distinct ws_order_number#21L)], output=[sum#247L, sum#249L, count#252L])\n+- HashAggregate(keys=[ws_order_number#21L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37))], output=[ws_order_number#21L, sum#247L, sum#249L])\n   +- HashAggregate(keys=[ws_order_number#21L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#32)), partial_sum(UnscaledValue(ws_net_profit#37))], output=[ws_order_number#21L, sum#247L, sum#249L])\n      +- Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n         +- BroadcastHashJoin [ws_web_site_sk#17], [web_site_sk#80], Inner, BuildRight, false\n            :- Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n            :  +- BroadcastHashJoin [ws_ship_addr_sk#15], [ca_address_sk#67], Inner, BuildRight, false\n            :     :- Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n            :     :  +- BroadcastHashJoin [ws_ship_date_sk#6], [d_date_sk#39], Inner, BuildRight, false\n            :     :     :- SortMergeJoin [ws_order_number#21L], [wr_order_number#119L], LeftAnti\n            :     :     :  :- Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n            :     :     :  :  +- SortMergeJoin [ws_order_number#21L], [ws_order_number#209L], LeftSemi, NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)\n            :     :     :  :     :- Sort [ws_order_number#21L ASC NULLS FIRST], false, 0\n            :     :     :  :     :  +- ShuffleQueryStage 0\n            :     :     :  :     :     +- Exchange hashpartitioning(ws_order_number#21L, 200), ENSURE_REQUIREMENTS, [plan_id=285]\n            :     :     :  :     :        +- *(1) Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n            :     :     :  :     :           +- *(1) Filter (((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(Subquery subquery#236, [id=#107], xxhash64(ws_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#239, [id=#120], xxhash64(ws_ship_addr_sk#15, 42))) AND might_contain(Subquery subquery#242, [id=#133], xxhash64(ws_web_site_sk#17, 42)))\n            :     :     :  :     :              :  :- Subquery subquery#236, [id=#107]\n            :     :     :  :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=434]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n                                                                     +- *(1) Project [d_date_sk#39]\n                                                                        +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n                                                                  +- Project [d_date_sk#39]\n                                                                     +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     :     :  :     :              :  :- Subquery subquery#239, [id=#120]\n            :     :     :  :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=446]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n                                                                     +- *(1) Project [ca_address_sk#67]\n                                                                        +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n                                                                  +- Project [ca_address_sk#67]\n                                                                     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            :     :     :  :     :              :  +- Subquery subquery#242, [id=#133]\n            :     :     :  :     :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n                                                                     +- *(1) Project [web_site_sk#80]\n                                                                        +- *(1) Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n                                                                  +- Project [web_site_sk#80]\n                                                                     +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n            :     :     :  :     :              +- *(1) ColumnarToRow\n            :     :     :  :     :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#6,ws_ship_addr_sk#15,ws_web_site_sk#17,ws_warehouse_sk#19,ws_order_number#21L,ws_ext_ship_cost#32,ws_net_profit#37,ws_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#6), isnotnull(ws_ship_addr_sk#15), isnotnull(ws_web_site_sk#17)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_nu...\n            :     :     :  :     +- Sort [ws_order_number#209L ASC NULLS FIRST], false, 0\n            :     :     :  :        +- ShuffleQueryStage 1\n            :     :     :  :           +- Exchange hashpartitioning(ws_order_number#209L, 200), ENSURE_REQUIREMENTS, [plan_id=304]\n            :     :     :  :              +- *(2) Project [ws_warehouse_sk#207, ws_order_number#209L]\n            :     :     :  :                 +- *(2) ColumnarToRow\n            :     :     :  :                    +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#207,ws_order_number#209L,ws_sold_date_sk#226] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n            :     :     :  +- Sort [wr_order_number#119L ASC NULLS FIRST], false, 0\n            :     :     :     +- ShuffleQueryStage 2\n            :     :     :        +- Exchange hashpartitioning(wr_order_number#119L, 200), ENSURE_REQUIREMENTS, [plan_id=323]\n            :     :     :           +- *(3) Project [wr_order_number#119L]\n            :     :     :              +- *(3) ColumnarToRow\n            :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#119L,wr_returned_date_sk#130] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<wr_order_number:bigint>\n            :     :     +- BroadcastQueryStage 3\n            :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=343]\n            :     :           +- *(4) Project [d_date_sk#39]\n            :     :              +- *(4) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n            :     :                 +- *(4) ColumnarToRow\n            :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     +- BroadcastQueryStage 4\n            :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=364]\n            :           +- *(5) Project [ca_address_sk#67]\n            :              +- *(5) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n            :                 +- *(5) ColumnarToRow\n            :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            +- BroadcastQueryStage 5\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=385]\n                  +- *(6) Project [web_site_sk#80]\n                     +- *(6) Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                        +- *(6) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1868845968,
        "inputRowCount" : 79549697
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 202908, 205424, 205273, 207157, 204697, 205630, 205714, 205459, 204161, 204218, 207947, 202968, 208826, 202576, 202769, 205984, 207426, 204613, 209535, 206326, 202390, 209419, 204828, 205381, 201728, 208591, 201594, 207130, 201558, 204154, 201603, 205945, 202496, 207090, 203057, 207561, 205500, 205149, 207092, 206429, 205572, 206250, 204718, 205939, 204116, 203556, 206834, 205951, 204931, 205459, 205284, 204827, 204463, 207425, 205626, 204616, 202988, 202921, 206001, 205391, 201974, 207260, 202932, 200754, 205357, 202881, 205774, 204975, 204069, 202178, 202042, 204029, 204919, 207124, 204937, 207897, 204487, 207119, 204253, 205168, 207931, 208185, 206737, 203379, 202662, 204304, 204514, 204582, 204234, 204259, 207448, 205782, 205280, 208238, 205186, 202965, 205762, 207729, 199468, 201768, 207466, 204284, 206330, 206431, 208530, 208147, 204125, 204452, 205239, 204216, 205777, 203675, 204550, 203008, 205800, 206122, 202435, 205780, 206513, 203300, 206919, 203583, 202304, 206480, 203799, 204748, 207737, 204133, 204034, 202331, 201757, 207267, 203488, 204096, 204335, 204125, 207952, 201334, 205880, 206363, 209594, 207206, 203803, 205668, 206573, 203911, 204261, 203403, 205000, 206923, 203763, 205386, 206548, 204291, 204272, 203355, 205540, 204911, 208442, 203219, 207798, 208450, 206444, 205251, 203686, 206448, 205700, 206226, 205938, 205306, 209461, 203398, 207670, 203881, 206121, 208610, 203423, 205295, 205646, 203491, 205655, 203399, 201460, 200953, 199908, 205548, 205381, 204450, 206866, 204157, 207058, 206376, 203897, 207083, 203675, 203434, 207172, 201927, 204758, 204719 ],
        "4" : [ 2307992, 2345813, 2361121, 2371358, 2365459, 2347662, 2313557, 2358766, 2354274, 2328692, 2352300, 2336580, 2344137, 2326789, 2336569, 2344055, 2354167, 2333495, 2360183, 2358205, 2348081, 2363951, 2379577, 2357785, 2337926, 2353889, 2341166, 2359339, 2329928, 2324510, 2312501, 2357195, 2320624, 2338386, 2322470, 2335976, 2343315, 2346126, 2345540, 2332508, 2345756, 2343864, 2326020, 2348080, 2351009, 2327499, 2359260, 2352836, 2338763, 2340079, 2337683, 2359185, 2318363, 2352578, 2361685, 2353024, 2346416, 2360783, 2358523, 2352288, 2329596, 2354606, 2318688, 2321472, 2341162, 2332992, 2333284, 2355781, 2331790, 2343172, 2322396, 2356500, 2309809, 2337169, 2356456, 2366486, 2338982, 2377316, 2329036, 2354011, 2346051, 2340238, 2319562, 2331519, 2338982, 2328542, 2347345, 2332442, 2317574, 2334827, 2346439, 2335824, 2352303, 2339894, 2333024, 2332015, 2342966, 2350014, 2319187, 2335298, 2329133, 2333163, 2346601, 2346148, 2381734, 2352884, 2341002, 2344834, 2338550, 2321912, 2334009, 2332649, 2343152, 2348740, 2348364, 2339933, 2333823, 2339171, 2357002, 2338934, 2324993, 2329644, 2325908, 2373422, 2340152, 2334495, 2321995, 2329218, 2340080, 2349641, 2326582, 2372266, 2318828, 2362090, 2329387, 2345939, 2357792, 2326030, 2340676, 2356969, 2367531, 2362210, 2318930, 2361526, 2355464, 2342723, 2341476, 2346882, 2348813, 2343605, 2345506, 2336246, 2348048, 2336000, 2333725, 2362123, 2350593, 2360764, 2339922, 2322584, 2361488, 2361048, 2335772, 2349206, 2362919, 2336064, 2351574, 2351167, 2347395, 2344905, 2379524, 2331209, 2359825, 2338915, 2349197, 2346858, 2337412, 2361726, 2346011, 2357646, 2344004, 2311726, 2330013, 2326179, 2308758, 2364494, 2313727, 2355847, 2345099, 2342153, 2346817, 2349748, 2318517, 2355565, 2329943, 2329785, 2355640, 2318001, 2329087, 2358180 ],
        "3" : [ 48381, 45142, 46364, 44538, 45556, 43014, 46591, 45272, 46478, 48073, 47134, 46504, 49542, 44989, 45136, 47017, 47357, 44640, 45020, 43419, 45584, 44501, 44702, 47165, 42961, 49049, 48651, 49123, 44329, 46416, 46530, 46031, 45505, 47273, 43422, 46343, 44648, 42877, 49886, 47170, 46944, 43316, 45647, 46605, 47686, 43633, 47989, 47321, 47428, 47859, 47804, 47230, 45035, 47301, 46059, 45291, 43809, 46868, 43662, 45588, 47438, 44755, 45439, 47212, 46034, 43877, 43470, 45426, 45444, 47573, 45707, 50951, 46046, 44742, 46022, 47339, 44964, 49656, 47550, 45580, 45286, 45515, 41278, 42449, 45732, 45785, 42580, 43289, 43233, 46359, 44813, 43800, 45968, 47064, 48309, 46686, 45826, 44791, 43496, 43623, 46259, 44583, 43947, 47430, 44331, 45004, 45959, 43421, 44445, 45872, 46326, 43128, 49046, 46966, 44643, 45559, 45774, 44793, 44497, 46859, 46388, 45952, 45842, 46072, 44900, 46302, 45023, 46359, 44846, 47622, 46499, 45307, 44602, 47257, 46970, 45713, 44845, 46881, 46602, 45710, 45715, 42772, 44379, 44685, 45786, 46532, 45533, 45848, 46538, 44473, 50733, 45024, 47619, 43847, 46056, 47885, 48594, 48822, 46172, 47143, 45800, 45724, 48739, 45548, 47534, 44029, 48871, 45147, 49321, 47589, 46085, 49617, 44138, 48863, 45857, 44155, 45347, 44535, 44723, 41962, 46369, 43062, 43615, 45793, 44662, 44203, 44482, 47528, 46856, 46355, 48728, 47671, 43133, 45387, 44500, 45785, 46864, 46974, 44424, 45865 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 11183,
        "TotalTasksDurationInMs" : 61335,
        "IOBytes" : {
          "Total" : 494562397,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 494561797,
            "SW" : 600
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -880202637,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 56,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1477131829,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 56,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#256] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)#240] Results [1]: [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)#240 AS bloomFilter#241] "
          },
          "1" : {
            "sign" : -1823647151,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#256] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n         +- *(1) Project [web_site_sk#80]\n            +- *(1) Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 97 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 26976.0,
        "FinishedTasksDistributionInMs" : [ 2971.0, 3322.0, 3457.0, 3511.0, 3635.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 402,
        "TotalTasksDurationInMs" : 386,
        "IOBytes" : {
          "Total" : 305,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 305,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1283059436,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 795500313,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#254] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)#234] Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)#234 AS bloomFilter#235] "
          },
          "1" : {
            "sign" : -1755455528,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#254] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=434]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n         +- *(1) Project [d_date_sk#39]\n            +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 13537.0,
        "FinishedTasksDistributionInMs" : [ 3225.0, 3353.0, 3457.0, 3502.0, 3502.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 286,
        "TotalTasksDurationInMs" : 263,
        "IOBytes" : {
          "Total" : 97,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 97,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1489421956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 115190224,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_order_number#119L] "
          },
          "1" : {
            "sign" : 1987993559,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#107, wr_item_sk#108, wr_refunded_customer_sk#109, wr_refunded_cdemo_sk#110, wr_refunded_hdemo_sk#111, wr_refunded_addr_sk#112, wr_returning_customer_sk#113, wr_returning_cdemo_sk#114, wr_returning_hdemo_sk#115, wr_returning_addr_sk#116, wr_web_page_sk#117, wr_reason_sk#118, wr_order_number#119L, wr_return_quantity#120, wr_return_amt#121, wr_return_tax#122, wr_return_amt_inc_tax#123, wr_fee#124, wr_return_ship_cost#125, wr_refunded_cash#126, wr_reversed_charge#127, wr_account_credit#128, wr_net_loss#129, wr_returned_date_sk#130], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalRelation",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_order_number#119L]\n+- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#107,wr_item_sk#108,wr_refunded_customer_sk#109,wr_refunded_cdemo_sk#110,wr_refunded_hdemo_sk#111,wr_refunded_addr_sk#112,wr_returning_customer_sk#113,wr_returning_cdemo_sk#114,wr_returning_hdemo_sk#115,wr_returning_addr_sk#116,wr_web_page_sk#117,wr_reason_sk#118,wr_order_number#119L,wr_return_quantity#120,wr_return_amt#121,wr_return_tax#122,wr_return_amt_inc_tax#123,wr_fee#124,wr_return_ship_cost#125,wr_refunded_cash#126,wr_reversed_charge#127,wr_account_credit#128,wr_net_loss#129,wr_returned_date_sk#130] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1589296494,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [wr_order_number#119L] Input [2]: [wr_order_number#119L, wr_returned_date_sk#130] "
          },
          "1" : {
            "sign" : -1414441549,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 115190224,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [2]: [wr_order_number#119L, wr_returned_date_sk#130] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] ReadSchema: struct<wr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_order_number#119L]\n+- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#119L,wr_returned_date_sk#130] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<wr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 115190224,
        "inputRowCount" : 7199389
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 5276,
        "TotalTasksDurationInMs" : 76421,
        "IOBytes" : {
          "Total" : 96895402,
          "Details" : {
            "IR" : 57798542,
            "IW" : 0,
            "SR" : 0,
            "SW" : 39096860
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1993411419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3453480096,
                "rowCount" : 71947502
              },
              "compileTime" : {
                "sizeInBytes" : 3453480096,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] "
          },
          "1" : {
            "sign" : 47021474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14965080416,
                "rowCount" : 71947502
              },
              "compileTime" : {
                "sizeInBytes" : 14965080416,
                "rowCount" : 71947502
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(scalar-subquery#236 [], xxhash64(ws_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#239 [], xxhash64(ws_ship_addr_sk#15, 42)) AND might_contain(scalar-subquery#242 [], xxhash64(ws_web_site_sk#17, 42)))) "
          },
          "2" : {
            "sign" : 910655984,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#5, ws_ship_date_sk#6, ws_item_sk#7, ws_bill_customer_sk#8, ws_bill_cdemo_sk#9, ws_bill_hdemo_sk#10, ws_bill_addr_sk#11, ws_ship_customer_sk#12, ws_ship_cdemo_sk#13, ws_ship_hdemo_sk#14, ws_ship_addr_sk#15, ws_web_page_sk#16, ws_web_site_sk#17, ws_ship_mode_sk#18, ws_warehouse_sk#19, ws_promo_sk#20, ws_order_number#21L, ws_quantity#22, ws_wholesale_cost#23, ws_list_price#24, ws_sales_price#25, ws_ext_discount_amt#26, ws_ext_sales_price#27, ws_ext_wholesale_cost#28, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n+- Filter ((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(scalar-subquery#236 [], xxhash64(ws_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#239 [], xxhash64(ws_ship_addr_sk#15, 42)) AND might_contain(scalar-subquery#242 [], xxhash64(ws_web_site_sk#17, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235]\n   :  :  +- Project [d_date_sk#39]\n   :  :     +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39))\n   :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238]\n   :  :  +- Project [ca_address_sk#67]\n   :  :     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n   :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241]\n   :     +- Project [web_site_sk#80]\n   :        +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n   :           +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#80,web_site_id#81,web_rec_start_date#82,web_rec_end_date#83,web_name#84,web_open_date_sk#85,web_close_date_sk#86,web_class#87,web_manager#88,web_mkt_id#89,web_mkt_class#90,web_mkt_desc#91,web_market_manager#92,web_company_id#93,web_company_name#94,web_street_number#95,web_street_name#96,web_street_type#97,web_suite_number#98,web_city#99,web_county#100,web_state#101,web_zip#102,web_country#103,... 2 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#5,ws_ship_date_sk#6,ws_item_sk#7,ws_bill_customer_sk#8,ws_bill_cdemo_sk#9,ws_bill_hdemo_sk#10,ws_bill_addr_sk#11,ws_ship_customer_sk#12,ws_ship_cdemo_sk#13,ws_ship_hdemo_sk#14,ws_ship_addr_sk#15,ws_web_page_sk#16,ws_web_site_sk#17,ws_ship_mode_sk#18,ws_warehouse_sk#19,ws_promo_sk#20,ws_order_number#21L,ws_quantity#22,ws_wholesale_cost#23,ws_list_price#24,ws_sales_price#25,ws_ext_discount_amt#26,ws_ext_sales_price#27,ws_ext_wholesale_cost#28,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 604870492,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3453480096,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37] Input [8]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, ws_sold_date_sk#38] "
          },
          "1" : {
            "sign" : 1087701827,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3453480096,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, ws_sold_date_sk#38] Condition : (((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(Subquery subquery#236, [id=#107], xxhash64(ws_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#239, [id=#120], xxhash64(ws_ship_addr_sk#15, 42))) AND might_contain(Subquery subquery#242, [id=#133], xxhash64(ws_web_site_sk#17, 42))) "
          },
          "2" : {
            "sign" : -1021569743,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3453480096,
            "rowCount" : 71947502,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [8]: [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37, ws_sold_date_sk#38] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales] PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)] ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_number:bigint,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n+- Filter (((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(Subquery subquery#236, [id=#107], xxhash64(ws_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#239, [id=#120], xxhash64(ws_ship_addr_sk#15, 42))) AND might_contain(Subquery subquery#242, [id=#133], xxhash64(ws_web_site_sk#17, 42)))\n   :  :- Subquery subquery#236, [id=#107]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n   :  :              +- Project [d_date_sk#39]\n   :  :                 +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n   :  :- Subquery subquery#239, [id=#120]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n   :  :              +- Project [ca_address_sk#67]\n   :  :                 +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n   :  +- Subquery subquery#242, [id=#133]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n   :                 +- Project [web_site_sk#80]\n   :                    +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n   +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#6,ws_ship_addr_sk#15,ws_web_site_sk#17,ws_warehouse_sk#19,ws_order_number#21L,ws_ext_ship_cost#32,ws_net_profit#37,ws_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#6), isnotnull(ws_ship_addr_sk#15), isnotnull(ws_web_site_sk#17)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_nu...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3453480096,
        "inputRowCount" : 71947502
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 9031,
        "TotalTasksDurationInMs" : 100144,
        "IOBytes" : {
          "Total" : 840368887,
          "Details" : {
            "IR" : 831625683,
            "IW" : 0,
            "SR" : 0,
            "SW" : 8743204
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1692516304,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 256,
                "rowCount" : 8
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct ws_order_number#21L) AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32)),17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37)),17,2) AS total net profit#190], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -254971596,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 256,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [sum#247L, sum#249L, count#252L] Keys: [] Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)] Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#32))#228L, sum(UnscaledValue(ws_net_profit#37))#229L, count(ws_order_number#21L)#227L] Results [3]: [count(ws_order_number#21L)#227L AS order count#188L, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#32))#228L,17,2) AS total shipping cost#189, MakeDecimal(sum(UnscaledValue(ws_net_profit#37))#229L,17,2) AS total net profit#190] "
          },
          "1" : {
            "sign" : -624149178,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [sum#247L, sum#249L, count#252L] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_ship_cost#32)), sum(UnscaledValue(ws_net_profit#37)), count(distinct ws_order_number#21L)], output=[order count#188L, total shipping cost#189, total net profit#190])\n+- ShuffleQueryStage 6\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=832]\n      +- *(11) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37)), partial_count(distinct ws_order_number#21L)], output=[sum#247L, sum#249L, count#252L])\n         +- *(11) HashAggregate(keys=[ws_order_number#21L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#32)), merge_sum(UnscaledValue(ws_net_profit#37))], output=[ws_order_number#21L, sum#247L, sum#249L])\n            +- *(11) HashAggregate(keys=[ws_order_number#21L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#32)), partial_sum(UnscaledValue(ws_net_profit#37))], output=[ws_order_number#21L, sum#247L, sum#249L])\n               +- *(11) Project [ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n                  +- *(11) BroadcastHashJoin [ws_web_site_sk#17], [web_site_sk#80], Inner, BuildRight, false\n                     :- *(11) Project [ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n                     :  +- *(11) BroadcastHashJoin [ws_ship_addr_sk#15], [ca_address_sk#67], Inner, BuildRight, false\n                     :     :- *(11) Project [ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n                     :     :  +- *(11) BroadcastHashJoin [ws_ship_date_sk#6], [d_date_sk#39], Inner, BuildRight, false\n                     :     :     :- *(11) SortMergeJoin [ws_order_number#21L], [wr_order_number#119L], LeftAnti\n                     :     :     :  :- *(9) Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n                     :     :     :  :  +- *(9) SortMergeJoin [ws_order_number#21L], [ws_order_number#209L], LeftSemi, NOT (ws_warehouse_sk#19 = ws_warehouse_sk#207)\n                     :     :     :  :     :- *(7) Sort [ws_order_number#21L ASC NULLS FIRST], false, 0\n                     :     :     :  :     :  +- AQEShuffleRead coalesced\n                     :     :     :  :     :     +- ShuffleQueryStage 0\n                     :     :     :  :     :        +- Exchange hashpartitioning(ws_order_number#21L, 200), ENSURE_REQUIREMENTS, [plan_id=285]\n                     :     :     :  :     :           +- *(1) Project [ws_ship_date_sk#6, ws_ship_addr_sk#15, ws_web_site_sk#17, ws_warehouse_sk#19, ws_order_number#21L, ws_ext_ship_cost#32, ws_net_profit#37]\n                     :     :     :  :     :              +- *(1) Filter (((((isnotnull(ws_ship_date_sk#6) AND isnotnull(ws_ship_addr_sk#15)) AND isnotnull(ws_web_site_sk#17)) AND might_contain(Subquery subquery#236, [id=#107], xxhash64(ws_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#239, [id=#120], xxhash64(ws_ship_addr_sk#15, 42))) AND might_contain(Subquery subquery#242, [id=#133], xxhash64(ws_web_site_sk#17, 42)))\n                     :     :     :  :     :                 :  :- Subquery subquery#236, [id=#107]\n                     :     :     :  :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=434]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n                                                                                 +- *(1) Project [d_date_sk#39]\n                                                                                    +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#235])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n                                                                              +- Project [d_date_sk#39]\n                                                                                 +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     :     :  :     :                 :  :- Subquery subquery#239, [id=#120]\n                     :     :     :  :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=446]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n                                                                                 +- *(1) Project [ca_address_sk#67]\n                                                                                    +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n                                                                              +- Project [ca_address_sk#67]\n                                                                                 +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     :     :     :  :     :                 :  +- Subquery subquery#242, [id=#133]\n                     :     :     :  :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n                                                                                 +- *(1) Project [web_site_sk#80]\n                                                                                    +- *(1) Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[bloomFilter#241])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n                                                                              +- Project [web_site_sk#80]\n                                                                                 +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n                     :     :     :  :     :                 +- *(1) ColumnarToRow\n                     :     :     :  :     :                    +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_ship_date_sk#6,ws_ship_addr_sk#15,ws_web_site_sk#17,ws_warehouse_sk#19,ws_order_number#21L,ws_ext_ship_cost#32,ws_net_profit#37,ws_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ws_ship_date_sk#6), isnotnull(ws_ship_addr_sk#15), isnotnull(ws_web_site_sk#17)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_nu...\n                     :     :     :  :     +- *(8) Sort [ws_order_number#209L ASC NULLS FIRST], false, 0\n                     :     :     :  :        +- AQEShuffleRead coalesced\n                     :     :     :  :           +- ShuffleQueryStage 1\n                     :     :     :  :              +- Exchange hashpartitioning(ws_order_number#209L, 200), ENSURE_REQUIREMENTS, [plan_id=304]\n                     :     :     :  :                 +- *(2) Project [ws_warehouse_sk#207, ws_order_number#209L]\n                     :     :     :  :                    +- *(2) ColumnarToRow\n                     :     :     :  :                       +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#207,ws_order_number#209L,ws_sold_date_sk#226] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n                     :     :     :  +- *(10) Sort [wr_order_number#119L ASC NULLS FIRST], false, 0\n                     :     :     :     +- AQEShuffleRead coalesced\n                     :     :     :        +- ShuffleQueryStage 2\n                     :     :     :           +- Exchange hashpartitioning(wr_order_number#119L, 200), ENSURE_REQUIREMENTS, [plan_id=323]\n                     :     :     :              +- *(3) Project [wr_order_number#119L]\n                     :     :     :                 +- *(3) ColumnarToRow\n                     :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_order_number#119L,wr_returned_date_sk#130] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<wr_order_number:bigint>\n                     :     :     +- BroadcastQueryStage 3\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=343]\n                     :     :           +- *(4) Project [d_date_sk#39]\n                     :     :              +- *(4) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n                     :     :                 +- *(4) ColumnarToRow\n                     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     +- BroadcastQueryStage 4\n                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=364]\n                     :           +- *(5) Project [ca_address_sk#67]\n                     :              +- *(5) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n                     :                 +- *(5) ColumnarToRow\n                     :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     +- BroadcastQueryStage 5\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=385]\n                           +- *(6) Project [web_site_sk#80]\n                              +- *(6) Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n                                 +- *(6) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 8
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 640 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 134,
        "TotalTasksDurationInMs" : 129,
        "IOBytes" : {
          "Total" : 600,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 600,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -158798348,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238]\n+- Project [ca_address_sk#67]\n   +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n      +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 949243800,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [ca_address_sk#67] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [buf#243] Results [1]: [buf#255] "
          },
          "1" : {
            "sign" : -813488880,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#67] Input [2]: [ca_address_sk#67, ca_state#75] "
          },
          "2" : {
            "sign" : 1626423905,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#67, ca_state#75] Condition : ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67)) "
          },
          "3" : {
            "sign" : 800474457,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#67, ca_state#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n+- Project [ca_address_sk#67]\n   +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 4906,
        "TotalTasksDurationInMs" : 18431,
        "IOBytes" : {
          "Total" : 4832884,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 566168322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1440032260,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 1440032260,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_warehouse_sk#207, ws_order_number#209L] "
          },
          "1" : {
            "sign" : -1707271345,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#193, ws_ship_date_sk#194, ws_item_sk#195, ws_bill_customer_sk#196, ws_bill_cdemo_sk#197, ws_bill_hdemo_sk#198, ws_bill_addr_sk#199, ws_ship_customer_sk#200, ws_ship_cdemo_sk#201, ws_ship_hdemo_sk#202, ws_ship_addr_sk#203, ws_web_page_sk#204, ws_web_site_sk#205, ws_ship_mode_sk#206, ws_warehouse_sk#207, ws_promo_sk#208, ws_order_number#209L, ws_quantity#210, ws_wholesale_cost#211, ws_list_price#212, ws_sales_price#213, ws_ext_discount_amt#214, ws_ext_sales_price#215, ws_ext_wholesale_cost#216, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalRelation",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_warehouse_sk#207, ws_order_number#209L]\n+- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#193,ws_ship_date_sk#194,ws_item_sk#195,ws_bill_customer_sk#196,ws_bill_cdemo_sk#197,ws_bill_hdemo_sk#198,ws_bill_addr_sk#199,ws_ship_customer_sk#200,ws_ship_cdemo_sk#201,ws_ship_hdemo_sk#202,ws_ship_addr_sk#203,ws_web_page_sk#204,ws_web_site_sk#205,ws_ship_mode_sk#206,ws_warehouse_sk#207,ws_promo_sk#208,ws_order_number#209L,ws_quantity#210,ws_wholesale_cost#211,ws_list_price#212,ws_sales_price#213,ws_ext_discount_amt#214,ws_ext_sales_price#215,ws_ext_wholesale_cost#216,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1319765345,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1440032260,
            "rowCount" : 72001613,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ws_warehouse_sk#207, ws_order_number#209L] Input [3]: [ws_warehouse_sk#207, ws_order_number#209L, ws_sold_date_sk#226] "
          },
          "1" : {
            "sign" : -325544660,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1440032260,
            "rowCount" : 72001613,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_warehouse_sk#207, ws_order_number#209L, ws_sold_date_sk#226] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales] ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_warehouse_sk#207, ws_order_number#209L]\n+- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_warehouse_sk#207,ws_order_number#209L,ws_sold_date_sk#226] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1440032260,
        "inputRowCount" : 72001613
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 14286,
        "TotalTasksDurationInMs" : 70291,
        "IOBytes" : {
          "Total" : 558244161,
          "Details" : {
            "IR" : 111522428,
            "IW" : 0,
            "SR" : 0,
            "SW" : 446721733
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1555812283,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208360,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#238], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1769133242,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#255] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)#237] Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)#237 AS bloomFilter#238] "
          },
          "1" : {
            "sign" : 983577739,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#255] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#238])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=446]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#255])\n         +- *(1) Project [ca_address_sk#67]\n            +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 27958 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 13537.0,
        "FinishedTasksDistributionInMs" : [ 3225.0, 3353.0, 3457.0, 3502.0, 3502.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 434,
        "TotalTasksDurationInMs" : 416,
        "IOBytes" : {
          "Total" : 27778,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 27778,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -91353078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#67] "
          },
          "1" : {
            "sign" : -1661834855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67)) "
          },
          "2" : {
            "sign" : -700350559,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#67]\n+- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -813488880,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#67] Input [2]: [ca_address_sk#67, ca_state#75] "
          },
          "1" : {
            "sign" : 1626423905,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#67, ca_state#75] Condition : ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67)) "
          },
          "2" : {
            "sign" : 800474457,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#67, ca_state#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#67]\n+- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = TX)) AND isnotnull(ca_address_sk#67))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = TX), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,TX), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 4266,
        "TotalTasksDurationInMs" : 17659,
        "IOBytes" : {
          "Total" : 4860662,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 27778
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1690275106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#39] "
          },
          "1" : {
            "sign" : 677735090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39)) "
          },
          "2" : {
            "sign" : 1227723257,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#39, d_date_id#40, d_date#41, d_month_seq#42, d_week_seq#43, d_quarter_seq#44, d_year#45, d_dow#46, d_moy#47, d_dom#48, d_qoy#49, d_fy_year#50, d_fy_quarter_seq#51, d_fy_week_seq#52, d_day_name#53, d_quarter_name#54, d_holiday#55, d_weekend#56, d_following_holiday#57, d_first_dom#58, d_last_dom#59, d_same_day_ly#60, d_same_day_lq#61, d_current_day#62, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#39]\n+- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1779840274,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#39] Input [2]: [d_date_sk#39, d_date#41] "
          },
          "1" : {
            "sign" : 1965288214,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#39, d_date#41] Condition : (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39)) "
          },
          "2" : {
            "sign" : 1622148099,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#39, d_date#41] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#39]\n+- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 4902,
        "TotalTasksDurationInMs" : 4884,
        "IOBytes" : {
          "Total" : 172043,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 305
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1409364025,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 48,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web_site_sk#80] "
          },
          "1" : {
            "sign" : -306450794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1956,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 1956,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80)) "
          },
          "2" : {
            "sign" : 1688151097,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#80, web_site_id#81, web_rec_start_date#82, web_rec_end_date#83, web_name#84, web_open_date_sk#85, web_close_date_sk#86, web_class#87, web_manager#88, web_mkt_id#89, web_mkt_class#90, web_mkt_desc#91, web_market_manager#92, web_company_id#93, web_company_name#94, web_street_number#95, web_street_name#96, web_street_type#97, web_suite_number#98, web_city#99, web_county#100, web_state#101, web_zip#102, web_country#103, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#80]\n+- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n   +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#80,web_site_id#81,web_rec_start_date#82,web_rec_end_date#83,web_name#84,web_open_date_sk#85,web_close_date_sk#86,web_class#87,web_manager#88,web_mkt_id#89,web_mkt_class#90,web_mkt_desc#91,web_market_manager#92,web_company_id#93,web_company_name#94,web_street_number#95,web_street_name#96,web_street_type#97,web_suite_number#98,web_city#99,web_county#100,web_state#101,web_zip#102,web_country#103,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -640115911,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [web_site_sk#80] Input [2]: [web_site_sk#80, web_company_name#94] "
          },
          "1" : {
            "sign" : 1367617302,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#80, web_company_name#94] Condition : ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80)) "
          },
          "2" : {
            "sign" : -1785950407,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#80, web_company_name#94] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_company_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#80]\n+- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n   +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 4198,
        "TotalTasksDurationInMs" : 4083,
        "IOBytes" : {
          "Total" : 11579,
          "Details" : {
            "IR" : 11482,
            "IW" : 0,
            "SR" : 0,
            "SW" : 97
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2079821020,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0) AS bloomFilter#241]\n+- Project [web_site_sk#80]\n   +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n      +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#80,web_site_id#81,web_rec_start_date#82,web_rec_end_date#83,web_name#84,web_open_date_sk#85,web_close_date_sk#86,web_class#87,web_manager#88,web_mkt_id#89,web_mkt_class#90,web_mkt_desc#91,web_market_manager#92,web_company_id#93,web_company_name#94,web_street_number#95,web_street_name#96,web_street_type#97,web_suite_number#98,web_city#99,web_county#100,web_state#101,web_zip#102,web_country#103,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1926599755,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [web_site_sk#80] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)] Aggregate Attributes [1]: [buf#245] Results [1]: [buf#256] "
          },
          "1" : {
            "sign" : -640115911,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [web_site_sk#80] Input [2]: [web_site_sk#80, web_company_name#94] "
          },
          "2" : {
            "sign" : 1367617302,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#80, web_company_name#94] Condition : ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80)) "
          },
          "3" : {
            "sign" : -1785950407,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 48,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#80, web_company_name#94] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_company_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(web_site_sk#80, 42), 4, 144, 0, 0)], output=[buf#256])\n+- Project [web_site_sk#80]\n   +- Filter ((isnotnull(web_company_name#94) AND (web_company_name#94 = pri)) AND isnotnull(web_site_sk#80))\n      +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#80,web_company_name#94] Batched: true, DataFilters: [isnotnull(web_company_name#94), (web_company_name#94 = pri), isnotnull(web_site_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_company_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3050,
        "TotalTasksDurationInMs" : 3043,
        "IOBytes" : {
          "Total" : 11482,
          "Details" : {
            "IR" : 11482,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1350111920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#235]\n+- Project [d_date_sk#39]\n   +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-05-01) AND (d_date#41 <= 1999-06-30))) AND isnotnull(d_date_sk#39))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 841323622,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [d_date_sk#39] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [buf#244] Results [1]: [buf#254] "
          },
          "1" : {
            "sign" : 1779840274,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#39] Input [2]: [d_date_sk#39, d_date#41] "
          },
          "2" : {
            "sign" : 1965288214,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#39, d_date#41] Condition : (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39)) "
          },
          "3" : {
            "sign" : 1622148099,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#39, d_date#41] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#254])\n+- Project [d_date_sk#39]\n   +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-05-01)) AND (d_date#41 <= 1999-06-30)) AND isnotnull(d_date_sk#39))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-05-01), (d_date#41 <= 1999-06-30), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-05-01), LessThanOrEqual(d_date,1999-06-30), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4247,
        "TotalTasksDurationInMs" : 4238,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227504423,
  "SQLEndTimeInMs" : 1702227545425,
  "Objectives" : {
    "DurationInMs" : 41002,
    "IOBytes" : {
      "Total" : 2000160015,
      "Details" : {
        "IR" : 1010978861,
        "IW" : 0,
        "SR" : 494590577,
        "SW" : 494590577
      }
    }
  }
}
