{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1961883062,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29950777792,
          "rowCount" : 143994124,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#5, cs_ship_date_sk#6, cs_bill_customer_sk#7, cs_bill_cdemo_sk#8, cs_bill_hdemo_sk#9, cs_bill_addr_sk#10, cs_ship_customer_sk#11, cs_ship_cdemo_sk#12, cs_ship_hdemo_sk#13, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_catalog_page_sk#16, cs_ship_mode_sk#17, cs_warehouse_sk#18, cs_item_sk#19, cs_promo_sk#20, cs_order_number#21L, cs_quantity#22, cs_wholesale_cost#23, cs_list_price#24, cs_sales_price#25, cs_ext_discount_amt#26, cs_ext_sales_price#27, cs_ext_wholesale_cost#28, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1603239547,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6241055788,
          "rowCount" : 141842177,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
        },
        "19" : {
          "sign" : 1359045615,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 4417422,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67)) "
        },
        "23" : {
          "sign" : 444328129,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13858,
          "rowCount" : 26,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80)) "
        },
        "4" : {
          "sign" : -193975243,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6302617904,
          "rowCount" : 143241316,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
        },
        "15" : {
          "sign" : -255835211,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14760,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39)) "
        },
        "11" : {
          "sign" : -796526164,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29503172816,
          "rowCount" : 141842177,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(scalar-subquery#186 [], xxhash64(cs_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#189 [], xxhash64(cs_ship_addr_sk#14, 42)) AND might_contain(scalar-subquery#192 [], xxhash64(cs_call_center_sk#15, 42)))) "
        },
        "9" : {
          "sign" : -649241171,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6808424496,
          "rowCount" : 141842177,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#159L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#156)) "
        },
        "22" : {
          "sign" : -823124211,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 312,
          "rowCount" : 26,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#80] "
        },
        "26" : {
          "sign" : 2067005374,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29950777792,
          "rowCount" : 143994124,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#143, cs_ship_date_sk#144, cs_bill_customer_sk#145, cs_bill_cdemo_sk#146, cs_bill_hdemo_sk#147, cs_bill_addr_sk#148, cs_ship_customer_sk#149, cs_ship_cdemo_sk#150, cs_ship_hdemo_sk#151, cs_ship_addr_sk#152, cs_call_center_sk#153, cs_catalog_page_sk#154, cs_ship_mode_sk#155, cs_warehouse_sk#156, cs_item_sk#157, cs_promo_sk#158, cs_order_number#159L, cs_quantity#160, cs_wholesale_cost#161, cs_list_price#162, cs_sales_price#163, cs_ext_discount_amt#164, cs_ext_sales_price#165, cs_ext_wholesale_cost#166, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : -892810887,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#185] "
        },
        "24" : {
          "sign" : 848864422,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 15990,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#80, cc_call_center_id#81, cc_rec_start_date#82, cc_rec_end_date#83, cc_closed_date_sk#84, cc_open_date_sk#85, cc_name#86, cc_class#87, cc_employees#88, cc_sq_ft#89, cc_hours#90, cc_manager#91, cc_mkt_id#92, cc_mkt_class#93, cc_mkt_desc#94, cc_market_manager#95, cc_division#96, cc_division_name#97, cc_company#98, cc_company_name#99, cc_street_number#100, cc_street_name#101, cc_street_type#102, cc_suite_number#103, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 1227723257,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#39, d_date_id#40, d_date#41, d_month_seq#42, d_week_seq#43, d_quarter_seq#44, d_year#45, d_dow#46, d_moy#47, d_dom#48, d_qoy#49, d_fy_year#50, d_fy_quarter_seq#51, d_fy_week_seq#52, d_day_name#53, d_quarter_name#54, d_holiday#55, d_weekend#56, d_following_holiday#57, d_first_dom#58, d_last_dom#59, d_same_day_ly#60, d_same_day_lq#61, d_current_day#62, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 710874176,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5536721800,
          "rowCount" : 138418045,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
        },
        "10" : {
          "sign" : -873387913,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6808424496,
          "rowCount" : 141842177,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
        },
        "21" : {
          "sign" : 763080203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#191] "
        },
        "6" : {
          "sign" : 224965670,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6644066160,
          "rowCount" : 138418045,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
        },
        "1" : {
          "sign" : -849336428,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5626124576,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
        },
        "17" : {
          "sign" : 853099056,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#188] "
        },
        "25" : {
          "sign" : 1034486540,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2879882480,
          "rowCount" : 143994124,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#156, cs_order_number#159L] "
        },
        "14" : {
          "sign" : 525096699,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 720,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#39] "
        },
        "0" : {
          "sign" : -818385148,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 32,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#0L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#2] "
        },
        "20" : {
          "sign" : -700350559,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -176481984,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 230365152,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_order_number#127L] "
        },
        "2" : {
          "sign" : -1339119075,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7032655720,
          "rowCount" : 175816393,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
        },
        "18" : {
          "sign" : -1785991692,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 215484,
          "rowCount" : 17957,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#67] "
        },
        "7" : {
          "sign" : 767251673,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6241055788,
          "rowCount" : 141842177,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
        },
        "3" : {
          "sign" : -430320027,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5156687376,
          "rowCount" : 143241316,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
        },
        "28" : {
          "sign" : -1432259218,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#112, cr_item_sk#113, cr_refunded_customer_sk#114, cr_refunded_cdemo_sk#115, cr_refunded_hdemo_sk#116, cr_refunded_addr_sk#117, cr_returning_customer_sk#118, cr_returning_cdemo_sk#119, cr_returning_hdemo_sk#120, cr_returning_addr_sk#121, cr_call_center_sk#122, cr_catalog_page_sk#123, cr_ship_mode_sk#124, cr_warehouse_sk#125, cr_reason_sk#126, cr_order_number#127L, cr_return_quantity#128, cr_return_amount#129, cr_return_tax#130, cr_return_amt_inc_tax#131, cr_fee#132, cr_return_ship_cost#133, cr_refunded_cash#134, cr_reversed_charge#135, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#0L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#1, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#2]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#159L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#156))\n      :     :     :  :     :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :     :  +- Filter ((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(scalar-subquery#186 [], xxhash64(cs_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#189 [], xxhash64(cs_ship_addr_sk#14, 42)) AND might_contain(scalar-subquery#192 [], xxhash64(cs_call_center_sk#15, 42))))\n      :     :     :  :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#185]\n      :     :     :  :     :     :  :  +- Project [d_date_sk#39]\n      :     :     :  :     :     :  :     +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39))\n      :     :     :  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n      :     :     :  :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#188]\n      :     :     :  :     :     :  :  +- Project [ca_address_sk#67]\n      :     :     :  :     :     :  :     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n      :     :     :  :     :     :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n      :     :     :  :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#191]\n      :     :     :  :     :     :     +- Project [cc_call_center_sk#80]\n      :     :     :  :     :     :        +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n      :     :     :  :     :     :           +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_call_center_id#81,cc_rec_start_date#82,cc_rec_end_date#83,cc_closed_date_sk#84,cc_open_date_sk#85,cc_name#86,cc_class#87,cc_employees#88,cc_sq_ft#89,cc_hours#90,cc_manager#91,cc_mkt_id#92,cc_mkt_class#93,cc_mkt_desc#94,cc_market_manager#95,cc_division#96,cc_division_name#97,cc_company#98,cc_company_name#99,cc_street_number#100,cc_street_name#101,cc_street_type#102,cc_suite_number#103,... 7 more fields] parquet\n      :     :     :  :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#5,cs_ship_date_sk#6,cs_bill_customer_sk#7,cs_bill_cdemo_sk#8,cs_bill_hdemo_sk#9,cs_bill_addr_sk#10,cs_ship_customer_sk#11,cs_ship_cdemo_sk#12,cs_ship_hdemo_sk#13,cs_ship_addr_sk#14,cs_call_center_sk#15,cs_catalog_page_sk#16,cs_ship_mode_sk#17,cs_warehouse_sk#18,cs_item_sk#19,cs_promo_sk#20,cs_order_number#21L,cs_quantity#22,cs_wholesale_cost#23,cs_list_price#24,cs_sales_price#25,cs_ext_discount_amt#26,cs_ext_sales_price#27,cs_ext_wholesale_cost#28,... 10 more fields] parquet\n      :     :     :  :     +- Project [cs_warehouse_sk#156, cs_order_number#159L]\n      :     :     :  :        +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#143,cs_ship_date_sk#144,cs_bill_customer_sk#145,cs_bill_cdemo_sk#146,cs_bill_hdemo_sk#147,cs_bill_addr_sk#148,cs_ship_customer_sk#149,cs_ship_cdemo_sk#150,cs_ship_hdemo_sk#151,cs_ship_addr_sk#152,cs_call_center_sk#153,cs_catalog_page_sk#154,cs_ship_mode_sk#155,cs_warehouse_sk#156,cs_item_sk#157,cs_promo_sk#158,cs_order_number#159L,cs_quantity#160,cs_wholesale_cost#161,cs_list_price#162,cs_sales_price#163,cs_ext_discount_amt#164,cs_ext_sales_price#165,cs_ext_wholesale_cost#166,... 10 more fields] parquet\n      :     :     :  +- Project [cr_order_number#127L]\n      :     :     :     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#112,cr_item_sk#113,cr_refunded_customer_sk#114,cr_refunded_cdemo_sk#115,cr_refunded_hdemo_sk#116,cr_refunded_addr_sk#117,cr_returning_customer_sk#118,cr_returning_cdemo_sk#119,cr_returning_hdemo_sk#120,cr_returning_addr_sk#121,cr_call_center_sk#122,cr_catalog_page_sk#123,cr_ship_mode_sk#124,cr_warehouse_sk#125,cr_reason_sk#126,cr_order_number#127L,cr_return_quantity#128,cr_return_amount#129,cr_return_tax#130,cr_return_amt_inc_tax#131,cr_fee#132,cr_return_ship_cost#133,cr_refunded_cash#134,cr_reversed_charge#135,... 3 more fields] parquet\n      :     :     +- Project [d_date_sk#39]\n      :     :        +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n      :     +- Project [ca_address_sk#67]\n      :        +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n      :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n      +- Project [cc_call_center_sk#80]\n         +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n            +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_call_center_id#81,cc_rec_start_date#82,cc_rec_end_date#83,cc_closed_date_sk#84,cc_open_date_sk#85,cc_name#86,cc_class#87,cc_employees#88,cc_sq_ft#89,cc_hours#90,cc_manager#91,cc_mkt_id#92,cc_mkt_class#93,cc_mkt_desc#94,cc_market_manager#95,cc_division#96,cc_division_name#97,cc_company#98,cc_company_name#99,cc_street_number#100,cc_street_name#101,cc_street_type#102,cc_suite_number#103,... 7 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 62411601860,
      "inputRowCount" : 303459149
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 2146000320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 512,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 512,
        "inputRowCount" : 16
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226656919,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 111,
        "IOBytes" : {
          "Total" : 1200,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1200,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 603661784,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_order_number#127L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -808234086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "4" : {
            "sign" : 2070282321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18782051725359780,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -328775935,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048792,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : -1354920873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2879882480,
            "rowCount" : 143994124,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1772935770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1808194733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 346094911880,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "10" : {
            "sign" : 34748839,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1672568415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 415313894256,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : 792381070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 273193479641596800,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4194304,
            "rowCount" : 49335,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : -1963712950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198] "
          },
          "2" : {
            "sign" : -1924076351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 341491849551996000,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
          },
          "7" : {
            "sign" : -1436205818,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
          },
          "3" : {
            "sign" : -443243107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15367133229839820,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214))\n      :     :     :  :     :- LogicalQueryStage Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [cr_order_number#127L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [cc_call_center_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9924964288,
        "inputRowCount" : 300283539
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 273,
        "FinishedTasksTotalTimeInMs" : 206038.0,
        "FinishedTasksDistributionInMs" : [ 237.0, 445.0, 504.0, 621.0, 7888.0 ]
      },
      "StartTimeInMs" : 1702226647557,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9473,
        "IOBytes" : {
          "Total" : 4121933581,
          "Details" : {
            "IR" : 2159708855,
            "IW" : 0,
            "SR" : 981112363,
            "SW" : 981112363
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 603661784,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_order_number#127L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -808234086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "4" : {
            "sign" : 2070282321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18782051725359780,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -328775935,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048792,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : -1354920873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3455858976,
            "rowCount" : 143994124,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1772935770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1808194733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 346094911880,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "10" : {
            "sign" : 34748839,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1672568415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 415313894256,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : 792381070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 273193479641596800,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4194304,
            "rowCount" : 49335,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : -1963712950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198] "
          },
          "2" : {
            "sign" : -1924076351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 341491849551996000,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
          },
          "7" : {
            "sign" : -1436205818,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
          },
          "3" : {
            "sign" : -443243107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15367133229839820,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214))\n      :     :     :  :     :- LogicalQueryStage Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [cr_order_number#127L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [cc_call_center_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10500940784,
        "inputRowCount" : 300283539
      },
      "PD" : {
        "4" : [ 4647120, 4714834, 4719722, 4718356, 4715527, 4677615, 4672063, 4693391, 4699451, 4698299, 4719249, 4710136, 4737072, 4688760, 4694840, 4672958, 4692253, 4718703, 4718795, 4721745, 4687703, 4736579, 4761527, 4699787, 4680687, 4698832, 4707701, 4698589, 4730702, 4679177, 4696641, 4734754, 4690957, 4716190, 4685915, 4719609, 4690790, 4712138, 4673134, 4708399, 4697214, 4691807, 4701399, 4713978, 4680658, 4718838, 4717653, 4728938, 4682276, 4719944, 4684311, 4716210, 4720729, 4717494, 4713820, 4688039, 4717446, 4689230, 4751664, 4711686, 4667088, 4700131, 4682184, 4710089, 4697753, 4697289, 4701836, 4735784, 4693500, 4668770, 4682324, 4718302, 4691915, 4677782, 4698369, 4723658, 4688389, 4735088, 4694998, 4717457, 4676263, 4708732, 4719371, 4696087, 4705563, 4715367, 4697530, 4673584, 4668737, 4667048, 4693138, 4689512, 4744588, 4722736, 4689340, 4673953, 4711015, 4713002, 4690636, 4683981, 4734085, 4713967, 4730382, 4699217, 4755482, 4720320, 4708117, 4734758, 4712175, 4711758, 4686006, 4679398, 4690123, 4734997, 4672479, 4702761, 4680631, 4682101, 4738311, 4703210, 4721023, 4674307, 4677986, 4681738, 4684648, 4707628, 4722228, 4657449, 4717720, 4681411, 4668777, 4720468, 4708472, 4667725, 4714022, 4685243, 4735507, 4666543, 4706781, 4729127, 4724847, 4730177, 4669356, 4688246, 4714587, 4670083, 4709113, 4728128, 4698913, 4712462, 4705780, 4697297, 4684592, 4691705, 4687556, 4724465, 4705496, 4694179, 4710971, 4699971, 4708054, 4697067, 4727469, 4695027, 4726903, 4698450, 4721645, 4671478, 4696876, 4714261, 4715089, 4705712, 4695855, 4716404, 4724998, 4716437, 4671386, 4700936, 4699098, 4695643, 4649221, 4694509, 4665672, 4694921, 4690024, 4763842, 4685257, 4715264, 4725642, 4706508, 4721802, 4728798, 4699821, 4716097, 4697669, 4689333, 4740019, 4703717, 4705188, 4727554 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 140,
        "FinishedTasksTotalTimeInMs" : 119982.0,
        "FinishedTasksDistributionInMs" : [ 199.0, 427.0, 527.0, 794.0, 7650.0 ]
      },
      "StartTimeInMs" : 1702226648668,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8362,
        "IOBytes" : {
          "Total" : 2942406301,
          "Details" : {
            "IR" : 1877339517,
            "IW" : 0,
            "SR" : 981112363,
            "SW" : 83954421
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 603661784,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_order_number#127L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -808234086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "4" : {
            "sign" : 2070282321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18782051725359780,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -328775935,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048792,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : -1354920873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3455858976,
            "rowCount" : 143994124,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1772935770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1808194733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 346094911880,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "10" : {
            "sign" : 34748839,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1672568415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 415313894256,
            "rowCount" : 8652372797,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : 792381070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 273193479641596800,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4194304,
            "rowCount" : 49335,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : -1963712950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198] "
          },
          "2" : {
            "sign" : -1924076351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 341491849551996000,
            "rowCount" : 8537296238799900,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
          },
          "7" : {
            "sign" : -1436205818,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6241055788,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
          },
          "3" : {
            "sign" : -443243107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15367133229839820,
            "rowCount" : 426864811939995,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214))\n      :     :     :  :     :- LogicalQueryStage Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [cr_order_number#127L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [cc_call_center_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10500940784,
        "inputRowCount" : 300283539
      },
      "PD" : {
        "5" : [ 393552, 398754, 398258, 401852, 400695, 397864, 399770, 396837, 397815, 396923, 397391, 397945, 398394, 400160, 400325, 395866, 400969, 397613, 396315, 400236, 397706, 399665, 399402, 396302, 397047, 397390, 396742, 395918, 399227, 398036, 398380, 403290, 396687, 395737, 398458, 399993, 397520, 397924, 398620, 397630, 401297, 396843, 395452, 396738, 398208, 397255, 398528, 402296, 399851, 398626, 394802, 399171, 397776, 399272, 395734, 399325, 399425, 398639, 401691, 397301, 398644, 399194, 396035, 394707, 396986, 397368, 395906, 400069, 396750, 398708, 395725, 400598, 398138, 392988, 400360, 398930, 397414, 401383, 400479, 397378, 396742, 396924, 398122, 396206, 399021, 394916, 398571, 397674, 398496, 393379, 395706, 396414, 402374, 398195, 400769, 394883, 398912, 399196, 395432, 397649, 394946, 399874, 402132, 398325, 397789, 401812, 395048, 402815, 402778, 400996, 400874, 399221, 397155, 398830, 401467, 399349, 393654, 397029, 399724, 398312, 401790, 397280, 393074, 402088, 398038, 398270, 397751, 394601, 398071, 396089, 399150, 398120, 397344, 393330, 402554, 392552, 400575, 395607, 396935, 396632, 397254, 400914, 397211, 396470, 396704, 394696, 396745, 399778, 402003, 399283, 397871, 398775, 395524, 394943, 401200, 400904, 397819, 396132, 401811, 394274, 405738, 396641, 397990, 393878, 402505, 399760, 395969, 398120, 391788, 399535, 402923, 398522, 396957, 399224, 401005, 398573, 395308, 399002, 393728, 397662, 395639, 397135, 393603, 400350, 392639, 403724, 395979, 397091, 401499, 399713, 402922, 397950, 399462, 400311, 396099, 395185, 398416, 397640, 396224, 399798 ],
        "4" : [ 4647120, 4714834, 4719722, 4718356, 4715527, 4677615, 4672063, 4693391, 4699451, 4698299, 4719249, 4710136, 4737072, 4688760, 4694840, 4672958, 4692253, 4718703, 4718795, 4721745, 4687703, 4736579, 4761527, 4699787, 4680687, 4698832, 4707701, 4698589, 4730702, 4679177, 4696641, 4734754, 4690957, 4716190, 4685915, 4719609, 4690790, 4712138, 4673134, 4708399, 4697214, 4691807, 4701399, 4713978, 4680658, 4718838, 4717653, 4728938, 4682276, 4719944, 4684311, 4716210, 4720729, 4717494, 4713820, 4688039, 4717446, 4689230, 4751664, 4711686, 4667088, 4700131, 4682184, 4710089, 4697753, 4697289, 4701836, 4735784, 4693500, 4668770, 4682324, 4718302, 4691915, 4677782, 4698369, 4723658, 4688389, 4735088, 4694998, 4717457, 4676263, 4708732, 4719371, 4696087, 4705563, 4715367, 4697530, 4673584, 4668737, 4667048, 4693138, 4689512, 4744588, 4722736, 4689340, 4673953, 4711015, 4713002, 4690636, 4683981, 4734085, 4713967, 4730382, 4699217, 4755482, 4720320, 4708117, 4734758, 4712175, 4711758, 4686006, 4679398, 4690123, 4734997, 4672479, 4702761, 4680631, 4682101, 4738311, 4703210, 4721023, 4674307, 4677986, 4681738, 4684648, 4707628, 4722228, 4657449, 4717720, 4681411, 4668777, 4720468, 4708472, 4667725, 4714022, 4685243, 4735507, 4666543, 4706781, 4729127, 4724847, 4730177, 4669356, 4688246, 4714587, 4670083, 4709113, 4728128, 4698913, 4712462, 4705780, 4697297, 4684592, 4691705, 4687556, 4724465, 4705496, 4694179, 4710971, 4699971, 4708054, 4697067, 4727469, 4695027, 4726903, 4698450, 4721645, 4671478, 4696876, 4714261, 4715089, 4705712, 4695855, 4716404, 4724998, 4716437, 4671386, 4700936, 4699098, 4695643, 4649221, 4694509, 4665672, 4694921, 4690024, 4763842, 4685257, 4715264, 4725642, 4706508, 4721802, 4728798, 4699821, 4716097, 4697669, 4689333, 4740019, 4703717, 4705188, 4727554 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 136,
        "FinishedTasksTotalTimeInMs" : 118894.0,
        "FinishedTasksDistributionInMs" : [ 316.0, 439.0, 539.0, 803.0, 7650.0 ]
      },
      "StartTimeInMs" : 1702226650353,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6677,
        "IOBytes" : {
          "Total" : 2775881296,
          "Details" : {
            "IR" : 1786750685,
            "IW" : 0,
            "SR" : 981112363,
            "SW" : 8018248
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1856630071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 14589.0,
        "FinishedTasksDistributionInMs" : [ 2486.0, 2732.0, 3077.0, 3134.0, 3160.0 ]
      },
      "StartTimeInMs" : 1702226619114,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 37916,
        "IOBytes" : {
          "Total" : 4131880078,
          "Details" : {
            "IR" : 2169572893,
            "IW" : 0,
            "SR" : 981153745,
            "SW" : 981153440
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 425736101,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 144,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 3160.0,
        "FinishedTasksDistributionInMs" : [ 3160.0, 3160.0, 3160.0, 3160.0, 3160.0 ]
      },
      "StartTimeInMs" : 1702226619681,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 37349,
        "IOBytes" : {
          "Total" : 4126848434,
          "Details" : {
            "IR" : 2164541739,
            "IW" : 0,
            "SR" : 981153440,
            "SW" : 981153255
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 603661784,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_order_number#127L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -808234086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12327788,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "4" : {
            "sign" : 2070282321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37099676679780,
            "rowCount" : 843174469995,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -328775935,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048792,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : -1354920873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3455858976,
            "rowCount" : 143994124,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1772935770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 13448496,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1808194733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 683631880,
            "rowCount" : 17090797,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "10" : {
            "sign" : 34748839,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17931328,
            "rowCount" : 280177,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1672568415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 820358256,
            "rowCount" : 17090797,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : 792381070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 539631660796800,
            "rowCount" : 16863489399900,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4194304,
            "rowCount" : 49335,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : -1963712950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198] "
          },
          "2" : {
            "sign" : -1924076351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 674539575996000,
            "rowCount" : 16863489399900,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
          },
          "7" : {
            "sign" : -1436205818,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12327788,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
          },
          "3" : {
            "sign" : -443243107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30354280919820,
            "rowCount" : 843174469995,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214))\n      :     :     :  :     :- LogicalQueryStage Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [cr_order_number#127L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [cc_call_center_sk#80], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3710447616,
        "inputRowCount" : 158721539
      },
      "PD" : {
        "5" : [ 393552, 398754, 398258, 401852, 400695, 397864, 399770, 396837, 397815, 396923, 397391, 397945, 398394, 400160, 400325, 395866, 400969, 397613, 396315, 400236, 397706, 399665, 399402, 396302, 397047, 397390, 396742, 395918, 399227, 398036, 398380, 403290, 396687, 395737, 398458, 399993, 397520, 397924, 398620, 397630, 401297, 396843, 395452, 396738, 398208, 397255, 398528, 402296, 399851, 398626, 394802, 399171, 397776, 399272, 395734, 399325, 399425, 398639, 401691, 397301, 398644, 399194, 396035, 394707, 396986, 397368, 395906, 400069, 396750, 398708, 395725, 400598, 398138, 392988, 400360, 398930, 397414, 401383, 400479, 397378, 396742, 396924, 398122, 396206, 399021, 394916, 398571, 397674, 398496, 393379, 395706, 396414, 402374, 398195, 400769, 394883, 398912, 399196, 395432, 397649, 394946, 399874, 402132, 398325, 397789, 401812, 395048, 402815, 402778, 400996, 400874, 399221, 397155, 398830, 401467, 399349, 393654, 397029, 399724, 398312, 401790, 397280, 393074, 402088, 398038, 398270, 397751, 394601, 398071, 396089, 399150, 398120, 397344, 393330, 402554, 392552, 400575, 395607, 396935, 396632, 397254, 400914, 397211, 396470, 396704, 394696, 396745, 399778, 402003, 399283, 397871, 398775, 395524, 394943, 401200, 400904, 397819, 396132, 401811, 394274, 405738, 396641, 397990, 393878, 402505, 399760, 395969, 398120, 391788, 399535, 402923, 398522, 396957, 399224, 401005, 398573, 395308, 399002, 393728, 397662, 395639, 397135, 393603, 400350, 392639, 403724, 395979, 397091, 401499, 399713, 402922, 397950, 399462, 400311, 396099, 395185, 398416, 397640, 396224, 399798 ],
        "4" : [ 4647120, 4714834, 4719722, 4718356, 4715527, 4677615, 4672063, 4693391, 4699451, 4698299, 4719249, 4710136, 4737072, 4688760, 4694840, 4672958, 4692253, 4718703, 4718795, 4721745, 4687703, 4736579, 4761527, 4699787, 4680687, 4698832, 4707701, 4698589, 4730702, 4679177, 4696641, 4734754, 4690957, 4716190, 4685915, 4719609, 4690790, 4712138, 4673134, 4708399, 4697214, 4691807, 4701399, 4713978, 4680658, 4718838, 4717653, 4728938, 4682276, 4719944, 4684311, 4716210, 4720729, 4717494, 4713820, 4688039, 4717446, 4689230, 4751664, 4711686, 4667088, 4700131, 4682184, 4710089, 4697753, 4697289, 4701836, 4735784, 4693500, 4668770, 4682324, 4718302, 4691915, 4677782, 4698369, 4723658, 4688389, 4735088, 4694998, 4717457, 4676263, 4708732, 4719371, 4696087, 4705563, 4715367, 4697530, 4673584, 4668737, 4667048, 4693138, 4689512, 4744588, 4722736, 4689340, 4673953, 4711015, 4713002, 4690636, 4683981, 4734085, 4713967, 4730382, 4699217, 4755482, 4720320, 4708117, 4734758, 4712175, 4711758, 4686006, 4679398, 4690123, 4734997, 4672479, 4702761, 4680631, 4682101, 4738311, 4703210, 4721023, 4674307, 4677986, 4681738, 4684648, 4707628, 4722228, 4657449, 4717720, 4681411, 4668777, 4720468, 4708472, 4667725, 4714022, 4685243, 4735507, 4666543, 4706781, 4729127, 4724847, 4730177, 4669356, 4688246, 4714587, 4670083, 4709113, 4728128, 4698913, 4712462, 4705780, 4697297, 4684592, 4691705, 4687556, 4724465, 4705496, 4694179, 4710971, 4699971, 4708054, 4697067, 4727469, 4695027, 4726903, 4698450, 4721645, 4671478, 4696876, 4714261, 4715089, 4705712, 4695855, 4716404, 4724998, 4716437, 4671386, 4700936, 4699098, 4695643, 4649221, 4694509, 4665672, 4694921, 4690024, 4763842, 4685257, 4715264, 4725642, 4706508, 4721802, 4728798, 4699821, 4716097, 4697669, 4689333, 4740019, 4703717, 4705188, 4727554 ],
        "3" : [ 44059, 42885, 42890, 37960, 41444, 44092, 42948, 47494, 45075, 43859, 42707, 43681, 42265, 43895, 45499, 43372, 42837, 47527, 45378, 40929, 43402, 40481, 44065, 43052, 44635, 43038, 38968, 48454, 45316, 40822, 38504, 44544, 40439, 41301, 43130, 42781, 45660, 40928, 43543, 39461, 41576, 43221, 42433, 42851, 46217, 43762, 43090, 41756, 41608, 43481, 43656, 42491, 39810, 43247, 41757, 43422, 37384, 42569, 38417, 40321, 41896, 41843, 45560, 40382, 37778, 42002, 40554, 40602, 43926, 40565, 41898, 43512, 39461, 40703, 43299, 47474, 41860, 42483, 37712, 39425, 39755, 40252, 39944, 42496, 42748, 38932, 44926, 40175, 39586, 49394, 42603, 42803, 42451, 43178, 46619, 45589, 38405, 41526, 37828, 42566, 36929, 46066, 43597, 41535, 40473, 40625, 42125, 40479, 43455, 39389, 43174, 38527, 42031, 39461, 42742, 38082, 40403, 42108, 43196, 42609, 40651, 40405, 43723, 38411, 42423, 43579, 39570, 42180, 43939, 42512, 42831, 40406, 40383, 42848, 40657, 39688, 45344, 40765, 42418, 46862, 42418, 40343, 40264, 40700, 49978, 41429, 41538, 41362, 39449, 43255, 45855, 40578, 42296, 43681, 38971, 40716, 43168, 41201, 42973, 37147, 43964, 40039, 44272, 40100, 41324, 42434, 40021, 40634, 41363, 46572, 44083, 41400, 37209, 44083, 36493, 42198, 39957, 41858, 41869, 43219, 40340, 37581, 44881, 40872, 38755, 42625, 38779, 41973, 43624, 39468, 40028, 43237, 40417, 40912, 43585, 40261, 41125, 42073, 44547, 44860 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226651298,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5732,
        "IOBytes" : {
          "Total" : 981113563,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 981112363,
            "SW" : 1200
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 63313160,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226624025,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 33005,
        "IOBytes" : {
          "Total" : 4121974658,
          "Details" : {
            "IR" : 2159708855,
            "IW" : 0,
            "SR" : 981153440,
            "SW" : 981112363
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : 603661784,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 230365152,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 230365152,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_order_number#127L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -808234086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12327788,
                "rowCount" : 280177
              },
              "compileTime" : {
                "sizeInBytes" : 12327788,
                "rowCount" : 280177
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "4" : {
            "sign" : 2070282321,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37099676679780,
                "rowCount" : 843174469995
              },
              "compileTime" : {
                "sizeInBytes" : 37099676679780,
                "rowCount" : 843174469995
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_addr_sk#14 = ca_address_sk#67) "
          },
          "15" : {
            "sign" : -328775935,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048792,
                "rowCount" : 20
              },
              "compileTime" : {
                "sizeInBytes" : 312,
                "rowCount" : 26
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cc_call_center_sk#80], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : -1354920873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3455858976,
                "rowCount" : 143994124
              },
              "compileTime" : {
                "sizeInBytes" : 2879882480,
                "rowCount" : 143994124
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1772935770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13448496,
                "rowCount" : 280177
              },
              "compileTime" : {
                "sizeInBytes" : 13448496,
                "rowCount" : 280177
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)) "
          },
          "13" : {
            "sign" : -432250077,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1049064,
                "rowCount" : 61
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#39], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1808194733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 683631880,
                "rowCount" : 17090797
              },
              "compileTime" : {
                "sizeInBytes" : 683631880,
                "rowCount" : 17090797
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "10" : {
            "sign" : 34748839,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17931328,
                "rowCount" : 280177
              },
              "compileTime" : {
                "sizeInBytes" : 6808424496,
                "rowCount" : 141842177
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1672568415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 820358256,
                "rowCount" : 17090797
              },
              "compileTime" : {
                "sizeInBytes" : 820358256,
                "rowCount" : 17090797
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#6 = d_date_sk#39) "
          },
          "1" : {
            "sign" : 792381070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 539631660796800,
                "rowCount" : 16863489399900
              },
              "compileTime" : {
                "sizeInBytes" : 539631660796800,
                "rowCount" : 16863489399900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "14" : {
            "sign" : 2134743325,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4194304,
                "rowCount" : 49335
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#67], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : -1963712950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198] "
          },
          "2" : {
            "sign" : -1924076351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 674539575996000,
                "rowCount" : 16863489399900
              },
              "compileTime" : {
                "sizeInBytes" : 674539575996000,
                "rowCount" : 16863489399900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_call_center_sk#15 = cc_call_center_sk#80) "
          },
          "7" : {
            "sign" : -1436205818,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12327788,
                "rowCount" : 280177
              },
              "compileTime" : {
                "sizeInBytes" : 12327788,
                "rowCount" : 280177
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, (cs_order_number#21L = cr_order_number#127L) "
          },
          "3" : {
            "sign" : -443243107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30354280919820,
                "rowCount" : 843174469995
              },
              "compileTime" : {
                "sizeInBytes" : 30354280919820,
                "rowCount" : 843174469995
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198]\n+- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n   +- Join Inner, (cs_call_center_sk#15 = cc_call_center_sk#80)\n      :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :  +- Join Inner, (cs_ship_addr_sk#14 = ca_address_sk#67)\n      :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :  +- Join Inner, (cs_ship_date_sk#6 = d_date_sk#39)\n      :     :     :- Join LeftAnti, (cs_order_number#21L = cr_order_number#127L)\n      :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n      :     :     :  :  +- Join LeftSemi, ((cs_order_number#21L = cs_order_number#217L) AND NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214))\n      :     :     :  :     :- LogicalQueryStage Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37], ShuffleQueryStage 0\n      :     :     :  :     +- LogicalQueryStage Project [cs_warehouse_sk#214, cs_order_number#217L], ShuffleQueryStage 1\n      :     :     :  +- LogicalQueryStage Project [cr_order_number#127L], ShuffleQueryStage 2\n      :     :     +- LogicalQueryStage Project [d_date_sk#39], BroadcastQueryStage 3\n      :     +- LogicalQueryStage Project [ca_address_sk#67], BroadcastQueryStage 4\n      +- LogicalQueryStage Project [cc_call_center_sk#80], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -622369210,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Arguments: [cs_order_number#21L ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 1371540070,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 820358256,
            "rowCount" : 17090797,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_ship_date_sk#6] Right keys [1]: [d_date_sk#39] Join type: Inner Join condition: None "
          },
          "19" : {
            "sign" : 834999300,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 4194304,
            "rowCount" : 49335,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_address_sk#67] Arguments: 4 "
          },
          "4" : {
            "sign" : 1541074307,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 674539575996000,
            "rowCount" : 16863489399900,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_call_center_sk#15] Right keys [1]: [cc_call_center_sk#80] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -718198393,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3455858976,
            "rowCount" : 143994124,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [cs_warehouse_sk#214, cs_order_number#217L] Arguments: 1 "
          },
          "11" : {
            "sign" : -1456956101,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 13448496,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [cs_order_number#21L] Right keys [1]: [cs_order_number#217L] Join type: LeftSemi Join condition: NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214) "
          },
          "9" : {
            "sign" : -101948790,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 12327788,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [cs_order_number#21L] Right keys [1]: [cr_order_number#127L] Join type: LeftAnti Join condition: None "
          },
          "13" : {
            "sign" : 686247205,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17931328,
            "rowCount" : 280177,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Arguments: 0 "
          },
          "16" : {
            "sign" : 408165857,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [cr_order_number#127L] Arguments: [cr_order_number#127L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1915953625,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 30354280919820,
            "rowCount" : 843174469995,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Input [6]: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, ca_address_sk#67] "
          },
          "10" : {
            "sign" : 1666350907,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12327788,
            "rowCount" : 280177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Input [7]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "6" : {
            "sign" : 540281101,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 37099676679780,
            "rowCount" : 843174469995,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_ship_addr_sk#14] Right keys [1]: [ca_address_sk#67] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -224811086,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_order_number#21L, sum#255L, sum#257L] Keys [1]: [cs_order_number#21L] Functions [2]: [merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37))] Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#32))#236L, sum(UnscaledValue(cs_net_profit#37))#237L] Results [3]: [cs_order_number#21L, sum#255L, sum#257L] "
          },
          "17" : {
            "sign" : -445085356,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [cr_order_number#127L] Arguments: 2 "
          },
          "14" : {
            "sign" : 1607393187,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [cs_warehouse_sk#214, cs_order_number#217L] Arguments: [cs_order_number#217L ASC NULLS FIRST], false, 0 "
          },
          "0" : {
            "sign" : -914425489,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_order_number#21L, sum#255L, sum#257L] Keys: [] Functions [3]: [merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37)), partial_count(distinct cs_order_number#21L)] Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#32))#236L, sum(UnscaledValue(cs_net_profit#37))#237L, count(cs_order_number#21L)#235L] Results [3]: [sum#255L, sum#257L, count#260L] "
          },
          "20" : {
            "sign" : 724696999,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048792,
            "rowCount" : 20,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [cc_call_center_sk#80] Arguments: 5 "
          },
          "2" : {
            "sign" : -2026456250,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Keys [1]: [cs_order_number#21L] Functions [2]: [partial_sum(UnscaledValue(cs_ext_ship_cost#32)), partial_sum(UnscaledValue(cs_net_profit#37))] Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#32))#236L, sum(UnscaledValue(cs_net_profit#37))#237L] Results [3]: [cs_order_number#21L, sum#255L, sum#257L] "
          },
          "18" : {
            "sign" : 691538130,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#39] Arguments: 3 "
          },
          "7" : {
            "sign" : -1524095620,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 683631880,
            "rowCount" : 17090797,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Input [7]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, d_date_sk#39] "
          },
          "3" : {
            "sign" : 1495088174,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 539631660796800,
            "rowCount" : 16863489399900,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Input [5]: [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, cc_call_center_sk#80] "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 11,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "ShuffleQueryStage",
          "toId" : 14,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Sort",
          "toId" : 11,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "SortMergeJoin",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "ShuffleQueryStage",
          "toId" : 16,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Sort",
          "toId" : 9,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "SortMergeJoin",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37)), partial_count(distinct cs_order_number#21L)], output=[sum#255L, sum#257L, count#260L])\n+- HashAggregate(keys=[cs_order_number#21L], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37))], output=[cs_order_number#21L, sum#255L, sum#257L])\n   +- HashAggregate(keys=[cs_order_number#21L], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#32)), partial_sum(UnscaledValue(cs_net_profit#37))], output=[cs_order_number#21L, sum#255L, sum#257L])\n      +- Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n         +- BroadcastHashJoin [cs_call_center_sk#15], [cc_call_center_sk#80], Inner, BuildRight, false\n            :- Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n            :  +- BroadcastHashJoin [cs_ship_addr_sk#14], [ca_address_sk#67], Inner, BuildRight, false\n            :     :- Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n            :     :  +- BroadcastHashJoin [cs_ship_date_sk#6], [d_date_sk#39], Inner, BuildRight, false\n            :     :     :- SortMergeJoin [cs_order_number#21L], [cr_order_number#127L], LeftAnti\n            :     :     :  :- Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n            :     :     :  :  +- SortMergeJoin [cs_order_number#21L], [cs_order_number#217L], LeftSemi, NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)\n            :     :     :  :     :- Sort [cs_order_number#21L ASC NULLS FIRST], false, 0\n            :     :     :  :     :  +- ShuffleQueryStage 0\n            :     :     :  :     :     +- Exchange hashpartitioning(cs_order_number#21L, 200), ENSURE_REQUIREMENTS, [plan_id=285]\n            :     :     :  :     :        +- *(1) Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n            :     :     :  :     :           +- *(1) Filter (((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(Subquery subquery#244, [id=#107], xxhash64(cs_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#247, [id=#120], xxhash64(cs_ship_addr_sk#14, 42))) AND might_contain(Subquery subquery#250, [id=#133], xxhash64(cs_call_center_sk#15, 42)))\n            :     :     :  :     :              :  :- Subquery subquery#244, [id=#107]\n            :     :     :  :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=464]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n                                                                     +- *(1) Project [d_date_sk#39]\n                                                                        +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n                                                                  +- Project [d_date_sk#39]\n                                                                     +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     :     :  :     :              :  :- Subquery subquery#247, [id=#120]\n            :     :     :  :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n                                                                     +- *(1) Project [ca_address_sk#67]\n                                                                        +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n                                                                  +- Project [ca_address_sk#67]\n                                                                     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            :     :     :  :     :              :  +- Subquery subquery#250, [id=#133]\n            :     :     :  :     :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=427]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n                                                                     +- *(1) Project [cc_call_center_sk#80]\n                                                                        +- *(1) Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n                                                                  +- Project [cc_call_center_sk#80]\n                                                                     +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n            :     :     :  :     :              +- *(1) ColumnarToRow\n            :     :     :  :     :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#6,cs_ship_addr_sk#14,cs_call_center_sk#15,cs_warehouse_sk#18,cs_order_number#21L,cs_ext_ship_cost#32,cs_net_profit#37,cs_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(cs_ship_date_sk#6), isnotnull(cs_ship_addr_sk#14), isnotnull(cs_call_center_sk#15)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order...\n            :     :     :  :     +- Sort [cs_order_number#217L ASC NULLS FIRST], false, 0\n            :     :     :  :        +- ShuffleQueryStage 1\n            :     :     :  :           +- Exchange hashpartitioning(cs_order_number#217L, 200), ENSURE_REQUIREMENTS, [plan_id=304]\n            :     :     :  :              +- *(2) Project [cs_warehouse_sk#214, cs_order_number#217L]\n            :     :     :  :                 +- *(2) ColumnarToRow\n            :     :     :  :                    +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_warehouse_sk#214,cs_order_number#217L,cs_sold_date_sk#234] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:bigint>\n            :     :     :  +- Sort [cr_order_number#127L ASC NULLS FIRST], false, 0\n            :     :     :     +- ShuffleQueryStage 2\n            :     :     :        +- Exchange hashpartitioning(cr_order_number#127L, 200), ENSURE_REQUIREMENTS, [plan_id=323]\n            :     :     :           +- *(3) Project [cr_order_number#127L]\n            :     :     :              +- *(3) ColumnarToRow\n            :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_order_number#127L,cr_returned_date_sk#138] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cr_order_number:bigint>\n            :     :     +- BroadcastQueryStage 3\n            :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=343]\n            :     :           +- *(4) Project [d_date_sk#39]\n            :     :              +- *(4) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n            :     :                 +- *(4) ColumnarToRow\n            :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n            :     +- BroadcastQueryStage 4\n            :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=364]\n            :           +- *(5) Project [ca_address_sk#67]\n            :              +- *(5) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n            :                 +- *(5) ColumnarToRow\n            :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n            +- BroadcastQueryStage 5\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=385]\n                  +- *(6) Project [cc_call_center_sk#80]\n                     +- *(6) Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                        +- *(6) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3710447616,
        "inputRowCount" : 158721539
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 393552, 398754, 398258, 401852, 400695, 397864, 399770, 396837, 397815, 396923, 397391, 397945, 398394, 400160, 400325, 395866, 400969, 397613, 396315, 400236, 397706, 399665, 399402, 396302, 397047, 397390, 396742, 395918, 399227, 398036, 398380, 403290, 396687, 395737, 398458, 399993, 397520, 397924, 398620, 397630, 401297, 396843, 395452, 396738, 398208, 397255, 398528, 402296, 399851, 398626, 394802, 399171, 397776, 399272, 395734, 399325, 399425, 398639, 401691, 397301, 398644, 399194, 396035, 394707, 396986, 397368, 395906, 400069, 396750, 398708, 395725, 400598, 398138, 392988, 400360, 398930, 397414, 401383, 400479, 397378, 396742, 396924, 398122, 396206, 399021, 394916, 398571, 397674, 398496, 393379, 395706, 396414, 402374, 398195, 400769, 394883, 398912, 399196, 395432, 397649, 394946, 399874, 402132, 398325, 397789, 401812, 395048, 402815, 402778, 400996, 400874, 399221, 397155, 398830, 401467, 399349, 393654, 397029, 399724, 398312, 401790, 397280, 393074, 402088, 398038, 398270, 397751, 394601, 398071, 396089, 399150, 398120, 397344, 393330, 402554, 392552, 400575, 395607, 396935, 396632, 397254, 400914, 397211, 396470, 396704, 394696, 396745, 399778, 402003, 399283, 397871, 398775, 395524, 394943, 401200, 400904, 397819, 396132, 401811, 394274, 405738, 396641, 397990, 393878, 402505, 399760, 395969, 398120, 391788, 399535, 402923, 398522, 396957, 399224, 401005, 398573, 395308, 399002, 393728, 397662, 395639, 397135, 393603, 400350, 392639, 403724, 395979, 397091, 401499, 399713, 402922, 397950, 399462, 400311, 396099, 395185, 398416, 397640, 396224, 399798 ],
        "4" : [ 4647120, 4714834, 4719722, 4718356, 4715527, 4677615, 4672063, 4693391, 4699451, 4698299, 4719249, 4710136, 4737072, 4688760, 4694840, 4672958, 4692253, 4718703, 4718795, 4721745, 4687703, 4736579, 4761527, 4699787, 4680687, 4698832, 4707701, 4698589, 4730702, 4679177, 4696641, 4734754, 4690957, 4716190, 4685915, 4719609, 4690790, 4712138, 4673134, 4708399, 4697214, 4691807, 4701399, 4713978, 4680658, 4718838, 4717653, 4728938, 4682276, 4719944, 4684311, 4716210, 4720729, 4717494, 4713820, 4688039, 4717446, 4689230, 4751664, 4711686, 4667088, 4700131, 4682184, 4710089, 4697753, 4697289, 4701836, 4735784, 4693500, 4668770, 4682324, 4718302, 4691915, 4677782, 4698369, 4723658, 4688389, 4735088, 4694998, 4717457, 4676263, 4708732, 4719371, 4696087, 4705563, 4715367, 4697530, 4673584, 4668737, 4667048, 4693138, 4689512, 4744588, 4722736, 4689340, 4673953, 4711015, 4713002, 4690636, 4683981, 4734085, 4713967, 4730382, 4699217, 4755482, 4720320, 4708117, 4734758, 4712175, 4711758, 4686006, 4679398, 4690123, 4734997, 4672479, 4702761, 4680631, 4682101, 4738311, 4703210, 4721023, 4674307, 4677986, 4681738, 4684648, 4707628, 4722228, 4657449, 4717720, 4681411, 4668777, 4720468, 4708472, 4667725, 4714022, 4685243, 4735507, 4666543, 4706781, 4729127, 4724847, 4730177, 4669356, 4688246, 4714587, 4670083, 4709113, 4728128, 4698913, 4712462, 4705780, 4697297, 4684592, 4691705, 4687556, 4724465, 4705496, 4694179, 4710971, 4699971, 4708054, 4697067, 4727469, 4695027, 4726903, 4698450, 4721645, 4671478, 4696876, 4714261, 4715089, 4705712, 4695855, 4716404, 4724998, 4716437, 4671386, 4700936, 4699098, 4695643, 4649221, 4694509, 4665672, 4694921, 4690024, 4763842, 4685257, 4715264, 4725642, 4706508, 4721802, 4728798, 4699821, 4716097, 4697669, 4689333, 4740019, 4703717, 4705188, 4727554 ],
        "3" : [ 44059, 42885, 42890, 37960, 41444, 44092, 42948, 47494, 45075, 43859, 42707, 43681, 42265, 43895, 45499, 43372, 42837, 47527, 45378, 40929, 43402, 40481, 44065, 43052, 44635, 43038, 38968, 48454, 45316, 40822, 38504, 44544, 40439, 41301, 43130, 42781, 45660, 40928, 43543, 39461, 41576, 43221, 42433, 42851, 46217, 43762, 43090, 41756, 41608, 43481, 43656, 42491, 39810, 43247, 41757, 43422, 37384, 42569, 38417, 40321, 41896, 41843, 45560, 40382, 37778, 42002, 40554, 40602, 43926, 40565, 41898, 43512, 39461, 40703, 43299, 47474, 41860, 42483, 37712, 39425, 39755, 40252, 39944, 42496, 42748, 38932, 44926, 40175, 39586, 49394, 42603, 42803, 42451, 43178, 46619, 45589, 38405, 41526, 37828, 42566, 36929, 46066, 43597, 41535, 40473, 40625, 42125, 40479, 43455, 39389, 43174, 38527, 42031, 39461, 42742, 38082, 40403, 42108, 43196, 42609, 40651, 40405, 43723, 38411, 42423, 43579, 39570, 42180, 43939, 42512, 42831, 40406, 40383, 42848, 40657, 39688, 45344, 40765, 42418, 46862, 42418, 40343, 40264, 40700, 49978, 41429, 41538, 41362, 39449, 43255, 45855, 40578, 42296, 43681, 38971, 40716, 43168, 41201, 42973, 37147, 43964, 40039, 44272, 40100, 41324, 42434, 40021, 40634, 41363, 46572, 44083, 41400, 37209, 44083, 36493, 42198, 39957, 41858, 41869, 43219, 40340, 37581, 44881, 40872, 38755, 42625, 38779, 41973, 43624, 39468, 40028, 43237, 40417, 40912, 43585, 40261, 41125, 42073, 44547, 44860 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 5178,
        "TotalTasksDurationInMs" : 72775,
        "IOBytes" : {
          "Total" : 981112363,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 981111163,
            "SW" : 1200
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 425736101,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 144,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2103063051,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 144,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#264] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)#248] Results [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)#248 AS bloomFilter#249] "
          },
          "1" : {
            "sign" : -87348218,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#264] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=427]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n         +- *(1) Project [cc_call_center_sk#80]\n            +- *(1) Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 144,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 189 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 3160.0,
        "FinishedTasksDistributionInMs" : [ 3160.0, 3160.0, 3160.0, 3160.0, 3160.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 303,
        "TotalTasksDurationInMs" : 279,
        "IOBytes" : {
          "Total" : 40892,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 40892,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1856630071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -859671081,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 264,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#262] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)#242] Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)#242 AS bloomFilter#243] "
          },
          "1" : {
            "sign" : -1896971821,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#262] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=464]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n         +- *(1) Project [d_date_sk#39]\n            +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 334 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 14589.0,
        "FinishedTasksDistributionInMs" : [ 2486.0, 2732.0, 3077.0, 3134.0, 3160.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 349,
        "TotalTasksDurationInMs" : 326,
        "IOBytes" : {
          "Total" : 305,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 305,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -176481984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 230365152,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 230365152,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_order_number#127L] "
          },
          "1" : {
            "sign" : -1432259218,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#112, cr_item_sk#113, cr_refunded_customer_sk#114, cr_refunded_cdemo_sk#115, cr_refunded_hdemo_sk#116, cr_refunded_addr_sk#117, cr_returning_customer_sk#118, cr_returning_cdemo_sk#119, cr_returning_hdemo_sk#120, cr_returning_addr_sk#121, cr_call_center_sk#122, cr_catalog_page_sk#123, cr_ship_mode_sk#124, cr_warehouse_sk#125, cr_reason_sk#126, cr_order_number#127L, cr_return_quantity#128, cr_return_amount#129, cr_return_tax#130, cr_return_amt_inc_tax#131, cr_fee#132, cr_return_ship_cost#133, cr_refunded_cash#134, cr_reversed_charge#135, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalRelation",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_order_number#127L]\n+- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#112,cr_item_sk#113,cr_refunded_customer_sk#114,cr_refunded_cdemo_sk#115,cr_refunded_hdemo_sk#116,cr_refunded_addr_sk#117,cr_returning_customer_sk#118,cr_returning_cdemo_sk#119,cr_returning_hdemo_sk#120,cr_returning_addr_sk#121,cr_call_center_sk#122,cr_catalog_page_sk#123,cr_ship_mode_sk#124,cr_warehouse_sk#125,cr_reason_sk#126,cr_order_number#127L,cr_return_quantity#128,cr_return_amount#129,cr_return_tax#130,cr_return_amt_inc_tax#131,cr_fee#132,cr_return_ship_cost#133,cr_refunded_cash#134,cr_reversed_charge#135,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -957815189,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cr_order_number#127L] Input [2]: [cr_order_number#127L, cr_returned_date_sk#138] "
          },
          "1" : {
            "sign" : -1208107395,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 230365152,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [2]: [cr_order_number#127L, cr_returned_date_sk#138] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns] ReadSchema: struct<cr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_order_number#127L]\n+- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_order_number#127L,cr_returned_date_sk#138] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 230365152,
        "inputRowCount" : 14397822
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 2799,
        "TotalTasksDurationInMs" : 30119,
        "IOBytes" : {
          "Total" : 166525005,
          "Details" : {
            "IR" : 90588832,
            "IW" : 0,
            "SR" : 0,
            "SW" : 75936173
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 105954638,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6808424496,
                "rowCount" : 141842177
              },
              "compileTime" : {
                "sizeInBytes" : 6808424496,
                "rowCount" : 141842177
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] "
          },
          "1" : {
            "sign" : 145382685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29503172816,
                "rowCount" : 141842177
              },
              "compileTime" : {
                "sizeInBytes" : 29503172816,
                "rowCount" : 141842177
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(scalar-subquery#244 [], xxhash64(cs_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#247 [], xxhash64(cs_ship_addr_sk#14, 42)) AND might_contain(scalar-subquery#250 [], xxhash64(cs_call_center_sk#15, 42)))) "
          },
          "2" : {
            "sign" : -1961883062,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29950777792,
                "rowCount" : 143994124
              },
              "compileTime" : {
                "sizeInBytes" : 29950777792,
                "rowCount" : 143994124
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#5, cs_ship_date_sk#6, cs_bill_customer_sk#7, cs_bill_cdemo_sk#8, cs_bill_hdemo_sk#9, cs_bill_addr_sk#10, cs_ship_customer_sk#11, cs_ship_cdemo_sk#12, cs_ship_hdemo_sk#13, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_catalog_page_sk#16, cs_ship_mode_sk#17, cs_warehouse_sk#18, cs_item_sk#19, cs_promo_sk#20, cs_order_number#21L, cs_quantity#22, cs_wholesale_cost#23, cs_list_price#24, cs_sales_price#25, cs_ext_discount_amt#26, cs_ext_sales_price#27, cs_ext_wholesale_cost#28, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n+- Filter ((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(scalar-subquery#244 [], xxhash64(cs_ship_date_sk#6, 42))) AND (might_contain(scalar-subquery#247 [], xxhash64(cs_ship_addr_sk#14, 42)) AND might_contain(scalar-subquery#250 [], xxhash64(cs_call_center_sk#15, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243]\n   :  :  +- Project [d_date_sk#39]\n   :  :     +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39))\n   :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n   :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246]\n   :  :  +- Project [ca_address_sk#67]\n   :  :     +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n   :  :        +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249]\n   :     +- Project [cc_call_center_sk#80]\n   :        +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n   :           +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_call_center_id#81,cc_rec_start_date#82,cc_rec_end_date#83,cc_closed_date_sk#84,cc_open_date_sk#85,cc_name#86,cc_class#87,cc_employees#88,cc_sq_ft#89,cc_hours#90,cc_manager#91,cc_mkt_id#92,cc_mkt_class#93,cc_mkt_desc#94,cc_market_manager#95,cc_division#96,cc_division_name#97,cc_company#98,cc_company_name#99,cc_street_number#100,cc_street_name#101,cc_street_type#102,cc_suite_number#103,... 7 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#5,cs_ship_date_sk#6,cs_bill_customer_sk#7,cs_bill_cdemo_sk#8,cs_bill_hdemo_sk#9,cs_bill_addr_sk#10,cs_ship_customer_sk#11,cs_ship_cdemo_sk#12,cs_ship_hdemo_sk#13,cs_ship_addr_sk#14,cs_call_center_sk#15,cs_catalog_page_sk#16,cs_ship_mode_sk#17,cs_warehouse_sk#18,cs_item_sk#19,cs_promo_sk#20,cs_order_number#21L,cs_quantity#22,cs_wholesale_cost#23,cs_list_price#24,cs_sales_price#25,cs_ext_discount_amt#26,cs_ext_sales_price#27,cs_ext_wholesale_cost#28,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1057781821,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37] Input [8]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, cs_sold_date_sk#38] "
          },
          "1" : {
            "sign" : -1580995498,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, cs_sold_date_sk#38] Condition : (((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(Subquery subquery#244, [id=#107], xxhash64(cs_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#247, [id=#120], xxhash64(cs_ship_addr_sk#14, 42))) AND might_contain(Subquery subquery#250, [id=#133], xxhash64(cs_call_center_sk#15, 42))) "
          },
          "2" : {
            "sign" : 1915886299,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6808424496,
            "rowCount" : 141842177,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [8]: [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37, cs_sold_date_sk#38] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales] PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)] ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order_number:bigint,cs_ext_ship_cost:decimal(7,2),cs_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n+- Filter (((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(Subquery subquery#244, [id=#107], xxhash64(cs_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#247, [id=#120], xxhash64(cs_ship_addr_sk#14, 42))) AND might_contain(Subquery subquery#250, [id=#133], xxhash64(cs_call_center_sk#15, 42)))\n   :  :- Subquery subquery#244, [id=#107]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n   :  :              +- Project [d_date_sk#39]\n   :  :                 +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n   :  :- Subquery subquery#247, [id=#120]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n   :  :              +- Project [ca_address_sk#67]\n   :  :                 +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n   :  +- Subquery subquery#250, [id=#133]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n   :                 +- Project [cc_call_center_sk#80]\n   :                    +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n   +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#6,cs_ship_addr_sk#14,cs_call_center_sk#15,cs_warehouse_sk#18,cs_order_number#21L,cs_ext_ship_cost#32,cs_net_profit#37,cs_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(cs_ship_date_sk#6), isnotnull(cs_ship_addr_sk#14), isnotnull(cs_call_center_sk#15)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6808424496,
        "inputRowCount" : 141842177
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 23064,
        "TotalTasksDurationInMs" : 197154,
        "IOBytes" : {
          "Total" : 1794767733,
          "Details" : {
            "IR" : 1786750685,
            "IW" : 0,
            "SR" : 0,
            "SW" : 8017048
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2146000320,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 512,
                "rowCount" : 16
              },
              "compileTime" : {
                "sizeInBytes" : 32,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [count(distinct cs_order_number#21L) AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32)),17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37)),17,2) AS total net profit#198], HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -960077321,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 512,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [sum#255L, sum#257L, count#260L] Keys: [] Functions [3]: [sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)] Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#32))#236L, sum(UnscaledValue(cs_net_profit#37))#237L, count(cs_order_number#21L)#235L] Results [3]: [count(cs_order_number#21L)#235L AS order count#196L, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#32))#236L,17,2) AS total shipping cost#197, MakeDecimal(sum(UnscaledValue(cs_net_profit#37))#237L,17,2) AS total net profit#198] "
          },
          "1" : {
            "sign" : -249246983,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 32,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [sum#255L, sum#257L, count#260L] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[sum(UnscaledValue(cs_ext_ship_cost#32)), sum(UnscaledValue(cs_net_profit#37)), count(distinct cs_order_number#21L)], output=[order count#196L, total shipping cost#197, total net profit#198])\n+- ShuffleQueryStage 6\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=931]\n      +- *(11) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37)), partial_count(distinct cs_order_number#21L)], output=[sum#255L, sum#257L, count#260L])\n         +- *(11) HashAggregate(keys=[cs_order_number#21L], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#32)), merge_sum(UnscaledValue(cs_net_profit#37))], output=[cs_order_number#21L, sum#255L, sum#257L])\n            +- *(11) HashAggregate(keys=[cs_order_number#21L], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#32)), partial_sum(UnscaledValue(cs_net_profit#37))], output=[cs_order_number#21L, sum#255L, sum#257L])\n               +- *(11) Project [cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n                  +- *(11) BroadcastHashJoin [cs_call_center_sk#15], [cc_call_center_sk#80], Inner, BuildRight, false\n                     :- *(11) Project [cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n                     :  +- *(11) BroadcastHashJoin [cs_ship_addr_sk#14], [ca_address_sk#67], Inner, BuildRight, false\n                     :     :- *(11) Project [cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n                     :     :  +- *(11) BroadcastHashJoin [cs_ship_date_sk#6], [d_date_sk#39], Inner, BuildRight, false\n                     :     :     :- *(11) SortMergeJoin [cs_order_number#21L], [cr_order_number#127L], LeftAnti\n                     :     :     :  :- *(9) Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n                     :     :     :  :  +- *(9) SortMergeJoin [cs_order_number#21L], [cs_order_number#217L], LeftSemi, NOT (cs_warehouse_sk#18 = cs_warehouse_sk#214)\n                     :     :     :  :     :- *(7) Sort [cs_order_number#21L ASC NULLS FIRST], false, 0\n                     :     :     :  :     :  +- AQEShuffleRead coalesced\n                     :     :     :  :     :     +- ShuffleQueryStage 0\n                     :     :     :  :     :        +- Exchange hashpartitioning(cs_order_number#21L, 200), ENSURE_REQUIREMENTS, [plan_id=285]\n                     :     :     :  :     :           +- *(1) Project [cs_ship_date_sk#6, cs_ship_addr_sk#14, cs_call_center_sk#15, cs_warehouse_sk#18, cs_order_number#21L, cs_ext_ship_cost#32, cs_net_profit#37]\n                     :     :     :  :     :              +- *(1) Filter (((((isnotnull(cs_ship_date_sk#6) AND isnotnull(cs_ship_addr_sk#14)) AND isnotnull(cs_call_center_sk#15)) AND might_contain(Subquery subquery#244, [id=#107], xxhash64(cs_ship_date_sk#6, 42))) AND might_contain(Subquery subquery#247, [id=#120], xxhash64(cs_ship_addr_sk#14, 42))) AND might_contain(Subquery subquery#250, [id=#133], xxhash64(cs_call_center_sk#15, 42)))\n                     :     :     :  :     :                 :  :- Subquery subquery#244, [id=#107]\n                     :     :     :  :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=464]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n                                                                                 +- *(1) Project [d_date_sk#39]\n                                                                                    +- *(1) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[bloomFilter#243])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=105]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n                                                                              +- Project [d_date_sk#39]\n                                                                                 +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     :     :  :     :                 :  :- Subquery subquery#247, [id=#120]\n                     :     :     :  :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n                                                                                 +- *(1) Project [ca_address_sk#67]\n                                                                                    +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=118]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n                                                                              +- Project [ca_address_sk#67]\n                                                                                 +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     :     :     :  :     :                 :  +- Subquery subquery#250, [id=#133]\n                     :     :     :  :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=427]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n                                                                                 +- *(1) Project [cc_call_center_sk#80]\n                                                                                    +- *(1) Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[bloomFilter#249])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=131]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n                                                                              +- Project [cc_call_center_sk#80]\n                                                                                 +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n                     :     :     :  :     :                 +- *(1) ColumnarToRow\n                     :     :     :  :     :                    +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#6,cs_ship_addr_sk#14,cs_call_center_sk#15,cs_warehouse_sk#18,cs_order_number#21L,cs_ext_ship_cost#32,cs_net_profit#37,cs_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(cs_ship_date_sk#6), isnotnull(cs_ship_addr_sk#14), isnotnull(cs_call_center_sk#15)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)], ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order...\n                     :     :     :  :     +- *(8) Sort [cs_order_number#217L ASC NULLS FIRST], false, 0\n                     :     :     :  :        +- AQEShuffleRead coalesced\n                     :     :     :  :           +- ShuffleQueryStage 1\n                     :     :     :  :              +- Exchange hashpartitioning(cs_order_number#217L, 200), ENSURE_REQUIREMENTS, [plan_id=304]\n                     :     :     :  :                 +- *(2) Project [cs_warehouse_sk#214, cs_order_number#217L]\n                     :     :     :  :                    +- *(2) ColumnarToRow\n                     :     :     :  :                       +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_warehouse_sk#214,cs_order_number#217L,cs_sold_date_sk#234] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:bigint>\n                     :     :     :  +- *(10) Sort [cr_order_number#127L ASC NULLS FIRST], false, 0\n                     :     :     :     +- AQEShuffleRead coalesced\n                     :     :     :        +- ShuffleQueryStage 2\n                     :     :     :           +- Exchange hashpartitioning(cr_order_number#127L, 200), ENSURE_REQUIREMENTS, [plan_id=323]\n                     :     :     :              +- *(3) Project [cr_order_number#127L]\n                     :     :     :                 +- *(3) ColumnarToRow\n                     :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_order_number#127L,cr_returned_date_sk#138] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cr_order_number:bigint>\n                     :     :     +- BroadcastQueryStage 3\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=343]\n                     :     :           +- *(4) Project [d_date_sk#39]\n                     :     :              +- *(4) Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n                     :     :                 +- *(4) ColumnarToRow\n                     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     +- BroadcastQueryStage 4\n                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=364]\n                     :           +- *(5) Project [ca_address_sk#67]\n                     :              +- *(5) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n                     :                 +- *(5) ColumnarToRow\n                     :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                     +- BroadcastQueryStage 5\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=385]\n                           +- *(6) Project [cc_call_center_sk#80]\n                              +- *(6) Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n                                 +- *(6) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 512,
        "inputRowCount" : 16
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 1280 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 37,
        "TotalTasksDurationInMs" : 31,
        "IOBytes" : {
          "Total" : 1200,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1200,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1015110989,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246]\n+- Project [ca_address_sk#67]\n   +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n      +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2095344881,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [ca_address_sk#67] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [buf#251] Results [1]: [buf#263] "
          },
          "1" : {
            "sign" : -1550906094,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#67] Input [2]: [ca_address_sk#67, ca_state#75] "
          },
          "2" : {
            "sign" : 1127923575,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#67, ca_state#75] Condition : ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67)) "
          },
          "3" : {
            "sign" : -596082683,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#67, ca_state#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n+- Project [ca_address_sk#67]\n   +- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3579,
        "TotalTasksDurationInMs" : 15000,
        "IOBytes" : {
          "Total" : 4832884,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -441359742,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2879882480,
                "rowCount" : 143994124
              },
              "compileTime" : {
                "sizeInBytes" : 2879882480,
                "rowCount" : 143994124
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_warehouse_sk#214, cs_order_number#217L] "
          },
          "1" : {
            "sign" : -1149100204,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29950777792,
                "rowCount" : 143994124
              },
              "compileTime" : {
                "sizeInBytes" : 29950777792,
                "rowCount" : 143994124
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#201, cs_ship_date_sk#202, cs_bill_customer_sk#203, cs_bill_cdemo_sk#204, cs_bill_hdemo_sk#205, cs_bill_addr_sk#206, cs_ship_customer_sk#207, cs_ship_cdemo_sk#208, cs_ship_hdemo_sk#209, cs_ship_addr_sk#210, cs_call_center_sk#211, cs_catalog_page_sk#212, cs_ship_mode_sk#213, cs_warehouse_sk#214, cs_item_sk#215, cs_promo_sk#216, cs_order_number#217L, cs_quantity#218, cs_wholesale_cost#219, cs_list_price#220, cs_sales_price#221, cs_ext_discount_amt#222, cs_ext_sales_price#223, cs_ext_wholesale_cost#224, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalRelation",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_warehouse_sk#214, cs_order_number#217L]\n+- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#201,cs_ship_date_sk#202,cs_bill_customer_sk#203,cs_bill_cdemo_sk#204,cs_bill_hdemo_sk#205,cs_bill_addr_sk#206,cs_ship_customer_sk#207,cs_ship_cdemo_sk#208,cs_ship_hdemo_sk#209,cs_ship_addr_sk#210,cs_call_center_sk#211,cs_catalog_page_sk#212,cs_ship_mode_sk#213,cs_warehouse_sk#214,cs_item_sk#215,cs_promo_sk#216,cs_order_number#217L,cs_quantity#218,cs_wholesale_cost#219,cs_list_price#220,cs_sales_price#221,cs_ext_discount_amt#222,cs_ext_sales_price#223,cs_ext_wholesale_cost#224,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 995781655,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2879882480,
            "rowCount" : 143994124,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cs_warehouse_sk#214, cs_order_number#217L] Input [3]: [cs_warehouse_sk#214, cs_order_number#217L, cs_sold_date_sk#234] "
          },
          "1" : {
            "sign" : 812772457,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2879882480,
            "rowCount" : 143994124,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [3]: [cs_warehouse_sk#214, cs_order_number#217L, cs_sold_date_sk#234] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales] ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_warehouse_sk#214, cs_order_number#217L]\n+- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_warehouse_sk#214,cs_order_number#217L,cs_sold_date_sk#234] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sa..., PartitionFilters: [], PushedFilters: [], ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2879882480,
        "inputRowCount" : 143994124
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 20037,
        "TotalTasksDurationInMs" : 100953,
        "IOBytes" : {
          "Total" : 1179527280,
          "Details" : {
            "IR" : 282369338,
            "IW" : 0,
            "SR" : 0,
            "SW" : 897157942
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 63313160,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 208360,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0) AS bloomFilter#246], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1640964883,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 208360,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#263] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)#245] Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)#245 AS bloomFilter#246] "
          },
          "1" : {
            "sign" : -1869205563,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#263] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[bloomFilter#246])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=429]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#67, 42), 17957, 333110, 0, 0)], output=[buf#263])\n         +- *(1) Project [ca_address_sk#67]\n            +- *(1) Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 208360,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 44353 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 4511,
        "TotalTasksDurationInMs" : 4498,
        "IOBytes" : {
          "Total" : 185,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 185,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1785991692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 215484,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#67] "
          },
          "1" : {
            "sign" : 1359045615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              },
              "compileTime" : {
                "sizeInBytes" : 4417422,
                "rowCount" : 17957
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67)) "
          },
          "2" : {
            "sign" : -700350559,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#67, ca_address_id#68, ca_street_number#69, ca_street_name#70, ca_street_type#71, ca_suite_number#72, ca_city#73, ca_county#74, ca_state#75, ca_zip#76, ca_country#77, ca_gmt_offset#78, ca_location_type#79], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#67]\n+- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_address_id#68,ca_street_number#69,ca_street_name#70,ca_street_type#71,ca_suite_number#72,ca_city#73,ca_county#74,ca_state#75,ca_zip#76,ca_country#77,ca_gmt_offset#78,ca_location_type#79] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1550906094,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#67] Input [2]: [ca_address_sk#67, ca_state#75] "
          },
          "1" : {
            "sign" : 1127923575,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#67, ca_state#75] Condition : ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67)) "
          },
          "2" : {
            "sign" : -596082683,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 215484,
            "rowCount" : 17957,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#67, ca_state#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#67]\n+- Filter ((isnotnull(ca_state#75) AND (ca_state#75 = GA)) AND isnotnull(ca_address_sk#67))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#67,ca_state#75] Batched: true, DataFilters: [isnotnull(ca_state#75), (ca_state#75 = GA), isnotnull(ca_address_sk#67)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 215484,
        "inputRowCount" : 17957
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 8244,
        "TotalTasksDurationInMs" : 28382,
        "IOBytes" : {
          "Total" : 4873776,
          "Details" : {
            "IR" : 4832884,
            "IW" : 0,
            "SR" : 0,
            "SW" : 40892
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 525096699,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#39] "
          },
          "1" : {
            "sign" : -255835211,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39)) "
          },
          "2" : {
            "sign" : 1227723257,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#39, d_date_id#40, d_date#41, d_month_seq#42, d_week_seq#43, d_quarter_seq#44, d_year#45, d_dow#46, d_moy#47, d_dom#48, d_qoy#49, d_fy_year#50, d_fy_quarter_seq#51, d_fy_week_seq#52, d_day_name#53, d_quarter_name#54, d_holiday#55, d_weekend#56, d_following_holiday#57, d_first_dom#58, d_last_dom#59, d_same_day_ly#60, d_same_day_lq#61, d_current_day#62, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#39]\n+- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -336105709,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#39] Input [2]: [d_date_sk#39, d_date#41] "
          },
          "1" : {
            "sign" : -739820807,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#39, d_date#41] Condition : (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39)) "
          },
          "2" : {
            "sign" : 858765509,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#39, d_date#41] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#39]\n+- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 3192,
        "TotalTasksDurationInMs" : 3170,
        "IOBytes" : {
          "Total" : 172043,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 305
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -823124211,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 312,
                "rowCount" : 26
              },
              "compileTime" : {
                "sizeInBytes" : 312,
                "rowCount" : 26
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cc_call_center_sk#80] "
          },
          "1" : {
            "sign" : 444328129,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13858,
                "rowCount" : 26
              },
              "compileTime" : {
                "sizeInBytes" : 13858,
                "rowCount" : 26
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80)) "
          },
          "2" : {
            "sign" : 848864422,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 15990,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cc_call_center_sk#80, cc_call_center_id#81, cc_rec_start_date#82, cc_rec_end_date#83, cc_closed_date_sk#84, cc_open_date_sk#85, cc_name#86, cc_class#87, cc_employees#88, cc_sq_ft#89, cc_hours#90, cc_manager#91, cc_mkt_id#92, cc_mkt_class#93, cc_mkt_desc#94, cc_market_manager#95, cc_division#96, cc_division_name#97, cc_company#98, cc_company_name#99, cc_street_number#100, cc_street_name#101, cc_street_type#102, cc_suite_number#103, ... 7 more fields], `spark_catalog`.`tpcds_100`.`call_center`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cc_call_center_sk#80]\n+- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n   +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_call_center_id#81,cc_rec_start_date#82,cc_rec_end_date#83,cc_closed_date_sk#84,cc_open_date_sk#85,cc_name#86,cc_class#87,cc_employees#88,cc_sq_ft#89,cc_hours#90,cc_manager#91,cc_mkt_id#92,cc_mkt_class#93,cc_mkt_desc#94,cc_market_manager#95,cc_division#96,cc_division_name#97,cc_company#98,cc_company_name#99,cc_street_number#100,cc_street_name#101,cc_street_type#102,cc_suite_number#103,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1348567416,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cc_call_center_sk#80] Input [2]: [cc_call_center_sk#80, cc_county#105] "
          },
          "1" : {
            "sign" : 653545044,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cc_call_center_sk#80, cc_county#105] Condition : (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80)) "
          },
          "2" : {
            "sign" : 1710533071,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.call_center Output [2]: [cc_call_center_sk#80, cc_county#105] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center] PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNotNull(cc_call_center_sk)] ReadSchema: struct<cc_call_center_sk:int,cc_county:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.call_center",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cc_call_center_sk#80]\n+- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n   +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 312,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 3801,
        "TotalTasksDurationInMs" : 3745,
        "IOBytes" : {
          "Total" : 13451,
          "Details" : {
            "IR" : 13266,
            "IW" : 0,
            "SR" : 0,
            "SW" : 185
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 344922425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0) AS bloomFilter#249]\n+- Project [cc_call_center_sk#80]\n   +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n      +- Relation spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_call_center_id#81,cc_rec_start_date#82,cc_rec_end_date#83,cc_closed_date_sk#84,cc_open_date_sk#85,cc_name#86,cc_class#87,cc_employees#88,cc_sq_ft#89,cc_hours#90,cc_manager#91,cc_mkt_id#92,cc_mkt_class#93,cc_mkt_desc#94,cc_market_manager#95,cc_division#96,cc_division_name#97,cc_company#98,cc_company_name#99,cc_street_number#100,cc_street_name#101,cc_street_type#102,cc_suite_number#103,... 7 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1379048488,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [cc_call_center_sk#80] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)] Aggregate Attributes [1]: [buf#253] Results [1]: [buf#264] "
          },
          "1" : {
            "sign" : -1348567416,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cc_call_center_sk#80] Input [2]: [cc_call_center_sk#80, cc_county#105] "
          },
          "2" : {
            "sign" : 653545044,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cc_call_center_sk#80, cc_county#105] Condition : (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80)) "
          },
          "3" : {
            "sign" : 1710533071,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 312,
            "rowCount" : 26,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.call_center Output [2]: [cc_call_center_sk#80, cc_county#105] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center] PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNotNull(cc_call_center_sk)] ReadSchema: struct<cc_call_center_sk:int,cc_county:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.call_center",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cc_call_center_sk#80, 42), 26, 836, 0, 0)], output=[buf#264])\n+- Project [cc_call_center_sk#80]\n   +- Filter (cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County) AND isnotnull(cc_call_center_sk#80))\n      +- FileScan parquet spark_catalog.tpcds_100.call_center[cc_call_center_sk#80,cc_county#105] Batched: true, DataFilters: [cc_county#105 IN (Daviess County,Franklin Parish,Barrow County,Luce County,Fairfield County), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/call_center], PartitionFilters: [], PushedFilters: [In(cc_county, [Barrow County,Daviess County,Fairfield County,Franklin Parish,Luce County]), IsNo..., ReadSchema: struct<cc_call_center_sk:int,cc_county:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 312,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 3267,
        "TotalTasksDurationInMs" : 3261,
        "IOBytes" : {
          "Total" : 13266,
          "Details" : {
            "IR" : 13266,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1609327338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0) AS bloomFilter#243]\n+- Project [d_date_sk#39]\n   +- Filter ((isnotnull(d_date#41) AND ((d_date#41 >= 1999-04-01) AND (d_date#41 <= 1999-05-31))) AND isnotnull(d_date_sk#39))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date_id#40,d_date#41,d_month_seq#42,d_week_seq#43,d_quarter_seq#44,d_year#45,d_dow#46,d_moy#47,d_dom#48,d_qoy#49,d_fy_year#50,d_fy_quarter_seq#51,d_fy_week_seq#52,d_day_name#53,d_quarter_name#54,d_holiday#55,d_weekend#56,d_following_holiday#57,d_first_dom#58,d_last_dom#59,d_same_day_ly#60,d_same_day_lq#61,d_current_day#62,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1861573644,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [d_date_sk#39] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)] Aggregate Attributes [1]: [buf#252] Results [1]: [buf#262] "
          },
          "1" : {
            "sign" : -336105709,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#39] Input [2]: [d_date_sk#39, d_date#41] "
          },
          "2" : {
            "sign" : -739820807,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#39, d_date#41] Condition : (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39)) "
          },
          "3" : {
            "sign" : 858765509,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#39, d_date#41] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(d_date_sk#39, 42), 60, 1825, 0, 0)], output=[buf#262])\n+- Project [d_date_sk#39]\n   +- Filter (((isnotnull(d_date#41) AND (d_date#41 >= 1999-04-01)) AND (d_date#41 <= 1999-05-31)) AND isnotnull(d_date_sk#39))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#39,d_date#41] Batched: true, DataFilters: [isnotnull(d_date#41), (d_date#41 >= 1999-04-01), (d_date#41 <= 1999-05-31), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-04-01), LessThanOrEqual(d_date,1999-05-31), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 3471,
        "TotalTasksDurationInMs" : 3463,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226614608,
  "SQLEndTimeInMs" : 1702226657030,
  "Objectives" : {
    "DurationInMs" : 42422,
    "IOBytes" : {
      "Total" : 4132052121,
      "Details" : {
        "IR" : 2169744631,
        "IW" : 0,
        "SR" : 981153745,
        "SW" : 981153745
      }
    }
  }
}
