{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -403456421,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2770325240,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] "
        },
        "12" : {
          "sign" : -1490269513,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] "
        },
        "8" : {
          "sign" : 1323456804,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 123082697307,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
        },
        "19" : {
          "sign" : 757488456,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 905486313,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 22512,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#108, s_store_id#109, s_store_name#113] "
        },
        "4" : {
          "sign" : 1023357946,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 407690741830,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
        },
        "40" : {
          "sign" : 369007081,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 266910,
          "rowCount" : 1085,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (d_year#193 IN (1999,2000,2001) AND isnotnull(d_date_sk#187)) "
        },
        "15" : {
          "sign" : 1397900441,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 38129799488,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#233 [ss_sold_date_sk#25]) "
        },
        "11" : {
          "sign" : 12440459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 50844652017,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
        },
        "9" : {
          "sign" : -256700262,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 127705521619,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
        },
        "33" : {
          "sign" : 15522791,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#159, d_date_id#160, d_date#161, d_month_seq#162, d_week_seq#163, d_quarter_seq#164, d_year#165, d_dow#166, d_moy#167, d_dom#168, d_qoy#169, d_fy_year#170, d_fy_quarter_seq#171, d_fy_week_seq#172, d_day_name#173, d_quarter_name#174, d_holiday#175, d_weekend#176, d_following_holiday#177, d_first_dom#178, d_last_dom#179, d_same_day_ly#180, d_same_day_lq#181, d_current_day#182, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 56198239,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#137, i_item_id#138, i_rec_start_date#139, i_rec_end_date#140, i_item_desc#141, i_current_price#142, i_wholesale_cost#143, i_brand_id#144, i_brand#145, i_class_id#146, i_class#147, i_category_id#148, i_category#149, i_manufact_id#150, i_manufact#151, i_size#152, i_formulation#153, i_color#154, i_units#155, i_container#156, i_manager_id#157, i_product_name#158], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -86908418,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 754762260,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] "
        },
        "37" : {
          "sign" : -897865504,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651732864,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#235 [cs_sold_date_sk#79]) "
        },
        "13" : {
          "sign" : 2119247237,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
        },
        "24" : {
          "sign" : 1662377663,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#108) "
        },
        "35" : {
          "sign" : -172713351,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#187) "
        },
        "16" : {
          "sign" : -628374504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -709258595,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 439510507046,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
        },
        "10" : {
          "sign" : 2068753041,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 49695620333,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
        },
        "21" : {
          "sign" : 753925474,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#137) "
        },
        "32" : {
          "sign" : -1412723334,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 72078,
          "rowCount" : 293,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 7)) AND (d_year#165 = 1999))) AND isnotnull(d_date_sk#159)) "
        },
        "6" : {
          "sign" : -824894638,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 72623132945,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
        },
        "36" : {
          "sign" : -893563770,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3421353792,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79] "
        },
        "1" : {
          "sign" : -2130619701,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -507245543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13020,
          "rowCount" : 1085,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#187] "
        },
        "17" : {
          "sign" : -1212501152,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
        },
        "25" : {
          "sign" : -1717782204,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#108, s_store_id#109, s_rec_start_date#110, s_rec_end_date#111, s_closed_date_sk#112, s_store_name#113, s_number_employees#114, s_floor_space#115, s_hours#116, s_manager#117, s_market_id#118, s_geography_class#119, s_market_desc#120, s_market_manager#121, s_division_id#122, s_division_name#123, s_company_id#124, s_company_name#125, s_street_number#126, s_street_name#127, s_street_type#128, s_suite_number#129, s_city#130, s_county#131, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -690548450,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9030741984,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] "
        },
        "31" : {
          "sign" : -1180363541,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3516,
          "rowCount" : 293,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#159] "
        },
        "0" : {
          "sign" : 500666604,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 11200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1585649225,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31212000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#137, i_item_id#138, i_item_desc#141] "
        },
        "27" : {
          "sign" : 1211443048,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 970408620,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#159) "
        },
        "2" : {
          "sign" : -1321644650,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -2002916628,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : -223261284,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 18450,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80)) "
        },
        "30" : {
          "sign" : 58525475,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -428075251,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 80962631465,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
        },
        "29" : {
          "sign" : 1881041836,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433101696,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#234 [sr_returned_date_sk#45]) "
        },
        "41" : {
          "sign" : 1567725832,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#187, d_date_id#188, d_date#189, d_month_seq#190, d_week_seq#191, d_quarter_seq#192, d_year#193, d_dow#194, d_moy#195, d_dom#196, d_qoy#197, d_fy_year#198, d_fy_quarter_seq#199, d_fy_week_seq#200, d_day_name#201, d_quarter_name#202, d_holiday#203, d_weekend#204, d_following_holiday#205, d_first_dom#206, d_last_dom#207, d_same_day_ly#208, d_same_day_lq#209, d_current_day#210, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 1185495775,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 431555565742,
          "rowCount" : 1988735326,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#0L, sum(sr_return_quantity#35) AS store_returns_quantity#1L, sum(cs_quantity#63) AS catalog_sales_quantity#2L] "
        },
        "28" : {
          "sign" : 535232091,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 858275424,
          "rowCount" : 26821107,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Join",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#0L, sum(sr_return_quantity#35) AS store_returns_quantity#1L, sum(cs_quantity#63) AS catalog_sales_quantity#2L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#233 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- Project [d_date_sk#80]\n               :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n               :     :     :        +- Filter isnotnull(i_item_sk#137)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n               :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n               :     :        +- Filter isnotnull(s_store_sk#108)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#159)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#234 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#159]\n               :           :     :     +- Filter (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 7)) AND (d_year#165 = 1999))) AND isnotnull(d_date_sk#159))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#159,d_date_id#160,d_date#161,d_month_seq#162,d_week_seq#163,d_quarter_seq#164,d_year#165,d_dow#166,d_moy#167,d_dom#168,d_qoy#169,d_fy_year#170,d_fy_quarter_seq#171,d_fy_week_seq#172,d_day_name#173,d_quarter_name#174,d_holiday#175,d_weekend#176,d_following_holiday#177,d_first_dom#178,d_last_dom#179,d_same_day_ly#180,d_same_day_lq#181,d_current_day#182,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- Project [d_date_sk#159]\n               :              +- Filter (((isnotnull(d_moy#167) AND isnotnull(d_year#165)) AND (((d_moy#167 >= 4) AND (d_moy#167 <= 7)) AND (d_year#165 = 1999))) AND isnotnull(d_date_sk#159))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#159,d_date_id#160,d_date#161,d_month_seq#162,d_week_seq#163,d_quarter_seq#164,d_year#165,d_dow#166,d_moy#167,d_dom#168,d_qoy#169,d_fy_year#170,d_fy_quarter_seq#171,d_fy_week_seq#172,d_day_name#173,d_quarter_name#174,d_holiday#175,d_weekend#176,d_following_holiday#177,d_first_dom#178,d_last_dom#179,d_same_day_ly#180,d_same_day_lq#181,d_current_day#182,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#187)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#235 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#187]\n                     :     :     +- Filter (d_year#193 IN (1999,2000,2001) AND isnotnull(d_date_sk#187))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#187,d_date_id#188,d_date#189,d_month_seq#190,d_week_seq#191,d_quarter_seq#192,d_year#193,d_dow#194,d_moy#195,d_dom#196,d_qoy#197,d_fy_year#198,d_fy_quarter_seq#199,d_fy_week_seq#200,d_day_name#201,d_quarter_name#202,d_holiday#203,d_weekend#204,d_following_holiday#205,d_first_dom#206,d_last_dom#207,d_same_day_ly#208,d_same_day_lq#209,d_current_day#210,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- Project [d_date_sk#187]\n                        +- Filter (d_year#193 IN (1999,2000,2001) AND isnotnull(d_date_sk#187))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#187,d_date_id#188,d_date#189,d_month_seq#190,d_week_seq#191,d_quarter_seq#192,d_year#193,d_dow#194,d_moy#195,d_dom#196,d_qoy#197,d_fy_year#198,d_fy_quarter_seq#199,d_fy_week_seq#200,d_day_name#201,d_quarter_name#202,d_holiday#203,d_weekend#204,d_following_holiday#205,d_first_dom#206,d_last_dom#207,d_same_day_ly#208,d_same_day_lq#209,d_current_day#210,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 75306294440,
      "inputRowCount" : 446535720
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 798816553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 940067496709200,
            "rowCount" : 9400674967092,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "5" : {
            "sign" : 1978523806,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1090478296182672,
            "rowCount" : 9400674967092,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "6" : {
            "sign" : -582040436,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23723784,
            "rowCount" : 110017,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : -1388806069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1052875596314304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1279173110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -44488800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1052875596314304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2734319232,
            "rowCount" : 85447476,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "3" : {
            "sign" : 1009955959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1052875596314304,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- LogicalQueryStage Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35], ShuffleQueryStage 9\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2758043016,
        "inputRowCount" : 85557493
      },
      "PD" : {
        "2" : [ 7021524, 7049790, 7053184, 7056122, 7056122, 7040520, 7043458, 7024462, 7027856, 7068786, 7015192, 7034188, 7018908, 7045555, 7011091, 6992095, 7056122, 7037126, 7011798, 7043458, 7033669, 7043458, 7024462, 7008153, 7036419, 7056122, 6992802, 7049790, 7030087, 7021524, 7015192, 7011091, 7015192, 7049790, 7011091, 7028634, 7002528, 7027149, 7027149, 7011798, 7017423, 7043458, 7068786, 7043458, 7043458, 7042751, 7024462, 7049083, 7014485, 7040520, 7030794, 7030087, 7027856, 7011798, 7036419, 7015192, 7039813, 7011798, 7084325, 7024462, 7056122, 7087782, 7053962, 7011798, 7046852, 7023755, 7034188, 7027149, 7037126, 7024462, 7004759, 7018130, 7018351, 7049790, 6996196, 7030794, 6999134, 7037126, 7033481, 7046852, 7031572, 7049790, 7040520, 7018586, 7036419, 7011798, 7037126, 7024462, 7014485, 7023755, 7049790, 7011091, 7027400, 6999134, 7063232, 7030794, 7008860, 7037126, 7049083, 7030087, 7027856, 7018130, 7056122, 6998427, 7049083, 7049083, 7044236, 7049790, 7030794, 7031384, 7009638, 7049083, 6986470, 7034966, 7043458, 7054434, 7011091, 7030794, 7031572, 7024462, 7037126, 7065141, 7062454, 7020817, 7043458, 7011091, 7037126, 7027856, 7018130, 7020817, 7027149, 7053184, 7033481, 7008860, 7043458, 7021524, 7024462, 7043458, 7011091, 6999134, 7005466, 7004116, 7008860, 7043458, 7039813, 7018130, 7030794, 7024462, 7030794, 7021524, 7005466, 7030087, 7018130, 7056122, 7043458, 7011091, 7018130, 7030794, 7049790, 7024462, 7037126, 7055415, 7053184, 7024462, 7039813, 7030794, 7049790, 6998427, 7042751, 7023755, 7015192, 7030794, 7030794, 7030794, 7043458, 7030794, 7056122, 7033481, 7046145, 7040520, 7034188, 7020817, 7043458, 7023755, 7043458, 7018130, 7017423, 7049790, 7040520, 7024462, 7037126, 7030794, 7021524, 7004759, 7037126, 7024462, 7049790, 7043458, 7023755, 7001821 ],
        "5" : [ 78437, 80950, 72919, 82328, 81331, 75075, 80368, 80600, 72326, 73272, 72019, 73465, 80243, 75031, 76803, 77523, 79511, 81853, 73033, 78865, 75550, 78239, 79697, 74792, 75189, 74411, 81068, 73158, 80764, 76221, 80475, 78181, 76359, 81715, 74297, 68848, 76944, 76567, 74667, 78990, 80475, 76328, 76335, 74667, 80881, 73741, 81193, 81590, 77706, 81075, 78312, 74297, 78990, 69846, 74286, 79434, 71523, 73590, 79697, 80337, 80337, 76359, 79434, 76359, 77385, 79559, 78437, 71762, 74297, 80230, 79822, 78959, 78959, 80337, 75550, 74411, 75806, 78959, 81213, 75189, 73704, 81853, 78990, 80350, 67412, 76328, 78306, 74411, 77456, 76096, 76803, 82328, 70280, 81728, 75075, 78959, 79091, 79572, 80192, 86000, 74338, 86143, 74843, 78990, 75789, 74199, 78209, 77706, 81728, 74843, 70745, 80054, 80600, 74536, 74869, 79503, 74950, 82230, 78444, 83106, 77474, 73811, 85862, 78125, 75813, 81594, 85511, 83288, 80475, 73579, 82999, 77706, 79572, 75813, 72123, 83231, 78056, 76122, 74172, 72212, 75733, 76096, 73414, 81331, 77298, 76830, 80812, 83706, 82328, 76705, 77184, 73061, 73559, 72212, 78727, 76442, 71683, 80243, 80014, 75550, 74994, 82854, 81213, 82591, 72919, 75972, 77561, 76473, 71905, 73922, 76484, 76986, 67813, 76944, 79559, 75189, 79697, 70059, 75806, 79434, 76442, 78990, 80337, 72238, 76096, 78125, 73730, 77474, 77641, 78437, 78472, 75425, 83106, 75716, 74200, 84484, 71240, 78959, 78437, 72451 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226859561,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11023,
        "IOBytes" : {
          "Total" : 1353084328,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1353076362,
            "SW" : 7966
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -627931841,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 120800832,
            "rowCount" : 2516684,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12], ShuffleQueryStage 7 "
          },
          "8" : {
            "sign" : -1525383776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 22289927918976000,
            "rowCount" : 206388221472000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "4" : {
            "sign" : 1307423816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 198873532600,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 795656066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39018668736000,
            "rowCount" : 513403536000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 1621523546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 23941033690752000,
            "rowCount" : 206388221472000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "13" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : -1695555807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 230693297816,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : 1319683216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 36965054592000,
            "rowCount" : 513403536000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
          },
          "6" : {
            "sign" : -1593321073,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 578589293195038344960000,
            "rowCount" : 5563358588413830240000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : 656947348,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : -1731875947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 870563775,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1668940628,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 712109899316970270720000,
            "rowCount" : 5563358588413830240000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -844804568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12], ShuffleQueryStage 7\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3677938548,
        "inputRowCount" : 168193143
      },
      "PD" : {
        "3" : [ 318776, 328861, 361755, 324827, 359756, 337538, 355316, 322810, 297135, 339555, 357315, 339555, 331081, 332895, 328861, 326844, 324827, 337335, 341775, 320793, 333098, 341775, 320793, 312725, 361755, 337538, 331081, 333098, 303004, 337335, 337538, 314742, 361755, 335115, 335318, 339758, 333301, 339555, 324827, 330878, 324827, 324827, 331081, 330878, 324827, 332895, 350655, 332895, 312725, 298970, 371298, 333301, 337538, 333301, 329064, 343995, 346215, 331081, 337538, 335318, 343995, 335318, 339555, 337335, 295482, 332895, 331081, 323013, 346215, 350655, 339555, 322810, 339961, 346418, 318776, 346215, 312725, 363975, 337335, 329064, 331081, 331081, 330878, 326844, 357315, 328861, 337538, 331081, 352875, 332895, 348435, 361755, 333098, 306856, 350655, 359535, 329064, 331081, 341978, 316759, 337335, 355095, 326844, 335115, 337335, 337335, 357315, 352875, 298970, 331081, 320793, 327047, 324827, 339555, 339555, 339758, 330878, 333098, 329064, 346215, 324827, 343995, 350655, 339758, 343995, 335115, 328861, 341775, 343995, 322810, 337538, 359535, 322810, 328861, 314742, 320793, 314742, 359535, 337335, 346215, 348435, 322810, 333098, 359756, 333098, 341775, 335115, 333098, 335318, 341775, 320793, 305021, 343995, 350655, 337538, 331081, 339555, 318776, 343995, 304839, 335318, 361976, 352875, 357536, 333098, 335115, 341775, 335115, 337741, 337335, 343995, 350655, 335115, 346215, 337335, 332895, 306856, 314742, 332895, 348435, 359535, 312907, 346215, 320793, 341775, 337335, 333098, 328861, 329064, 333301, 335318, 324827, 326844, 298970, 337335, 333098, 324827, 314742, 330878, 363975 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 93,
        "FinishedTasksTotalTimeInMs" : 138209.0,
        "FinishedTasksDistributionInMs" : [ 197.0, 674.0, 790.0, 1442.0, 6499.0 ]
      },
      "StartTimeInMs" : 1702226840235,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 30349,
        "IOBytes" : {
          "Total" : 4049360970,
          "Details" : {
            "IR" : 566156501,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 1700630625
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1262203691,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 4144,
            "rowCount" : 37,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1874773004,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7440,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1229774293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7440,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 2079757240,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 7440,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L], HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(ss_quantity#12), sum(sr_return_quantity#35), sum(cs_quantity#63)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L], HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(ss_quantity#12), sum(sr_return_quantity#35), sum(cs_quantity#63)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7440,
        "inputRowCount" : 37
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226870306,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 278,
        "IOBytes" : {
          "Total" : 7966,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7966,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 935476460,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 123082697307,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -1558164986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 25209726080923035499519990,
            "rowCount" : 122974273565478221948878,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61454840,
            "rowCount" : 1536371,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1766416097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27177314457970687050702038,
            "rowCount" : 122974273565478221948878,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 1410371911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 185549500138727021,
            "rowCount" : 887796651381469,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : -1294594996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 176740313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -25895121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1473010212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 206856619771882277,
            "rowCount" : 887796651381469,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -1621873800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 125914477387,
        "inputRowCount" : 717905672
      },
      "PD" : {
        "1" : [ 186520, 182897, 184230, 180295, 185205, 182274, 183336, 182690, 185985, 180340, 181493, 182231, 181074, 183367, 184266, 185083, 178799, 184191, 184171, 186009, 180572, 186449, 186818, 186783, 186213, 182213, 184108, 184491, 185548, 185881, 186046, 180489, 184545, 188873, 181732, 180279, 184384, 183077, 185045, 184664, 184126, 180438, 181713, 186980, 179283, 180529, 182090, 182015, 185161, 181515, 184201, 183150, 183865, 181314, 180385, 185981, 182012, 182833, 183279, 187500, 184281, 184293, 184293, 183488, 182699, 184922, 184088, 183751, 183990, 182809, 186725, 184155, 184085, 185961, 181011, 184916, 184784, 183447, 183303, 184341, 184286, 180497, 187100, 183009, 184404, 189314, 185441, 180835, 183091, 187680, 184209, 183260, 180758, 182548, 184643, 181874, 184443, 182339, 176565, 184422, 184203, 181074, 180960, 186239, 185127, 184066, 182315, 182436, 183927, 186162, 186313, 186820, 187426, 187165, 184070, 186042, 183932, 181836, 185582, 183555, 187046, 183484, 183125, 185247, 181615, 184293, 181860, 179040, 184361, 178701, 183205, 179936, 181412, 180411, 184426, 179156, 183932, 183214, 184066, 188234, 186326, 180458, 178501, 188462, 182553, 179245, 186520, 189116, 184768, 185850, 182730, 177816, 182915, 183468, 185726, 177883, 180654, 185782, 181459, 184364, 184387, 185506, 182583, 184791, 184387, 187794, 184489, 184554, 183328, 182688, 181236, 186382, 185831, 182349, 182250, 188521, 180313, 181541, 182414, 184529, 187099, 184087, 181290, 187511, 184482, 181452, 185507, 181717, 185209, 184422, 188561, 183570, 184723, 184545, 182404, 180728, 184317, 184603, 178345, 185006 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226845636,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 24948,
        "IOBytes" : {
          "Total" : 2109847159,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 327273315
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 935476460,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 123082697307,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -1558164986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15551296527668680040560020,
            "rowCount" : 75859983061798439222244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61454840,
            "rowCount" : 1536371,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1766416097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16765056256657455068115924,
            "rowCount" : 75859983061798439222244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2734319232,
            "rowCount" : 85447476,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 1410371911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 185549500138727021,
            "rowCount" : 887796651381469,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : -1294594996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 176740313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -25895121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1473010212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 206856619771882277,
            "rowCount" : 887796651381469,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -1621873800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7188076720494600,
            "rowCount" : 33124777513800,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 125878471379,
        "inputRowCount" : 664836886
      },
      "PD" : {
        "2" : [ 7021524, 7049790, 7053184, 7056122, 7056122, 7040520, 7043458, 7024462, 7027856, 7068786, 7015192, 7034188, 7018908, 7045555, 7011091, 6992095, 7056122, 7037126, 7011798, 7043458, 7033669, 7043458, 7024462, 7008153, 7036419, 7056122, 6992802, 7049790, 7030087, 7021524, 7015192, 7011091, 7015192, 7049790, 7011091, 7028634, 7002528, 7027149, 7027149, 7011798, 7017423, 7043458, 7068786, 7043458, 7043458, 7042751, 7024462, 7049083, 7014485, 7040520, 7030794, 7030087, 7027856, 7011798, 7036419, 7015192, 7039813, 7011798, 7084325, 7024462, 7056122, 7087782, 7053962, 7011798, 7046852, 7023755, 7034188, 7027149, 7037126, 7024462, 7004759, 7018130, 7018351, 7049790, 6996196, 7030794, 6999134, 7037126, 7033481, 7046852, 7031572, 7049790, 7040520, 7018586, 7036419, 7011798, 7037126, 7024462, 7014485, 7023755, 7049790, 7011091, 7027400, 6999134, 7063232, 7030794, 7008860, 7037126, 7049083, 7030087, 7027856, 7018130, 7056122, 6998427, 7049083, 7049083, 7044236, 7049790, 7030794, 7031384, 7009638, 7049083, 6986470, 7034966, 7043458, 7054434, 7011091, 7030794, 7031572, 7024462, 7037126, 7065141, 7062454, 7020817, 7043458, 7011091, 7037126, 7027856, 7018130, 7020817, 7027149, 7053184, 7033481, 7008860, 7043458, 7021524, 7024462, 7043458, 7011091, 6999134, 7005466, 7004116, 7008860, 7043458, 7039813, 7018130, 7030794, 7024462, 7030794, 7021524, 7005466, 7030087, 7018130, 7056122, 7043458, 7011091, 7018130, 7030794, 7049790, 7024462, 7037126, 7055415, 7053184, 7024462, 7039813, 7030794, 7049790, 6998427, 7042751, 7023755, 7015192, 7030794, 7030794, 7030794, 7043458, 7030794, 7056122, 7033481, 7046145, 7040520, 7034188, 7020817, 7043458, 7023755, 7043458, 7018130, 7017423, 7049790, 7040520, 7024462, 7037126, 7030794, 7021524, 7004759, 7037126, 7024462, 7049790, 7043458, 7023755, 7001821 ],
        "1" : [ 186520, 182897, 184230, 180295, 185205, 182274, 183336, 182690, 185985, 180340, 181493, 182231, 181074, 183367, 184266, 185083, 178799, 184191, 184171, 186009, 180572, 186449, 186818, 186783, 186213, 182213, 184108, 184491, 185548, 185881, 186046, 180489, 184545, 188873, 181732, 180279, 184384, 183077, 185045, 184664, 184126, 180438, 181713, 186980, 179283, 180529, 182090, 182015, 185161, 181515, 184201, 183150, 183865, 181314, 180385, 185981, 182012, 182833, 183279, 187500, 184281, 184293, 184293, 183488, 182699, 184922, 184088, 183751, 183990, 182809, 186725, 184155, 184085, 185961, 181011, 184916, 184784, 183447, 183303, 184341, 184286, 180497, 187100, 183009, 184404, 189314, 185441, 180835, 183091, 187680, 184209, 183260, 180758, 182548, 184643, 181874, 184443, 182339, 176565, 184422, 184203, 181074, 180960, 186239, 185127, 184066, 182315, 182436, 183927, 186162, 186313, 186820, 187426, 187165, 184070, 186042, 183932, 181836, 185582, 183555, 187046, 183484, 183125, 185247, 181615, 184293, 181860, 179040, 184361, 178701, 183205, 179936, 181412, 180411, 184426, 179156, 183932, 183214, 184066, 188234, 186326, 180458, 178501, 188462, 182553, 179245, 186520, 189116, 184768, 185850, 182730, 177816, 182915, 183468, 185726, 177883, 180654, 185782, 181459, 184364, 184387, 185506, 182583, 184791, 184387, 187794, 184489, 184554, 183328, 182688, 181236, 186382, 185831, 182349, 182250, 188521, 180313, 181541, 182414, 184529, 187099, 184087, 181290, 187511, 184482, 181452, 185507, 181717, 185209, 184422, 188561, 183570, 184723, 184545, 182404, 180728, 184317, 184603, 178345, 185006 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226845651,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 24933,
        "IOBytes" : {
          "Total" : 2109847159,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 327273315
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -872731416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79] "
          },
          "12" : {
            "sign" : -917426445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] "
          },
          "8" : {
            "sign" : -978102100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24134836006578,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 433515840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 91620901512,
            "rowCount" : 3272175054,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] "
          },
          "4" : {
            "sign" : -1686536535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 399735800526,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "40" : {
            "sign" : -1258900059,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1057344,
            "rowCount" : 1096,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#267], BroadcastQueryStage 4 "
          },
          "15" : {
            "sign" : 1285597697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 394972804,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : -1811983528,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25058657480514,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "33" : {
            "sign" : 1434648676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4374771048704,
            "rowCount" : 156241823168,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#267) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "26" : {
            "sign" : 943416939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433101696,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45]) "
          },
          "37" : {
            "sign" : -1639964537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13020,
            "rowCount" : 1085,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#267] "
          },
          "13" : {
            "sign" : 1144358593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : -2069380602,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 117798301944,
            "rowCount" : 3272175054,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#239) "
          },
          "35" : {
            "sign" : 1800006170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79]) "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 1055627144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -2138808228,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "32" : {
            "sign" : -338610786,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3124836463360,
            "rowCount" : 156241823168,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] "
          },
          "6" : {
            "sign" : -516385824,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 71233216525,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "36" : {
            "sign" : -2002916628,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1845986997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1222183879,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#267, d_date_id#268, d_date#269, d_month_seq#270, d_week_seq#271, d_quarter_seq#272, d_year#273, d_dow#274, d_moy#275, d_dom#276, d_qoy#277, d_fy_year#278, d_fy_quarter_seq#279, d_fy_week_seq#280, d_day_name#281, d_quarter_name#282, d_holiday#283, d_weekend#284, d_following_holiday#285, d_first_dom#286, d_last_dom#287, d_same_day_ly#288, d_same_day_lq#289, d_current_day#290, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1212501152,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "25" : {
            "sign" : 449479564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45] "
          },
          "14" : {
            "sign" : -504325498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] "
          },
          "31" : {
            "sign" : 213264769,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049552,
            "rowCount" : 122,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#239], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : -204782148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -1588789038,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 2007558560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 266910,
            "rowCount" : 1085,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267)) "
          },
          "18" : {
            "sign" : -223261284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80)) "
          },
          "30" : {
            "sign" : -694123955,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 624251285,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 79572715045,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "29" : {
            "sign" : -128143552,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 72078,
            "rowCount" : 293,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239)) "
          },
          "3" : {
            "sign" : 983892769,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          },
          "28" : {
            "sign" : 659718580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3516,
            "rowCount" : 293,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#239] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 33,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Join",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#239]\n               :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- LogicalQueryStage Project [d_date_sk#239], BroadcastQueryStage 3\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#267]\n                     :     :     +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- LogicalQueryStage Project [d_date_sk#267], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 75199659308,
        "inputRowCount" : 446317866
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3016.0,
        "FinishedTasksDistributionInMs" : [ 1481.0, 1481.0, 1535.0, 1535.0, 1535.0 ]
      },
      "StartTimeInMs" : 1702226827465,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 43119,
        "IOBytes" : {
          "Total" : 4161532695,
          "Details" : {
            "IR" : 596385007,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 1782573844
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -917426445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 240819786240,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] "
          },
          "8" : {
            "sign" : -978102100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24134836006578,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "19" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "4" : {
            "sign" : 373484692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 399735800526,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : 1285597697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          },
          "11" : {
            "sign" : 394972804,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : -1811983528,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 25058657480514,
            "rowCount" : 115477684242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "22" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "13" : {
            "sign" : 1144358593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 301024732800,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "24" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -1734796513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -2138808228,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
          },
          "21" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "6" : {
            "sign" : 854289091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 71233216525,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : -251302702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1212501152,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "14" : {
            "sign" : -504325498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] "
          },
          "0" : {
            "sign" : -355702623,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -198325644,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#80], BroadcastQueryStage 0 "
          },
          "2" : {
            "sign" : -1806613109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -223261284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80)) "
          },
          "7" : {
            "sign" : -1453920174,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 79572715045,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 1900524326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 447704096589,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- LogicalQueryStage Project [d_date_sk#80], BroadcastQueryStage 0\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 45365293764,
        "inputRowCount" : 440721842
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 8225.0,
        "FinishedTasksDistributionInMs" : [ 424.0, 453.0, 1120.0, 1535.0, 2300.0 ]
      },
      "StartTimeInMs" : 1702226828790,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 41794,
        "IOBytes" : {
          "Total" : 4161438745,
          "Details" : {
            "IR" : 596291057,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 1782573844
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 935476460,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 543088080,
            "rowCount" : 2516684,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -1558164986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33038781961290185966400,
            "rowCount" : 330387819612901859664,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "9" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61454840,
            "rowCount" : 1536371,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1766416097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38324987075096615721024,
            "rowCount" : 330387819612901859664,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2734319232,
            "rowCount" : 85447476,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 1410371911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 402122272631456,
            "rowCount" : 3866560313764,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : -1294594996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 37003435796645008282368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 176740313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -25895121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 37003435796645008282368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1473010212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 494919720161792,
            "rowCount" : 3866560313764,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -1621873800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 37003435796645008282368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], ShuffleQueryStage 8\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3338862152,
        "inputRowCount" : 89500531
      },
      "PD" : {
        "2" : [ 7021524, 7049790, 7053184, 7056122, 7056122, 7040520, 7043458, 7024462, 7027856, 7068786, 7015192, 7034188, 7018908, 7045555, 7011091, 6992095, 7056122, 7037126, 7011798, 7043458, 7033669, 7043458, 7024462, 7008153, 7036419, 7056122, 6992802, 7049790, 7030087, 7021524, 7015192, 7011091, 7015192, 7049790, 7011091, 7028634, 7002528, 7027149, 7027149, 7011798, 7017423, 7043458, 7068786, 7043458, 7043458, 7042751, 7024462, 7049083, 7014485, 7040520, 7030794, 7030087, 7027856, 7011798, 7036419, 7015192, 7039813, 7011798, 7084325, 7024462, 7056122, 7087782, 7053962, 7011798, 7046852, 7023755, 7034188, 7027149, 7037126, 7024462, 7004759, 7018130, 7018351, 7049790, 6996196, 7030794, 6999134, 7037126, 7033481, 7046852, 7031572, 7049790, 7040520, 7018586, 7036419, 7011798, 7037126, 7024462, 7014485, 7023755, 7049790, 7011091, 7027400, 6999134, 7063232, 7030794, 7008860, 7037126, 7049083, 7030087, 7027856, 7018130, 7056122, 6998427, 7049083, 7049083, 7044236, 7049790, 7030794, 7031384, 7009638, 7049083, 6986470, 7034966, 7043458, 7054434, 7011091, 7030794, 7031572, 7024462, 7037126, 7065141, 7062454, 7020817, 7043458, 7011091, 7037126, 7027856, 7018130, 7020817, 7027149, 7053184, 7033481, 7008860, 7043458, 7021524, 7024462, 7043458, 7011091, 6999134, 7005466, 7004116, 7008860, 7043458, 7039813, 7018130, 7030794, 7024462, 7030794, 7021524, 7005466, 7030087, 7018130, 7056122, 7043458, 7011091, 7018130, 7030794, 7049790, 7024462, 7037126, 7055415, 7053184, 7024462, 7039813, 7030794, 7049790, 6998427, 7042751, 7023755, 7015192, 7030794, 7030794, 7030794, 7043458, 7030794, 7056122, 7033481, 7046145, 7040520, 7034188, 7020817, 7043458, 7023755, 7043458, 7018130, 7017423, 7049790, 7040520, 7024462, 7037126, 7030794, 7021524, 7004759, 7037126, 7024462, 7049790, 7043458, 7023755, 7001821 ],
        "4" : [ 1567477, 1602683, 1567477, 1602683, 1567477, 1689018, 1567477, 1689018, 1689018, 1567477, 1689018, 1689018, 1602683, 1567477, 1724224, 1689018, 1689018, 1567477, 1602683, 1567477, 1567477, 1689018, 1689018, 1724224, 1689018, 1567477, 1689018, 1689018, 1689018, 1689018, 1602683, 1567477, 1689018, 1724224, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1724224, 1567477, 1567477, 1602683, 1567477, 1689018, 1689018, 1567477, 1689018, 1567477, 1567477, 1567477, 1689018, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1567477, 1689018, 1689018, 1689018, 1689018, 1689018, 1567477, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1602683, 1567477, 1689018, 1567477, 1689018, 1689018, 1567477, 1602683, 1689018, 1689018, 1602683, 1689018, 1602683, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1602683, 1724224, 1689018, 1689018, 1724224, 1567477, 1724224, 1689018, 1689018, 1567477, 1689018, 1689018, 1689018, 1567477, 1567477, 1567477, 1567477, 1567477, 1689018, 1689018, 1724224, 1689018, 1567477, 1567477, 1567477, 1567477, 1567477, 1689018, 1724224, 1724224, 1689018, 1567477, 1567477, 1567477, 1689018, 1567477, 1689018, 1602683, 1567477, 1567477, 1567477, 1567477, 1689018, 1689018, 1689018, 1602683, 1567477, 1567477, 1602683, 1567477, 1567477, 1567477, 1567477, 1567477, 1567477, 1602683, 1689018, 1689018, 1689018, 1689018, 1724224, 1689018, 1689018, 1724224, 1689018, 1689018, 1567477, 1689018, 1689018, 1724224, 1567477, 1567477, 1567477, 1689018, 1689018, 1724224, 1724224, 1567477, 1567477, 1567477, 1689018, 1689018, 1567477, 1724224, 1689018, 1689018, 1567477, 1567477, 1689018, 1689018 ],
        "1" : [ 186520, 182897, 184230, 180295, 185205, 182274, 183336, 182690, 185985, 180340, 181493, 182231, 181074, 183367, 184266, 185083, 178799, 184191, 184171, 186009, 180572, 186449, 186818, 186783, 186213, 182213, 184108, 184491, 185548, 185881, 186046, 180489, 184545, 188873, 181732, 180279, 184384, 183077, 185045, 184664, 184126, 180438, 181713, 186980, 179283, 180529, 182090, 182015, 185161, 181515, 184201, 183150, 183865, 181314, 180385, 185981, 182012, 182833, 183279, 187500, 184281, 184293, 184293, 183488, 182699, 184922, 184088, 183751, 183990, 182809, 186725, 184155, 184085, 185961, 181011, 184916, 184784, 183447, 183303, 184341, 184286, 180497, 187100, 183009, 184404, 189314, 185441, 180835, 183091, 187680, 184209, 183260, 180758, 182548, 184643, 181874, 184443, 182339, 176565, 184422, 184203, 181074, 180960, 186239, 185127, 184066, 182315, 182436, 183927, 186162, 186313, 186820, 187426, 187165, 184070, 186042, 183932, 181836, 185582, 183555, 187046, 183484, 183125, 185247, 181615, 184293, 181860, 179040, 184361, 178701, 183205, 179936, 181412, 180411, 184426, 179156, 183932, 183214, 184066, 188234, 186326, 180458, 178501, 188462, 182553, 179245, 186520, 189116, 184768, 185850, 182730, 177816, 182915, 183468, 185726, 177883, 180654, 185782, 181459, 184364, 184387, 185506, 182583, 184791, 184387, 187794, 184489, 184554, 183328, 182688, 181236, 186382, 185831, 182349, 182250, 188521, 180313, 181541, 182414, 184529, 187099, 184087, 181290, 187511, 184482, 181452, 185507, 181717, 185209, 184422, 188561, 183570, 184723, 184545, 182404, 180728, 184317, 184603, 178345, 185006 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226856172,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14412,
        "IOBytes" : {
          "Total" : 1715359246,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1700630625,
            "SW" : 14728621
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -627931841,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12], ShuffleQueryStage 7 "
          },
          "8" : {
            "sign" : -1525383776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2351856847825440000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "4" : {
            "sign" : 1307423816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 198873532600,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "15" : {
            "sign" : 1028008419,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 795656066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4116941229840000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          },
          "9" : {
            "sign" : 1621523546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2526068466182880000,
            "rowCount" : 21776452294680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "13" : {
            "sign" : 1064881184,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -1319010254,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : -1695555807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 230693297816,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          },
          "10" : {
            "sign" : 1319683216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3900260112480000,
            "rowCount" : 54170279340000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
          },
          "6" : {
            "sign" : -1593321073,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 36137826920,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : 656947348,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -1084370178,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : -1731875947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 870563775,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1668940628,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44477325440,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : -844804568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 222738356512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12], ShuffleQueryStage 7\n               :     :     :     +- LogicalQueryStage Project [i_item_sk#137, i_item_id#138, i_item_desc#141], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [s_store_sk#108, s_store_id#109, s_store_name#113], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35], ShuffleQueryStage 5\n               +- LogicalQueryStage Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12054436436,
        "inputRowCount" : 431217044
      },
      "PD" : {
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 6,
        "FinishedTasksTotalTimeInMs" : 3555.0,
        "FinishedTasksDistributionInMs" : [ 296.0, 350.0, 453.0, 912.0, 1120.0 ]
      },
      "StartTimeInMs" : 1702226829394,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 41190,
        "IOBytes" : {
          "Total" : 4130903605,
          "Details" : {
            "IR" : 583923808,
            "IW" : 0,
            "SR" : 1782573844,
            "SW" : 1764405953
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1767993996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 123082697307,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 123082697307,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] "
          },
          "1" : {
            "sign" : 883203122,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 127705521619,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 127705521619,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_store_sk#108 = ss_store_sk#9) "
          },
          "2" : {
            "sign" : 425535993,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 49695620333,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 49695620333,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] "
          },
          "3" : {
            "sign" : 1717156083,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 50844652017,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#137 = ss_item_sk#4) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n+- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n   :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n   :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n   :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n   :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :     :     :  +- Project [d_date_sk#80]\n   :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     +- Project [d_date_sk#80]\n   :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n   :        +- Filter isnotnull(i_item_sk#137)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n   +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n      +- Filter isnotnull(s_store_sk#108)\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1585101545,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Arguments: 2 "
          },
          "4" : {
            "sign" : 2026250254,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] Arguments: [ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 832050908,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 120800832,
            "rowCount" : 2516684,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] Arguments: 7 "
          },
          "6" : {
            "sign" : -2144644184,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Arguments: [i_item_sk#137 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 378360360,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 127705521619,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#108] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1503799718,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 123082697307,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Input [10]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_sk#108, s_store_id#109, s_store_name#113] "
          },
          "2" : {
            "sign" : 2056393859,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 49695620333,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141] Input [8]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_sk#137, i_item_id#138, i_item_desc#141] "
          },
          "7" : {
            "sign" : 1992427326,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 30998424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Arguments: 1 "
          },
          "3" : {
            "sign" : -1621209961,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 50844652017,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#137] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n   :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n   :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 7\n   :     :     +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n   :     :        +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n   :     :           +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :     :              :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :     :              :  +- *(8) ColumnarToRow\n   :     :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_quantity#12,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :     :              :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#930]\n   :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=927]\n                                             +- Project [d_date_sk#80]\n                                                +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :              +- BroadcastQueryStage 0\n   :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :     :                    +- *(1) Project [d_date_sk#80]\n   :     :                       +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n   :     :                          +- *(1) ColumnarToRow\n   :     :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     +- Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 1\n   :           +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              +- *(2) Filter isnotnull(i_item_sk#137)\n   :                 +- *(2) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n         +- *(3) Filter isnotnull(s_store_sk#108)\n            +- *(3) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 152851048,
        "inputRowCount" : 2721086
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 318776, 328861, 361755, 324827, 359756, 337538, 355316, 322810, 297135, 339555, 357315, 339555, 331081, 332895, 328861, 326844, 324827, 337335, 341775, 320793, 333098, 341775, 320793, 312725, 361755, 337538, 331081, 333098, 303004, 337335, 337538, 314742, 361755, 335115, 335318, 339758, 333301, 339555, 324827, 330878, 324827, 324827, 331081, 330878, 324827, 332895, 350655, 332895, 312725, 298970, 371298, 333301, 337538, 333301, 329064, 343995, 346215, 331081, 337538, 335318, 343995, 335318, 339555, 337335, 295482, 332895, 331081, 323013, 346215, 350655, 339555, 322810, 339961, 346418, 318776, 346215, 312725, 363975, 337335, 329064, 331081, 331081, 330878, 326844, 357315, 328861, 337538, 331081, 352875, 332895, 348435, 361755, 333098, 306856, 350655, 359535, 329064, 331081, 341978, 316759, 337335, 355095, 326844, 335115, 337335, 337335, 357315, 352875, 298970, 331081, 320793, 327047, 324827, 339555, 339555, 339758, 330878, 333098, 329064, 346215, 324827, 343995, 350655, 339758, 343995, 335115, 328861, 341775, 343995, 322810, 337538, 359535, 322810, 328861, 314742, 320793, 314742, 359535, 337335, 346215, 348435, 322810, 333098, 359756, 333098, 341775, 335115, 333098, 335318, 341775, 320793, 305021, 343995, 350655, 337538, 331081, 339555, 318776, 343995, 304839, 335318, 361976, 352875, 357536, 333098, 335115, 341775, 335115, 337741, 337335, 343995, 350655, 335115, 346215, 337335, 332895, 306856, 314742, 332895, 348435, 359535, 312907, 346215, 320793, 341775, 337335, 333098, 328861, 329064, 333301, 335318, 324827, 326844, 298970, 337335, 333098, 324827, 314742, 330878, 363975 ],
        "0" : [ 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 84280, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 84280, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 93,
        "FinishedTasksTotalTimeInMs" : 138209.0,
        "FinishedTasksDistributionInMs" : [ 197.0, 674.0, 790.0, 1442.0, 6499.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 15726,
        "TotalTasksDurationInMs" : 28125,
        "IOBytes" : {
          "Total" : 394487913,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 81943219,
            "SW" : 312544694
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1585649225,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 31212000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#137, i_item_id#138, i_item_desc#141] "
          },
          "1" : {
            "sign" : 753925474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#137) "
          },
          "2" : {
            "sign" : 56198239,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#137, i_item_id#138, i_rec_start_date#139, i_rec_end_date#140, i_item_desc#141, i_current_price#142, i_wholesale_cost#143, i_brand_id#144, i_brand#145, i_class_id#146, i_class#147, i_category_id#148, i_category#149, i_manufact_id#150, i_manufact#151, i_size#152, i_formulation#153, i_color#154, i_units#155, i_container#156, i_manager_id#157, i_product_name#158], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n+- Filter isnotnull(i_item_sk#137)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -695483387,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Condition : isnotnull(i_item_sk#137) "
          },
          "1" : {
            "sign" : 954171368,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 31212000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#137, i_item_id#138, i_item_desc#141] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#137)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 31212000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 3833,
        "TotalTasksDurationInMs" : 12915,
        "IOBytes" : {
          "Total" : 30535140,
          "Details" : {
            "IR" : 12367249,
            "IW" : 0,
            "SR" : 0,
            "SW" : 18167891
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -240358455,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 29905096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -92337293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n         +- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n            +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n               :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n               :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n               :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n               :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n               :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n               :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n               :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n               :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n               :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n               :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n               :     :     :     :     :     :  +- Project [d_date_sk#80]\n               :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n               :     :     :     :     +- Project [d_date_sk#80]\n               :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n               :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n               :     :     :        +- Filter isnotnull(i_item_sk#137)\n               :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n               :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n               :     :        +- Filter isnotnull(s_store_sk#108)\n               :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n               :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n               :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n               :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n               :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n               :           :     :  +- Project [d_date_sk#239]\n               :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n               :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n               :           +- Project [d_date_sk#239]\n               :              +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n               :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n               +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n                  +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n                     :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79]\n                     :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n                     :     :  +- Project [d_date_sk#267]\n                     :     :     +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n                     +- Project [d_date_sk#267]\n                        +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 925077320,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_quantity#236L, store_returns_quantity#237L, catalog_sales_quantity#238L] Arguments: 100, [i_item_id#138 ASC NULLS FIRST, i_item_desc#141 ASC NULLS FIRST, s_store_id#109 ASC NULLS FIRST, s_store_name#113 ASC NULLS FIRST], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_quantity#236L, store_returns_quantity#237L, catalog_sales_quantity#238L] "
          },
          "1" : {
            "sign" : 950261926,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 7440,
            "rowCount" : 37,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] Keys [4]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Functions [3]: [sum(ss_quantity#12), sum(sr_return_quantity#35), sum(cs_quantity#63)] Aggregate Attributes [3]: [sum(ss_quantity#12)#295L, sum(sr_return_quantity#35)#296L, sum(cs_quantity#63)#297L] Results [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12)#295L AS store_sales_quantity#236L, sum(sr_return_quantity#35)#296L AS store_returns_quantity#237L, sum(cs_quantity#63)#297L AS catalog_sales_quantity#238L] "
          },
          "2" : {
            "sign" : 154865430,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[i_item_id#138 ASC NULLS FIRST,i_item_desc#141 ASC NULLS FIRST,s_store_id#109 ASC NULLS FIRST,s_store_name#113 ASC NULLS FIRST], output=[i_item_id#138,i_item_desc#141,s_store_id#109,s_store_name#113,store_sales_quantity#236L,store_returns_quantity#237L,catalog_sales_quantity#238L])\n+- HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[sum(ss_quantity#12), sum(sr_return_quantity#35), sum(cs_quantity#63)], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, store_sales_quantity#236L, store_returns_quantity#237L, catalog_sales_quantity#238L])\n   +- ShuffleQueryStage 10\n      +- Exchange hashpartitioning(i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, 200), ENSURE_REQUIREMENTS, [plan_id=1473]\n         +- *(17) HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[partial_sum(ss_quantity#12), partial_sum(sr_return_quantity#35), partial_sum(cs_quantity#63)], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L])\n            +- *(17) Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n               +- *(17) SortMergeJoin [sr_customer_sk#28, sr_item_sk#27], [cs_bill_customer_sk#48, cs_item_sk#60], Inner\n                  :- *(15) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 9\n                  :        +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=1389]\n                  :           +- *(14) Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n                  :              +- *(14) SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n                  :                 :- *(12) Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n                  :                 :  +- AQEShuffleRead coalesced\n                  :                 :     +- ShuffleQueryStage 8\n                  :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1193]\n                  :                 :           +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n                  :                 :              +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n                  :                 :                 :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n                  :                 :                 :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n                  :                 :                 :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :     +- ShuffleQueryStage 7\n                  :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n                  :                 :                 :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n                  :                 :                 :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n                  :                 :                 :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n                  :                 :                 :     :                 :  +- *(8) ColumnarToRow\n                  :                 :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_quantity#12,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n                  :                 :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#930]\n                  :                 :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   BroadcastQueryStage 1\n                                                                                                   +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                                +- == Initial Plan ==\n                                                                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=927]\n                                                                                                   +- Project [d_date_sk#80]\n                                                                                                      +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :                 :     :                 +- BroadcastQueryStage 0\n                  :                 :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                  :                 :                 :     :                       +- *(1) Project [d_date_sk#80]\n                  :                 :                 :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n                  :                 :                 :     :                             +- *(1) ColumnarToRow\n                  :                 :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :                 :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n                  :                 :                 :        +- AQEShuffleRead coalesced\n                  :                 :                 :           +- ShuffleQueryStage 1\n                  :                 :                 :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n                  :                 :                 :                 +- *(2) Filter isnotnull(i_item_sk#137)\n                  :                 :                 :                    +- *(2) ColumnarToRow\n                  :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n                  :                 :                 +- BroadcastQueryStage 2\n                  :                 :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n                  :                 :                       +- *(3) Filter isnotnull(s_store_sk#108)\n                  :                 :                          +- *(3) ColumnarToRow\n                  :                 :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n                  :                 +- *(13) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n                  :                    +- AQEShuffleRead coalesced\n                  :                       +- ShuffleQueryStage 5\n                  :                          +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=689]\n                  :                             +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n                  :                                +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n                  :                                   :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n                  :                                   :  +- *(6) ColumnarToRow\n                  :                                   :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_return_quantity#35,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n                  :                                   :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#663]\n                  :                                   :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=660]\n                                                                           +- Project [d_date_sk#239]\n                                                                              +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                                   +- BroadcastQueryStage 3\n                  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                  :                                         +- *(4) Project [d_date_sk#239]\n                  :                                            +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n                  :                                               +- *(4) ColumnarToRow\n                  :                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  +- *(16) Sort [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 6\n                           +- Exchange hashpartitioning(cs_bill_customer_sk#48, cs_item_sk#60, 200), ENSURE_REQUIREMENTS, [plan_id=737]\n                              +- *(7) Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n                                 +- *(7) BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n                                    :- *(7) Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n                                    :  +- *(7) ColumnarToRow\n                                    :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_quantity#63,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#309)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n                                    :           +- SubqueryBroadcast dynamicpruning#309, 0, [d_date_sk#267], [id=#711]\n                                    :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=441]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=708]\n                                                         +- Project [d_date_sk#267]\n                                                            +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                                    +- BroadcastQueryStage 4\n                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=441]\n                                          +- *(5) Project [d_date_sk#267]\n                                             +- *(5) Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                                                +- *(5) ColumnarToRow\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7440,
        "inputRowCount" : 37
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 276, 0, 0, 0, 156, 0, 0, 0, 0, 0, 276, 334, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 304, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 228, 0, 0, 0, 142, 0, 300, 0, 0, 0, 0, 0, 276, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 189, 0, 0, 0, 156, 276, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 532, 189, 0, 0, 0, 0, 304, 334, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 189, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 33 ],
      "Objectives" : {
        "DurationInMs" : 123,
        "TotalTasksDurationInMs" : 112,
        "IOBytes" : {
          "Total" : 7966,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7966,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -612014079,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] "
          },
          "1" : {
            "sign" : 50078162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80962631465,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 80962631465,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n+- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n   :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n   :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n   :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n   :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n   :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :     :     :     :  +- Project [d_date_sk#80]\n   :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     :     +- Project [d_date_sk#80]\n   :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n   :     :        +- Filter isnotnull(i_item_sk#137)\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n   :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n   :        +- Filter isnotnull(s_store_sk#108)\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n   +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n      +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n         :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n         :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n         :     :  +- Project [d_date_sk#239]\n         :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n         :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n         :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [d_date_sk#239]\n            +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n               +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1012535321,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] Arguments: [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -960000641,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 61454840,
            "rowCount" : 1536371,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] Arguments: 5 "
          },
          "1" : {
            "sign" : -352610176,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 80962631465,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [3]: [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L] Right keys [3]: [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1300033943,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] Input [12]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] "
          },
          "2" : {
            "sign" : -1118751640,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Arguments: [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 2128296440,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 543088080,
            "rowCount" : 2516684,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n+- SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n   :- Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 8\n   :     +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1193]\n   :        +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n   :           +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n   :              :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n   :              :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n   :              :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :              :     :  +- AQEShuffleRead coalesced\n   :              :     :     +- ShuffleQueryStage 7\n   :              :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n   :              :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n   :              :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :              :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :              :     :                 :  +- *(8) ColumnarToRow\n   :              :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_quantity#12,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :              :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#930]\n   :              :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=927]\n                                                               +- Project [d_date_sk#80]\n                                                                  +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :              :     :                 +- BroadcastQueryStage 0\n   :              :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n   :              :     :                       +- *(1) Project [d_date_sk#80]\n   :              :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n   :              :     :                             +- *(1) ColumnarToRow\n   :              :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :              :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n   :              :        +- AQEShuffleRead coalesced\n   :              :           +- ShuffleQueryStage 1\n   :              :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n   :              :                 +- *(2) Filter isnotnull(i_item_sk#137)\n   :              :                    +- *(2) ColumnarToRow\n   :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n   :              +- BroadcastQueryStage 2\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n   :                    +- *(3) Filter isnotnull(s_store_sk#108)\n   :                       +- *(3) ColumnarToRow\n   :                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n   +- Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 5\n         +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=689]\n            +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n               +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n                  :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n                  :  +- *(6) ColumnarToRow\n                  :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_return_quantity#35,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n                  :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#663]\n                  :              +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       BroadcastQueryStage 1\n                                       +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                    +- == Initial Plan ==\n                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=660]\n                                       +- Project [d_date_sk#239]\n                                          +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  +- BroadcastQueryStage 3\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                        +- *(4) Project [d_date_sk#239]\n                           +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n                              +- *(4) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 604542920,
        "inputRowCount" : 4053055
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1567477, 1602683, 1567477, 1602683, 1567477, 1689018, 1567477, 1689018, 1689018, 1567477, 1689018, 1689018, 1602683, 1567477, 1724224, 1689018, 1689018, 1567477, 1602683, 1567477, 1567477, 1689018, 1689018, 1724224, 1689018, 1567477, 1689018, 1689018, 1689018, 1689018, 1602683, 1567477, 1689018, 1724224, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1724224, 1567477, 1567477, 1602683, 1567477, 1689018, 1689018, 1567477, 1689018, 1567477, 1567477, 1567477, 1689018, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1567477, 1689018, 1689018, 1689018, 1689018, 1689018, 1567477, 1689018, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1689018, 1689018, 1602683, 1567477, 1689018, 1567477, 1689018, 1689018, 1567477, 1602683, 1689018, 1689018, 1602683, 1689018, 1602683, 1689018, 1567477, 1689018, 1567477, 1689018, 1567477, 1602683, 1724224, 1689018, 1689018, 1724224, 1567477, 1724224, 1689018, 1689018, 1567477, 1689018, 1689018, 1689018, 1567477, 1567477, 1567477, 1567477, 1567477, 1689018, 1689018, 1724224, 1689018, 1567477, 1567477, 1567477, 1567477, 1567477, 1689018, 1724224, 1724224, 1689018, 1567477, 1567477, 1567477, 1689018, 1567477, 1689018, 1602683, 1567477, 1567477, 1567477, 1567477, 1689018, 1689018, 1689018, 1602683, 1567477, 1567477, 1602683, 1567477, 1567477, 1567477, 1567477, 1567477, 1567477, 1602683, 1689018, 1689018, 1689018, 1689018, 1724224, 1689018, 1689018, 1724224, 1689018, 1689018, 1567477, 1689018, 1689018, 1724224, 1567477, 1567477, 1567477, 1689018, 1689018, 1724224, 1724224, 1567477, 1567477, 1567477, 1689018, 1689018, 1567477, 1724224, 1689018, 1689018, 1567477, 1567477, 1689018, 1689018 ],
        "1" : [ 186520, 182897, 184230, 180295, 185205, 182274, 183336, 182690, 185985, 180340, 181493, 182231, 181074, 183367, 184266, 185083, 178799, 184191, 184171, 186009, 180572, 186449, 186818, 186783, 186213, 182213, 184108, 184491, 185548, 185881, 186046, 180489, 184545, 188873, 181732, 180279, 184384, 183077, 185045, 184664, 184126, 180438, 181713, 186980, 179283, 180529, 182090, 182015, 185161, 181515, 184201, 183150, 183865, 181314, 180385, 185981, 182012, 182833, 183279, 187500, 184281, 184293, 184293, 183488, 182699, 184922, 184088, 183751, 183990, 182809, 186725, 184155, 184085, 185961, 181011, 184916, 184784, 183447, 183303, 184341, 184286, 180497, 187100, 183009, 184404, 189314, 185441, 180835, 183091, 187680, 184209, 183260, 180758, 182548, 184643, 181874, 184443, 182339, 176565, 184422, 184203, 181074, 180960, 186239, 185127, 184066, 182315, 182436, 183927, 186162, 186313, 186820, 187426, 187165, 184070, 186042, 183932, 181836, 185582, 183555, 187046, 183484, 183125, 185247, 181615, 184293, 181860, 179040, 184361, 178701, 183205, 179936, 181412, 180411, 184426, 179156, 183932, 183214, 184066, 188234, 186326, 180458, 178501, 188462, 182553, 179245, 186520, 189116, 184768, 185850, 182730, 177816, 182915, 183468, 185726, 177883, 180654, 185782, 181459, 184364, 184387, 185506, 182583, 184791, 184387, 187794, 184489, 184554, 183328, 182688, 181236, 186382, 185831, 182349, 182250, 188521, 180313, 181541, 182414, 184529, 187099, 184087, 181290, 187511, 184482, 181452, 185507, 181717, 185209, 184422, 188561, 183570, 184723, 184545, 182404, 180728, 184317, 184603, 178345, 185006 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 3294,
        "TotalTasksDurationInMs" : 15888,
        "IOBytes" : {
          "Total" : 362274918,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 347554263,
            "SW" : 14720655
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -2022358315,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 970408620,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 970408620,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#45 = d_date_sk#239) "
          },
          "0" : {
            "sign" : -1393143083,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 754762260,
                "rowCount" : 26955795
              },
              "compileTime" : {
                "sizeInBytes" : 754762260,
                "rowCount" : 26955795
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] "
          },
          "2" : {
            "sign" : 449479564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858275424,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 858275424,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45] "
          },
          "3" : {
            "sign" : 943416939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              },
              "compileTime" : {
                "sizeInBytes" : 3433101696,
                "rowCount" : 26821107
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n+- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n   :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n   :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n   :     :  +- Project [d_date_sk#239]\n   :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n   +- Project [d_date_sk#239]\n      +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -2045655677,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049552,
            "rowCount" : 122,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#239] Arguments: 3 "
          },
          "1" : {
            "sign" : -1952482929,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 970408620,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#45] Right keys [1]: [d_date_sk#239] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1782496925,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35] Input [6]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45, d_date_sk#239] "
          },
          "2" : {
            "sign" : -514916869,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45] Condition : ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) "
          },
          "3" : {
            "sign" : 61736478,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 858275424,
            "rowCount" : 26821107,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [5]: [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpruning#308)] PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)] ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n+- BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n   :- Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_return_quantity#35,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n   :        +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#663]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=660]\n   :                 +- Project [d_date_sk#239]\n   :                    +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n         +- *(4) Project [d_date_sk#239]\n            +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 859324976,
        "inputRowCount" : 26821229
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3016.0,
        "FinishedTasksDistributionInMs" : [ 1481.0, 1481.0, 1535.0, 1535.0, 1535.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 17976,
        "TotalTasksDurationInMs" : 75207,
        "IOBytes" : {
          "Total" : 57799812,
          "Details" : {
            "IR" : 22790243,
            "IW" : 0,
            "SR" : 0,
            "SW" : 35009569
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -628115620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 431555565742,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L] "
          },
          "1" : {
            "sign" : -1592586372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 407690741830,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 407690741830,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] "
          },
          "2" : {
            "sign" : 932045589,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 439510507046,
                "rowCount" : 1988735326
              },
              "compileTime" : {
                "sizeInBytes" : 439510507046,
                "rowCount" : 1988735326
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum(ss_quantity#12) AS store_sales_quantity#236L, sum(sr_return_quantity#35) AS store_returns_quantity#237L, sum(cs_quantity#63) AS catalog_sales_quantity#238L]\n+- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n   +- Join Inner, ((sr_customer_sk#28 = cs_bill_customer_sk#48) AND (sr_item_sk#27 = cs_item_sk#60))\n      :- Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n      :  +- Join Inner, (((ss_customer_sk#5 = sr_customer_sk#28) AND (ss_item_sk#4 = sr_item_sk#27)) AND (ss_ticket_number#11L = sr_ticket_number#34L))\n      :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n      :     :  +- Join Inner, (s_store_sk#108 = ss_store_sk#9)\n      :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n      :     :     :  +- Join Inner, (i_item_sk#137 = ss_item_sk#4)\n      :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n      :     :     :     :  +- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n      :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n      :     :     :     :     :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n      :     :     :     :     :     :  +- Project [d_date_sk#80]\n      :     :     :     :     :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n      :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n      :     :     :     :     +- Project [d_date_sk#80]\n      :     :     :     :        +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n      :     :     :     +- Project [i_item_sk#137, i_item_id#138, i_item_desc#141]\n      :     :     :        +- Filter isnotnull(i_item_sk#137)\n      :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_rec_start_date#139,i_rec_end_date#140,i_item_desc#141,i_current_price#142,i_wholesale_cost#143,i_brand_id#144,i_brand#145,i_class_id#146,i_class#147,i_category_id#148,i_category#149,i_manufact_id#150,i_manufact#151,i_size#152,i_formulation#153,i_color#154,i_units#155,i_container#156,i_manager_id#157,i_product_name#158] parquet\n      :     :     +- Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n      :     :        +- Filter isnotnull(s_store_sk#108)\n      :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n      :     +- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n      :        +- Join Inner, (sr_returned_date_sk#45 = d_date_sk#239)\n      :           :- Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35, sr_returned_date_sk#45]\n      :           :  +- Filter ((((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L)) AND isnotnull(sr_returned_date_sk#45)) AND dynamicpruning#308 [sr_returned_date_sk#45])\n      :           :     :  +- Project [d_date_sk#239]\n      :           :     :     +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n      :           :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n      :           :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n      :           +- Project [d_date_sk#239]\n      :              +- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n      :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n      +- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n         +- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n            :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79]\n            :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n            :     :  +- Project [d_date_sk#267]\n            :     :     +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n            +- Project [d_date_sk#267]\n               +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1994026138,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 23723784,
            "rowCount" : 110017,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] Arguments: 9 "
          },
          "5" : {
            "sign" : 706079977,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] Arguments: [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -439427113,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2734319232,
            "rowCount" : 85447476,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] Arguments: 6 "
          },
          "1" : {
            "sign" : 778044441,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 407690741830,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] Input [11]: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35, cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] "
          },
          "0" : {
            "sign" : 791489707,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 431555565742,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [7]: [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141] Keys [4]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113] Functions [3]: [partial_sum(ss_quantity#12), partial_sum(sr_return_quantity#35), partial_sum(cs_quantity#63)] Aggregate Attributes [3]: [sum#310L, sum#311L, sum#312L] Results [7]: [i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L] "
          },
          "2" : {
            "sign" : 1265953186,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 439510507046,
            "rowCount" : 1988735326,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [sr_customer_sk#28, sr_item_sk#27] Right keys [2]: [cs_bill_customer_sk#48, cs_item_sk#60] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 836445547,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35] Arguments: [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113], functions=[partial_sum(ss_quantity#12), partial_sum(sr_return_quantity#35), partial_sum(cs_quantity#63)], output=[i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sum#313L, sum#314L, sum#315L])\n+- Project [ss_quantity#12, sr_return_quantity#35, cs_quantity#63, s_store_id#109, s_store_name#113, i_item_id#138, i_item_desc#141]\n   +- SortMergeJoin [sr_customer_sk#28, sr_item_sk#27], [cs_bill_customer_sk#48, cs_item_sk#60], Inner\n      :- Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 9\n      :     +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=1389]\n      :        +- *(14) Project [ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113, sr_item_sk#27, sr_customer_sk#28, sr_return_quantity#35]\n      :           +- *(14) SortMergeJoin [ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L], [sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L], Inner\n      :              :- *(12) Sort [ss_customer_sk#5 ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 8\n      :              :        +- Exchange hashpartitioning(ss_customer_sk#5, ss_item_sk#4, ss_ticket_number#11L, 200), ENSURE_REQUIREMENTS, [plan_id=1193]\n      :              :           +- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141, s_store_id#109, s_store_name#113]\n      :              :              +- *(11) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#108], Inner, BuildRight, false\n      :              :                 :- *(11) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, i_item_id#138, i_item_desc#141]\n      :              :                 :  +- *(11) SortMergeJoin [ss_item_sk#4], [i_item_sk#137], Inner\n      :              :                 :     :- *(9) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :                 :     :  +- AQEShuffleRead coalesced\n      :              :                 :     :     +- ShuffleQueryStage 7\n      :              :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n      :              :                 :     :           +- *(8) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n      :              :                 :     :              +- *(8) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n      :              :                 :     :                 :- *(8) Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n      :              :                 :     :                 :  +- *(8) ColumnarToRow\n      :              :                 :     :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_quantity#12,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n      :              :                 :     :                 :           +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#930]\n      :              :                 :     :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#80], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=927]\n                                                                                    +- Project [d_date_sk#80]\n                                                                                       +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :                 :     :                 +- BroadcastQueryStage 0\n      :              :                 :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n      :              :                 :     :                       +- *(1) Project [d_date_sk#80]\n      :              :                 :     :                          +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n      :              :                 :     :                             +- *(1) ColumnarToRow\n      :              :                 :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :                 :     +- *(10) Sort [i_item_sk#137 ASC NULLS FIRST], false, 0\n      :              :                 :        +- AQEShuffleRead coalesced\n      :              :                 :           +- ShuffleQueryStage 1\n      :              :                 :              +- Exchange hashpartitioning(i_item_sk#137, 200), ENSURE_REQUIREMENTS, [plan_id=374]\n      :              :                 :                 +- *(2) Filter isnotnull(i_item_sk#137)\n      :              :                 :                    +- *(2) ColumnarToRow\n      :              :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#137,i_item_id#138,i_item_desc#141] Batched: true, DataFilters: [isnotnull(i_item_sk#137)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>\n      :              :                 +- BroadcastQueryStage 2\n      :              :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=393]\n      :              :                       +- *(3) Filter isnotnull(s_store_sk#108)\n      :              :                          +- *(3) ColumnarToRow\n      :              :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n      :              +- *(13) Sort [sr_customer_sk#28 ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST, sr_ticket_number#34L ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 5\n      :                       +- Exchange hashpartitioning(sr_customer_sk#28, sr_item_sk#27, sr_ticket_number#34L, 200), ENSURE_REQUIREMENTS, [plan_id=689]\n      :                          +- *(6) Project [sr_item_sk#27, sr_customer_sk#28, sr_ticket_number#34L, sr_return_quantity#35]\n      :                             +- *(6) BroadcastHashJoin [sr_returned_date_sk#45], [d_date_sk#239], Inner, BuildRight, false\n      :                                :- *(6) Filter ((isnotnull(sr_customer_sk#28) AND isnotnull(sr_item_sk#27)) AND isnotnull(sr_ticket_number#34L))\n      :                                :  +- *(6) ColumnarToRow\n      :                                :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_customer_sk#28,sr_ticket_number#34L,sr_return_quantity#35,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_customer_sk#28), isnotnull(sr_item_sk#27), isnotnull(sr_ticket_number#34L)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#45), dynamicpruningexpression(sr_returned_date_sk#45 IN dynamicpru..., PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)], ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:bigint,sr_return_quantity:int>\n      :                                :           +- SubqueryBroadcast dynamicpruning#308, 0, [d_date_sk#239], [id=#663]\n      :                                :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#239], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=660]\n                                                            +- Project [d_date_sk#239]\n                                                               +- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :                                +- BroadcastQueryStage 3\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=414]\n      :                                      +- *(4) Project [d_date_sk#239]\n      :                                         +- *(4) Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n      :                                            +- *(4) ColumnarToRow\n      :                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      +- Sort [cs_bill_customer_sk#48 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 6\n            +- Exchange hashpartitioning(cs_bill_customer_sk#48, cs_item_sk#60, 200), ENSURE_REQUIREMENTS, [plan_id=737]\n               +- *(7) Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n                  +- *(7) BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n                     :- *(7) Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n                     :  +- *(7) ColumnarToRow\n                     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_quantity#63,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#309)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n                     :           +- SubqueryBroadcast dynamicpruning#309, 0, [d_date_sk#267], [id=#711]\n                     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=441]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=708]\n                                          +- Project [d_date_sk#267]\n                                             +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                     +- BroadcastQueryStage 4\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=441]\n                           +- *(5) Project [d_date_sk#267]\n                              +- *(5) Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n                                 +- *(5) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2758043016,
        "inputRowCount" : 85557493
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 7021524, 7049790, 7053184, 7056122, 7056122, 7040520, 7043458, 7024462, 7027856, 7068786, 7015192, 7034188, 7018908, 7045555, 7011091, 6992095, 7056122, 7037126, 7011798, 7043458, 7033669, 7043458, 7024462, 7008153, 7036419, 7056122, 6992802, 7049790, 7030087, 7021524, 7015192, 7011091, 7015192, 7049790, 7011091, 7028634, 7002528, 7027149, 7027149, 7011798, 7017423, 7043458, 7068786, 7043458, 7043458, 7042751, 7024462, 7049083, 7014485, 7040520, 7030794, 7030087, 7027856, 7011798, 7036419, 7015192, 7039813, 7011798, 7084325, 7024462, 7056122, 7087782, 7053962, 7011798, 7046852, 7023755, 7034188, 7027149, 7037126, 7024462, 7004759, 7018130, 7018351, 7049790, 6996196, 7030794, 6999134, 7037126, 7033481, 7046852, 7031572, 7049790, 7040520, 7018586, 7036419, 7011798, 7037126, 7024462, 7014485, 7023755, 7049790, 7011091, 7027400, 6999134, 7063232, 7030794, 7008860, 7037126, 7049083, 7030087, 7027856, 7018130, 7056122, 6998427, 7049083, 7049083, 7044236, 7049790, 7030794, 7031384, 7009638, 7049083, 6986470, 7034966, 7043458, 7054434, 7011091, 7030794, 7031572, 7024462, 7037126, 7065141, 7062454, 7020817, 7043458, 7011091, 7037126, 7027856, 7018130, 7020817, 7027149, 7053184, 7033481, 7008860, 7043458, 7021524, 7024462, 7043458, 7011091, 6999134, 7005466, 7004116, 7008860, 7043458, 7039813, 7018130, 7030794, 7024462, 7030794, 7021524, 7005466, 7030087, 7018130, 7056122, 7043458, 7011091, 7018130, 7030794, 7049790, 7024462, 7037126, 7055415, 7053184, 7024462, 7039813, 7030794, 7049790, 6998427, 7042751, 7023755, 7015192, 7030794, 7030794, 7030794, 7043458, 7030794, 7056122, 7033481, 7046145, 7040520, 7034188, 7020817, 7043458, 7023755, 7043458, 7018130, 7017423, 7049790, 7040520, 7024462, 7037126, 7030794, 7021524, 7004759, 7037126, 7024462, 7049790, 7043458, 7023755, 7001821 ],
        "5" : [ 78437, 80950, 72919, 82328, 81331, 75075, 80368, 80600, 72326, 73272, 72019, 73465, 80243, 75031, 76803, 77523, 79511, 81853, 73033, 78865, 75550, 78239, 79697, 74792, 75189, 74411, 81068, 73158, 80764, 76221, 80475, 78181, 76359, 81715, 74297, 68848, 76944, 76567, 74667, 78990, 80475, 76328, 76335, 74667, 80881, 73741, 81193, 81590, 77706, 81075, 78312, 74297, 78990, 69846, 74286, 79434, 71523, 73590, 79697, 80337, 80337, 76359, 79434, 76359, 77385, 79559, 78437, 71762, 74297, 80230, 79822, 78959, 78959, 80337, 75550, 74411, 75806, 78959, 81213, 75189, 73704, 81853, 78990, 80350, 67412, 76328, 78306, 74411, 77456, 76096, 76803, 82328, 70280, 81728, 75075, 78959, 79091, 79572, 80192, 86000, 74338, 86143, 74843, 78990, 75789, 74199, 78209, 77706, 81728, 74843, 70745, 80054, 80600, 74536, 74869, 79503, 74950, 82230, 78444, 83106, 77474, 73811, 85862, 78125, 75813, 81594, 85511, 83288, 80475, 73579, 82999, 77706, 79572, 75813, 72123, 83231, 78056, 76122, 74172, 72212, 75733, 76096, 73414, 81331, 77298, 76830, 80812, 83706, 82328, 76705, 77184, 73061, 73559, 72212, 78727, 76442, 71683, 80243, 80014, 75550, 74994, 82854, 81213, 82591, 72919, 75972, 77561, 76473, 71905, 73922, 76484, 76986, 67813, 76944, 79559, 75189, 79697, 70059, 75806, 79434, 76442, 78990, 80337, 72238, 76096, 78125, 73730, 77474, 77641, 78437, 78472, 75425, 83106, 75716, 74200, 84484, 71240, 78959, 78437, 72451 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 10524,
        "TotalTasksDurationInMs" : 107980,
        "IOBytes" : {
          "Total" : 1353076362,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1353068396,
            "SW" : 7966
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -2002916628,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#46, cs_ship_date_sk#47, cs_bill_customer_sk#48, cs_bill_cdemo_sk#49, cs_bill_hdemo_sk#50, cs_bill_addr_sk#51, cs_ship_customer_sk#52, cs_ship_cdemo_sk#53, cs_ship_hdemo_sk#54, cs_ship_addr_sk#55, cs_call_center_sk#56, cs_catalog_page_sk#57, cs_ship_mode_sk#58, cs_warehouse_sk#59, cs_item_sk#60, cs_promo_sk#61, cs_order_number#62L, cs_quantity#63, cs_wholesale_cost#64, cs_list_price#65, cs_sales_price#66, cs_ext_discount_amt#67, cs_ext_sales_price#68, cs_ext_wholesale_cost#69, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 2028091414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3878455336,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#79 = d_date_sk#267) "
          },
          "0" : {
            "sign" : -1414944146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 2770325240,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] "
          },
          "2" : {
            "sign" : -872731416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3421353792,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 3421353792,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79] "
          },
          "3" : {
            "sign" : 1800006170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n+- Join Inner, (cs_sold_date_sk#79 = d_date_sk#267)\n   :- Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79]\n   :  +- Filter (((isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) AND isnotnull(cs_sold_date_sk#79)) AND dynamicpruning#309 [cs_sold_date_sk#79])\n   :     :  +- Project [d_date_sk#267]\n   :     :     +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#46,cs_ship_date_sk#47,cs_bill_customer_sk#48,cs_bill_cdemo_sk#49,cs_bill_hdemo_sk#50,cs_bill_addr_sk#51,cs_ship_customer_sk#52,cs_ship_cdemo_sk#53,cs_ship_hdemo_sk#54,cs_ship_addr_sk#55,cs_call_center_sk#56,cs_catalog_page_sk#57,cs_ship_mode_sk#58,cs_warehouse_sk#59,cs_item_sk#60,cs_promo_sk#61,cs_order_number#62L,cs_quantity#63,cs_wholesale_cost#64,cs_list_price#65,cs_sales_price#66,cs_ext_discount_amt#67,cs_ext_sales_price#68,cs_ext_wholesale_cost#69,... 10 more fields] parquet\n   +- Project [d_date_sk#267]\n      +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1491520549,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1057344,
            "rowCount" : 1096,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#267] Arguments: 4 "
          },
          "1" : {
            "sign" : 1454458514,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#79] Right keys [1]: [d_date_sk#267] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1489277108,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2770325240,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63] Input [5]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79, d_date_sk#267] "
          },
          "2" : {
            "sign" : 1559516310,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79] Condition : (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60)) "
          },
          "3" : {
            "sign" : -7161817,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3421353792,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63, cs_sold_date_sk#79] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#309)] PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)] ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#48, cs_item_sk#60, cs_quantity#63]\n+- BroadcastHashJoin [cs_sold_date_sk#79], [d_date_sk#267], Inner, BuildRight, false\n   :- Filter (isnotnull(cs_bill_customer_sk#48) AND isnotnull(cs_item_sk#60))\n   :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#48,cs_item_sk#60,cs_quantity#63,cs_sold_date_sk#79] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#48), isnotnull(cs_item_sk#60)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#79), dynamicpruningexpression(cs_sold_date_sk#79 IN dynamicpruning#309)], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>\n   :        +- SubqueryBroadcast dynamicpruning#309, 0, [d_date_sk#267], [id=#711]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=708]\n   :                 +- Project [d_date_sk#267]\n   :                    +- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 4\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=441]\n         +- *(5) Project [d_date_sk#267]\n            +- *(5) Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n               +- *(5) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3422411136,
        "inputRowCount" : 142557504
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 3016.0,
        "FinishedTasksDistributionInMs" : [ 1481.0, 1481.0, 1535.0, 1535.0, 1535.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 17877,
        "TotalTasksDurationInMs" : 140265,
        "IOBytes" : {
          "Total" : 1881713999,
          "Details" : {
            "IR" : 543366258,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1338347741
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 905486313,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22512,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 22512,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#108, s_store_id#109, s_store_name#113] "
          },
          "1" : {
            "sign" : 1662377663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#108) "
          },
          "2" : {
            "sign" : -1717782204,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#108, s_store_id#109, s_rec_start_date#110, s_rec_end_date#111, s_closed_date_sk#112, s_store_name#113, s_number_employees#114, s_floor_space#115, s_hours#116, s_manager#117, s_market_id#118, s_geography_class#119, s_market_desc#120, s_market_manager#121, s_division_id#122, s_division_name#123, s_company_id#124, s_company_name#125, s_street_number#126, s_street_name#127, s_street_type#128, s_suite_number#129, s_city#130, s_county#131, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#108, s_store_id#109, s_store_name#113]\n+- Filter isnotnull(s_store_sk#108)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_rec_start_date#110,s_rec_end_date#111,s_closed_date_sk#112,s_store_name#113,s_number_employees#114,s_floor_space#115,s_hours#116,s_manager#117,s_market_id#118,s_geography_class#119,s_market_desc#120,s_market_manager#121,s_division_id#122,s_division_name#123,s_company_id#124,s_company_name#125,s_street_number#126,s_street_name#127,s_street_type#128,s_suite_number#129,s_city#130,s_county#131,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1355809318,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 22512,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Condition : isnotnull(s_store_sk#108) "
          },
          "1" : {
            "sign" : 238072065,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 22512,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#108, s_store_id#109, s_store_name#113] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#108)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#108,s_store_id#109,s_store_name#113] Batched: true, DataFilters: [isnotnull(s_store_sk#108)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 22512,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1794,
        "TotalTasksDurationInMs" : 1787,
        "IOBytes" : {
          "Total" : 15885,
          "Details" : {
            "IR" : 15885,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1212501152,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#80] "
          },
          "1" : {
            "sign" : -223261284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80)) "
          },
          "2" : {
            "sign" : 757488456,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#80, d_date_id#81, d_date#82, d_month_seq#83, d_week_seq#84, d_quarter_seq#85, d_year#86, d_dow#87, d_moy#88, d_dom#89, d_qoy#90, d_fy_year#91, d_fy_quarter_seq#92, d_fy_week_seq#93, d_day_name#94, d_quarter_name#95, d_holiday#96, d_weekend#97, d_following_holiday#98, d_first_dom#99, d_last_dom#100, d_same_day_ly#101, d_same_day_lq#102, d_current_day#103, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#80]\n+- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 507602849,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#80] Input [3]: [d_date_sk#80, d_year#86, d_moy#88] "
          },
          "1" : {
            "sign" : 202536117,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#80, d_year#86, d_moy#88] Condition : ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80)) "
          },
          "2" : {
            "sign" : 1376676533,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#80, d_year#86, d_moy#88] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#80]\n+- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 75
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3175,
        "TotalTasksDurationInMs" : 3169,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 659718580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3516,
                "rowCount" : 293
              },
              "compileTime" : {
                "sizeInBytes" : 3516,
                "rowCount" : 293
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#239] "
          },
          "1" : {
            "sign" : -128143552,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72078,
                "rowCount" : 293
              },
              "compileTime" : {
                "sizeInBytes" : 72078,
                "rowCount" : 293
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239)) "
          },
          "2" : {
            "sign" : -694123955,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#239]\n+- Filter (((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (((d_moy#247 >= 4) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999))) AND isnotnull(d_date_sk#239))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 673162287,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3516,
            "rowCount" : 293,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#239] Input [3]: [d_date_sk#239, d_year#245, d_moy#247] "
          },
          "1" : {
            "sign" : -1016219645,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3516,
            "rowCount" : 293,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#239, d_year#245, d_moy#247] Condition : (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239)) "
          },
          "2" : {
            "sign" : -802714068,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3516,
            "rowCount" : 293,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#239, d_year#245, d_moy#247] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), EqualTo(d_year,1999), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#239]\n+- Filter (((((isnotnull(d_moy#247) AND isnotnull(d_year#245)) AND (d_moy#247 >= 4)) AND (d_moy#247 <= 7)) AND (d_year#245 = 1999)) AND isnotnull(d_date_sk#239))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_year#245,d_moy#247] Batched: true, DataFilters: [isnotnull(d_moy#247), isnotnull(d_year#245), (d_moy#247 >= 4), (d_moy#247 <= 7), (d_year#245 = 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), Equa..., ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3516,
        "inputRowCount" : 293
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1782,
        "TotalTasksDurationInMs" : 1776,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -367963363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#80 = ss_sold_date_sk#25) "
          },
          "0" : {
            "sign" : 1956711455,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] "
          },
          "2" : {
            "sign" : -504325498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9030741984,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 9030741984,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] "
          },
          "3" : {
            "sign" : 1285597697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n+- Join Inner, (d_date_sk#80 = ss_sold_date_sk#25)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25]\n   :  +- Filter (((((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_sold_date_sk#25)) AND isnotnull(ss_store_sk#9)) AND dynamicpruning#307 [ss_sold_date_sk#25])\n   :     :  +- Project [d_date_sk#80]\n   :     :     +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   +- Project [d_date_sk#80]\n      +- Filter (((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND ((d_moy#88 = 4) AND (d_year#86 = 1999))) AND isnotnull(d_date_sk#80))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_date_id#81,d_date#82,d_month_seq#83,d_week_seq#84,d_quarter_seq#85,d_year#86,d_dow#87,d_moy#88,d_dom#89,d_qoy#90,d_fy_year#91,d_fy_quarter_seq#92,d_fy_week_seq#93,d_day_name#94,d_quarter_name#95,d_holiday#96,d_weekend#97,d_following_holiday#98,d_first_dom#99,d_last_dom#100,d_same_day_ly#101,d_same_day_lq#102,d_current_day#103,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 2003271621,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#80] Arguments: 0 "
          },
          "1" : {
            "sign" : 2089550289,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#25] Right keys [1]: [d_date_sk#80] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1088791465,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12] Input [7]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25, d_date_sk#80] "
          },
          "2" : {
            "sign" : 893202147,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] Condition : (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9)) "
          },
          "3" : {
            "sign" : -1847769746,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9030741984,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12, ss_sold_date_sk#25] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)] PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_quantity#12]\n+- BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#80], Inner, BuildRight, false\n   :- Filter (((isnotnull(ss_customer_sk#5) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_ticket_number#11L)) AND isnotnull(ss_store_sk#9))\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_quantity#12,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_customer_sk#5), isnotnull(ss_item_sk#4), isnotnull(ss_ticket_number#11L), isnotnull..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#307)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_stor..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_quantity:int>\n   :        +- SubqueryBroadcast dynamicpruning#307, 0, [d_date_sk#80], [id=#930]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=927]\n   :                 +- Project [d_date_sk#80]\n   :                    +- Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=353]\n         +- *(1) Project [d_date_sk#80]\n            +- *(1) Filter ((((isnotnull(d_moy#88) AND isnotnull(d_year#86)) AND (d_moy#88 = 4)) AND (d_year#86 = 1999)) AND isnotnull(d_date_sk#80))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#80,d_year#86,d_moy#88] Batched: true, DataFilters: [isnotnull(d_moy#88), isnotnull(d_year#86), (d_moy#88 = 4), (d_year#86 = 1999), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9031790800,
        "inputRowCount" : 250853974
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 8225.0,
        "FinishedTasksDistributionInMs" : [ 424.0, 453.0, 1120.0, 1535.0, 2300.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 11318,
        "TotalTasksDurationInMs" : 3588,
        "IOBytes" : {
          "Total" : 81542635,
          "Details" : {
            "IR" : 17767307,
            "IW" : 0,
            "SR" : 0,
            "SW" : 63775328
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1639964537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13020,
                "rowCount" : 1085
              },
              "compileTime" : {
                "sizeInBytes" : 13020,
                "rowCount" : 1085
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#267] "
          },
          "1" : {
            "sign" : 2007558560,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 266910,
                "rowCount" : 1085
              },
              "compileTime" : {
                "sizeInBytes" : 266910,
                "rowCount" : 1085
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267)) "
          },
          "2" : {
            "sign" : -1222183879,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#267, d_date_id#268, d_date#269, d_month_seq#270, d_week_seq#271, d_quarter_seq#272, d_year#273, d_dow#274, d_moy#275, d_dom#276, d_qoy#277, d_fy_year#278, d_fy_quarter_seq#279, d_fy_week_seq#280, d_day_name#281, d_quarter_name#282, d_holiday#283, d_weekend#284, d_following_holiday#285, d_first_dom#286, d_last_dom#287, d_same_day_ly#288, d_same_day_lq#289, d_current_day#290, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#267]\n+- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_date_id#268,d_date#269,d_month_seq#270,d_week_seq#271,d_quarter_seq#272,d_year#273,d_dow#274,d_moy#275,d_dom#276,d_qoy#277,d_fy_year#278,d_fy_quarter_seq#279,d_fy_week_seq#280,d_day_name#281,d_quarter_name#282,d_holiday#283,d_weekend#284,d_following_holiday#285,d_first_dom#286,d_last_dom#287,d_same_day_ly#288,d_same_day_lq#289,d_current_day#290,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1434168731,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 13020,
            "rowCount" : 1085,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#267] Input [2]: [d_date_sk#267, d_year#273] "
          },
          "1" : {
            "sign" : 1344021054,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 13020,
            "rowCount" : 1085,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#267, d_year#273] Condition : (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267)) "
          },
          "2" : {
            "sign" : -549956713,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 13020,
            "rowCount" : 1085,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#267, d_year#273] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#267]\n+- Filter (d_year#273 IN (1999,2000,2001) AND isnotnull(d_date_sk#267))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#267,d_year#273] Batched: true, DataFilters: [d_year#273 IN (1999,2000,2001), isnotnull(d_date_sk#267)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13020,
        "inputRowCount" : 1085
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1695,
        "TotalTasksDurationInMs" : 1690,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226824855,
  "SQLEndTimeInMs" : 1702226870584,
  "Objectives" : {
    "DurationInMs" : 45729,
    "IOBytes" : {
      "Total" : 4161736092,
      "Details" : {
        "IR" : 596588404,
        "IW" : 0,
        "SR" : 1782573844,
        "SW" : 1782573844
      }
    }
  }
}
