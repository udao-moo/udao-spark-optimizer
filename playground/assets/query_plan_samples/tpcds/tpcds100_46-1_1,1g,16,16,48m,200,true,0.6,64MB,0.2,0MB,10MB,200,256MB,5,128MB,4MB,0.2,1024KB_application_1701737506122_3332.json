{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -1766203300,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 316800,
          "rowCount" : 7200,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#83, hd_income_band_sk#84, hd_buy_potential#85, hd_dep_count#86, hd_vehicle_count#87], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 285733045,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#119, ca_address_id#120, ca_street_number#121, ca_street_name#122, ca_street_type#123, ca_suite_number#124, ca_city#125, ca_county#126, ca_state#127, ca_zip#128, ca_country#129, ca_gmt_offset#130, ca_location_type#131], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1933976954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105)) "
        },
        "19" : {
          "sign" : 2017880022,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14124792500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#7 = hd_demo_sk#83) "
        },
        "23" : {
          "sign" : -1926811063,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 34775225760,
          "rowCount" : 228784380,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#148 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42)))) "
        },
        "4" : {
          "sign" : -998313469,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 32730230169,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#125 = bought_city#0)) "
        },
        "15" : {
          "sign" : -502044615,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 39871859691,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
        },
        "11" : {
          "sign" : -220152244,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 238630578,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#119) AND isnotnull(ca_city#125)) "
        },
        "9" : {
          "sign" : -459886681,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#101, c_customer_id#102, c_current_cdemo_sk#103, c_current_hdemo_sk#104, c_current_addr_sk#105, c_first_shipto_date_sk#106, c_first_sales_date_sk#107, c_salutation#108, c_first_name#109, c_last_name#110, c_preferred_cust_flag#111, c_birth_day#112, c_birth_month#113, c_birth_year#114, c_birth_country#115, c_login#116, c_email_address#117, c_last_review_date#118], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "33" : {
          "sign" : 1103338875,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 80608,
          "rowCount" : 1832,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83)) "
        },
        "22" : {
          "sign" : 1564259663,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11896787760,
          "rowCount" : 228784380,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] "
        },
        "26" : {
          "sign" : 1062943587,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 76260,
          "rowCount" : 310,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26)) "
        },
        "37" : {
          "sign" : -1117146513,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#88, ca_address_id#89, ca_street_number#90, ca_street_name#91, ca_street_type#92, ca_suite_number#93, ca_city#94, ca_county#95, ca_state#96, ca_zip#97, ca_country#98, ca_gmt_offset#99, ca_location_type#100], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 305665936,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 32937623223,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#0, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#1, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#2] "
        },
        "24" : {
          "sign" : -628374504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "35" : {
          "sign" : 1006642078,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32011419,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#88, ca_city#94] "
        },
        "16" : {
          "sign" : 1144442670,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 17890150720,
          "rowCount" : 275233088,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
        },
        "5" : {
          "sign" : -289606950,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 140711200,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#125] "
        },
        "10" : {
          "sign" : 795107244,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32011419,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#119, ca_city#125] "
        },
        "21" : {
          "sign" : 1933769281,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14870272760,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#25 = d_date_sk#26) "
        },
        "32" : {
          "sign" : -1699636063,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 21984,
          "rowCount" : 1832,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [hd_demo_sk#83] "
        },
        "6" : {
          "sign" : 1237118756,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 156792480,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#119) "
        },
        "36" : {
          "sign" : 588086180,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 238630578,
          "rowCount" : 970043,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#88) AND isnotnull(ca_city#94)) "
        },
        "1" : {
          "sign" : 150852541,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 30529878561,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -167899924,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18991083072,
          "rowCount" : 275233088,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
        },
        "25" : {
          "sign" : -1715335643,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3720,
          "rowCount" : 310,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
        },
        "14" : {
          "sign" : 505566366,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 35249035379,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
        },
        "31" : {
          "sign" : -1663611938,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#54, s_store_id#55, s_rec_start_date#56, s_rec_end_date#57, s_closed_date_sk#58, s_store_name#59, s_number_employees#60, s_floor_space#61, s_hours#62, s_manager#63, s_market_id#64, s_geography_class#65, s_market_desc#66, s_market_manager#67, s_division_id#68, s_division_name#69, s_company_id#70, s_company_name#71, s_street_number#72, s_street_name#73, s_street_type#74, s_suite_number#75, s_city#76, s_county#77, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : 2000413980,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 11200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1366067066,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12745948080,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
        },
        "27" : {
          "sign" : 440418152,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : -1354752442,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 30529878561,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#125 ASC NULLS FIRST, bought_city#0 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -659259582,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11951747500,
          "rowCount" : 271630625,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
        },
        "30" : {
          "sign" : 2138383260,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 53648,
          "rowCount" : 112,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
        },
        "7" : {
          "sign" : -40852712,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 106000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] "
        },
        "29" : {
          "sign" : -678422519,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1344,
          "rowCount" : 112,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#54] "
        },
        "3" : {
          "sign" : -667044594,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 30529878561,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#125, bought_city#0, ss_ticket_number#11L, amt#1, profit#2] "
        },
        "28" : {
          "sign" : 372720690,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#150] "
        }
      },
      "links" : [ {
        "fromId" : 9,
        "fromName" : "LogicalRelation",
        "toId" : 8,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Filter",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Aggregate",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Join",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "LogicalRelation",
        "toId" : 36,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Filter",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Join",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#125 ASC NULLS FIRST, bought_city#0 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#125, bought_city#0, ss_ticket_number#11L, amt#1, profit#2]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#125 = bought_city#0))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#125]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#119)\n            :     :- Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110]\n            :     :  +- Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n            :     :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#101,c_customer_id#102,c_current_cdemo_sk#103,c_current_hdemo_sk#104,c_current_addr_sk#105,c_first_shipto_date_sk#106,c_first_sales_date_sk#107,c_salutation#108,c_first_name#109,c_last_name#110,c_preferred_cust_flag#111,c_birth_day#112,c_birth_month#113,c_birth_year#114,c_birth_country#115,c_login#116,c_email_address#117,c_last_review_date#118] parquet\n            :     +- Project [ca_address_sk#119, ca_city#125]\n            :        +- Filter (isnotnull(ca_address_sk#119) AND isnotnull(ca_city#125))\n            :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#119,ca_address_id#120,ca_street_number#121,ca_street_name#122,ca_street_type#123,ca_suite_number#124,ca_city#125,ca_county#126,ca_state#127,ca_zip#128,ca_country#129,ca_gmt_offset#130,ca_location_type#131] parquet\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#0, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#1, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#2]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :  +- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n                     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n                     :     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#148 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#26]\n                     :     :     :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#150]\n                     :     :     :     :     :     +- Project [s_store_sk#54]\n                     :     :     :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n                     :     :     :     +- Project [d_date_sk#26]\n                     :     :     :        +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     +- Project [hd_demo_sk#83]\n                     :     :        +- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n                     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_income_band_sk#84,hd_buy_potential#85,hd_dep_count#86,hd_vehicle_count#87] parquet\n                     :     +- Project [ca_address_sk#88, ca_city#94]\n                     :        +- Filter (isnotnull(ca_address_sk#88) AND isnotnull(ca_city#94))\n                     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#88,ca_address_id#89,ca_street_number#90,ca_street_name#91,ca_street_type#92,ca_suite_number#93,ca_city#94,ca_county#95,ca_state#96,ca_zip#97,ca_country#98,ca_gmt_offset#99,ca_location_type#100] parquet\n                     +- Project [s_store_sk#54]\n                        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42817373068,
      "inputRowCount" : 279126004
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1023683796,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 69422804309040,
            "rowCount" : 578523369242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "5" : {
            "sign" : 1541198922,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8 "
          },
          "6" : {
            "sign" : 1414627635,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17985240,
            "rowCount" : 298207,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : 556200338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 64794617355104,
            "rowCount" : 578523369242,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1283521815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1625187501,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 64794617355104,
            "rowCount" : 578523369242,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -930482117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64794617355104,
            "rowCount" : 578523369242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- LogicalQueryStage Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8\n            +- LogicalQueryStage Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 151003840,
        "inputRowCount" : 2238213
      },
      "PD" : {
        "5" : [ 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 57565, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331 ],
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227037317,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1425,
        "IOBytes" : {
          "Total" : 83158348,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 83158348,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -872305210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16863576727480000,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "8" : {
            "sign" : -1512741639,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1 "
          },
          "4" : {
            "sign" : -1607924698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 199502890448471872761030000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "15" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1209221675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1809672577567697500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "9" : {
            "sign" : 1804841490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1490318593291045000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "13" : {
            "sign" : 533661728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17917550272947500,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "16" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 122931109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 133865934000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] "
          },
          "10" : {
            "sign" : 541723388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1596769921383262500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "6" : {
            "sign" : 469779771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 149386622000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#155) "
          },
          "1" : {
            "sign" : 1084650124,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 186202697751907081243628000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 594322071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 864696379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 624331045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 186202697751907081243628000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 873995830,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0 "
          },
          "3" : {
            "sign" : 2117899381,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 186202697751907081243628000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n            :     :- LogicalQueryStage Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12129231748,
        "inputRowCount" : 275570812
      },
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 13,
        "FinishedTasksTotalTimeInMs" : 21384.0,
        "FinishedTasksDistributionInMs" : [ 1329.0, 1385.0, 1467.0, 1540.0, 2800.0 ]
      },
      "StartTimeInMs" : 1702227011827,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26915,
        "IOBytes" : {
          "Total" : 841142150,
          "Details" : {
            "IR" : 437417402,
            "IW" : 0,
            "SR" : 216017927,
            "SW" : 187706821
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -872305210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16863576727480000,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "8" : {
            "sign" : -1512741639,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1 "
          },
          "4" : {
            "sign" : -1607924698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208176929163622823750640000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "15" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1209221675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1809672577567697500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "9" : {
            "sign" : 1804841490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1490318593291045000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "13" : {
            "sign" : 533661728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17917550272947500,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "16" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 122931109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 139686192000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] "
          },
          "10" : {
            "sign" : 541723388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1596769921383262500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "6" : {
            "sign" : 469779771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 155206880000000,
            "rowCount" : 1940086000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#155) "
          },
          "1" : {
            "sign" : 1084650124,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 194298467219381302167264000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 594322071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 864696379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 624331045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 194298467219381302167264000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 873995830,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 112527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0 "
          },
          "3" : {
            "sign" : 2117899381,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 194298467219381302167264000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n            :     :- LogicalQueryStage Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12135759596,
        "inputRowCount" : 275570812
      },
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "0" : [ 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 19,
        "FinishedTasksTotalTimeInMs" : 53776.0,
        "FinishedTasksDistributionInMs" : [ 637.0, 1482.0, 1985.0, 5012.0, 5141.0 ]
      },
      "StartTimeInMs" : 1702227021056,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17686,
        "IOBytes" : {
          "Total" : 754883584,
          "Details" : {
            "IR" : 414630413,
            "IW" : 0,
            "SR" : 216017927,
            "SW" : 124235244
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "8" : {
            "sign" : 1209221675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1809672577567697500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "4" : {
            "sign" : -960309903,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 198240092833544198437000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "11" : {
            "sign" : 594322071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7 "
          },
          "9" : {
            "sign" : -872305210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16863576727480000,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "13" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 1541198922,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8 "
          },
          "10" : {
            "sign" : 533661728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17917550272947500,
            "rowCount" : 263493386366875,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "6" : {
            "sign" : 1804841490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1490318593291045000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "1" : {
            "sign" : 494796819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 185024086644641251874533333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 289359558,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -889069584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 185024086644641251874533333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 541723388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1596769921383262500,
            "rowCount" : 26612832023054375,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "3" : {
            "sign" : 1117139274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 185024086644641251874533333,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- LogicalQueryStage Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12121034108,
        "inputRowCount" : 274540775
      },
      "PD" : {
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ],
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 21,
        "FinishedTasksTotalTimeInMs" : 68797.0,
        "FinishedTasksDistributionInMs" : [ 637.0, 1531.0, 1988.0, 5014.0, 8114.0 ]
      },
      "StartTimeInMs" : 1702227025946,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12796,
        "IOBytes" : {
          "Total" : 603828812,
          "Details" : {
            "IR" : 414630413,
            "IW" : 0,
            "SR" : 138390797,
            "SW" : 50807602
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 871927179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17890150720,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "8" : {
            "sign" : -1512741639,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1 "
          },
          "19" : {
            "sign" : 197705964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34775225760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42)))) "
          },
          "23" : {
            "sign" : 440418152,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -504016715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "15" : {
            "sign" : -1086916656,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#7 = hd_demo_sk#83) "
          },
          "11" : {
            "sign" : 1167110982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1918099390272,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "9" : {
            "sign" : 1936073261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1584516887616,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "22" : {
            "sign" : 1062943587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 76260,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26)) "
          },
          "26" : {
            "sign" : 2138383260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 53648,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
          },
          "13" : {
            "sign" : -1009740075,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18991083072,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "24" : {
            "sign" : 1414307599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180] "
          },
          "16" : {
            "sign" : -810327352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3448238175360,
            "rowCount" : 71838295320,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "5" : {
            "sign" : 122931109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] "
          },
          "10" : {
            "sign" : -2065306465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1695711055168,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "21" : {
            "sign" : -1715335643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3720,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
          },
          "6" : {
            "sign" : 469779771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#155) "
          },
          "1" : {
            "sign" : -1120508121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1291836771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4022944537920,
            "rowCount" : 71838295320,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#25 = d_date_sk#26) "
          },
          "25" : {
            "sign" : -678422519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#54] "
          },
          "14" : {
            "sign" : -505618982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "31" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -596780416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1663611938,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#54, s_store_id#55, s_rec_start_date#56, s_rec_end_date#57, s_closed_date_sk#58, s_store_name#59, s_number_employees#60, s_floor_space#61, s_hours#62, s_manager#63, s_market_id#64, s_geography_class#65, s_market_desc#66, s_market_manager#67, s_division_id#68, s_division_name#69, s_company_id#70, s_company_name#71, s_street_number#72, s_street_name#73, s_street_type#74, s_suite_number#75, s_city#76, s_county#77, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -893222506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -2088069262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11896787760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "30" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "7" : {
            "sign" : 873995830,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0 "
          },
          "29" : {
            "sign" : -1184419401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#83], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : 166972432,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          },
          "28" : {
            "sign" : -1486923546,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1057328,
            "rowCount" : 314,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#26], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n            :     :- LogicalQueryStage Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :  +- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n                     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n                     :     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#26]\n                     :     :     :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n                     :     :     :     :     :     +- Project [s_store_sk#54]\n                     :     :     :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n                     :     :     :     +- LogicalQueryStage Project [d_date_sk#26], BroadcastQueryStage 2\n                     :     :     +- LogicalQueryStage Project [hd_demo_sk#83], BroadcastQueryStage 3\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41979047574,
        "inputRowCount" : 278987686
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 16159.0,
        "FinishedTasksDistributionInMs" : [ 118.0, 1329.0, 1399.0, 1474.0, 1593.0 ]
      },
      "StartTimeInMs" : 1702227010754,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27988,
        "IOBytes" : {
          "Total" : 860639396,
          "Details" : {
            "IR" : 442758131,
            "IW" : 0,
            "SR" : 216018409,
            "SW" : 201862856
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 871927179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17890150720,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "8" : {
            "sign" : -1512741639,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1 "
          },
          "19" : {
            "sign" : 197705964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 34775225760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42)))) "
          },
          "23" : {
            "sign" : 440418152,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -504016715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "15" : {
            "sign" : -1086916656,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6724064441952000,
            "rowCount" : 129308931576000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#7 = hd_demo_sk#83) "
          },
          "11" : {
            "sign" : 1167110982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1918099390272,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "9" : {
            "sign" : 1936073261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1584516887616,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "22" : {
            "sign" : 1062943587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 76260,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26)) "
          },
          "26" : {
            "sign" : 2138383260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 53648,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
          },
          "13" : {
            "sign" : -1009740075,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18991083072,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "24" : {
            "sign" : 1414307599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180] "
          },
          "16" : {
            "sign" : -810327352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3448238175360,
            "rowCount" : 71838295320,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "5" : {
            "sign" : 122931109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] "
          },
          "10" : {
            "sign" : -2065306465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1695711055168,
            "rowCount" : 27798541888,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "21" : {
            "sign" : -1715335643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3720,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
          },
          "6" : {
            "sign" : 469779771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#155) "
          },
          "1" : {
            "sign" : -1120508121,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1291836771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4022944537920,
            "rowCount" : 71838295320,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#25 = d_date_sk#26) "
          },
          "25" : {
            "sign" : -678422519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#54] "
          },
          "14" : {
            "sign" : -505618982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5689592989344000,
            "rowCount" : 129308931576000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "31" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -596780416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1663611938,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#54, s_store_id#55, s_rec_start_date#56, s_rec_end_date#57, s_closed_date_sk#58, s_store_name#59, s_number_employees#60, s_floor_space#61, s_hours#62, s_manager#63, s_market_id#64, s_geography_class#65, s_market_desc#66, s_market_manager#67, s_division_id#68, s_division_name#69, s_company_id#70, s_company_name#71, s_street_number#72, s_street_name#73, s_street_type#74, s_suite_number#75, s_city#76, s_county#77, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -893222506,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -2088069262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11896787760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "30" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "7" : {
            "sign" : 873995830,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0 "
          },
          "29" : {
            "sign" : -1184419401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1097536,
            "rowCount" : 1800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#83], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : 166972432,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          },
          "28" : {
            "sign" : -1486923546,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1057328,
            "rowCount" : 314,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#26], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n            :     :- LogicalQueryStage Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110], ShuffleQueryStage 0\n            :     +- LogicalQueryStage Project [ca_address_sk#155, ca_city#161], ShuffleQueryStage 1\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :  +- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n                     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n                     :     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#26]\n                     :     :     :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n                     :     :     :     :     :     +- Project [s_store_sk#54]\n                     :     :     :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n                     :     :     :     +- LogicalQueryStage Project [d_date_sk#26], BroadcastQueryStage 2\n                     :     :     +- LogicalQueryStage Project [hd_demo_sk#83], BroadcastQueryStage 3\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41980123126,
        "inputRowCount" : 278987654
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 16159.0,
        "FinishedTasksDistributionInMs" : [ 118.0, 1329.0, 1399.0, 1474.0, 1593.0 ]
      },
      "StartTimeInMs" : 1702227010826,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27916,
        "IOBytes" : {
          "Total" : 860639396,
          "Details" : {
            "IR" : 442758131,
            "IW" : 0,
            "SR" : 216018409,
            "SW" : 201862856
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1062204383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5 "
          },
          "8" : {
            "sign" : 1209221675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22430407940034636,
            "rowCount" : 329858940294627,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "4" : {
            "sign" : -960309903,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2457132968386592779483200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "11" : {
            "sign" : 594322071,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 188540184,
            "rowCount" : 3366789,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7 "
          },
          "9" : {
            "sign" : -872305210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 209019526523328,
            "rowCount" : 3265930101927,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "13" : {
            "sign" : -459200959,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#54], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 1541198922,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8 "
          },
          "10" : {
            "sign" : 533661728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 222083246931036,
            "rowCount" : 3265930101927,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "6" : {
            "sign" : 1804841490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 18472100656499112,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "1" : {
            "sign" : 494796819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2293324103827486594184320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 289359558,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -889069584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2293324103827486594184320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 541723388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19791536417677620,
            "rowCount" : 329858940294627,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "3" : {
            "sign" : 1117139274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2293324103827486594184320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- LogicalQueryStage Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161], ShuffleQueryStage 8\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- LogicalQueryStage Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24], ShuffleQueryStage 7\n                     :     +- LogicalQueryStage Project [ca_address_sk#88, ca_city#94], ShuffleQueryStage 5\n                     +- LogicalQueryStage Project [s_store_sk#54], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 357826792,
        "inputRowCount" : 6276939
      },
      "PD" : {
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ],
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "3" : [ 237114, 219898, 217722, 217087, 216915, 210216, 209364, 215412, 207289, 221899, 211748, 217257, 217138, 207921, 211139, 210180, 205284, 221197, 210111, 218737, 215984, 214391, 223675, 211423, 226710, 218074, 221397, 210912, 221050, 216807, 212015, 209448, 216768, 211575, 226681, 226662, 213084, 209340, 206458, 214349, 216457, 217785, 209683, 208131, 209325, 209941, 217685, 216487, 206112, 204324, 225723, 216520, 217831, 207644, 218327, 215957, 212982, 212358, 215536, 206241, 216405, 214519, 207926, 215347, 216641, 215728, 212260, 211161, 216228, 230456, 221589, 211192, 208367, 223754, 213075, 213735, 215125, 218297, 216828, 214449, 215823, 213457, 224821, 216976, 216310, 204388, 214236, 210799, 214220, 230330, 200846, 220916, 223553, 218795, 221681, 227351, 218986, 211335, 211928, 209021, 209722, 224632, 213251, 206829, 211811, 214792, 216952, 215774, 218294, 212221, 211778, 209595, 208329, 220757, 220547, 220220, 208839, 212242, 217016, 223820, 207459, 226414, 211459, 210716, 219048, 226839, 207695, 213299, 207009, 211416, 214178, 221314, 214799, 215670, 207311, 215430, 224833, 221021, 222535, 217439, 216858, 208144, 214252, 212207, 217753, 220820, 231225, 211192, 203862, 206141, 216057, 208410, 218073, 213820, 217648, 221326, 209265, 210877, 218669, 210616, 210853, 214453, 224405, 210831, 215293, 222827, 205968, 211051, 221096, 226776, 228441, 220857, 222089, 219772, 212870, 218502, 219751, 217300, 213143, 212568, 218221, 214534, 220460, 211936, 221453, 218391, 222723, 223370, 208831, 210390, 214973, 220735, 202700, 209986, 215425, 214108, 232854, 217142, 224775, 211260 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227032985,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5757,
        "IOBytes" : {
          "Total" : 148121503,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 138390797,
            "SW" : 9730706
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -36478245,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 440,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 440,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 11,
        "FinishedTasksTotalTimeInMs" : 15785.0,
        "FinishedTasksDistributionInMs" : [ 1329.0, 1350.0, 1442.0, 1477.0, 1593.0 ]
      },
      "StartTimeInMs" : 1702227011495,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27247,
        "IOBytes" : {
          "Total" : 841142632,
          "Details" : {
            "IR" : 437417402,
            "IW" : 0,
            "SR" : 216018409,
            "SW" : 187706821
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1191510990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 140711200,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 140711200,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] "
          },
          "1" : {
            "sign" : 464741892,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 156792480,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 156792480,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#105 = ca_address_sk#155) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n+- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n   :- Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110]\n   :  +- Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n   :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#101,c_customer_id#102,c_current_cdemo_sk#103,c_current_hdemo_sk#104,c_current_addr_sk#105,c_first_shipto_date_sk#106,c_first_sales_date_sk#107,c_salutation#108,c_first_name#109,c_last_name#110,c_preferred_cust_flag#111,c_birth_day#112,c_birth_month#113,c_birth_year#114,c_birth_country#115,c_login#116,c_email_address#117,c_last_review_date#118] parquet\n   +- Project [ca_address_sk#155, ca_city#161]\n      +- Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n         +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_address_id#156,ca_street_number#157,ca_street_name#158,ca_street_type#159,ca_suite_number#160,ca_city#161,ca_county#162,ca_state#163,ca_zip#164,ca_country#165,ca_gmt_offset#166,ca_location_type#167] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1367767659,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#155, ca_city#161] Arguments: [ca_address_sk#155 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 2022107785,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#155, ca_city#161] Arguments: 1 "
          },
          "1" : {
            "sign" : -1326808922,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 156792480,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_current_addr_sk#105] Right keys [1]: [ca_address_sk#155] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1999036970,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 140711200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] Input [6]: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110, ca_address_sk#155, ca_city#161] "
          },
          "2" : {
            "sign" : 76471623,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] Arguments: [c_current_addr_sk#105 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1992660120,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 112527848,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n+- SortMergeJoin [c_current_addr_sk#105], [ca_address_sk#155], Inner\n   :- Sort [c_current_addr_sk#105 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(c_current_addr_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=232]\n   :        +- *(1) Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#101,c_current_addr_sk#105,c_first_name#109,c_last_name#110] Batched: true, DataFilters: [isnotnull(c_customer_sk#101), isnotnull(c_current_addr_sk#105)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n   +- Sort [ca_address_sk#155 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(ca_address_sk#155, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n            +- *(2) Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_city#161] Batched: true, DataFilters: [isnotnull(ca_address_sk#155), isnotnull(ca_city#161)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 147744088,
        "inputRowCount" : 2970043
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "0" : [ 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 352062, 320056, 352062, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 320056, 352062, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 352062, 320056, 320056, 352062, 352062, 352062, 352062, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 320056, 352062, 320056, 320056, 352062 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 19,
        "FinishedTasksTotalTimeInMs" : 53776.0,
        "FinishedTasksDistributionInMs" : [ 637.0, 1482.0, 1985.0, 5012.0, 5141.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4755,
        "TotalTasksDurationInMs" : 6010,
        "IOBytes" : {
          "Total" : 151054772,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 77627130,
            "SW" : 73427642
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1276681732,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32011419,
                "rowCount" : 970043
              },
              "compileTime" : {
                "sizeInBytes" : 32011419,
                "rowCount" : 970043
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#155, ca_city#161] "
          },
          "1" : {
            "sign" : 2127250340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 238630578,
                "rowCount" : 970043
              },
              "compileTime" : {
                "sizeInBytes" : 238630578,
                "rowCount" : 970043
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161)) "
          },
          "2" : {
            "sign" : 1453883661,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#155, ca_address_id#156, ca_street_number#157, ca_street_name#158, ca_street_type#159, ca_suite_number#160, ca_city#161, ca_county#162, ca_state#163, ca_zip#164, ca_country#165, ca_gmt_offset#166, ca_location_type#167], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#155, ca_city#161]\n+- Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_address_id#156,ca_street_number#157,ca_street_name#158,ca_street_type#159,ca_suite_number#160,ca_city#161,ca_county#162,ca_state#163,ca_zip#164,ca_country#165,ca_gmt_offset#166,ca_location_type#167] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -642682529,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#155, ca_city#161] Condition : (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161)) "
          },
          "1" : {
            "sign" : 457868424,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 32011419,
            "rowCount" : 970043,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#155, ca_city#161] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)] ReadSchema: struct<ca_address_sk:int,ca_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_city#161] Batched: true, DataFilters: [isnotnull(ca_address_sk#155), isnotnull(ca_city#161)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 32011419,
        "inputRowCount" : 970043
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2414,
        "TotalTasksDurationInMs" : 2234,
        "IOBytes" : {
          "Total" : 19481446,
          "Details" : {
            "IR" : 5325893,
            "IW" : 0,
            "SR" : 0,
            "SW" : 14155553
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -907865815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18991083072,
                "rowCount" : 275233088
              },
              "compileTime" : {
                "sizeInBytes" : 18991083072,
                "rowCount" : 275233088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_addr_sk#8 = ca_address_sk#88) "
          },
          "1" : {
            "sign" : 167684571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 35249035379,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 35249035379,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          },
          "0" : {
            "sign" : -385372753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32937623223,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 32937623223,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154] "
          },
          "2" : {
            "sign" : 1181105014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39871859691,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 39871859691,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#54) "
          },
          "3" : {
            "sign" : -1157898159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17890150720,
                "rowCount" : 275233088
              },
              "compileTime" : {
                "sizeInBytes" : 17890150720,
                "rowCount" : 275233088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n+- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n   +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n      :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n      :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n      :     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n      :     :  +- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n      :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n      :     :     :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n      :     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n      :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42))))\n      :     :     :     :     :  :- Project [d_date_sk#26]\n      :     :     :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n      :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n      :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n      :     :     :     :     :     +- Project [s_store_sk#54]\n      :     :     :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n      :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n      :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n      :     :     :     +- Project [d_date_sk#26]\n      :     :     :        +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n      :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n      :     :     +- Project [hd_demo_sk#83]\n      :     :        +- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n      :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_income_band_sk#84,hd_buy_potential#85,hd_dep_count#86,hd_vehicle_count#87] parquet\n      :     +- Project [ca_address_sk#88, ca_city#94]\n      :        +- Filter (isnotnull(ca_address_sk#88) AND isnotnull(ca_city#94))\n      :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#88,ca_address_id#89,ca_street_number#90,ca_street_name#91,ca_street_type#92,ca_suite_number#93,ca_city#94,ca_county#95,ca_state#96,ca_zip#97,ca_country#98,ca_gmt_offset#99,ca_location_type#100] parquet\n      +- Project [s_store_sk#54]\n         +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n            +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -889069513,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#88, ca_city#94] Arguments: [ca_address_sk#88 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -1582497424,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 17890150720,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] Input [8]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_address_sk#88, ca_city#94] "
          },
          "9" : {
            "sign" : 411231388,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35216240,
            "rowCount" : 970043,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#88, ca_city#94] Arguments: 5 "
          },
          "5" : {
            "sign" : 444388076,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 18991083072,
            "rowCount" : 275233088,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_addr_sk#8] Right keys [1]: [ca_address_sk#88] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : -870255727,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051768,
            "rowCount" : 101,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [s_store_sk#54] Arguments: 6 "
          },
          "6" : {
            "sign" : 1192337073,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] Arguments: [ss_addr_sk#8 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 2109000648,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32937623223,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] Keys [4]: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94] Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#21)), partial_sum(UnscaledValue(ss_net_profit#24))] Aggregate Attributes [2]: [sum#182L, sum#183L] Results [6]: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94, sum#184L, sum#185L] "
          },
          "0" : {
            "sign" : 265990010,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 32937623223,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94, sum#184L, sum#185L] Keys [4]: [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94] Functions [2]: [sum(UnscaledValue(ss_coupon_amt#21)), sum(UnscaledValue(ss_net_profit#24))] Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#21))#168L, sum(UnscaledValue(ss_net_profit#24))#169L] Results [5]: [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21))#168L,17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24))#169L,17,2) AS profit#154] "
          },
          "2" : {
            "sign" : 562696510,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 35249035379,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94] Input [8]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94, s_store_sk#54] "
          },
          "7" : {
            "sign" : -1332459505,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 188540184,
            "rowCount" : 3366789,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] Arguments: 7 "
          },
          "3" : {
            "sign" : 1895877629,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 39871859691,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#54] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], functions=[sum(UnscaledValue(ss_coupon_amt#21)), sum(UnscaledValue(ss_net_profit#24))], output=[ss_ticket_number#11L, ss_customer_sk#5, bought_city#152, amt#153, profit#154])\n+- HashAggregate(keys=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], functions=[partial_sum(UnscaledValue(ss_coupon_amt#21)), partial_sum(UnscaledValue(ss_net_profit#24))], output=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94, sum#184L, sum#185L])\n   +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n      +- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#54], Inner, BuildRight, false\n         :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n         :  +- SortMergeJoin [ss_addr_sk#8], [ca_address_sk#88], Inner\n         :     :- Sort [ss_addr_sk#8 ASC NULLS FIRST], false, 0\n         :     :  +- ShuffleQueryStage 7\n         :     :     +- Exchange hashpartitioning(ss_addr_sk#8, 200), ENSURE_REQUIREMENTS, [plan_id=730]\n         :     :        +- *(7) Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n         :     :           +- *(7) BroadcastHashJoin [ss_hdemo_sk#7], [hd_demo_sk#83], Inner, BuildRight, false\n         :     :              :- *(7) Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n         :     :              :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n         :     :              :     :- *(7) Filter ((((isnotnull(ss_store_sk#9) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#181, [id=#128], xxhash64(ss_store_sk#9, 42)))\n         :     :              :     :  :  +- Subquery subquery#181, [id=#128]\n         :     :              :     :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n                                                   +- ShuffleQueryStage 0\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=794]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n                                                            +- *(1) Project [s_store_sk#54]\n                                                               +- *(1) Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                                                                  +- *(1) ColumnarToRow\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                                +- == Initial Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n                                                         +- Project [s_store_sk#54]\n                                                            +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n         :     :              :     :  +- *(7) ColumnarToRow\n         :     :              :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#5,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_ticket_number#11L,ss_coupon_amt#21,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_store_sk#9), isnotnull(ss_hdemo_sk#7), isnotnull(ss_addr_sk#8), isnotnull(ss_custom..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#178)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n         :     :              :     :           +- SubqueryBroadcast dynamicpruning#178, 0, [d_date_sk#26], [id=#693]\n         :     :              :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=690]\n                                                         +- Project [d_date_sk#26]\n                                                            +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n         :     :              :     +- BroadcastQueryStage 2\n         :     :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n         :     :              :           +- *(3) Project [d_date_sk#26]\n         :     :              :              +- *(3) Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n         :     :              :                 +- *(3) ColumnarToRow\n         :     :              :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n         :     :              +- BroadcastQueryStage 3\n         :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n         :     :                    +- *(4) Project [hd_demo_sk#83]\n         :     :                       +- *(4) Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n         :     :                          +- *(4) ColumnarToRow\n         :     :                             +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_dep_count#86,hd_vehicle_count#87] Batched: true, DataFilters: [((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)), isnotnull(hd_demo_sk#83)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n         :     +- Sort [ca_address_sk#88 ASC NULLS FIRST], false, 0\n         :        +- ShuffleQueryStage 5\n         :           +- ReusedExchange [ca_address_sk#88, ca_city#94], Exchange hashpartitioning(ca_address_sk#155, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n         +- BroadcastQueryStage 6\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=407]\n               +- *(6) Project [s_store_sk#54]\n                  +- *(6) Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                     +- *(6) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 224808192,
        "inputRowCount" : 4336933
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 76619, 69653, 69653, 76619, 76619, 76619, 76619, 76619, 76619 ],
        "3" : [ 237114, 219898, 217722, 217087, 216915, 210216, 209364, 215412, 207289, 221899, 211748, 217257, 217138, 207921, 211139, 210180, 205284, 221197, 210111, 218737, 215984, 214391, 223675, 211423, 226710, 218074, 221397, 210912, 221050, 216807, 212015, 209448, 216768, 211575, 226681, 226662, 213084, 209340, 206458, 214349, 216457, 217785, 209683, 208131, 209325, 209941, 217685, 216487, 206112, 204324, 225723, 216520, 217831, 207644, 218327, 215957, 212982, 212358, 215536, 206241, 216405, 214519, 207926, 215347, 216641, 215728, 212260, 211161, 216228, 230456, 221589, 211192, 208367, 223754, 213075, 213735, 215125, 218297, 216828, 214449, 215823, 213457, 224821, 216976, 216310, 204388, 214236, 210799, 214220, 230330, 200846, 220916, 223553, 218795, 221681, 227351, 218986, 211335, 211928, 209021, 209722, 224632, 213251, 206829, 211811, 214792, 216952, 215774, 218294, 212221, 211778, 209595, 208329, 220757, 220547, 220220, 208839, 212242, 217016, 223820, 207459, 226414, 211459, 210716, 219048, 226839, 207695, 213299, 207009, 211416, 214178, 221314, 214799, 215670, 207311, 215430, 224833, 221021, 222535, 217439, 216858, 208144, 214252, 212207, 217753, 220820, 231225, 211192, 203862, 206141, 216057, 208410, 218073, 213820, 217648, 221326, 209265, 210877, 218669, 210616, 210853, 214453, 224405, 210831, 215293, 222827, 205968, 211051, 221096, 226776, 228441, 220857, 222089, 219772, 212870, 218502, 219751, 217300, 213143, 212568, 218221, 214534, 220460, 211936, 221453, 218391, 222723, 223370, 208831, 210390, 214973, 220735, 202700, 209986, 215425, 214108, 232854, 217142, 224775, 211260 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 4096,
        "TotalTasksDurationInMs" : 4084,
        "IOBytes" : {
          "Total" : 64963155,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 55232449,
            "SW" : 9730706
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1414307599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n+- Project [s_store_sk#54]\n   +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n      +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1485257644,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [s_store_sk#54] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)] Aggregate Attributes [1]: [buf#186] Results [1]: [buf#187] "
          },
          "1" : {
            "sign" : -2117470580,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#54] Input [2]: [s_store_sk#54, s_city#76] "
          },
          "2" : {
            "sign" : 783206367,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#54, s_city#76] Condition : (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
          },
          "3" : {
            "sign" : -684837215,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#54, s_city#76] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n+- Project [s_store_sk#54]\n   +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1344,
        "inputRowCount" : 112
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 16159.0,
        "FinishedTasksDistributionInMs" : [ 118.0, 1329.0, 1399.0, 1474.0, 1593.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 551,
        "TotalTasksDurationInMs" : 515,
        "IOBytes" : {
          "Total" : 15318,
          "Details" : {
            "IR" : 14836,
            "IW" : 0,
            "SR" : 0,
            "SW" : 482
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1996354896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32730230169,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 32730230169,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152)) "
          },
          "1" : {
            "sign" : 1921497166,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -472828443,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 11200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2020570097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1824861819,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 30529878561,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], true\n      +- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n         +- Join Inner, ((ss_customer_sk#5 = c_customer_sk#101) AND NOT (ca_city#161 = bought_city#152))\n            :- Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n            :  +- Join Inner, (c_current_addr_sk#105 = ca_address_sk#155)\n            :     :- Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110]\n            :     :  +- Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n            :     :     +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#101,c_customer_id#102,c_current_cdemo_sk#103,c_current_hdemo_sk#104,c_current_addr_sk#105,c_first_shipto_date_sk#106,c_first_sales_date_sk#107,c_salutation#108,c_first_name#109,c_last_name#110,c_preferred_cust_flag#111,c_birth_day#112,c_birth_month#113,c_birth_year#114,c_birth_country#115,c_login#116,c_email_address#117,c_last_review_date#118] parquet\n            :     +- Project [ca_address_sk#155, ca_city#161]\n            :        +- Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n            :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_address_id#156,ca_street_number#157,ca_street_name#158,ca_street_type#159,ca_suite_number#160,ca_city#161,ca_county#162,ca_state#163,ca_zip#164,ca_country#165,ca_gmt_offset#166,ca_location_type#167] parquet\n            +- Aggregate [ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], [ss_ticket_number#11L, ss_customer_sk#5, ca_city#94 AS bought_city#152, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#21)),17,2) AS amt#153, MakeDecimal(sum(UnscaledValue(ss_net_profit#24)),17,2) AS profit#154]\n               +- Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                  +- Join Inner, (ss_store_sk#9 = s_store_sk#54)\n                     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                     :  +- Join Inner, (ss_addr_sk#8 = ca_address_sk#88)\n                     :     :- Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :  +- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n                     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                     :     :     :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n                     :     :     :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n                     :     :     :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42))))\n                     :     :     :     :     :  :- Project [d_date_sk#26]\n                     :     :     :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n                     :     :     :     :     :     +- Project [s_store_sk#54]\n                     :     :     :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n                     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n                     :     :     :     +- Project [d_date_sk#26]\n                     :     :     :        +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     :     +- Project [hd_demo_sk#83]\n                     :     :        +- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n                     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_income_band_sk#84,hd_buy_potential#85,hd_dep_count#86,hd_vehicle_count#87] parquet\n                     :     +- Project [ca_address_sk#88, ca_city#94]\n                     :        +- Filter (isnotnull(ca_address_sk#88) AND isnotnull(ca_city#94))\n                     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#88,ca_address_id#89,ca_street_number#90,ca_street_name#91,ca_street_type#92,ca_suite_number#93,ca_city#94,ca_county#95,ca_state#96,ca_zip#97,ca_country#98,ca_gmt_offset#99,ca_location_type#100] parquet\n                     +- Project [s_store_sk#54]\n                        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 584812451,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 133018600,
            "rowCount" : 1940006,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] Arguments: 8 "
          },
          "5" : {
            "sign" : -134324468,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_ticket_number#11L, ss_customer_sk#5, bought_city#152, amt#153, profit#154] Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 2042522382,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17985240,
            "rowCount" : 298207,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_ticket_number#11L, ss_customer_sk#5, bought_city#152, amt#153, profit#154] Arguments: 9 "
          },
          "1" : {
            "sign" : 363942557,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 30529878561,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] Input [9]: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161, ss_ticket_number#11L, ss_customer_sk#5, bought_city#152, amt#153, profit#154] "
          },
          "0" : {
            "sign" : -1935550339,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 11200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [7]: [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] Arguments: 100, [c_last_name#110 ASC NULLS FIRST, c_first_name#109 ASC NULLS FIRST, ca_city#161 ASC NULLS FIRST, bought_city#152 ASC NULLS FIRST, ss_ticket_number#11L ASC NULLS FIRST], [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154] "
          },
          "2" : {
            "sign" : -732103758,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 32730230169,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_customer_sk#101] Right keys [1]: [ss_customer_sk#5] Join type: Inner Join condition: NOT (ca_city#161 = bought_city#152) "
          },
          "3" : {
            "sign" : 646008223,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161] Arguments: [c_customer_sk#101 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[c_last_name#110 ASC NULLS FIRST,c_first_name#109 ASC NULLS FIRST,ca_city#161 ASC NULLS FIRST,bought_city#152 ASC NULLS FIRST,ss_ticket_number#11L ASC NULLS FIRST], output=[c_last_name#110,c_first_name#109,ca_city#161,bought_city#152,ss_ticket_number#11L,amt#153,profit#154])\n+- Project [c_last_name#110, c_first_name#109, ca_city#161, bought_city#152, ss_ticket_number#11L, amt#153, profit#154]\n   +- SortMergeJoin [c_customer_sk#101], [ss_customer_sk#5], Inner, NOT (ca_city#161 = bought_city#152)\n      :- Sort [c_customer_sk#101 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 8\n      :     +- Exchange hashpartitioning(c_customer_sk#101, 200), ENSURE_REQUIREMENTS, [plan_id=970]\n      :        +- *(10) Project [c_customer_sk#101, c_first_name#109, c_last_name#110, ca_city#161]\n      :           +- *(10) SortMergeJoin [c_current_addr_sk#105], [ca_address_sk#155], Inner\n      :              :- *(8) Sort [c_current_addr_sk#105 ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 0\n      :              :        +- Exchange hashpartitioning(c_current_addr_sk#105, 200), ENSURE_REQUIREMENTS, [plan_id=232]\n      :              :           +- *(1) Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n      :              :              +- *(1) ColumnarToRow\n      :              :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#101,c_current_addr_sk#105,c_first_name#109,c_last_name#110] Batched: true, DataFilters: [isnotnull(c_customer_sk#101), isnotnull(c_current_addr_sk#105)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n      :              +- *(9) Sort [ca_address_sk#155 ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 1\n      :                       +- Exchange hashpartitioning(ca_address_sk#155, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n      :                          +- *(2) Filter (isnotnull(ca_address_sk#155) AND isnotnull(ca_city#161))\n      :                             +- *(2) ColumnarToRow\n      :                                +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#155,ca_city#161] Batched: true, DataFilters: [isnotnull(ca_address_sk#155), isnotnull(ca_city#161)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)], ReadSchema: struct<ca_address_sk:int,ca_city:string>\n      +- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 9\n            +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1120]\n               +- *(13) HashAggregate(keys=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], functions=[sum(UnscaledValue(ss_coupon_amt#21)), sum(UnscaledValue(ss_net_profit#24))], output=[ss_ticket_number#11L, ss_customer_sk#5, bought_city#152, amt#153, profit#154])\n                  +- *(13) HashAggregate(keys=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94], functions=[partial_sum(UnscaledValue(ss_coupon_amt#21)), partial_sum(UnscaledValue(ss_net_profit#24))], output=[ss_ticket_number#11L, ss_customer_sk#5, ss_addr_sk#8, ca_city#94, sum#184L, sum#185L])\n                     +- *(13) Project [ss_customer_sk#5, ss_addr_sk#8, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                        +- *(13) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#54], Inner, BuildRight, false\n                           :- *(13) Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ca_city#94]\n                           :  +- *(13) SortMergeJoin [ss_addr_sk#8], [ca_address_sk#88], Inner\n                           :     :- *(11) Sort [ss_addr_sk#8 ASC NULLS FIRST], false, 0\n                           :     :  +- AQEShuffleRead coalesced\n                           :     :     +- ShuffleQueryStage 7\n                           :     :        +- Exchange hashpartitioning(ss_addr_sk#8, 200), ENSURE_REQUIREMENTS, [plan_id=730]\n                           :     :           +- *(7) Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                           :     :              +- *(7) BroadcastHashJoin [ss_hdemo_sk#7], [hd_demo_sk#83], Inner, BuildRight, false\n                           :     :                 :- *(7) Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n                           :     :                 :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n                           :     :                 :     :- *(7) Filter ((((isnotnull(ss_store_sk#9) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#181, [id=#128], xxhash64(ss_store_sk#9, 42)))\n                           :     :                 :     :  :  +- Subquery subquery#181, [id=#128]\n                           :     :                 :     :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=794]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n                                                                                 +- *(1) Project [s_store_sk#54]\n                                                                                    +- *(1) Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n                                                                              +- Project [s_store_sk#54]\n                                                                                 +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n                           :     :                 :     :  +- *(7) ColumnarToRow\n                           :     :                 :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#5,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_ticket_number#11L,ss_coupon_amt#21,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_store_sk#9), isnotnull(ss_hdemo_sk#7), isnotnull(ss_addr_sk#8), isnotnull(ss_custom..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#178)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n                           :     :                 :     :           +- SubqueryBroadcast dynamicpruning#178, 0, [d_date_sk#26], [id=#693]\n                           :     :                 :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                           +- == Final Plan ==\n                                                                              BroadcastQueryStage 1\n                                                                              +- ReusedExchange [d_date_sk#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                                                                           +- == Initial Plan ==\n                                                                              BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=690]\n                                                                              +- Project [d_date_sk#26]\n                                                                                 +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n                           :     :                 :     +- BroadcastQueryStage 2\n                           :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n                           :     :                 :           +- *(3) Project [d_date_sk#26]\n                           :     :                 :              +- *(3) Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n                           :     :                 :                 +- *(3) ColumnarToRow\n                           :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n                           :     :                 +- BroadcastQueryStage 3\n                           :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n                           :     :                       +- *(4) Project [hd_demo_sk#83]\n                           :     :                          +- *(4) Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n                           :     :                             +- *(4) ColumnarToRow\n                           :     :                                +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_dep_count#86,hd_vehicle_count#87] Batched: true, DataFilters: [((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)), isnotnull(hd_demo_sk#83)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n                           :     +- *(12) Sort [ca_address_sk#88 ASC NULLS FIRST], false, 0\n                           :        +- AQEShuffleRead coalesced\n                           :           +- ShuffleQueryStage 5\n                           :              +- ReusedExchange [ca_address_sk#88, ca_city#94], Exchange hashpartitioning(ca_address_sk#155, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n                           +- BroadcastQueryStage 6\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=407]\n                                 +- *(6) Project [s_store_sk#54]\n                                    +- *(6) Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n                                       +- *(6) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 151003840,
        "inputRowCount" : 2238213
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 57565, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331 ],
        "4" : [ 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 383377, 383377, 383377, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709, 389709, 383377, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 389709, 383377, 389709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 1244,
        "TotalTasksDurationInMs" : 1846,
        "IOBytes" : {
          "Total" : 83158348,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 83158348,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -36478245,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 440,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -858461578,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 440,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#187] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)#179] Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)#179 AS bloomFilter#180] "
          },
          "1" : {
            "sign" : 1611539485,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#187] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=794]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n         +- *(1) Project [s_store_sk#54]\n            +- *(1) Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 440,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 490 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 11,
        "FinishedTasksTotalTimeInMs" : 15785.0,
        "FinishedTasksDistributionInMs" : [ 1329.0, 1350.0, 1442.0, 1477.0, 1593.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 132,
        "TotalTasksDurationInMs" : 114,
        "IOBytes" : {
          "Total" : 482,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 482,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1699636063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21984,
                "rowCount" : 1832
              },
              "compileTime" : {
                "sizeInBytes" : 21984,
                "rowCount" : 1832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [hd_demo_sk#83] "
          },
          "1" : {
            "sign" : 1103338875,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80608,
                "rowCount" : 1832
              },
              "compileTime" : {
                "sizeInBytes" : 80608,
                "rowCount" : 1832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83)) "
          },
          "2" : {
            "sign" : -1766203300,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              },
              "compileTime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#83, hd_income_band_sk#84, hd_buy_potential#85, hd_dep_count#86, hd_vehicle_count#87], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#83]\n+- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n   +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_income_band_sk#84,hd_buy_potential#85,hd_dep_count#86,hd_vehicle_count#87] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1960391365,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [hd_demo_sk#83] Input [3]: [hd_demo_sk#83, hd_dep_count#86, hd_vehicle_count#87] "
          },
          "1" : {
            "sign" : -180854123,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [hd_demo_sk#83, hd_dep_count#86, hd_vehicle_count#87] Condition : (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83)) "
          },
          "2" : {
            "sign" : -1626994506,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 21984,
            "rowCount" : 1832,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.household_demographics Output [3]: [hd_demo_sk#83, hd_dep_count#86, hd_vehicle_count#87] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household_demographics] PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)] ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.household_demographics",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#83]\n+- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n   +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_dep_count#86,hd_vehicle_count#87] Batched: true, DataFilters: [((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)), isnotnull(hd_demo_sk#83)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 21984,
        "inputRowCount" : 1832
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1842,
        "TotalTasksDurationInMs" : 503,
        "IOBytes" : {
          "Total" : 31739,
          "Details" : {
            "IR" : 31739,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1715335643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3720,
                "rowCount" : 310
              },
              "compileTime" : {
                "sizeInBytes" : 3720,
                "rowCount" : 310
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
          },
          "1" : {
            "sign" : 1062943587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 76260,
                "rowCount" : 310
              },
              "compileTime" : {
                "sizeInBytes" : 76260,
                "rowCount" : 310
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26)) "
          },
          "2" : {
            "sign" : 440418152,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#26]\n+- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -213759933,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3720,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#26] Input [3]: [d_date_sk#26, d_year#32, d_dow#33] "
          },
          "1" : {
            "sign" : -1389158655,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3720,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#26, d_year#32, d_dow#33] Condition : ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26)) "
          },
          "2" : {
            "sign" : 2130682694,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3720,
            "rowCount" : 310,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#26, d_year#32, d_dow#33] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#26]\n+- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3720,
        "inputRowCount" : 310
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1838,
        "TotalTasksDurationInMs" : 518,
        "IOBytes" : {
          "Total" : 94192,
          "Details" : {
            "IR" : 94192,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -678422519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1344,
                "rowCount" : 112
              },
              "compileTime" : {
                "sizeInBytes" : 1344,
                "rowCount" : 112
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#54] "
          },
          "1" : {
            "sign" : 2138383260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 53648,
                "rowCount" : 112
              },
              "compileTime" : {
                "sizeInBytes" : 53648,
                "rowCount" : 112
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
          },
          "2" : {
            "sign" : -1663611938,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#54, s_store_id#55, s_rec_start_date#56, s_rec_end_date#57, s_closed_date_sk#58, s_store_name#59, s_number_employees#60, s_floor_space#61, s_hours#62, s_manager#63, s_market_id#64, s_geography_class#65, s_market_desc#66, s_market_manager#67, s_division_id#68, s_division_name#69, s_company_id#70, s_company_name#71, s_street_number#72, s_street_name#73, s_street_type#74, s_suite_number#75, s_city#76, s_county#77, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#54]\n+- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2117470580,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#54] Input [2]: [s_store_sk#54, s_city#76] "
          },
          "1" : {
            "sign" : 783206367,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#54, s_city#76] Condition : (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54)) "
          },
          "2" : {
            "sign" : -684837215,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1344,
            "rowCount" : 112,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#54, s_city#76] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_city:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#54]\n+- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1344,
        "inputRowCount" : 112
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1827,
        "TotalTasksDurationInMs" : 514,
        "IOBytes" : {
          "Total" : 14836,
          "Details" : {
            "IR" : 14836,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -2088069262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11896787760,
                "rowCount" : 228784380
              },
              "compileTime" : {
                "sizeInBytes" : 11896787760,
                "rowCount" : 228784380
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] "
          },
          "5" : {
            "sign" : 197705964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34775225760,
                "rowCount" : 228784380
              },
              "compileTime" : {
                "sizeInBytes" : 34775225760,
                "rowCount" : 228784380
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42)))) "
          },
          "6" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 226789587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 14124792500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_hdemo_sk#7 = hd_demo_sk#83) "
          },
          "0" : {
            "sign" : 1030379391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11951747500,
                "rowCount" : 271630625
              },
              "compileTime" : {
                "sizeInBytes" : 11951747500,
                "rowCount" : 271630625
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "2" : {
            "sign" : -1304266429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] "
          },
          "3" : {
            "sign" : 2072259940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 14870272760,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#25 = d_date_sk#26) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalRelation",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n+- Join Inner, (ss_hdemo_sk#7 = hd_demo_sk#83)\n   :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n   :  +- Join Inner, (ss_sold_date_sk#25 = d_date_sk#26)\n   :     :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25]\n   :     :  +- Filter (((((isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND (dynamicpruning#178 [ss_sold_date_sk#25] AND might_contain(scalar-subquery#181 [], xxhash64(ss_store_sk#9, 42))))\n   :     :     :  :- Project [d_date_sk#26]\n   :     :     :  :  +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   :     :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n   :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0) AS bloomFilter#180]\n   :     :     :     +- Project [s_store_sk#54]\n   :     :     :        +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n   :     :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#54,s_store_id#55,s_rec_start_date#56,s_rec_end_date#57,s_closed_date_sk#58,s_store_name#59,s_number_employees#60,s_floor_space#61,s_hours#62,s_manager#63,s_market_id#64,s_geography_class#65,s_market_desc#66,s_market_manager#67,s_division_id#68,s_division_name#69,s_company_id#70,s_company_name#71,s_street_number#72,s_street_name#73,s_street_type#74,s_suite_number#75,s_city#76,s_county#77,... 5 more fields] parquet\n   :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     +- Project [d_date_sk#26]\n   :        +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n   +- Project [hd_demo_sk#83]\n      +- Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n         +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_income_band_sk#84,hd_buy_potential#85,hd_dep_count#86,hd_vehicle_count#87] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -161017011,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11896787760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] Condition : ((((isnotnull(ss_store_sk#9) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#181, [id=#128], xxhash64(ss_store_sk#9, 42))) "
          },
          "5" : {
            "sign" : 354603641,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11896787760,
            "rowCount" : 228784380,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [8]: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#178)] PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)> "
          },
          "6" : {
            "sign" : 1002789735,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1057328,
            "rowCount" : 314,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#26] Arguments: 2 "
          },
          "1" : {
            "sign" : -157069815,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14124792500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_hdemo_sk#7] Right keys [1]: [hd_demo_sk#83] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1293188615,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11951747500,
            "rowCount" : 271630625,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] Input [8]: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, hd_demo_sk#83] "
          },
          "2" : {
            "sign" : -1640950704,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12745948080,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24] Input [9]: [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24, ss_sold_date_sk#25, d_date_sk#26] "
          },
          "7" : {
            "sign" : 618227924,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1097536,
            "rowCount" : 1800,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [hd_demo_sk#83] Arguments: 3 "
          },
          "3" : {
            "sign" : 481149997,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14870272760,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#25] Right keys [1]: [d_date_sk#26] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#5, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n+- BroadcastHashJoin [ss_hdemo_sk#7], [hd_demo_sk#83], Inner, BuildRight, false\n   :- Project [ss_customer_sk#5, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_ticket_number#11L, ss_coupon_amt#21, ss_net_profit#24]\n   :  +- BroadcastHashJoin [ss_sold_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n   :     :- Filter ((((isnotnull(ss_store_sk#9) AND isnotnull(ss_hdemo_sk#7)) AND isnotnull(ss_addr_sk#8)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#181, [id=#128], xxhash64(ss_store_sk#9, 42)))\n   :     :  :  +- Subquery subquery#181, [id=#128]\n   :     :  :     +- AdaptiveSparkPlan isFinalPlan=false\n   :     :  :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[bloomFilter#180])\n   :     :  :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=126]\n   :     :  :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#54, 42), 112, 3261, 0, 0)], output=[buf#187])\n   :     :  :                 +- Project [s_store_sk#54]\n   :     :  :                    +- Filter (s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood) AND isnotnull(s_store_sk#54))\n   :     :  :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#54,s_city#76] Batched: true, DataFilters: [s_city#76 IN (Oakland,Riverside,Union,Salem,Greenwood), isnotnull(s_store_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [In(s_city, [Greenwood,Oakland,Riverside,Salem,Union]), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_city:string>\n   :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#5,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_ticket_number#11L,ss_coupon_amt#21,ss_net_profit#24,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_store_sk#9), isnotnull(ss_hdemo_sk#7), isnotnull(ss_addr_sk#8), isnotnull(ss_custom..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#178)], PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:bigint,...\n   :     :        +- SubqueryBroadcast dynamicpruning#178, 0, [d_date_sk#26], [id=#693]\n   :     :           +- AdaptiveSparkPlan isFinalPlan=false\n   :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=690]\n   :     :                 +- Project [d_date_sk#26]\n   :     :                    +- Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=342]\n   :           +- *(3) Project [d_date_sk#26]\n   :              +- *(3) Filter ((d_dow#33 IN (6,0) AND d_year#32 IN (1999,2000,2001)) AND isnotnull(d_date_sk#26))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_year#32,d_dow#33] Batched: true, DataFilters: [d_dow#33 IN (6,0), d_year#32 IN (1999,2000,2001), isnotnull(d_date_sk#26)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=363]\n         +- *(4) Project [hd_demo_sk#83]\n            +- *(4) Filter (((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)) AND isnotnull(hd_demo_sk#83))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#83,hd_dep_count#86,hd_vehicle_count#87] Batched: true, DataFilters: [((hd_dep_count#86 = 6) OR (hd_vehicle_count#87 = 3)), isnotnull(hd_demo_sk#83)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [Or(EqualTo(hd_dep_count,6),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11898942624,
        "inputRowCount" : 228786494
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 16159.0,
        "FinishedTasksDistributionInMs" : [ 118.0, 1329.0, 1399.0, 1474.0, 1593.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 21166,
        "TotalTasksDurationInMs" : 188284,
        "IOBytes" : {
          "Total" : 455707309,
          "Details" : {
            "IR" : 414630413,
            "IW" : 0,
            "SR" : 0,
            "SW" : 41076896
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -40852712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 106000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 106000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] "
          },
          "1" : {
            "sign" : -1933976954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105)) "
          },
          "2" : {
            "sign" : -459886681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#101, c_customer_id#102, c_current_cdemo_sk#103, c_current_hdemo_sk#104, c_current_addr_sk#105, c_first_shipto_date_sk#106, c_first_sales_date_sk#107, c_salutation#108, c_first_name#109, c_last_name#110, c_preferred_cust_flag#111, c_birth_day#112, c_birth_month#113, c_birth_year#114, c_birth_country#115, c_login#116, c_email_address#117, c_last_review_date#118], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110]\n+- Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#101,c_customer_id#102,c_current_cdemo_sk#103,c_current_hdemo_sk#104,c_current_addr_sk#105,c_first_shipto_date_sk#106,c_first_sales_date_sk#107,c_salutation#108,c_first_name#109,c_last_name#110,c_preferred_cust_flag#111,c_birth_day#112,c_birth_month#113,c_birth_year#114,c_birth_country#115,c_login#116,c_email_address#117,c_last_review_date#118] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1279378010,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] Condition : (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105)) "
          },
          "1" : {
            "sign" : 493586299,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 106000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [4]: [c_customer_sk#101, c_current_addr_sk#105, c_first_name#109, c_last_name#110] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)] ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#101) AND isnotnull(c_current_addr_sk#105))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#101,c_current_addr_sk#105,c_first_name#109,c_last_name#110] Batched: true, DataFilters: [isnotnull(c_customer_sk#101), isnotnull(c_current_addr_sk#105)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 106000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 12275,
        "TotalTasksDurationInMs" : 44208,
        "IOBytes" : {
          "Total" : 86258566,
          "Details" : {
            "IR" : 22786989,
            "IW" : 0,
            "SR" : 0,
            "SW" : 63471577
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227008085,
  "SQLEndTimeInMs" : 1702227038742,
  "Objectives" : {
    "DurationInMs" : 30657,
    "IOBytes" : {
      "Total" : 860780163,
      "Details" : {
        "IR" : 442898898,
        "IW" : 0,
        "SR" : 216018409,
        "SW" : 201862856
      }
    }
  }
}
