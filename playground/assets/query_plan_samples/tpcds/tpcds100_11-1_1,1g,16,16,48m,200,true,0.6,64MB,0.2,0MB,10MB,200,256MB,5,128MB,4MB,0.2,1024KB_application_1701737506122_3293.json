{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 1832808052,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#934, ws_ship_date_sk#935, ws_item_sk#936, ws_bill_customer_sk#937, ws_bill_cdemo_sk#938, ws_bill_hdemo_sk#939, ws_bill_addr_sk#940, ws_ship_customer_sk#941, ws_ship_cdemo_sk#942, ws_ship_hdemo_sk#943, ws_ship_addr_sk#944, ws_web_page_sk#945, ws_web_site_sk#946, ws_ship_mode_sk#947, ws_warehouse_sk#948, ws_promo_sk#949, ws_order_number#950L, ws_quantity#951, ws_wholesale_cost#952, ws_list_price#953, ws_sales_price#954, ws_ext_discount_amt#955, ws_ext_sales_price#956, ws_ext_wholesale_cost#957, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "34" : {
          "sign" : -477069777,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 366000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#688, c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704] "
        },
        "12" : {
          "sign" : 1380240340,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
        },
        "51" : {
          "sign" : 712144690,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#916, c_customer_id#917, c_current_cdemo_sk#918, c_current_hdemo_sk#919, c_current_addr_sk#920, c_first_shipto_date_sk#921, c_first_sales_date_sk#922, c_salutation#923, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_day#927, c_birth_month#928, c_birth_year#929, c_birth_country#930, c_login#931, c_email_address#932, c_last_review_date#933], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : 208471347,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12101933844,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#8) AND (year_total#8 > 0.00)) "
        },
        "19" : {
          "sign" : 311601156,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : -1991025107,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 33280318071,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704, d_year#735], [c_customer_id#689 AS customer_id#177, c_first_name#696 AS customer_first_name#178, c_last_name#697 AS customer_last_name#179, c_email_address#704 AS customer_email_address#183, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#722 - ss_ext_discount_amt#719))),18,2) AS year_total#185] "
        },
        "62" : {
          "sign" : -819888709,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1127, d_date_id#1128, d_date#1129, d_month_seq#1130, d_week_seq#1131, d_quarter_seq#1132, d_year#1133, d_dow#1134, d_moy#1135, d_dom#1136, d_qoy#1137, d_fy_year#1138, d_fy_quarter_seq#1139, d_fy_week_seq#1140, d_day_name#1141, d_quarter_name#1142, d_holiday#1143, d_weekend#1144, d_following_holiday#1145, d_first_dom#1146, d_last_dom#1147, d_same_day_ly#1148, d_same_day_lq#1149, d_current_day#1150, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 1805577139,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9946974415426821,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#0 = customer_id#197) AND (CASE WHEN (year_total#18 > 0.00) THEN (year_total#205 / year_total#18) ELSE 0E-20 END > CASE WHEN (year_total#8 > 0.00) THEN (year_total#185 / year_total#8) ELSE 0E-20 END)) "
        },
        "40" : {
          "sign" : 753769208,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14974789032,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#916 = ws_bill_customer_sk#937) "
        },
        "15" : {
          "sign" : 1791082753,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#1195 [ss_sold_date_sk#60]) "
        },
        "11" : {
          "sign" : -1358255117,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 56934097857,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
        },
        "9" : {
          "sign" : -970508193,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 12101933844,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#0, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#8] "
        },
        "44" : {
          "sign" : -1250522810,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#937) AND isnotnull(ws_sold_date_sk#967)) AND dynamicpruning#1197 [ws_sold_date_sk#967]) "
        },
        "33" : {
          "sign" : -1500546471,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#729, d_date_id#730, d_date#731, d_month_seq#732, d_week_seq#733, d_quarter_seq#734, d_year#735, d_dow#736, d_moy#737, d_dom#738, d_qoy#739, d_fy_year#740, d_fy_quarter_seq#741, d_fy_week_seq#742, d_day_name#743, d_quarter_name#744, d_holiday#745, d_weekend#746, d_following_holiday#747, d_first_dom#748, d_last_dom#749, d_same_day_ly#750, d_same_day_lq#751, d_current_day#752, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 179417976,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#20, c_customer_id#21, c_current_cdemo_sk#22, c_current_hdemo_sk#23, c_current_addr_sk#24, c_first_shipto_date_sk#25, c_first_sales_date_sk#26, c_salutation#27, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_day#31, c_birth_month#32, c_birth_year#33, c_birth_country#34, c_login#35, c_email_address#36, c_last_review_date#37], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "56" : {
          "sign" : 1746612122,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2779824200,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#1126 = d_date_sk#1127) "
        },
        "55" : {
          "sign" : 1069343978,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1096, ws_ext_discount_amt#1114, ws_ext_list_price#1117, d_year#1133] "
        },
        "26" : {
          "sign" : -1663198246,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#708, ss_ext_discount_amt#719, ss_ext_list_price#722, d_year#735] "
        },
        "50" : {
          "sign" : -1621770742,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#916) AND isnotnull(c_customer_id#917)) "
        },
        "37" : {
          "sign" : 537123062,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#18) AND (year_total#18 > 0.00)) "
        },
        "61" : {
          "sign" : 1257735925,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1133) AND (d_year#1133 = 2002)) AND isnotnull(d_date_sk#1127)) "
        },
        "13" : {
          "sign" : 1329530939,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#60 = d_date_sk#61) "
        },
        "46" : {
          "sign" : 1780826983,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#968, d_year#974] "
        },
        "24" : {
          "sign" : -1946641475,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 54733746249,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704, ss_ext_discount_amt#719, ss_ext_list_price#722, d_year#735] "
        },
        "35" : {
          "sign" : -122704268,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#688) AND isnotnull(c_customer_id#689)) "
        },
        "16" : {
          "sign" : 68451015,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#38, ss_item_sk#39, ss_customer_sk#40, ss_cdemo_sk#41, ss_hdemo_sk#42, ss_addr_sk#43, ss_store_sk#44, ss_promo_sk#45, ss_ticket_number#46L, ss_quantity#47, ss_wholesale_cost#48, ss_list_price#49, ss_sales_price#50, ss_ext_discount_amt#51, ss_ext_sales_price#52, ss_ext_wholesale_cost#53, ss_ext_list_price#54, ss_ext_tax#55, ss_coupon_amt#56, ss_net_paid#57, ss_net_paid_inc_tax#58, ss_net_profit#59, ss_sold_date_sk#60], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -314313124,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 225745195539930,
          "rowCount" : 1368152700242,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_id#0, year_total#8, customer_id#177, customer_first_name#178, customer_last_name#179, customer_email_address#183, year_total#185, year_total#18] "
        },
        "10" : {
          "sign" : 1282620717,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 54733746249,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
        },
        "59" : {
          "sign" : 1027816615,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#1093, ws_ship_date_sk#1094, ws_item_sk#1095, ws_bill_customer_sk#1096, ws_bill_cdemo_sk#1097, ws_bill_hdemo_sk#1098, ws_bill_addr_sk#1099, ws_ship_customer_sk#1100, ws_ship_cdemo_sk#1101, ws_ship_hdemo_sk#1102, ws_ship_addr_sk#1103, ws_web_page_sk#1104, ws_web_site_sk#1105, ws_ship_mode_sk#1106, ws_warehouse_sk#1107, ws_promo_sk#1108, ws_order_number#1109L, ws_quantity#1110, ws_wholesale_cost#1111, ws_list_price#1112, ws_sales_price#1113, ws_ext_discount_amt#1114, ws_ext_sales_price#1115, ws_ext_wholesale_cost#1116, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "48" : {
          "sign" : 2144529086,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#968, d_date_id#969, d_date#970, d_month_seq#971, d_week_seq#972, d_quarter_seq#973, d_year#974, d_dow#975, d_moy#976, d_dom#977, d_qoy#978, d_fy_year#979, d_fy_quarter_seq#980, d_fy_week_seq#981, d_day_name#982, d_quarter_name#983, d_holiday#984, d_weekend#985, d_following_holiday#986, d_first_dom#987, d_last_dom#988, d_same_day_ly#989, d_same_day_lq#990, d_current_day#991, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : -1232226526,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21)) "
        },
        "54" : {
          "sign" : -1312017886,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 14974789032,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1075 = ws_bill_customer_sk#1096) "
        },
        "43" : {
          "sign" : -767050306,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2302899232,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#937, ws_ext_discount_amt#955, ws_ext_list_price#958, ws_sold_date_sk#967] "
        },
        "65" : {
          "sign" : -2126069894,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#1075, c_customer_id#1076, c_current_cdemo_sk#1077, c_current_hdemo_sk#1078, c_current_addr_sk#1079, c_first_shipto_date_sk#1080, c_first_sales_date_sk#1081, c_salutation#1082, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_day#1086, c_birth_month#1087, c_birth_year#1088, c_birth_country#1089, c_login#1090, c_email_address#1091, c_last_review_date#1092], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "57" : {
          "sign" : -1224194092,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2302899232,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#1096, ws_ext_discount_amt#1114, ws_ext_list_price#1117, ws_sold_date_sk#1126] "
        },
        "32" : {
          "sign" : 1854691600,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#735) AND (d_year#735 = 2002)) AND isnotnull(d_date_sk#729)) "
        },
        "49" : {
          "sign" : -1992973414,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 366000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#916, c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932] "
        },
        "6" : {
          "sign" : 1107878946,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 264053471146706,
          "rowCount" : 1368152700242,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (customer_id#0 = customer_id#10) "
        },
        "36" : {
          "sign" : 469324956,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#688, c_customer_id#689, c_current_cdemo_sk#690, c_current_hdemo_sk#691, c_current_addr_sk#692, c_first_shipto_date_sk#693, c_first_sales_date_sk#694, c_salutation#695, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_day#699, c_birth_month#700, c_birth_year#701, c_birth_country#702, c_login#703, c_email_address#704, c_last_review_date#705], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : -1805879667,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 5592080143996173,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -1786246226,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14396053224,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932, ws_ext_discount_amt#955, ws_ext_list_price#958, d_year#974] "
        },
        "17" : {
          "sign" : 1590276080,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#61, d_year#67] "
        },
        "25" : {
          "sign" : 1354902520,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 56934097857,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#688 = ss_customer_sk#708) "
        },
        "60" : {
          "sign" : -38716587,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#1127, d_year#1133] "
        },
        "14" : {
          "sign" : 67488792,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8405409696,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] "
        },
        "47" : {
          "sign" : 1753073297,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#974) AND (d_year#974 = 2001)) AND isnotnull(d_date_sk#968)) "
        },
        "31" : {
          "sign" : -474517800,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#729, d_year#735] "
        },
        "58" : {
          "sign" : -1825439871,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#1096) AND isnotnull(ws_sold_date_sk#1126)) AND dynamicpruning#1198 [ws_sold_date_sk#1126]) "
        },
        "64" : {
          "sign" : -660146270,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#1075) AND isnotnull(c_customer_id#1076)) "
        },
        "53" : {
          "sign" : 823597552,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14396053224,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091, ws_ext_discount_amt#1114, ws_ext_list_price#1117, d_year#1133] "
        },
        "42" : {
          "sign" : -1887019710,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2779824200,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#967 = d_date_sk#968) "
        },
        "0" : {
          "sign" : 1670320426,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 8800,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1264223125,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 366000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] "
        },
        "27" : {
          "sign" : -278961841,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#728 = d_date_sk#729) "
        },
        "2" : {
          "sign" : -2061204972,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 5592080143996173,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [customer_id#177 ASC NULLS FIRST, customer_first_name#178 ASC NULLS FIRST, customer_last_name#179 ASC NULLS FIRST, customer_email_address#183 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 1517018076,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932, d_year#974], [c_customer_id#917 AS customer_id#10, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#958 - ws_ext_discount_amt#955))),18,2) AS year_total#18] "
        },
        "18" : {
          "sign" : -2019657161,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61)) "
        },
        "30" : {
          "sign" : -202697276,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#706, ss_item_sk#707, ss_customer_sk#708, ss_cdemo_sk#709, ss_hdemo_sk#710, ss_addr_sk#711, ss_store_sk#712, ss_promo_sk#713, ss_ticket_number#714L, ss_quantity#715, ss_wholesale_cost#716, ss_list_price#717, ss_sales_price#718, ss_ext_discount_amt#719, ss_ext_sales_price#720, ss_ext_wholesale_cost#721, ss_ext_list_price#722, ss_ext_tax#723, ss_coupon_amt#724, ss_net_paid#725, ss_net_paid_inc_tax#726, ss_net_profit#727, ss_sold_date_sk#728], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -1658904842,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5938460236087,
          "rowCount" : 37824587491,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (customer_id#177 = customer_id#0) "
        },
        "29" : {
          "sign" : 738238472,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#708) AND isnotnull(ss_sold_date_sk#728)) AND dynamicpruning#1196 [ss_sold_date_sk#728]) "
        },
        "41" : {
          "sign" : 1606680329,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#937, ws_ext_discount_amt#955, ws_ext_list_price#958, d_year#974] "
        },
        "63" : {
          "sign" : 429916073,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 366000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#1075, c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091] "
        },
        "3" : {
          "sign" : -413364532,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5592080143996173,
          "rowCount" : 49487434902621,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_id#177, customer_first_name#178, customer_last_name#179, customer_email_address#183] "
        },
        "52" : {
          "sign" : 1635287605,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3183046944,
          "rowCount" : 72341976,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091, d_year#1133], [c_customer_id#1076 AS customer_id#197, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#1117 - ws_ext_discount_amt#1114))),18,2) AS year_total#205] "
        },
        "28" : {
          "sign" : 1301212896,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8405409696,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#708, ss_ext_discount_amt#719, ss_ext_list_price#722, ss_sold_date_sk#728] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Filter",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 25,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Join",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Aggregate",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "LogicalRelation",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "LogicalRelation",
        "toId" : 47,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Filter",
        "toId" : 46,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 44,
        "fromName" : "Filter",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Join",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Join",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "LogicalRelation",
        "toId" : 58,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 62,
        "fromName" : "LogicalRelation",
        "toId" : 61,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "Filter",
        "toId" : 60,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Project",
        "toId" : 58,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 58,
        "fromName" : "Filter",
        "toId" : 57,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Project",
        "toId" : 56,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Join",
        "toId" : 55,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "Project",
        "toId" : 54,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 65,
        "fromName" : "LogicalRelation",
        "toId" : 64,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "Filter",
        "toId" : 63,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "Project",
        "toId" : 54,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Join",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 52,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Aggregate",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#177 ASC NULLS FIRST, customer_first_name#178 ASC NULLS FIRST, customer_last_name#179 ASC NULLS FIRST, customer_email_address#183 ASC NULLS FIRST], true\n      +- Project [customer_id#177, customer_first_name#178, customer_last_name#179, customer_email_address#183]\n         +- Join Inner, ((customer_id#0 = customer_id#197) AND (CASE WHEN (year_total#18 > 0.00) THEN (year_total#205 / year_total#18) ELSE 0E-20 END > CASE WHEN (year_total#8 > 0.00) THEN (year_total#185 / year_total#8) ELSE 0E-20 END))\n            :- Project [customer_id#0, year_total#8, customer_id#177, customer_first_name#178, customer_last_name#179, customer_email_address#183, year_total#185, year_total#18]\n            :  +- Join Inner, (customer_id#0 = customer_id#10)\n            :     :- Join Inner, (customer_id#177 = customer_id#0)\n            :     :  :- Filter (isnotnull(year_total#8) AND (year_total#8 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#0, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#8]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n            :     :  :           :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#1195 [ss_sold_date_sk#60])\n            :     :  :           :     :     :  +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n            :     :  :           :     +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :        +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           +- Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36]\n            :     :  :              +- Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n            :     :  :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_current_cdemo_sk#22,c_current_hdemo_sk#23,c_current_addr_sk#24,c_first_shipto_date_sk#25,c_first_sales_date_sk#26,c_salutation#27,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_day#31,c_birth_month#32,c_birth_year#33,c_birth_country#34,c_login#35,c_email_address#36,c_last_review_date#37] parquet\n            :     :  +- Aggregate [c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704, d_year#735], [c_customer_id#689 AS customer_id#177, c_first_name#696 AS customer_first_name#178, c_last_name#697 AS customer_last_name#179, c_email_address#704 AS customer_email_address#183, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#722 - ss_ext_discount_amt#719))),18,2) AS year_total#185]\n            :     :     +- Project [c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704, ss_ext_discount_amt#719, ss_ext_list_price#722, d_year#735]\n            :     :        +- Join Inner, (c_customer_sk#688 = ss_customer_sk#708)\n            :     :           :- Project [ss_customer_sk#708, ss_ext_discount_amt#719, ss_ext_list_price#722, d_year#735]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#728 = d_date_sk#729)\n            :     :           :     :- Project [ss_customer_sk#708, ss_ext_discount_amt#719, ss_ext_list_price#722, ss_sold_date_sk#728]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#708) AND isnotnull(ss_sold_date_sk#728)) AND dynamicpruning#1196 [ss_sold_date_sk#728])\n            :     :           :     :     :  +- Project [d_date_sk#729, d_year#735]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#735) AND (d_year#735 = 2002)) AND isnotnull(d_date_sk#729))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#729,d_date_id#730,d_date#731,d_month_seq#732,d_week_seq#733,d_quarter_seq#734,d_year#735,d_dow#736,d_moy#737,d_dom#738,d_qoy#739,d_fy_year#740,d_fy_quarter_seq#741,d_fy_week_seq#742,d_day_name#743,d_quarter_name#744,d_holiday#745,d_weekend#746,d_following_holiday#747,d_first_dom#748,d_last_dom#749,d_same_day_ly#750,d_same_day_lq#751,d_current_day#752,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#706,ss_item_sk#707,ss_customer_sk#708,ss_cdemo_sk#709,ss_hdemo_sk#710,ss_addr_sk#711,ss_store_sk#712,ss_promo_sk#713,ss_ticket_number#714L,ss_quantity#715,ss_wholesale_cost#716,ss_list_price#717,ss_sales_price#718,ss_ext_discount_amt#719,ss_ext_sales_price#720,ss_ext_wholesale_cost#721,ss_ext_list_price#722,ss_ext_tax#723,ss_coupon_amt#724,ss_net_paid#725,ss_net_paid_inc_tax#726,ss_net_profit#727,ss_sold_date_sk#728] parquet\n            :     :           :     +- Project [d_date_sk#729, d_year#735]\n            :     :           :        +- Filter ((isnotnull(d_year#735) AND (d_year#735 = 2002)) AND isnotnull(d_date_sk#729))\n            :     :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#729,d_date_id#730,d_date#731,d_month_seq#732,d_week_seq#733,d_quarter_seq#734,d_year#735,d_dow#736,d_moy#737,d_dom#738,d_qoy#739,d_fy_year#740,d_fy_quarter_seq#741,d_fy_week_seq#742,d_day_name#743,d_quarter_name#744,d_holiday#745,d_weekend#746,d_following_holiday#747,d_first_dom#748,d_last_dom#749,d_same_day_ly#750,d_same_day_lq#751,d_current_day#752,... 4 more fields] parquet\n            :     :           +- Project [c_customer_sk#688, c_customer_id#689, c_first_name#696, c_last_name#697, c_preferred_cust_flag#698, c_birth_country#702, c_login#703, c_email_address#704]\n            :     :              +- Filter (isnotnull(c_customer_sk#688) AND isnotnull(c_customer_id#689))\n            :     :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#688,c_customer_id#689,c_current_cdemo_sk#690,c_current_hdemo_sk#691,c_current_addr_sk#692,c_first_shipto_date_sk#693,c_first_sales_date_sk#694,c_salutation#695,c_first_name#696,c_last_name#697,c_preferred_cust_flag#698,c_birth_day#699,c_birth_month#700,c_birth_year#701,c_birth_country#702,c_login#703,c_email_address#704,c_last_review_date#705] parquet\n            :     +- Filter (isnotnull(year_total#18) AND (year_total#18 > 0.00))\n            :        +- Aggregate [c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932, d_year#974], [c_customer_id#917 AS customer_id#10, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#958 - ws_ext_discount_amt#955))),18,2) AS year_total#18]\n            :           +- Project [c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932, ws_ext_discount_amt#955, ws_ext_list_price#958, d_year#974]\n            :              +- Join Inner, (c_customer_sk#916 = ws_bill_customer_sk#937)\n            :                 :- Project [ws_bill_customer_sk#937, ws_ext_discount_amt#955, ws_ext_list_price#958, d_year#974]\n            :                 :  +- Join Inner, (ws_sold_date_sk#967 = d_date_sk#968)\n            :                 :     :- Project [ws_bill_customer_sk#937, ws_ext_discount_amt#955, ws_ext_list_price#958, ws_sold_date_sk#967]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#937) AND isnotnull(ws_sold_date_sk#967)) AND dynamicpruning#1197 [ws_sold_date_sk#967])\n            :                 :     :     :  +- Project [d_date_sk#968, d_year#974]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#974) AND (d_year#974 = 2001)) AND isnotnull(d_date_sk#968))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#968,d_date_id#969,d_date#970,d_month_seq#971,d_week_seq#972,d_quarter_seq#973,d_year#974,d_dow#975,d_moy#976,d_dom#977,d_qoy#978,d_fy_year#979,d_fy_quarter_seq#980,d_fy_week_seq#981,d_day_name#982,d_quarter_name#983,d_holiday#984,d_weekend#985,d_following_holiday#986,d_first_dom#987,d_last_dom#988,d_same_day_ly#989,d_same_day_lq#990,d_current_day#991,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#934,ws_ship_date_sk#935,ws_item_sk#936,ws_bill_customer_sk#937,ws_bill_cdemo_sk#938,ws_bill_hdemo_sk#939,ws_bill_addr_sk#940,ws_ship_customer_sk#941,ws_ship_cdemo_sk#942,ws_ship_hdemo_sk#943,ws_ship_addr_sk#944,ws_web_page_sk#945,ws_web_site_sk#946,ws_ship_mode_sk#947,ws_warehouse_sk#948,ws_promo_sk#949,ws_order_number#950L,ws_quantity#951,ws_wholesale_cost#952,ws_list_price#953,ws_sales_price#954,ws_ext_discount_amt#955,ws_ext_sales_price#956,ws_ext_wholesale_cost#957,... 10 more fields] parquet\n            :                 :     +- Project [d_date_sk#968, d_year#974]\n            :                 :        +- Filter ((isnotnull(d_year#974) AND (d_year#974 = 2001)) AND isnotnull(d_date_sk#968))\n            :                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#968,d_date_id#969,d_date#970,d_month_seq#971,d_week_seq#972,d_quarter_seq#973,d_year#974,d_dow#975,d_moy#976,d_dom#977,d_qoy#978,d_fy_year#979,d_fy_quarter_seq#980,d_fy_week_seq#981,d_day_name#982,d_quarter_name#983,d_holiday#984,d_weekend#985,d_following_holiday#986,d_first_dom#987,d_last_dom#988,d_same_day_ly#989,d_same_day_lq#990,d_current_day#991,... 4 more fields] parquet\n            :                 +- Project [c_customer_sk#916, c_customer_id#917, c_first_name#924, c_last_name#925, c_preferred_cust_flag#926, c_birth_country#930, c_login#931, c_email_address#932]\n            :                    +- Filter (isnotnull(c_customer_sk#916) AND isnotnull(c_customer_id#917))\n            :                       +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#916,c_customer_id#917,c_current_cdemo_sk#918,c_current_hdemo_sk#919,c_current_addr_sk#920,c_first_shipto_date_sk#921,c_first_sales_date_sk#922,c_salutation#923,c_first_name#924,c_last_name#925,c_preferred_cust_flag#926,c_birth_day#927,c_birth_month#928,c_birth_year#929,c_birth_country#930,c_login#931,c_email_address#932,c_last_review_date#933] parquet\n            +- Aggregate [c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091, d_year#1133], [c_customer_id#1076 AS customer_id#197, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#1117 - ws_ext_discount_amt#1114))),18,2) AS year_total#205]\n               +- Project [c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091, ws_ext_discount_amt#1114, ws_ext_list_price#1117, d_year#1133]\n                  +- Join Inner, (c_customer_sk#1075 = ws_bill_customer_sk#1096)\n                     :- Project [ws_bill_customer_sk#1096, ws_ext_discount_amt#1114, ws_ext_list_price#1117, d_year#1133]\n                     :  +- Join Inner, (ws_sold_date_sk#1126 = d_date_sk#1127)\n                     :     :- Project [ws_bill_customer_sk#1096, ws_ext_discount_amt#1114, ws_ext_list_price#1117, ws_sold_date_sk#1126]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#1096) AND isnotnull(ws_sold_date_sk#1126)) AND dynamicpruning#1198 [ws_sold_date_sk#1126])\n                     :     :     :  +- Project [d_date_sk#1127, d_year#1133]\n                     :     :     :     +- Filter ((isnotnull(d_year#1133) AND (d_year#1133 = 2002)) AND isnotnull(d_date_sk#1127))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1127,d_date_id#1128,d_date#1129,d_month_seq#1130,d_week_seq#1131,d_quarter_seq#1132,d_year#1133,d_dow#1134,d_moy#1135,d_dom#1136,d_qoy#1137,d_fy_year#1138,d_fy_quarter_seq#1139,d_fy_week_seq#1140,d_day_name#1141,d_quarter_name#1142,d_holiday#1143,d_weekend#1144,d_following_holiday#1145,d_first_dom#1146,d_last_dom#1147,d_same_day_ly#1148,d_same_day_lq#1149,d_current_day#1150,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#1093,ws_ship_date_sk#1094,ws_item_sk#1095,ws_bill_customer_sk#1096,ws_bill_cdemo_sk#1097,ws_bill_hdemo_sk#1098,ws_bill_addr_sk#1099,ws_ship_customer_sk#1100,ws_ship_cdemo_sk#1101,ws_ship_hdemo_sk#1102,ws_ship_addr_sk#1103,ws_web_page_sk#1104,ws_web_site_sk#1105,ws_ship_mode_sk#1106,ws_warehouse_sk#1107,ws_promo_sk#1108,ws_order_number#1109L,ws_quantity#1110,ws_wholesale_cost#1111,ws_list_price#1112,ws_sales_price#1113,ws_ext_discount_amt#1114,ws_ext_sales_price#1115,ws_ext_wholesale_cost#1116,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#1127, d_year#1133]\n                     :        +- Filter ((isnotnull(d_year#1133) AND (d_year#1133 = 2002)) AND isnotnull(d_date_sk#1127))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1127,d_date_id#1128,d_date#1129,d_month_seq#1130,d_week_seq#1131,d_quarter_seq#1132,d_year#1133,d_dow#1134,d_moy#1135,d_dom#1136,d_qoy#1137,d_fy_year#1138,d_fy_quarter_seq#1139,d_fy_week_seq#1140,d_day_name#1141,d_quarter_name#1142,d_holiday#1143,d_weekend#1144,d_following_holiday#1145,d_first_dom#1146,d_last_dom#1147,d_same_day_ly#1148,d_same_day_lq#1149,d_current_day#1150,... 4 more fields] parquet\n                     +- Project [c_customer_sk#1075, c_customer_id#1076, c_first_name#1083, c_last_name#1084, c_preferred_cust_flag#1085, c_birth_country#1089, c_login#1090, c_email_address#1091]\n                        +- Filter (isnotnull(c_customer_sk#1075) AND isnotnull(c_customer_id#1076))\n                           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1075,c_customer_id#1076,c_current_cdemo_sk#1077,c_current_hdemo_sk#1078,c_current_addr_sk#1079,c_first_shipto_date_sk#1080,c_first_sales_date_sk#1081,c_salutation#1082,c_first_name#1083,c_last_name#1084,c_preferred_cust_flag#1085,c_birth_day#1086,c_birth_month#1087,c_birth_year#1088,c_birth_country#1089,c_login#1090,c_email_address#1091,c_last_review_date#1092] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 115630855112,
      "inputRowCount" : 702350150
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "8" : {
            "sign" : 596265781,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 378681489,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 238236699219221407674,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : 1967653873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))]) "
          },
          "9" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "5" : {
            "sign" : -1818814347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 225745195539930,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -641562283,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "6" : {
            "sign" : -298142886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 264053471146706,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : 1032892047,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -864030632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1013408126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1371124622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5938460236087,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 330742056,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))])\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48601388019,
        "inputRowCount" : 623332107
      },
      "PD" : {
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 16165.0,
        "FinishedTasksDistributionInMs" : [ 630.0, 1647.0, 2484.0, 3126.0, 3183.0 ]
      },
      "StartTimeInMs" : 1702226597250,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6176,
        "IOBytes" : {
          "Total" : 1097295785,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 875583578,
            "SW" : 221712207
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1030719960000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "8" : {
            "sign" : -1730888284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "4" : {
            "sign" : -352700779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16919515633255614214637250928447709664,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 572622200,
            "rowCount" : 14315555,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "11" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1030719960000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "9" : {
            "sign" : 2146432386,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))]) "
          },
          "13" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4810026480000000,
            "rowCount" : 28631110000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "16" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -732523486,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5315509300027343302241052631,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -403068192,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))]) "
          },
          "6" : {
            "sign" : 1585925521,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6120889497001183196520000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : 1050895371,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 9305733598290587818050488010646240315,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 191857159,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))]) "
          },
          "14" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5039075360000000,
            "rowCount" : 28631110000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "0" : {
            "sign" : 2047228974,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 864126724,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 9305733598290587818050488010646240315,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -746675933,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5938460236087,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1923995812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9305733598290587818050488010646240315,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))])\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 49443989899,
        "inputRowCount" : 638745433
      },
      "PD" : {
        "4" : [ 1055048, 1031459, 1025872, 1032733, 1020632, 1057519, 1034927, 1039731, 1018676, 1042343, 1056208, 1035680, 1044980, 1056377, 1005713, 1036270, 1047445, 1059893, 1055034, 1034878, 1026801, 1031304, 1040724, 1060240, 1018827, 1034617, 1029277, 1052008, 1035159, 1024901, 1020906, 1054350, 1040896, 1023564, 1043610, 1035033, 1018976, 1006280, 1038859, 1013490, 1002025, 1049285, 1003647, 1024439, 1056208, 1033742, 1042250, 1023724, 1027027, 1022439, 1048599, 1064890, 1029480, 1069871, 1034476, 1019792, 1024957, 999426, 1007455, 1029791, 1039210, 1034055, 1028054, 1046537, 1019463, 1046698, 1042498, 1020042, 1035585, 1032699, 1035391, 1034554, 1024181, 1044292, 1052236, 1051268, 1051172, 1063356, 1058965, 1030670, 1046037, 1064940, 1072612, 1018375, 1026009, 1019322, 1024742, 1045000, 1036131, 1066775, 1042265, 1036100, 1076746, 1040697, 1004576, 1041455, 1046410, 1027975, 1062868, 1035202, 1012137, 1062322, 1040528, 1035931, 1031252, 1034109, 1046860, 1030040, 994807, 1020208, 1034940, 1008982, 1049350, 1002733, 1030812, 1032881, 1016899, 1011218, 1021296, 1027238, 1016812, 1034469, 1058440, 1037973, 1062007, 1084060, 1043363, 1051537, 1022122, 1035933, 1025238, 1050542, 1026974, 1020437, 1046457, 1030413, 1023437, 1029277, 1042352, 1024043, 1016151, 1032536, 1043510, 1055679, 1013426, 1021905, 1077195, 1011598, 1052600, 1048048, 1071468, 1044213, 1082573, 1040422, 1053805, 1064038, 1033177, 1050994, 1050664, 1002191, 1034307, 1009045, 1038115, 1027421, 1029628, 1063016, 1033731, 1045439, 1064300, 1030670, 1013305, 1049511, 1051790, 1058515, 1040978, 1040836, 1020496, 1008849, 1038315, 1024353, 1064903, 1039058, 1052607, 1021222, 1059294, 1035285, 1045374, 1010739, 1037929, 1067783, 1053092, 1022790, 1066930, 1002443, 1047118, 1058822, 1042011, 1017224, 1064785, 1005101 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226586743,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16683,
        "IOBytes" : {
          "Total" : 3325471283,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 598618273
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2004989805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : 598095733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "23" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "4" : {
            "sign" : 880216312,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21193640182373397906033439549360763418947368421048154598920000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : -304150526,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "11" : {
            "sign" : -1279656869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 1937448743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "22" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "26" : {
            "sign" : 1397265268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "13" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : 1904699215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          },
          "5" : {
            "sign" : -1197404896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4235607613518509133306071727157894736842105263157,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1158003855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "6" : {
            "sign" : -1932233509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4877366342839495365625173504000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -307040664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -716079943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13 "
          },
          "25" : {
            "sign" : 1566531498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "14" : {
            "sign" : -1149214757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 50983792320000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "0" : {
            "sign" : -486578241,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "27" : {
            "sign" : 1965618473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "2" : {
            "sign" : 1249983593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1979886907,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : -491757407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 974755154748334118400000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "29" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : -130469393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "28" : {
            "sign" : -116325499,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 22666591520,
        "inputRowCount" : 678072380
      },
      "PD" : {
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 28732.0,
        "FinishedTasksDistributionInMs" : [ 1251.0, 2944.0, 3548.0, 3773.0, 4091.0 ]
      },
      "StartTimeInMs" : 1702226581709,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21717,
        "IOBytes" : {
          "Total" : 5800486866,
          "Details" : {
            "IR" : 953654582,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 2119979274
          }
        }
      }
    },
    "15" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 596265781,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 72667920,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 160010324,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34511498586427907709513838080,
            "rowCount" : 215696866165174423184461488,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "9" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 200393032,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "5" : {
            "sign" : 1991184050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 31557383251705524717504,
            "rowCount" : 239071085240193369072,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : 1642095186,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24 "
          },
          "6" : {
            "sign" : -2127565373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38251373638430939051520,
            "rowCount" : 239071085240193369072,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -1577804144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 18981324222535349240232610944,
            "rowCount" : 215696866165174423184461488,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -225872997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1298410693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 18981324222535349240232610944,
            "rowCount" : 215696866165174423184461488,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1371124622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 409787183167128,
            "rowCount" : 3304735348122,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1543332823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18981324222535349240232610944,
            "rowCount" : 215696866165174423184461488,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3492197056,
        "inputRowCount" : 76879992
      },
      "PD" : {
        "11" : [ 126570, 126570, 126570, 121336, 131804, 131804, 121336, 126570, 131804, 133471, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 126570, 126570, 131804, 131804, 126570, 126570, 131804, 126570, 126570, 131804, 131804, 131804, 133471, 131804, 131804, 133471, 131804, 131804, 121336, 125054, 126570, 126570, 133471, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 133471, 126570, 131804, 131804, 126570, 131804, 126570, 126570, 126570, 131804, 131804, 130288, 131804, 131804, 131804, 131804, 126570, 125054, 131804, 131804, 131804, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 126570, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 125054, 131804, 126570, 131804, 133471, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 133471, 131804, 131804, 130288, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 121336, 126570, 126570, 126570, 126570, 131804, 126570, 131804, 131804, 133471, 126570, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 130288, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 121336, 126570, 126570, 133471, 131804, 131804, 131804, 126570, 131804, 133471, 131804, 133471, 131804, 131804, 126570, 128237, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 131804, 133471, 131804 ],
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ],
        "9" : [ 605637, 605637, 605637, 581591, 605637, 581591, 557545, 605637, 581591, 613298, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 598671, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 598671, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 613298, 581591, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 613298, 605637, 598671, 598671, 589252, 605637, 605637, 605637, 605637, 598671, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 574625, 581591, 605637, 581591, 581591, 581591, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 613298, 581591, 605637, 598671, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 589252, 605637, 581591, 605637, 605637, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 313.0,
        "FinishedTasksDistributionInMs" : [ 313.0, 313.0, 313.0, 313.0, 313.0 ]
      },
      "StartTimeInMs" : 1702226598263,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5163,
        "IOBytes" : {
          "Total" : 245754423,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 233753065,
            "SW" : 12001358
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1967653873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))]) "
          },
          "8" : {
            "sign" : -1730888284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 65401128,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "4" : {
            "sign" : -112271008,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 504687884864863776531856922312064,
            "rowCount" : 2614963134014838220372315659648,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -641562283,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "9" : {
            "sign" : 2146432386,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 292546888,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))]) "
          },
          "13" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "5" : {
            "sign" : 455439822,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5675117473157349207581136,
            "rowCount" : 36147245051957638264848,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "6" : {
            "sign" : -1100144275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6687240334612163078996880,
            "rowCount" : 36147245051957638264848,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -653725264,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 295490834143676718902071669540224,
            "rowCount" : 2614963134014838220372315659648,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 371371257,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 573680655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 295490834143676718902071669540224,
            "rowCount" : 2614963134014838220372315659648,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1488277339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 74451097558375902,
            "rowCount" : 499671795693798,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : -289027063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 295490834143676718902071669540224,
            "rowCount" : 2614963134014838220372315659648,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))])\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39938958847,
        "inputRowCount" : 421544601
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 17289.0,
        "FinishedTasksDistributionInMs" : [ 630.0, 1647.0, 2484.0, 3126.0, 3183.0 ]
      },
      "StartTimeInMs" : 1702226597117,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6309,
        "IOBytes" : {
          "Total" : 1181763798,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 948010733,
            "SW" : 233753065
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1967653873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))]) "
          },
          "8" : {
            "sign" : -1730888284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "4" : {
            "sign" : -393366967,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 115209808999428851312,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -641562283,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "9" : {
            "sign" : 2146432386,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))]) "
          },
          "13" : {
            "sign" : 191857159,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))]) "
          },
          "5" : {
            "sign" : -355158240,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2533637351834173760,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -403068192,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 292938184,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))]) "
          },
          "6" : {
            "sign" : 141182929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3040364822201008512,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -258839939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 57604904499714425656,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1295339170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -853716808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 57604904499714425656,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -746675933,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 66043484203044348,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : -148119018,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 57604904499714425656,
            "rowCount" : 654601187496754837,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))])\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))])\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 18760965916,
        "inputRowCount" : 421546992
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 16573.0,
        "FinishedTasksDistributionInMs" : [ 1567.0, 3531.0, 3726.0, 3840.0, 3909.0 ]
      },
      "StartTimeInMs" : 1702226592537,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10889,
        "IOBytes" : {
          "Total" : 2463336371,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2011022156,
            "SW" : 452314215
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "8" : {
            "sign" : 596265781,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 378681489,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5921577951830303934082347,
            "rowCount" : 30681751045752870124779,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : 1967653873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 144775976,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))]) "
          },
          "9" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "5" : {
            "sign" : -1818814347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5611090889950581915,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -641562283,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 32366196,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "6" : {
            "sign" : -298142886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6291223119035500935,
            "rowCount" : 34006611454245951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : 1032892047,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3467037868170074324100027,
            "rowCount" : 30681751045752870124779,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -864030632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1013408126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3467037868170074324100027,
            "rowCount" : 30681751045752870124779,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1371124622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5938460236087,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 330742056,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3467037868170074324100027,
            "rowCount" : 30681751045752870124779,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))])\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 45563117051,
        "inputRowCount" : 551889192
      },
      "PD" : {
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 2277.0,
        "FinishedTasksDistributionInMs" : [ 630.0, 630.0, 1647.0, 1647.0, 1647.0 ]
      },
      "StartTimeInMs" : 1702226597465,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5961,
        "IOBytes" : {
          "Total" : 675747335,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 526191118,
            "SW" : 149556217
          }
        }
      }
    },
    "16" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 596265781,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 72667920,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 160010324,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 428906482048713476297954880,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "9" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 200393032,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "5" : {
            "sign" : 1991184050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 392192944019964574344,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : 1642095186,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24 "
          },
          "6" : {
            "sign" : -2127565373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 451616117356322843184,
            "rowCount" : 2971158666817913442,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -1577804144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 235898565126792411963875184,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -225872997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1298410693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 235898565126792411963875184,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1371124622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 409787183167128,
            "rowCount" : 3304735348122,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1543332823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 235898565126792411963875184,
            "rowCount" : 2680665512804459226862218,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 345112552,
        "inputRowCount" : 5437077
      },
      "PD" : {
        "11" : [ 126570, 126570, 126570, 121336, 131804, 131804, 121336, 126570, 131804, 133471, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 126570, 126570, 131804, 131804, 126570, 126570, 131804, 126570, 126570, 131804, 131804, 131804, 133471, 131804, 131804, 133471, 131804, 131804, 121336, 125054, 126570, 126570, 133471, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 133471, 126570, 131804, 131804, 126570, 131804, 126570, 126570, 126570, 131804, 131804, 130288, 131804, 131804, 131804, 131804, 126570, 125054, 131804, 131804, 131804, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 126570, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 125054, 131804, 126570, 131804, 133471, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 133471, 131804, 131804, 130288, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 121336, 126570, 126570, 126570, 126570, 131804, 126570, 131804, 131804, 133471, 126570, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 130288, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 121336, 126570, 126570, 133471, 131804, 131804, 131804, 126570, 131804, 133471, 131804, 133471, 131804, 131804, 126570, 128237, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 131804, 133471, 131804 ],
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ],
        "9" : [ 605637, 605637, 605637, 581591, 605637, 581591, 557545, 605637, 581591, 613298, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 598671, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 598671, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 613298, 581591, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 613298, 605637, 598671, 598671, 589252, 605637, 605637, 605637, 605637, 598671, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 574625, 581591, 605637, 581591, 581591, 581591, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 613298, 581591, 605637, 598671, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 589252, 605637, 581591, 605637, 605637, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637 ],
        "12" : [ 64636, 59402, 59402, 64636, 64636, 64636, 59402, 65343, 64636, 65343, 64636, 59402, 65343, 64636, 64636, 64636, 64636, 65343, 65343, 65343, 64636, 65343, 64636, 65343, 59402, 65343, 59402, 60109, 64636, 64636, 59402, 65343, 64636, 64636, 66121, 65343, 64636, 59402, 64636, 63993, 64636, 60109, 64636, 59402, 60109, 64636, 64636, 64636, 65343, 65343, 64636, 64636, 64636, 65343, 65343, 60109, 64636, 65343, 65343, 60109, 64636, 64636, 64636, 65343, 59402, 60109, 64636, 63993, 65343, 64636, 65343, 64636, 64636, 64636, 64636, 59402, 64636, 65343, 65343, 65343, 65343, 64636, 64636, 64636, 65343, 64636, 65343, 64636, 63993, 64636, 65343, 64636, 65343, 64636, 64636, 64636, 60109, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 65343, 64636, 65343, 65343, 59402, 65343, 65343, 65343, 59402, 65343, 64636, 59402, 60109, 65343, 64636, 64636, 65343, 65343, 65343, 64636, 64636, 64636, 64636, 59402, 64636, 64636, 65343, 64636, 64636, 63993, 60109, 65343, 65343, 59402, 64636, 64636, 64636, 64636, 64636, 59402, 64636, 65343, 64636, 65343, 64636, 64636, 65343, 64636, 65343, 59402, 65343, 65343, 64636, 64636, 59402, 64636, 64636, 64636, 63993, 64636, 65343, 64636, 64636, 65343, 65343, 63993, 59402, 65343, 64636, 65343, 59402, 59402, 59402, 65343, 64636, 65343, 64636, 64636, 64636, 65343, 64636, 60109, 59402, 64636, 64636, 60109, 65343, 64636, 64636, 65343, 65343, 63993, 64636, 64636, 65343, 65343 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226598620,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4806,
        "IOBytes" : {
          "Total" : 161597075,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 161597075,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2004989805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : 598095733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "23" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "4" : {
            "sign" : 880216312,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4286531346280714402369108969853225391157894736840525152560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : -304150526,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18045571152000000,
            "rowCount" : 107414114000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "11" : {
            "sign" : -1279656869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 1937448743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "22" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "26" : {
            "sign" : 1397265268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "13" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : 1904699215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18904884064000000,
            "rowCount" : 107414114000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          },
          "5" : {
            "sign" : -1197404896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 856675146395691417857988799326315789473684210526,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1158003855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "6" : {
            "sign" : -1932233509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 986474411001099208442532556800000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -307040664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2357592240454392921303009933419273965136842105262288833908000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -716079943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2148282280,
            "rowCount" : 53707057,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13 "
          },
          "25" : {
            "sign" : 1566531498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "14" : {
            "sign" : -1149214757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 10311754944000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "0" : {
            "sign" : -486578241,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "27" : {
            "sign" : 1965618473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "2" : {
            "sign" : 1249983593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2357592240454392921303009933419273965136842105262288833908000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1979886907,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : -491757407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 197149639694860961280000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "29" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : -130469393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2357592240454392921303009933419273965136842105262288833908000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "28" : {
            "sign" : -116325499,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16317575080,
        "inputRowCount" : 466238852
      },
      "PD" : {
        "1" : [ 2947947, 2956536, 2937341, 2944908, 2927744, 3010586, 2944121, 2919063, 2937610, 2946696, 2999809, 2962166, 2978225, 2966091, 2927977, 2917568, 3009427, 3012047, 2939728, 2963787, 2920155, 2952569, 3049468, 2930225, 2949855, 2951874, 2918312, 3017760, 2992901, 2897560, 2937341, 2970661, 2977024, 2923409, 2981542, 2999229, 2951874, 2909618, 2889899, 2921545, 2920298, 2972077, 2913527, 2940889, 2974812, 2904380, 2985705, 2907758, 2987367, 2990631, 3001994, 2953396, 2930014, 2982970, 2990873, 2919240, 2969395, 2900009, 2905633, 2973937, 2957701, 3005776, 2937332, 2958735, 2927049, 3032304, 2956451, 2948173, 2957556, 2979787, 2969215, 2940748, 2903329, 2953203, 2973467, 3003049, 2999135, 2957681, 2982737, 2972772, 2987045, 2931711, 3008407, 2884780, 2928479, 2950720, 2911315, 2959149, 3008208, 3020530, 2942086, 2991915, 2963858, 2927977, 3003828, 2975773, 2919565, 2897741, 2919799, 2947212, 2933867, 2984348, 2942962, 2946519, 2936803, 3014676, 2965900, 3041713, 2877444, 2923409, 2933947, 2978972, 3000240, 2906561, 2937657, 2934943, 2886535, 2916618, 2986897, 2910062, 2960555, 2977571, 2988506, 2948317, 2990539, 2967090, 2943980, 2956625, 2985938, 2889164, 3008824, 2982831, 2984673, 2962807, 2910154, 2894846, 2939553, 3016299, 2975865, 2976194, 2939636, 2901117, 2952199, 2971311, 2977614, 2989526, 3058098, 2977952, 2973290, 2969794, 2965629, 2982793, 3037715, 2980437, 2973700, 2981717, 2956769, 2953629, 3047913, 2912420, 2897331, 2907513, 2956536, 2937252, 2998810, 2983653, 2937657, 2969307, 2994008, 2915063, 3001334, 3057593, 3061150, 2999294, 2956451, 2933690, 2990454, 2895079, 2955608, 2956211, 2923725, 2956303, 2863377, 2943287, 3037461, 2981540, 3056573, 2996492, 2905044, 2978216, 3009173, 2952802, 2943287, 2909705, 3015279, 2991326, 2956986, 2955789, 2990956, 2940910 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 12762.0,
        "FinishedTasksDistributionInMs" : [ 642.0, 705.0, 748.0, 782.0, 843.0 ]
      },
      "StartTimeInMs" : 1702226583973,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19453,
        "IOBytes" : {
          "Total" : 4887483949,
          "Details" : {
            "IR" : 604764085,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 1555866854
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1967653873,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))]) "
          },
          "8" : {
            "sign" : -1730888284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "4" : {
            "sign" : 1665448203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 238236699219221407674,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -641562283,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "9" : {
            "sign" : 2146432386,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))]) "
          },
          "13" : {
            "sign" : 191857159,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 145279744,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))]) "
          },
          "5" : {
            "sign" : 455439822,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 225745195539930,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "6" : {
            "sign" : -1100144275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 264053471146706,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -1287646533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 216100498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2073450948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1488277339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5938460236087,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : -794291838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 139485735812290254234,
            "rowCount" : 1234387042586639418,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- LogicalQueryStage Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207], HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))])\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- LogicalQueryStage Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217], HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))])\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48710578603,
        "inputRowCount" : 623332107
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226592852,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10574,
        "IOBytes" : {
          "Total" : 2040031400,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1660144340,
            "SW" : 379887060
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2004989805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : 598095733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "23" : {
            "sign" : 1965618473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5065608768000000,
            "rowCount" : 28781868000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "4" : {
            "sign" : -425902787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2864788271959670809165835934268552079494736351298672000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "11" : {
            "sign" : -1279656869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 1937448743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "22" : {
            "sign" : 1397265268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4835353824000000,
            "rowCount" : 28781868000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "13" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : -116325499,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 575637360,
            "rowCount" : 14390934,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14 "
          },
          "16" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "5" : {
            "sign" : -534840505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2764846673568225130455431112884210526315789,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1158003855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : 1566531498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1036147248000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "6" : {
            "sign" : -2112186336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3183762836230077422948678251200000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : 975824609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1575633549577818945041209763847703643722104993214269600000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "25" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "14" : {
            "sign" : -403068192,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))]) "
          },
          "0" : {
            "sign" : -1386225916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "2" : {
            "sign" : -1407297362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1575633549577818945041209763847703643722104993214269600000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "7" : {
            "sign" : 1228517960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 636283809328277630520000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1485084904,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1575633549577818945041209763847703643722104993214269600000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))])\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 45495320031,
        "inputRowCount" : 630471075
      },
      "PD" : {
        "2" : [ 1062491, 1038439, 1027858, 1072604, 1046474, 1049907, 1046599, 1014070, 1037742, 1063111, 1062577, 1005016, 1063498, 1043934, 1015925, 1073627, 1055127, 1071330, 1047036, 1040528, 1043535, 1063103, 1042681, 1064459, 1038607, 1051377, 1025250, 1020548, 1045994, 1034932, 1038952, 1045428, 1070322, 1034399, 1026288, 1033209, 1044691, 1028812, 1035251, 1010626, 1064396, 1032633, 1005707, 1050418, 1044181, 1016319, 1062816, 1036702, 1037220, 1052566, 1070498, 1060804, 1022469, 1038080, 1048547, 1041689, 1042575, 1006427, 1039465, 1037649, 1025402, 1071991, 1030670, 1068745, 1002981, 1058729, 1039399, 1044805, 1047963, 1076844, 1057109, 1035222, 1023831, 1057709, 1068957, 1058579, 1028328, 1068620, 1072060, 1054350, 1045405, 1065574, 1064614, 1042107, 1035834, 1031817, 1036131, 1071823, 1028609, 1089088, 1042561, 1072011, 1034349, 1041426, 1046816, 1049708, 1039460, 1031820, 1037481, 1057011, 1012751, 1049103, 1034878, 1019197, 1048392, 1055956, 1040654, 1069099, 1007924, 1003415, 1029622, 1046642, 1071357, 1020400, 1067288, 1038800, 1008650, 1050389, 1041244, 1038671, 1046750, 1056997, 1086679, 1045953, 1023894, 1082008, 1041787, 1034878, 1034617, 1038115, 1072233, 1066901, 1008588, 1021616, 1025933, 1039170, 1032851, 1074696, 1054879, 1067052, 1033160, 1048331, 1023431, 1033457, 1024264, 1023980, 1076605, 1078879, 1071688, 1043779, 1070152, 1064011, 1096676, 1065419, 1045297, 1058932, 1042757, 1059050, 1047247, 1016757, 1035096, 1054588, 1039994, 1066596, 1056303, 1092021, 1060761, 1060995, 1026232, 1039502, 1049026, 1036122, 1061811, 1048303, 1038276, 1039147, 1004576, 1045452, 1044802, 1054845, 1055855, 1034244, 1026040, 1031159, 1071741, 1033070, 1045466, 1038607, 1040252, 1063905, 1033472, 1050934, 1013865, 1037185, 1054687, 1072743, 1029228, 1014300, 1060619, 1019977 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 1148.0,
        "FinishedTasksDistributionInMs" : [ 335.0, 335.0, 813.0, 813.0, 813.0 ]
      },
      "StartTimeInMs" : 1702226584257,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19169,
        "IOBytes" : {
          "Total" : 4559290841,
          "Details" : {
            "IR" : 475730359,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 1356707472
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1866703820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060)) "
          },
          "34" : {
            "sign" : 1979886907,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4 "
          },
          "12" : {
            "sign" : 1885319966,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "51" : {
            "sign" : 1451378434,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "8" : {
            "sign" : -533390184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : 311601156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -910411158,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "4" : {
            "sign" : 1465567226,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3227616670212064984604987780038015549164,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "40" : {
            "sign" : 1219594019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2779824200,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2059 = d_date_sk#2060) "
          },
          "15" : {
            "sign" : -1527318306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60]) "
          },
          "11" : {
            "sign" : -1649457538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 2104526922,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "44" : {
            "sign" : -723736705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#2060, d_year#2066] "
          },
          "33" : {
            "sign" : -394217763,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#1821, d_year#1827], BroadcastQueryStage 2 "
          },
          "22" : {
            "sign" : 1517831287,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 31276426428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "56" : {
            "sign" : 1929744551,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2185, ws_ship_date_sk#2186, ws_item_sk#2187, ws_bill_customer_sk#2188, ws_bill_cdemo_sk#2189, ws_bill_hdemo_sk#2190, ws_bill_addr_sk#2191, ws_ship_customer_sk#2192, ws_ship_cdemo_sk#2193, ws_ship_hdemo_sk#2194, ws_ship_addr_sk#2195, ws_web_page_sk#2196, ws_web_site_sk#2197, ws_ship_mode_sk#2198, ws_warehouse_sk#2199, ws_promo_sk#2200, ws_order_number#2201L, ws_quantity#2202, ws_wholesale_cost#2203, ws_list_price#2204, ws_sales_price#2205, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "55" : {
            "sign" : -1628688783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218]) "
          },
          "26" : {
            "sign" : 463229298,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3834968173800,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#1820 = d_date_sk#1821) "
          },
          "50" : {
            "sign" : 2091782717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "37" : {
            "sign" : 1830913301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "61" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "13" : {
            "sign" : 1776326135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#60 = d_date_sk#61) "
          },
          "46" : {
            "sign" : -878709686,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#2060, d_date_id#2061, d_date#2062, d_month_seq#2063, d_week_seq#2064, d_quarter_seq#2065, d_year#2066, d_dow#2067, d_moy#2068, d_dom#2069, d_qoy#2070, d_fy_year#2071, d_fy_quarter_seq#2072, d_fy_week_seq#2073, d_day_name#2074, d_quarter_name#2075, d_holiday#2076, d_weekend#2077, d_following_holiday#2078, d_first_dom#2079, d_last_dom#2080, d_same_day_ly#2081, d_same_day_lq#2082, d_current_day#2083, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : 1429077227,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          },
          "35" : {
            "sign" : -1084627309,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "16" : {
            "sign" : 68451015,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#38, ss_item_sk#39, ss_customer_sk#40, ss_cdemo_sk#41, ss_hdemo_sk#42, ss_addr_sk#43, ss_store_sk#44, ss_promo_sk#45, ss_ticket_number#46L, ss_quantity#47, ss_wholesale_cost#48, ss_list_price#49, ss_sales_price#50, ss_ext_discount_amt#51, ss_ext_sales_price#52, ss_ext_wholesale_cost#53, ss_ext_list_price#54, ss_ext_tax#55, ss_coupon_amt#56, ss_net_paid#57, ss_net_paid_inc_tax#58, ss_net_profit#59, ss_sold_date_sk#60], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -809211301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1046273648290333888355033979243,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1934185580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "59" : {
            "sign" : 916968117,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#2219, d_date_id#2220, d_date#2221, d_month_seq#2222, d_week_seq#2223, d_quarter_seq#2224, d_year#2225, d_dow#2226, d_moy#2227, d_dom#2228, d_qoy#2229, d_fy_year#2230, d_fy_quarter_seq#2231, d_fy_week_seq#2232, d_day_name#2233, d_quarter_name#2234, d_holiday#2235, d_weekend#2236, d_following_holiday#2237, d_first_dom#2238, d_last_dom#2239, d_same_day_ly#2240, d_same_day_lq#2241, d_current_day#2242, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "48" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "21" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "54" : {
            "sign" : 1702923524,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218] "
          },
          "43" : {
            "sign" : 1351773682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2026, ws_ship_date_sk#2027, ws_item_sk#2028, ws_bill_customer_sk#2029, ws_bill_cdemo_sk#2030, ws_bill_hdemo_sk#2031, ws_bill_addr_sk#2032, ws_ship_customer_sk#2033, ws_ship_cdemo_sk#2034, ws_ship_hdemo_sk#2035, ws_ship_addr_sk#2036, ws_web_page_sk#2037, ws_web_site_sk#2038, ws_ship_mode_sk#2039, ws_warehouse_sk#2040, ws_promo_sk#2041, ws_order_number#2042L, ws_quantity#2043, ws_wholesale_cost#2044, ws_list_price#2045, ws_sales_price#2046, ws_ext_discount_amt#2047, ws_ext_sales_price#2048, ws_ext_wholesale_cost#2049, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "57" : {
            "sign" : 1883355014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#2219, d_year#2225] "
          },
          "32" : {
            "sign" : -806267058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1821, d_date_id#1822, d_date#1823, d_month_seq#1824, d_week_seq#1825, d_quarter_seq#1826, d_year#1827, d_dow#1828, d_moy#1829, d_dom#1830, d_qoy#1831, d_fy_year#1832, d_fy_quarter_seq#1833, d_fy_week_seq#1834, d_day_name#1835, d_quarter_name#1836, d_holiday#1837, d_weekend#1838, d_following_holiday#1839, d_first_dom#1840, d_last_dom#1841, d_same_day_ly#1842, d_same_day_lq#1843, d_current_day#1844, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "49" : {
            "sign" : -1065079519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3084868548,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "6" : {
            "sign" : -2060912782,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1204799958637354174469433067008,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "36" : {
            "sign" : -1963888693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "1" : {
            "sign" : 1394061678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1775189168616635741532743279020908552040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 1733801745,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "17" : {
            "sign" : 1590276080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#61, d_year#67] "
          },
          "25" : {
            "sign" : 641443909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3067974539040,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "60" : {
            "sign" : -1561141061,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#2219, d_year#2225], BroadcastQueryStage 10 "
          },
          "14" : {
            "sign" : -1539497867,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] "
          },
          "47" : {
            "sign" : -1534199271,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#2060, d_year#2066], BroadcastQueryStage 6 "
          },
          "31" : {
            "sign" : -1166146975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821)) "
          },
          "58" : {
            "sign" : -1147979528,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219)) "
          },
          "53" : {
            "sign" : -997953616,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1050697774600,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2218 = d_date_sk#2219) "
          },
          "42" : {
            "sign" : 742461135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059]) "
          },
          "0" : {
            "sign" : -489924013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1032426113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#61, d_year#67], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : 1034891638,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820] "
          },
          "2" : {
            "sign" : 56980969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1775189168616635741532743279020908552040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1593537660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "18" : {
            "sign" : -2019657161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61)) "
          },
          "30" : {
            "sign" : 1763526010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1821, d_year#1827] "
          },
          "7" : {
            "sign" : 2130593552,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 378505243508389229232,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "29" : {
            "sign" : -1489737944,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#1798, ss_item_sk#1799, ss_customer_sk#1800, ss_cdemo_sk#1801, ss_hdemo_sk#1802, ss_addr_sk#1803, ss_store_sk#1804, ss_promo_sk#1805, ss_ticket_number#1806L, ss_quantity#1807, ss_wholesale_cost#1808, ss_list_price#1809, ss_sales_price#1810, ss_ext_discount_amt#1811, ss_ext_sales_price#1812, ss_ext_wholesale_cost#1813, ss_ext_list_price#1814, ss_ext_tax#1815, ss_coupon_amt#1816, ss_net_paid#1817, ss_net_paid_inc_tax#1818, ss_net_profit#1819, ss_sold_date_sk#1820], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : 954893078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059] "
          },
          "3" : {
            "sign" : 738947207,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1775189168616635741532743279020908552040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "52" : {
            "sign" : -1450684474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 840558219680,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "28" : {
            "sign" : -737103545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820]) "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "LogicalRelation",
          "toId" : 42,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalRelation",
          "toId" : 45,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Filter",
          "toId" : 44,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 42,
          "fromName" : "Filter",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "LogicalQueryStage",
          "toId" : 40,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Join",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalQueryStage",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Join",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "LogicalRelation",
          "toId" : 55,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "LogicalRelation",
          "toId" : 58,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Filter",
          "toId" : 57,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "Project",
          "toId" : 55,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 55,
          "fromName" : "Filter",
          "toId" : 54,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "Project",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "LogicalQueryStage",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Join",
          "toId" : 52,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Project",
          "toId" : 51,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "LogicalQueryStage",
          "toId" : 51,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "Join",
          "toId" : 50,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Project",
          "toId" : 49,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n            :     :  :           :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n            :     :  :           :     :     :  +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n            :     :  :           :     +- LogicalQueryStage Project [d_date_sk#61, d_year#67], BroadcastQueryStage 0\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#1820 = d_date_sk#1821)\n            :     :           :     :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820])\n            :     :           :     :     :  +- Project [d_date_sk#1821, d_year#1827]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1798,ss_item_sk#1799,ss_customer_sk#1800,ss_cdemo_sk#1801,ss_hdemo_sk#1802,ss_addr_sk#1803,ss_store_sk#1804,ss_promo_sk#1805,ss_ticket_number#1806L,ss_quantity#1807,ss_wholesale_cost#1808,ss_list_price#1809,ss_sales_price#1810,ss_ext_discount_amt#1811,ss_ext_sales_price#1812,ss_ext_wholesale_cost#1813,ss_ext_list_price#1814,ss_ext_tax#1815,ss_coupon_amt#1816,ss_net_paid#1817,ss_net_paid_inc_tax#1818,ss_net_profit#1819,ss_sold_date_sk#1820] parquet\n            :     :           :     +- LogicalQueryStage Project [d_date_sk#1821, d_year#1827], BroadcastQueryStage 2\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :                 :  +- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n            :                 :     :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n            :                 :     :     :  +- Project [d_date_sk#2060, d_year#2066]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n            :                 :     +- LogicalQueryStage Project [d_date_sk#2060, d_year#2066], BroadcastQueryStage 6\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                     :  +- Join Inner, (ws_sold_date_sk#2218 = d_date_sk#2219)\n                     :     :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218])\n                     :     :     :  +- Project [d_date_sk#2219, d_year#2225]\n                     :     :     :     +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2185,ws_ship_date_sk#2186,ws_item_sk#2187,ws_bill_customer_sk#2188,ws_bill_cdemo_sk#2189,ws_bill_hdemo_sk#2190,ws_bill_addr_sk#2191,ws_ship_customer_sk#2192,ws_ship_cdemo_sk#2193,ws_ship_hdemo_sk#2194,ws_ship_addr_sk#2195,ws_web_page_sk#2196,ws_web_site_sk#2197,ws_ship_mode_sk#2198,ws_warehouse_sk#2199,ws_promo_sk#2200,ws_order_number#2201L,ws_quantity#2202,ws_wholesale_cost#2203,ws_list_price#2204,ws_sales_price#2205,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,... 10 more fields] parquet\n                     :     +- LogicalQueryStage Project [d_date_sk#2219, d_year#2225], BroadcastQueryStage 10\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 115025096320,
        "inputRowCount" : 702059836
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "StartTimeInMs" : 1702226576734,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26692,
        "IOBytes" : {
          "Total" : 6026157054,
          "Details" : {
            "IR" : 1027606336,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 2271697708
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 596265781,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23 "
          },
          "4" : {
            "sign" : 160010324,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2743105313169593708773248,
            "rowCount" : 16328007816485676837936,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "11" : {
            "sign" : -104202012,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22 "
          },
          "9" : {
            "sign" : -146295480,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 200393032,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21 "
          },
          "5" : {
            "sign" : 1991184050,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2533637351834173760,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : 1642095186,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24 "
          },
          "6" : {
            "sign" : -2127565373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3040364822201008512,
            "rowCount" : 18097409655958384,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -1577804144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1436864687850739561738368,
            "rowCount" : 16328007816485676837936,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -225872997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1298410693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1436864687850739561738368,
            "rowCount" : 16328007816485676837936,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1371124622,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 66043484203044348,
            "rowCount" : 500329425780639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1543332823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1436864687850739561738368,
            "rowCount" : 16328007816485676837936,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- LogicalQueryStage Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)), ShuffleQueryStage 23\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], ShuffleQueryStage 21\n            :     +- LogicalQueryStage Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)), ShuffleQueryStage 24\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], ShuffleQueryStage 22\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15521462980,
        "inputRowCount" : 350107245
      },
      "PD" : {
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ],
        "9" : [ 605637, 605637, 605637, 581591, 605637, 581591, 557545, 605637, 581591, 613298, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 598671, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 598671, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 613298, 581591, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 613298, 605637, 598671, 598671, 589252, 605637, 605637, 605637, 605637, 598671, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 574625, 581591, 605637, 581591, 581591, 581591, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 613298, 581591, 605637, 598671, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 589252, 605637, 581591, 605637, 605637, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226597647,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5779,
        "IOBytes" : {
          "Total" : 416407068,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 379887060,
            "SW" : 36520008
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "34" : {
            "sign" : 742461135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059]) "
          },
          "12" : {
            "sign" : 1885319966,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3067974539040,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "8" : {
            "sign" : -533390184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11728659910,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : 311601156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -304150526,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "4" : {
            "sign" : 966339251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3328479691014296874899388369630618933120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "40" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "15" : {
            "sign" : -1527318306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60]) "
          },
          "11" : {
            "sign" : -1649457538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 2104526922,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11728659910,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "44" : {
            "sign" : -116325499,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14 "
          },
          "33" : {
            "sign" : 954893078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059] "
          },
          "22" : {
            "sign" : -1149214757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "26" : {
            "sign" : 1979886907,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4 "
          },
          "37" : {
            "sign" : -1866703820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060)) "
          },
          "13" : {
            "sign" : 1776326135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3834968173800,
            "rowCount" : 95874204345,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#60 = d_date_sk#61) "
          },
          "24" : {
            "sign" : 1904699215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          },
          "35" : {
            "sign" : 1351773682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2026, ws_ship_date_sk#2027, ws_item_sk#2028, ws_bill_customer_sk#2029, ws_bill_cdemo_sk#2030, ws_bill_hdemo_sk#2031, ws_bill_addr_sk#2032, ws_ship_customer_sk#2033, ws_ship_cdemo_sk#2034, ws_ship_hdemo_sk#2035, ws_ship_addr_sk#2036, ws_web_page_sk#2037, ws_web_site_sk#2038, ws_ship_mode_sk#2039, ws_warehouse_sk#2040, ws_promo_sk#2041, ws_order_number#2042L, ws_quantity#2043, ws_wholesale_cost#2044, ws_list_price#2045, ws_sales_price#2046, ws_ext_discount_amt#2047, ws_ext_sales_price#2048, ws_ext_wholesale_cost#2049, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 68451015,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#38, ss_item_sk#39, ss_customer_sk#40, ss_cdemo_sk#41, ss_hdemo_sk#42, ss_addr_sk#43, ss_store_sk#44, ss_promo_sk#45, ss_ticket_number#46L, ss_quantity#47, ss_wholesale_cost#48, ss_list_price#49, ss_sales_price#50, ss_ext_discount_amt#51, ss_ext_sales_price#52, ss_ext_wholesale_cost#53, ss_ext_list_price#54, ss_ext_tax#55, ss_coupon_amt#56, ss_net_paid#57, ss_net_paid_inc_tax#58, ss_net_profit#59, ss_sold_date_sk#60], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -680364417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1045689790183093471492134037980,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1934185580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "43" : {
            "sign" : 1965618473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "32" : {
            "sign" : 1219594019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1050697774600,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2059 = d_date_sk#2060) "
          },
          "6" : {
            "sign" : 1151463730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1204127637180531876263669498280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "36" : {
            "sign" : -723736705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#2060, d_year#2066] "
          },
          "1" : {
            "sign" : 1423132237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1830663830057863281194663603296840413216,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1534199271,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#2060, d_year#2066], BroadcastQueryStage 6 "
          },
          "17" : {
            "sign" : 1590276080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#61, d_year#67] "
          },
          "25" : {
            "sign" : -716079943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13 "
          },
          "14" : {
            "sign" : -1539497867,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] "
          },
          "31" : {
            "sign" : 1733801745,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 840558219680,
            "rowCount" : 26267444365,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "42" : {
            "sign" : 1397265268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "0" : {
            "sign" : 78014330,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1032426113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#61, d_year#67], BroadcastQueryStage 0 "
          },
          "27" : {
            "sign" : -1084627309,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3084868548,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "2" : {
            "sign" : 111480804,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1830663830057863281194663603296840413216,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -878709686,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#2060, d_date_id#2061, d_date#2062, d_month_seq#2063, d_week_seq#2064, d_quarter_seq#2065, d_year#2066, d_dow#2067, d_moy#2068, d_dom#2069, d_qoy#2070, d_fy_year#2071, d_fy_quarter_seq#2072, d_fy_week_seq#2073, d_day_name#2074, d_quarter_name#2075, d_holiday#2076, d_weekend#2077, d_following_holiday#2078, d_first_dom#2079, d_last_dom#2080, d_same_day_ly#2081, d_same_day_lq#2082, d_current_day#2083, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : -2019657161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61)) "
          },
          "30" : {
            "sign" : 1593537660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "7" : {
            "sign" : -1283041624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 390333532351386233610,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "29" : {
            "sign" : 1830913301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "41" : {
            "sign" : 1566531498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "3" : {
            "sign" : 1277005204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1830663830057863281194663603296840413216,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "28" : {
            "sign" : -1963888693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3084868548,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Aggregate",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalQueryStage",
          "toId" : 43,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 43,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Join",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 41,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n            :     :  :           :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n            :     :  :           :     :     :  +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n            :     :  :           :     +- LogicalQueryStage Project [d_date_sk#61, d_year#67], BroadcastQueryStage 0\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :                 :  +- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n            :                 :     :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n            :                 :     :     :  +- Project [d_date_sk#2060, d_year#2066]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n            :                 :     +- LogicalQueryStage Project [d_date_sk#2060, d_year#2066], BroadcastQueryStage 6\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 68966748520,
        "inputRowCount" : 690065897
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "StartTimeInMs" : 1702226577110,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26316,
        "IOBytes" : {
          "Total" : 6026063492,
          "Details" : {
            "IR" : 1027512774,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 2271697708
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2004989805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2136521480,
            "rowCount" : 53413037,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : 598095733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3845738664000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "4" : {
            "sign" : 986382694,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1770233113761615481783242159520548256875789306155424,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "11" : {
            "sign" : -1279656869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18801389024000000,
            "rowCount" : 106826074000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 1937448743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3845738664000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "13" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "5" : {
            "sign" : -534840505,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 556144205506764741507765258871578947368421,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1158003855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17946780432000000,
            "rowCount" : 106826074000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : 191857159,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))]) "
          },
          "6" : {
            "sign" : -2112186336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 640408479068395762948335752640000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -341932368,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 973628212568888514980783187736301541281684118385483,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "14" : {
            "sign" : -403068192,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))]) "
          },
          "0" : {
            "sign" : -2022098945,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "2" : {
            "sign" : 1733932501,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 973628212568888514980783187736301541281684118385483,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "7" : {
            "sign" : 1228517960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 127987405955862597144000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : -1274235447,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 973628212568888514980783187736301541281684118385483,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))])\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41435883535,
        "inputRowCount" : 474294569
      },
      "PD" : {
        "3" : [ 2988435, 2967931, 2914547, 2922472, 2941445, 2934517, 2919157, 2917956, 2946694, 2949926, 2978499, 2956303, 2966826, 2931186, 2931431, 2928849, 2955516, 2995208, 2935577, 2909369, 2924776, 2964522, 2949000, 2971163, 2987592, 2939553, 2930221, 2993630, 2949807, 2935120, 2871482, 2931619, 2984593, 2914479, 2953674, 2947622, 2916201, 2897235, 2908831, 2909737, 2901812, 2939139, 2831441, 2933497, 2939047, 2934710, 2998292, 2937749, 2953537, 2971223, 2962719, 2958576, 2921871, 2920744, 2919742, 2929763, 2885239, 2897560, 2895110, 2906561, 2901117, 2981421, 2893570, 2947181, 2882608, 3002367, 2963591, 2924407, 2916232, 2965900, 2923550, 2905366, 2929929, 2936404, 2956303, 2964342, 2995116, 2965714, 3018823, 2930458, 2909369, 2992935, 2979523, 2888471, 2936861, 2929530, 2895449, 2940573, 2970740, 2986379, 2930727, 2947181, 2976594, 2938446, 2949913, 2993433, 2873197, 2901455, 2923819, 2866195, 2862963, 2966396, 2934618, 2877722, 2896038, 2996458, 2955622, 3021411, 2917956, 2912274, 2913957, 2937424, 2945318, 2980108, 2950516, 2920599, 2881236, 2894509, 2928439, 2946623, 2901254, 2903515, 2978833, 2965125, 2949895, 2981686, 2930458, 2891522, 2921421, 2870980, 2986603, 2945327, 2953485, 2909795, 2883861, 2905727, 2941501, 2973709, 2939047, 2945674, 2911135, 2902330, 2960864, 2965468, 2908441, 2979646, 3034467, 2937657, 2921188, 2973700, 3001512, 2916936, 2977257, 2964345, 2964284, 2961377, 2897916, 3004099, 2977024, 2893920, 2866697, 2881680, 2963775, 2891257, 2914491, 2933677, 2910580, 2971938, 2962249, 2888061, 2929956, 2957589, 2931048, 2957231, 2972447, 2913779, 2964114, 2878092, 2967521, 2926693, 2937657, 2928933, 2921188, 2922564, 3011119, 2959768, 3021319, 3006784, 2909369, 2951580, 2959755, 2932762, 2945085, 2862111, 2948642, 3003797, 2941268, 2932679, 2963092, 2906964 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 3526.0,
        "FinishedTasksDistributionInMs" : [ 586.0, 648.0, 720.0, 766.0, 806.0 ]
      },
      "StartTimeInMs" : 1702226586037,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17389,
        "IOBytes" : {
          "Total" : 3651560150,
          "Details" : {
            "IR" : 128414841,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 796292299
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2004989805,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15 "
          },
          "8" : {
            "sign" : 598095733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "19" : {
            "sign" : 268799191,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "23" : {
            "sign" : -19135667,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16 "
          },
          "4" : {
            "sign" : 880216312,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21193640182373397906033439549360763418947368421048154598920000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "15" : {
            "sign" : -304150526,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "11" : {
            "sign" : -1279656869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          },
          "9" : {
            "sign" : 1937448743,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "22" : {
            "sign" : -862999006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          },
          "26" : {
            "sign" : 1397265268,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "13" : {
            "sign" : -1324856866,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1 "
          },
          "24" : {
            "sign" : 824574350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8 "
          },
          "16" : {
            "sign" : 1904699215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93470285920000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          },
          "5" : {
            "sign" : -1197404896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4235607613518509133306071727157894736842105263157,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "10" : {
            "sign" : -1158003855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89221636560000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "21" : {
            "sign" : -667360999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23350523280000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "6" : {
            "sign" : -1932233509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4877366342839495365625173504000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -307040664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -716079943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13 "
          },
          "25" : {
            "sign" : 1566531498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "14" : {
            "sign" : -1149214757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 50983792320000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "0" : {
            "sign" : -486578241,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -22558863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5003683560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "27" : {
            "sign" : 1965618473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24462452960000000,
            "rowCount" : 138991210000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          },
          "2" : {
            "sign" : 1249983593,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1979886907,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : -491757407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 974755154748334118400000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "29" : {
            "sign" : 1920293557,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12 "
          },
          "3" : {
            "sign" : -130469393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11656502100305368848318391752148419880421052631576485029406000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "28" : {
            "sign" : -116325499,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14 "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- LogicalQueryStage Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67], ShuffleQueryStage 15\n            :     :  :           +- LogicalQueryStage Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36], ShuffleQueryStage 1\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- LogicalQueryStage Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827], ShuffleQueryStage 13\n            :     :           +- LogicalQueryStage Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], ShuffleQueryStage 4\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- LogicalQueryStage Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066], ShuffleQueryStage 16\n            :                 +- LogicalQueryStage Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], ShuffleQueryStage 8\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- LogicalQueryStage Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225], ShuffleQueryStage 14\n                     +- LogicalQueryStage Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], ShuffleQueryStage 12\n"
      },
      "IM" : {
        "inputSizeInBytes" : 22666591520,
        "inputRowCount" : 678072380
      },
      "PD" : {
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 28732.0,
        "FinishedTasksDistributionInMs" : [ 1251.0, 2944.0, 3548.0, 3773.0, 4091.0 ]
      },
      "StartTimeInMs" : 1702226581674,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21752,
        "IOBytes" : {
          "Total" : 5800486866,
          "Details" : {
            "IR" : 953654582,
            "IW" : 0,
            "SR" : 2726853010,
            "SW" : 2119979274
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 191857159,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 145279744,
                "rowCount" : 902229
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297], HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1122314666,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 145279744,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L] Keys [8]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225] Functions [1]: [sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))] Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))#1266L] Results [2]: [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))#1266L,18,2) AS year_total#1297] "
          },
          "1" : {
            "sign" : 41501065,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L] Arguments: 18 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))], output=[customer_id#1289, year_total#1297])\n+- ShuffleQueryStage 18\n   +- Exchange hashpartitioning(c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, 200), ENSURE_REQUIREMENTS, [plan_id=2260]\n      +- *(18) HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))], output=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L])\n         +- *(18) Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n            +- *(18) SortMergeJoin [ws_bill_customer_sk#2188], [c_customer_sk#2167], Inner\n               :- *(16) Sort [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 14\n               :        +- Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [plan_id=1202]\n               :           +- *(10) Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n               :              +- *(10) BroadcastHashJoin [ws_sold_date_sk#2218], [d_date_sk#2219], Inner, BuildRight, false\n               :                 :- *(10) Filter isnotnull(ws_bill_customer_sk#2188)\n               :                 :  +- *(10) ColumnarToRow\n               :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_list_price#2209,ws_sold_date_sk#2218] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2218), dynamicpruningexpression(ws_sold_date_sk#2218 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n               :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n               :                 +- BroadcastQueryStage 10\n               :                    +- ReusedExchange [d_date_sk#2219, d_year#2225], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n               +- *(17) Sort [c_customer_sk#2167 ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 12\n                        +- ReusedExchange [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 145279744,
        "inputRowCount" : 902229
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 377676, 374918, 391514, 374918, 358680, 385182, 374918, 391514, 381250, 381250, 387582, 391514, 385182, 378850, 381250, 391514, 384642, 374918, 377676, 385182, 374918, 374918, 381250, 385182, 374918, 387582, 374918, 378850, 374918, 388216, 381250, 381250, 378850, 365012, 369162, 381250, 387582, 391514, 388216, 392148, 374918, 391514, 385182, 387582, 381250, 381884, 381250, 374918, 381250, 374918, 369220, 387582, 385816, 385182, 374918, 372518, 385182, 381250, 385182, 381250, 381250, 381250, 371344, 385182, 387582, 385182, 368586, 381250, 384642, 381250, 374918, 378850, 366186, 368586, 374918, 374918, 381250, 378850, 368586, 381250, 381250, 362254, 387582, 374918, 381250, 381250, 374918, 381250, 378850, 387582, 377676, 377676, 381884, 387582, 398480, 381250, 374918, 366186, 387582, 381250, 374918, 381250, 374918, 387582, 381250, 384008, 381250, 374918, 378850, 394548, 368586, 371344, 381250, 371344, 372518, 387582, 372518, 385182, 381250, 388216, 368586, 381250, 387582, 387582, 385182, 374918, 374918, 374918, 387582, 388216, 362254, 378850, 385182, 381250, 381250, 381250, 398480, 368586, 378850, 387582, 381884, 381884, 381250, 381250, 381250, 371344, 381250, 362830, 378850, 385182, 355922, 385182, 387582, 385182, 385816, 381250, 387582, 381250, 387582, 385182, 387582, 387582, 385182, 374918, 378850, 385182, 385182, 368586, 381250, 374918, 387582, 391514, 374918, 387582, 381250, 381250, 378850, 381250, 371344, 374918, 387582, 368586, 374918, 395839, 384008, 387582, 374918, 388216, 374918, 366186, 374918, 377676, 374918, 387582, 381250, 381250, 387582, 374918, 369220, 381250 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 4345,
        "TotalTasksDurationInMs" : 2715,
        "IOBytes" : {
          "Total" : 84468013,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 72427155,
            "SW" : 12040858
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 498980597,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297] "
          },
          "1" : {
            "sign" : 1130253637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14396053224,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 14396053224,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "2" : {
            "sign" : 1618018838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14974789032,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 14974789032,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n+- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n   +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n      :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n      :  +- Join Inner, (ws_sold_date_sk#2218 = d_date_sk#2219)\n      :     :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218]\n      :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218])\n      :     :     :  +- Project [d_date_sk#2219, d_year#2225]\n      :     :     :     +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2185,ws_ship_date_sk#2186,ws_item_sk#2187,ws_bill_customer_sk#2188,ws_bill_cdemo_sk#2189,ws_bill_hdemo_sk#2190,ws_bill_addr_sk#2191,ws_ship_customer_sk#2192,ws_ship_cdemo_sk#2193,ws_ship_hdemo_sk#2194,ws_ship_addr_sk#2195,ws_web_page_sk#2196,ws_web_site_sk#2197,ws_ship_mode_sk#2198,ws_warehouse_sk#2199,ws_promo_sk#2200,ws_order_number#2201L,ws_quantity#2202,ws_wholesale_cost#2203,ws_list_price#2204,ws_sales_price#2205,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,... 10 more fields] parquet\n      :     +- Project [d_date_sk#2219, d_year#2225]\n      :        +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n      +- Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183]\n         +- Filter (isnotnull(c_customer_sk#2167) AND isnotnull(c_customer_id#2168))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2167,c_customer_id#2168,c_current_cdemo_sk#2169,c_current_hdemo_sk#2170,c_current_addr_sk#2171,c_first_shipto_date_sk#2172,c_first_sales_date_sk#2173,c_salutation#2174,c_first_name#2175,c_last_name#2176,c_preferred_cust_flag#2177,c_birth_day#2178,c_birth_month#2179,c_birth_year#2180,c_birth_country#2181,c_login#2182,c_email_address#2183,c_last_review_date#2184] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1798002704,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 575637360,
            "rowCount" : 14390934,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] Arguments: 14 "
          },
          "5" : {
            "sign" : 522799600,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183] Arguments: [c_customer_sk#2167 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 919427246,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183] Arguments: 12 "
          },
          "1" : {
            "sign" : -47194670,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [10]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] Input [12]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225, c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183] "
          },
          "0" : {
            "sign" : -1090789180,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [10]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] Keys [8]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225] Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))] Aggregate Attributes [1]: [sum#2297L] Results [9]: [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L] "
          },
          "2" : {
            "sign" : -304886279,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_bill_customer_sk#2188] Right keys [1]: [c_customer_sk#2167] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1105294644,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] Arguments: [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))], output=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L])\n+- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n   +- SortMergeJoin [ws_bill_customer_sk#2188], [c_customer_sk#2167], Inner\n      :- Sort [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 14\n      :     +- Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [plan_id=1202]\n      :        +- *(10) Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n      :           +- *(10) BroadcastHashJoin [ws_sold_date_sk#2218], [d_date_sk#2219], Inner, BuildRight, false\n      :              :- *(10) Filter isnotnull(ws_bill_customer_sk#2188)\n      :              :  +- *(10) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_list_price#2209,ws_sold_date_sk#2218] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2218), dynamicpruningexpression(ws_sold_date_sk#2218 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n      :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n      :              +- BroadcastQueryStage 10\n      :                 +- ReusedExchange [d_date_sk#2219, d_year#2225], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      +- Sort [c_customer_sk#2167 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 12\n            +- ReusedExchange [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 881706200,
        "inputRowCount" : 16390934
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 1062491, 1038439, 1027858, 1072604, 1046474, 1049907, 1046599, 1014070, 1037742, 1063111, 1062577, 1005016, 1063498, 1043934, 1015925, 1073627, 1055127, 1071330, 1047036, 1040528, 1043535, 1063103, 1042681, 1064459, 1038607, 1051377, 1025250, 1020548, 1045994, 1034932, 1038952, 1045428, 1070322, 1034399, 1026288, 1033209, 1044691, 1028812, 1035251, 1010626, 1064396, 1032633, 1005707, 1050418, 1044181, 1016319, 1062816, 1036702, 1037220, 1052566, 1070498, 1060804, 1022469, 1038080, 1048547, 1041689, 1042575, 1006427, 1039465, 1037649, 1025402, 1071991, 1030670, 1068745, 1002981, 1058729, 1039399, 1044805, 1047963, 1076844, 1057109, 1035222, 1023831, 1057709, 1068957, 1058579, 1028328, 1068620, 1072060, 1054350, 1045405, 1065574, 1064614, 1042107, 1035834, 1031817, 1036131, 1071823, 1028609, 1089088, 1042561, 1072011, 1034349, 1041426, 1046816, 1049708, 1039460, 1031820, 1037481, 1057011, 1012751, 1049103, 1034878, 1019197, 1048392, 1055956, 1040654, 1069099, 1007924, 1003415, 1029622, 1046642, 1071357, 1020400, 1067288, 1038800, 1008650, 1050389, 1041244, 1038671, 1046750, 1056997, 1086679, 1045953, 1023894, 1082008, 1041787, 1034878, 1034617, 1038115, 1072233, 1066901, 1008588, 1021616, 1025933, 1039170, 1032851, 1074696, 1054879, 1067052, 1033160, 1048331, 1023431, 1033457, 1024264, 1023980, 1076605, 1078879, 1071688, 1043779, 1070152, 1064011, 1096676, 1065419, 1045297, 1058932, 1042757, 1059050, 1047247, 1016757, 1035096, 1054588, 1039994, 1066596, 1056303, 1092021, 1060761, 1060995, 1026232, 1039502, 1049026, 1036122, 1061811, 1048303, 1038276, 1039147, 1004576, 1045452, 1044802, 1054845, 1055855, 1034244, 1026040, 1031159, 1071741, 1033070, 1045466, 1038607, 1040252, 1063905, 1033472, 1050934, 1013865, 1037185, 1054687, 1072743, 1029228, 1014300, 1060619, 1019977 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 1148.0,
        "FinishedTasksDistributionInMs" : [ 335.0, 335.0, 813.0, 813.0, 813.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 8470,
        "TotalTasksDurationInMs" : 19214,
        "IOBytes" : {
          "Total" : 423304971,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 350877816,
            "SW" : 72427155
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1929744551,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2185, ws_ship_date_sk#2186, ws_item_sk#2187, ws_bill_customer_sk#2188, ws_bill_cdemo_sk#2189, ws_bill_hdemo_sk#2190, ws_bill_addr_sk#2191, ws_ship_customer_sk#2192, ws_ship_cdemo_sk#2193, ws_ship_hdemo_sk#2194, ws_ship_addr_sk#2195, ws_web_page_sk#2196, ws_web_site_sk#2197, ws_ship_mode_sk#2198, ws_warehouse_sk#2199, ws_promo_sk#2200, ws_order_number#2201L, ws_quantity#2202, ws_wholesale_cost#2203, ws_list_price#2204, ws_sales_price#2205, ws_ext_discount_amt#2206, ws_ext_sales_price#2207, ws_ext_wholesale_cost#2208, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1144231265,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2218 = d_date_sk#2219) "
          },
          "0" : {
            "sign" : -1726694575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] "
          },
          "2" : {
            "sign" : 1702923524,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2302899232,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 2302899232,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218] "
          },
          "3" : {
            "sign" : -1628688783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n+- Join Inner, (ws_sold_date_sk#2218 = d_date_sk#2219)\n   :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218]\n   :  +- Filter ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218])\n   :     :  +- Project [d_date_sk#2219, d_year#2225]\n   :     :     +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2185,ws_ship_date_sk#2186,ws_item_sk#2187,ws_bill_customer_sk#2188,ws_bill_cdemo_sk#2189,ws_bill_hdemo_sk#2190,ws_bill_addr_sk#2191,ws_ship_customer_sk#2192,ws_ship_cdemo_sk#2193,ws_ship_hdemo_sk#2194,ws_ship_addr_sk#2195,ws_web_page_sk#2196,ws_web_site_sk#2197,ws_ship_mode_sk#2198,ws_warehouse_sk#2199,ws_promo_sk#2200,ws_order_number#2201L,ws_quantity#2202,ws_wholesale_cost#2203,ws_list_price#2204,ws_sales_price#2205,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,... 10 more fields] parquet\n   +- Project [d_date_sk#2219, d_year#2225]\n      +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1294601192,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#2219, d_year#2225] Arguments: 10 "
          },
          "1" : {
            "sign" : -1522908378,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2779824200,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#2218] Right keys [1]: [d_date_sk#2219] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 49796782,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225] Input [6]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218, d_date_sk#2219, d_year#2225] "
          },
          "2" : {
            "sign" : -756220001,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218] Condition : isnotnull(ws_bill_customer_sk#2188) "
          },
          "3" : {
            "sign" : 1439615618,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#2218), dynamicpruningexpression(ws_sold_date_sk#2218 IN dynamicpruning#2288)] PushedFilters: [IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n+- BroadcastHashJoin [ws_sold_date_sk#2218], [d_date_sk#2219], Inner, BuildRight, false\n   :- Filter isnotnull(ws_bill_customer_sk#2188)\n   :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_list_price#2209,ws_sold_date_sk#2218] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2218), dynamicpruningexpression(ws_sold_date_sk#2218 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n   +- BroadcastQueryStage 10\n      +- ReusedExchange [d_date_sk#2219, d_year#2225], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2303950728,
        "inputRowCount" : 71965966
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 6999,
        "TotalTasksDurationInMs" : 14282,
        "IOBytes" : {
          "Total" : 328193108,
          "Details" : {
            "IR" : 129033726,
            "IW" : 0,
            "SR" : 0,
            "SW" : 199159382
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -95387543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9946974415426821,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 9946974415426821,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)) "
          },
          "5" : {
            "sign" : -247905608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 225745195539930,
                "rowCount" : 1368152700242
              },
              "compileTime" : {
                "sizeInBytes" : 225745195539930,
                "rowCount" : 1368152700242
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] "
          },
          "6" : {
            "sign" : -801933273,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264053471146706,
                "rowCount" : 1368152700242
              },
              "compileTime" : {
                "sizeInBytes" : 264053471146706,
                "rowCount" : 1368152700242
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1199 = customer_id#1209) "
          },
          "1" : {
            "sign" : -1418430045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1989969342,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8800,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 8800,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 484944280,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 454567895,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5938460236087,
                "rowCount" : 37824587491
              },
              "compileTime" : {
                "sizeInBytes" : 5938460236087,
                "rowCount" : 37824587491
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (customer_id#1269 = customer_id#1199) "
          },
          "3" : {
            "sign" : 1832659196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              },
              "compileTime" : {
                "sizeInBytes" : 5592080143996173,
                "rowCount" : 49487434902621
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], true\n      +- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n         +- Join Inner, ((customer_id#1199 = customer_id#1289) AND (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END))\n            :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n            :  +- Join Inner, (customer_id#1199 = customer_id#1209)\n            :     :- Join Inner, (customer_id#1269 = customer_id#1199)\n            :     :  :- Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n            :     :  :  +- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n            :     :  :     +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :        +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n            :     :  :           :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n            :     :  :           :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n            :     :  :           :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n            :     :  :           :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n            :     :  :           :     :     :  +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n            :     :  :           :     +- Project [d_date_sk#61, d_year#67]\n            :     :  :           :        +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            :     :  :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n            :     :  :           +- Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36]\n            :     :  :              +- Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n            :     :  :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_current_cdemo_sk#22,c_current_hdemo_sk#23,c_current_addr_sk#24,c_first_shipto_date_sk#25,c_first_sales_date_sk#26,c_salutation#27,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_day#31,c_birth_month#32,c_birth_year#33,c_birth_country#34,c_login#35,c_email_address#36,c_last_review_date#37] parquet\n            :     :  +- Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n            :     :     +- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :        +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n            :     :           :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            :     :           :  +- Join Inner, (ss_sold_date_sk#1820 = d_date_sk#1821)\n            :     :           :     :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820]\n            :     :           :     :  +- Filter ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820])\n            :     :           :     :     :  +- Project [d_date_sk#1821, d_year#1827]\n            :     :           :     :     :     +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n            :     :           :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n            :     :           :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1798,ss_item_sk#1799,ss_customer_sk#1800,ss_cdemo_sk#1801,ss_hdemo_sk#1802,ss_addr_sk#1803,ss_store_sk#1804,ss_promo_sk#1805,ss_ticket_number#1806L,ss_quantity#1807,ss_wholesale_cost#1808,ss_list_price#1809,ss_sales_price#1810,ss_ext_discount_amt#1811,ss_ext_sales_price#1812,ss_ext_wholesale_cost#1813,ss_ext_list_price#1814,ss_ext_tax#1815,ss_coupon_amt#1816,ss_net_paid#1817,ss_net_paid_inc_tax#1818,ss_net_profit#1819,ss_sold_date_sk#1820] parquet\n            :     :           :     +- Project [d_date_sk#1821, d_year#1827]\n            :     :           :        +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n            :     :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n            :     :           +- Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796]\n            :     :              +- Filter (isnotnull(c_customer_sk#1780) AND isnotnull(c_customer_id#1781))\n            :     :                 +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1780,c_customer_id#1781,c_current_cdemo_sk#1782,c_current_hdemo_sk#1783,c_current_addr_sk#1784,c_first_shipto_date_sk#1785,c_first_sales_date_sk#1786,c_salutation#1787,c_first_name#1788,c_last_name#1789,c_preferred_cust_flag#1790,c_birth_day#1791,c_birth_month#1792,c_birth_year#1793,c_birth_country#1794,c_login#1795,c_email_address#1796,c_last_review_date#1797] parquet\n            :     +- Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n            :        +- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n            :           +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :              +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n            :                 :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n            :                 :  +- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n            :                 :     :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n            :                 :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n            :                 :     :     :  +- Project [d_date_sk#2060, d_year#2066]\n            :                 :     :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n            :                 :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n            :                 :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n            :                 :     +- Project [d_date_sk#2060, d_year#2066]\n            :                 :        +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n            :                 :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n            :                 +- Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024]\n            :                    +- Filter (isnotnull(c_customer_sk#2008) AND isnotnull(c_customer_id#2009))\n            :                       +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2008,c_customer_id#2009,c_current_cdemo_sk#2010,c_current_hdemo_sk#2011,c_current_addr_sk#2012,c_first_shipto_date_sk#2013,c_first_sales_date_sk#2014,c_salutation#2015,c_first_name#2016,c_last_name#2017,c_preferred_cust_flag#2018,c_birth_day#2019,c_birth_month#2020,c_birth_year#2021,c_birth_country#2022,c_login#2023,c_email_address#2024,c_last_review_date#2025] parquet\n            +- Aggregate [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], [c_customer_id#2168 AS customer_id#1289, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206))),18,2) AS year_total#1297]\n               +- Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                  +- Join Inner, (c_customer_sk#2167 = ws_bill_customer_sk#2188)\n                     :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                     :  +- Join Inner, (ws_sold_date_sk#2218 = d_date_sk#2219)\n                     :     :- Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, ws_sold_date_sk#2218]\n                     :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2188) AND isnotnull(ws_sold_date_sk#2218)) AND dynamicpruning#2290 [ws_sold_date_sk#2218])\n                     :     :     :  +- Project [d_date_sk#2219, d_year#2225]\n                     :     :     :     +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n                     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n                     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2185,ws_ship_date_sk#2186,ws_item_sk#2187,ws_bill_customer_sk#2188,ws_bill_cdemo_sk#2189,ws_bill_hdemo_sk#2190,ws_bill_addr_sk#2191,ws_ship_customer_sk#2192,ws_ship_cdemo_sk#2193,ws_ship_hdemo_sk#2194,ws_ship_addr_sk#2195,ws_web_page_sk#2196,ws_web_site_sk#2197,ws_ship_mode_sk#2198,ws_warehouse_sk#2199,ws_promo_sk#2200,ws_order_number#2201L,ws_quantity#2202,ws_wholesale_cost#2203,ws_list_price#2204,ws_sales_price#2205,ws_ext_discount_amt#2206,ws_ext_sales_price#2207,ws_ext_wholesale_cost#2208,... 10 more fields] parquet\n                     :     +- Project [d_date_sk#2219, d_year#2225]\n                     :        +- Filter ((isnotnull(d_year#2225) AND (d_year#2225 = 2002)) AND isnotnull(d_date_sk#2219))\n                     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2219,d_date_id#2220,d_date#2221,d_month_seq#2222,d_week_seq#2223,d_quarter_seq#2224,d_year#2225,d_dow#2226,d_moy#2227,d_dom#2228,d_qoy#2229,d_fy_year#2230,d_fy_quarter_seq#2231,d_fy_week_seq#2232,d_day_name#2233,d_quarter_name#2234,d_holiday#2235,d_weekend#2236,d_following_holiday#2237,d_first_dom#2238,d_last_dom#2239,d_same_day_ly#2240,d_same_day_lq#2241,d_current_day#2242,... 4 more fields] parquet\n                     +- Project [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183]\n                        +- Filter (isnotnull(c_customer_sk#2167) AND isnotnull(c_customer_id#2168))\n                           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2167,c_customer_id#2168,c_current_cdemo_sk#2169,c_current_hdemo_sk#2170,c_current_addr_sk#2171,c_first_shipto_date_sk#2172,c_first_sales_date_sk#2173,c_salutation#2174,c_first_name#2175,c_last_name#2176,c_preferred_cust_flag#2177,c_birth_day#2178,c_birth_month#2179,c_birth_year#2180,c_birth_country#2181,c_login#2182,c_email_address#2183,c_last_review_date#2184] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1502816982,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1289, year_total#1297] Arguments: [customer_id#1289 ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : 951369766,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277] Arguments: [customer_id#1269 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -1839508061,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 264053471146706,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1199] Right keys [1]: [customer_id#1209] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1907100896,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 35962440,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1209, year_total#1217] Arguments: 24 "
          },
          "9" : {
            "sign" : -1607525501,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 200393032,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277] Arguments: 21 "
          },
          "13" : {
            "sign" : -1334314377,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 36089160,
            "rowCount" : 902229,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1289, year_total#1297] Arguments: 22 "
          },
          "5" : {
            "sign" : -1753863151,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 5938460236087,
            "rowCount" : 37824587491,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1199] Right keys [1]: [customer_id#1269] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : -973906697,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1209, year_total#1217] Arguments: [customer_id#1209 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1060333236,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [customer_id#1199, year_total#1207] Arguments: [customer_id#1199 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 2046599139,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5592080143996173,
            "rowCount" : 49487434902621,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] Input [10]: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217, customer_id#1289, year_total#1297] "
          },
          "0" : {
            "sign" : 1433024157,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 8800,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [4]: [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] Arguments: 100, [customer_id#1269 ASC NULLS FIRST, customer_first_name#1270 ASC NULLS FIRST, customer_last_name#1271 ASC NULLS FIRST, customer_email_address#1275 ASC NULLS FIRST], [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275] "
          },
          "2" : {
            "sign" : 1966052752,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 9946974415426821,
            "rowCount" : 49487434902621,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [customer_id#1199] Right keys [1]: [customer_id#1289] Join type: Inner Join condition: (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END) "
          },
          "7" : {
            "sign" : -456043873,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 72667920,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [customer_id#1199, year_total#1207] Arguments: 23 "
          },
          "3" : {
            "sign" : 1022061510,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 225745195539930,
            "rowCount" : 1368152700242,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217] Input [9]: [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, customer_id#1209, year_total#1217] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[customer_id#1269 ASC NULLS FIRST,customer_first_name#1270 ASC NULLS FIRST,customer_last_name#1271 ASC NULLS FIRST,customer_email_address#1275 ASC NULLS FIRST], output=[customer_id#1269,customer_first_name#1270,customer_last_name#1271,customer_email_address#1275])\n+- Project [customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275]\n   +- SortMergeJoin [customer_id#1199], [customer_id#1289], Inner, (CASE WHEN (year_total#1217 > 0.00) THEN (year_total#1297 / year_total#1217) ELSE 0E-20 END > CASE WHEN (year_total#1207 > 0.00) THEN (year_total#1277 / year_total#1207) ELSE 0E-20 END)\n      :- Project [customer_id#1199, year_total#1207, customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277, year_total#1217]\n      :  +- SortMergeJoin [customer_id#1199], [customer_id#1209], Inner\n      :     :- SortMergeJoin [customer_id#1199], [customer_id#1269], Inner\n      :     :  :- Sort [customer_id#1199 ASC NULLS FIRST], false, 0\n      :     :  :  +- ShuffleQueryStage 23\n      :     :  :     +- Exchange hashpartitioning(customer_id#1199, 200), ENSURE_REQUIREMENTS, [plan_id=2771]\n      :     :  :        +- *(27) Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n      :     :  :           +- *(27) HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))], output=[customer_id#1199, year_total#1207])\n      :     :  :              +- AQEShuffleRead coalesced\n      :     :  :                 +- ShuffleQueryStage 19\n      :     :  :                    +- Exchange hashpartitioning(c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, 200), ENSURE_REQUIREMENTS, [plan_id=2405]\n      :     :  :                       +- *(21) HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[partial_sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))], output=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L])\n      :     :  :                          +- *(21) Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n      :     :  :                             +- *(21) SortMergeJoin [ss_customer_sk#40], [c_customer_sk#20], Inner\n      :     :  :                                :- *(19) Sort [ss_customer_sk#40 ASC NULLS FIRST], false, 0\n      :     :  :                                :  +- AQEShuffleRead coalesced\n      :     :  :                                :     +- ShuffleQueryStage 15\n      :     :  :                                :        +- Exchange hashpartitioning(ss_customer_sk#40, 200), ENSURE_REQUIREMENTS, [plan_id=1483]\n      :     :  :                                :           +- *(11) Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n      :     :  :                                :              +- *(11) BroadcastHashJoin [ss_sold_date_sk#60], [d_date_sk#61], Inner, BuildRight, false\n      :     :  :                                :                 :- *(11) Filter isnotnull(ss_customer_sk#40)\n      :     :  :                                :                 :  +- *(11) ColumnarToRow\n      :     :  :                                :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#40,ss_ext_discount_amt#51,ss_ext_list_price#54,ss_sold_date_sk#60] Batched: true, DataFilters: [isnotnull(ss_customer_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#2287)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n      :     :  :                                :                 :           +- SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n      :     :  :                                :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#61, d_year#67], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1454]\n                                                                                       +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :  :                                :                 +- BroadcastQueryStage 0\n      :     :  :                                :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :     :  :                                :                       +- *(1) Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n      :     :  :                                :                          +- *(1) ColumnarToRow\n      :     :  :                                :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :  :                                +- *(20) Sort [c_customer_sk#20 ASC NULLS FIRST], false, 0\n      :     :  :                                   +- AQEShuffleRead coalesced\n      :     :  :                                      +- ShuffleQueryStage 1\n      :     :  :                                         +- Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      :     :  :                                            +- *(2) Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n      :     :  :                                               +- *(2) ColumnarToRow\n      :     :  :                                                  +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_country#34,c_login#35,c_email_address#36] Batched: true, DataFilters: [isnotnull(c_customer_sk#20), isnotnull(c_customer_id#21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...\n      :     :  +- Sort [customer_id#1269 ASC NULLS FIRST], false, 0\n      :     :     +- ShuffleQueryStage 21\n      :     :        +- Exchange hashpartitioning(customer_id#1269, 200), ENSURE_REQUIREMENTS, [plan_id=2627]\n      :     :           +- *(25) HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))], output=[customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277])\n      :     :              +- AQEShuffleRead coalesced\n      :     :                 +- ShuffleQueryStage 17\n      :     :                    +- Exchange hashpartitioning(c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, 200), ENSURE_REQUIREMENTS, [plan_id=2086]\n      :     :                       +- *(15) HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[partial_sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))], output=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L])\n      :     :                          +- *(15) Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n      :     :                             +- *(15) SortMergeJoin [ss_customer_sk#1800], [c_customer_sk#1780], Inner\n      :     :                                :- *(13) Sort [ss_customer_sk#1800 ASC NULLS FIRST], false, 0\n      :     :                                :  +- AQEShuffleRead coalesced\n      :     :                                :     +- ShuffleQueryStage 13\n      :     :                                :        +- Exchange hashpartitioning(ss_customer_sk#1800, 200), ENSURE_REQUIREMENTS, [plan_id=1097]\n      :     :                                :           +- *(9) Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n      :     :                                :              +- *(9) BroadcastHashJoin [ss_sold_date_sk#1820], [d_date_sk#1821], Inner, BuildRight, false\n      :     :                                :                 :- *(9) Filter isnotnull(ss_customer_sk#1800)\n      :     :                                :                 :  +- *(9) ColumnarToRow\n      :     :                                :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1800,ss_ext_discount_amt#1811,ss_ext_list_price#1814,ss_sold_date_sk#1820] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1800)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1820), dynamicpruningexpression(ss_sold_date_sk#1820 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n      :     :                                :                 :           +- SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n      :     :                                :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    BroadcastQueryStage 1\n                                                                                    +- ReusedExchange [d_date_sk#1821, d_year#1827], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                                                                 +- == Initial Plan ==\n                                                                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1068]\n                                                                                    +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :                                :                 +- BroadcastQueryStage 2\n      :     :                                :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      :     :                                :                       +- *(3) Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n      :     :                                :                          +- *(3) ColumnarToRow\n      :     :                                :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :                                +- *(14) Sort [c_customer_sk#1780 ASC NULLS FIRST], false, 0\n      :     :                                   +- AQEShuffleRead coalesced\n      :     :                                      +- ShuffleQueryStage 4\n      :     :                                         +- ReusedExchange [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      :     +- Sort [customer_id#1209 ASC NULLS FIRST], false, 0\n      :        +- ShuffleQueryStage 24\n      :           +- Exchange hashpartitioning(customer_id#1209, 200), ENSURE_REQUIREMENTS, [plan_id=2883]\n      :              +- *(28) Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n      :                 +- *(28) HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))], output=[customer_id#1209, year_total#1217])\n      :                    +- AQEShuffleRead coalesced\n      :                       +- ShuffleQueryStage 20\n      :                          +- Exchange hashpartitioning(c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, 200), ENSURE_REQUIREMENTS, [plan_id=2540]\n      :                             +- *(24) HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))], output=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L])\n      :                                +- *(24) Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n      :                                   +- *(24) SortMergeJoin [ws_bill_customer_sk#2029], [c_customer_sk#2008], Inner\n      :                                      :- *(22) Sort [ws_bill_customer_sk#2029 ASC NULLS FIRST], false, 0\n      :                                      :  +- AQEShuffleRead coalesced\n      :                                      :     +- ShuffleQueryStage 16\n      :                                      :        +- Exchange hashpartitioning(ws_bill_customer_sk#2029, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n      :                                      :           +- *(12) Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n      :                                      :              +- *(12) BroadcastHashJoin [ws_sold_date_sk#2059], [d_date_sk#2060], Inner, BuildRight, false\n      :                                      :                 :- *(12) Filter isnotnull(ws_bill_customer_sk#2029)\n      :                                      :                 :  +- *(12) ColumnarToRow\n      :                                      :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2029,ws_ext_discount_amt#2047,ws_ext_list_price#2050,ws_sold_date_sk#2059] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2029)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2059), dynamicpruningexpression(ws_sold_date_sk#2059 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n      :                                      :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n      :                                      :                 +- BroadcastQueryStage 6\n      :                                      :                    +- ReusedExchange [d_date_sk#2060, d_year#2066], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :                                      +- *(23) Sort [c_customer_sk#2008 ASC NULLS FIRST], false, 0\n      :                                         +- AQEShuffleRead coalesced\n      :                                            +- ShuffleQueryStage 8\n      :                                               +- ReusedExchange [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n      +- Sort [customer_id#1289 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 22\n            +- Exchange hashpartitioning(customer_id#1289, 200), ENSURE_REQUIREMENTS, [plan_id=2703]\n               +- *(26) HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))], output=[customer_id#1289, year_total#1297])\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 18\n                        +- Exchange hashpartitioning(c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, 200), ENSURE_REQUIREMENTS, [plan_id=2260]\n                           +- *(18) HashAggregate(keys=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2209 - ws_ext_discount_amt#2206)))], output=[c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, d_year#2225, sum#2298L])\n                              +- *(18) Project [c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                                 +- *(18) SortMergeJoin [ws_bill_customer_sk#2188], [c_customer_sk#2167], Inner\n                                    :- *(16) Sort [ws_bill_customer_sk#2188 ASC NULLS FIRST], false, 0\n                                    :  +- AQEShuffleRead coalesced\n                                    :     +- ShuffleQueryStage 14\n                                    :        +- Exchange hashpartitioning(ws_bill_customer_sk#2188, 200), ENSURE_REQUIREMENTS, [plan_id=1202]\n                                    :           +- *(10) Project [ws_bill_customer_sk#2188, ws_ext_discount_amt#2206, ws_ext_list_price#2209, d_year#2225]\n                                    :              +- *(10) BroadcastHashJoin [ws_sold_date_sk#2218], [d_date_sk#2219], Inner, BuildRight, false\n                                    :                 :- *(10) Filter isnotnull(ws_bill_customer_sk#2188)\n                                    :                 :  +- *(10) ColumnarToRow\n                                    :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2188,ws_ext_discount_amt#2206,ws_ext_list_price#2209,ws_sold_date_sk#2218] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2188)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2218), dynamicpruningexpression(ws_sold_date_sk#2218 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n                                    :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n                                    :                 +- BroadcastQueryStage 10\n                                    :                    +- ReusedExchange [d_date_sk#2219, d_year#2225], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                    +- *(17) Sort [c_customer_sk#2167 ASC NULLS FIRST], false, 0\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 12\n                                             +- ReusedExchange [c_customer_sk#2167, c_customer_id#2168, c_first_name#2175, c_last_name#2176, c_preferred_cust_flag#2177, c_birth_country#2181, c_login#2182, c_email_address#2183], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 345112552,
        "inputRowCount" : 5437077
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "11" : [ 126570, 126570, 126570, 121336, 131804, 131804, 121336, 126570, 131804, 133471, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 126570, 126570, 131804, 131804, 126570, 126570, 131804, 126570, 126570, 131804, 131804, 131804, 133471, 131804, 131804, 133471, 131804, 131804, 121336, 125054, 126570, 126570, 133471, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 133471, 126570, 131804, 131804, 126570, 131804, 126570, 126570, 126570, 131804, 131804, 130288, 131804, 131804, 131804, 131804, 126570, 125054, 131804, 131804, 131804, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 126570, 126570, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 125054, 131804, 126570, 131804, 133471, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 131804, 126570, 131804, 131804, 131804, 131804, 133471, 131804, 131804, 130288, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 121336, 126570, 126570, 126570, 126570, 131804, 126570, 131804, 131804, 133471, 126570, 133471, 131804, 126570, 131804, 126570, 131804, 131804, 131804, 126570, 131804, 126570, 131804, 130288, 131804, 126570, 131804, 131804, 131804, 131804, 131804, 121336, 126570, 126570, 133471, 131804, 131804, 131804, 126570, 131804, 133471, 131804, 133471, 131804, 131804, 126570, 128237, 131804, 131804, 131804, 133471, 126570, 126570, 131804, 131804, 133471, 131804 ],
        "10" : [ 65343, 65343, 63993, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 65343, 65343, 59402, 65343, 65343, 60109, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 60109, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 60109, 60109, 59402, 64636, 65343, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 64636, 59402, 60109, 65343, 66121, 65343, 60109, 65343, 60109, 60109, 65343, 60109, 60109, 66121, 65343, 60109, 65343, 65343, 64636, 65343, 65343, 63993, 65343, 66121, 64636, 65343, 66121, 60109, 64636, 65343, 65343, 64636, 65343, 64636, 60109, 60109, 64636, 65343, 60887, 64636, 64636, 64636, 60109, 65343, 65343, 65343, 64636, 65343, 65343, 64636, 65343, 65343, 65343, 65343, 65343, 60109, 65343, 64636, 59402, 65343, 60109, 60109, 65343, 60109, 65343, 65343, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 60109, 65343, 65343, 65343, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 60109, 65343, 65343, 60109, 65343, 64636, 65343, 60109, 66121, 60109, 65343, 65343, 65343, 60109, 65343, 65343, 64636, 65343, 59402, 64636, 65343, 65343, 59402, 60109, 65343, 60109, 60109, 65343, 65343, 65343, 59402, 65343, 65343, 64636, 60109, 60109, 60109, 64636, 60109, 64636, 60109, 65343, 65343, 64636, 65343, 65343, 66121, 60109, 60109, 60109, 65343, 65343, 65343, 60887, 65343, 64636, 65343, 65343, 65343, 64636 ],
        "9" : [ 605637, 605637, 605637, 581591, 605637, 581591, 557545, 605637, 581591, 613298, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 598671, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 598671, 605637, 581591, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 613298, 581591, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 613298, 605637, 598671, 598671, 589252, 605637, 605637, 605637, 605637, 598671, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 574625, 581591, 605637, 581591, 581591, 581591, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 613298, 605637, 613298, 581591, 605637, 598671, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 589252, 605637, 581591, 605637, 605637, 605637, 613298, 605637, 581591, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 613298, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 605637, 581591, 605637, 605637, 605637, 605637 ],
        "12" : [ 64636, 59402, 59402, 64636, 64636, 64636, 59402, 65343, 64636, 65343, 64636, 59402, 65343, 64636, 64636, 64636, 64636, 65343, 65343, 65343, 64636, 65343, 64636, 65343, 59402, 65343, 59402, 60109, 64636, 64636, 59402, 65343, 64636, 64636, 66121, 65343, 64636, 59402, 64636, 63993, 64636, 60109, 64636, 59402, 60109, 64636, 64636, 64636, 65343, 65343, 64636, 64636, 64636, 65343, 65343, 60109, 64636, 65343, 65343, 60109, 64636, 64636, 64636, 65343, 59402, 60109, 64636, 63993, 65343, 64636, 65343, 64636, 64636, 64636, 64636, 59402, 64636, 65343, 65343, 65343, 65343, 64636, 64636, 64636, 65343, 64636, 65343, 64636, 63993, 64636, 65343, 64636, 65343, 64636, 64636, 64636, 60109, 64636, 64636, 65343, 65343, 65343, 65343, 64636, 65343, 64636, 65343, 65343, 59402, 65343, 65343, 65343, 59402, 65343, 64636, 59402, 60109, 65343, 64636, 64636, 65343, 65343, 65343, 64636, 64636, 64636, 64636, 59402, 64636, 64636, 65343, 64636, 64636, 63993, 60109, 65343, 65343, 59402, 64636, 64636, 64636, 64636, 64636, 59402, 64636, 65343, 64636, 65343, 64636, 64636, 65343, 64636, 65343, 59402, 65343, 65343, 64636, 64636, 59402, 64636, 64636, 64636, 63993, 64636, 65343, 64636, 64636, 65343, 65343, 63993, 59402, 65343, 64636, 65343, 59402, 59402, 59402, 65343, 64636, 65343, 64636, 64636, 64636, 65343, 64636, 60109, 59402, 64636, 64636, 60109, 65343, 64636, 64636, 65343, 65343, 63993, 64636, 64636, 65343, 65343 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 43 ],
      "Objectives" : {
        "DurationInMs" : 4533,
        "TotalTasksDurationInMs" : 11147,
        "IOBytes" : {
          "Total" : 161597075,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 161597075,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -403068192,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 292938184,
                "rowCount" : 1819089
              },
              "compileTime" : {
                "sizeInBytes" : 33280318071,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277], HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1350995707,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 292938184,
            "rowCount" : 1819089,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L] Keys [8]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827] Functions [1]: [sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))] Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))#1265L] Results [5]: [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))#1265L,18,2) AS year_total#1277] "
          },
          "1" : {
            "sign" : -1380650889,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L] Arguments: 17 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))], output=[customer_id#1269, customer_first_name#1270, customer_last_name#1271, customer_email_address#1275, year_total#1277])\n+- ShuffleQueryStage 17\n   +- Exchange hashpartitioning(c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, 200), ENSURE_REQUIREMENTS, [plan_id=2086]\n      +- *(15) HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[partial_sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))], output=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L])\n         +- *(15) Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n            +- *(15) SortMergeJoin [ss_customer_sk#1800], [c_customer_sk#1780], Inner\n               :- *(13) Sort [ss_customer_sk#1800 ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 13\n               :        +- Exchange hashpartitioning(ss_customer_sk#1800, 200), ENSURE_REQUIREMENTS, [plan_id=1097]\n               :           +- *(9) Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n               :              +- *(9) BroadcastHashJoin [ss_sold_date_sk#1820], [d_date_sk#1821], Inner, BuildRight, false\n               :                 :- *(9) Filter isnotnull(ss_customer_sk#1800)\n               :                 :  +- *(9) ColumnarToRow\n               :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1800,ss_ext_discount_amt#1811,ss_ext_list_price#1814,ss_sold_date_sk#1820] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1800)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1820), dynamicpruningexpression(ss_sold_date_sk#1820 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n               :                 :           +- SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n               :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#1821, d_year#1827], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1068]\n                                                      +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n               :                 +- BroadcastQueryStage 2\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n               :                       +- *(3) Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n               :                          +- *(3) ColumnarToRow\n               :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n               +- *(14) Sort [c_customer_sk#1780 ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 4\n                        +- ReusedExchange [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 292938184,
        "inputRowCount" : 1819089
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 757345, 744105, 768434, 775765, 744105, 767858, 767858, 780522, 769433, 761526, 763101, 774190, 763101, 761526, 774190, 763101, 750437, 756769, 756769, 774190, 782097, 750014, 775765, 756769, 763101, 763677, 762102, 767858, 767858, 775765, 767858, 744681, 751013, 762102, 756769, 761526, 762102, 762102, 780522, 788429, 755770, 782097, 774190, 767858, 761526, 769010, 763101, 774190, 755770, 769433, 750437, 767858, 767858, 761526, 755194, 754096, 782097, 763101, 767858, 761526, 780522, 775765, 755194, 755194, 769433, 774766, 769433, 744681, 763101, 786854, 775765, 774190, 762102, 769433, 763101, 768434, 744681, 762102, 769433, 756769, 763101, 763101, 767858, 756769, 763101, 757345, 753020, 758776, 768434, 782097, 774190, 769433, 756769, 763101, 769433, 761526, 783307, 755194, 756769, 756769, 774190, 757345, 756769, 769433, 763101, 761526, 780522, 767858, 767858, 782097, 761526, 761526, 763101, 775765, 785756, 775765, 767858, 774190, 757345, 775765, 761526, 761526, 763101, 767858, 780522, 780522, 767858, 774190, 755194, 767858, 744681, 774190, 767858, 780522, 756769, 756769, 780522, 770009, 767858, 780522, 763101, 755194, 751013, 756769, 763101, 750437, 780522, 767858, 767858, 769433, 761526, 767858, 786854, 744105, 761526, 751013, 763101, 750437, 769433, 761526, 762102, 769433, 761526, 767858, 755194, 769433, 780522, 755770, 748862, 761526, 769433, 774190, 761526, 775342, 751013, 769433, 751013, 786854, 788429, 786854, 780522, 744105, 767858, 774190, 756769, 769433, 755194, 763101, 756769, 755770, 743106, 758776, 768434, 775765, 761526, 788429, 767858, 756769, 755194, 782097 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 16573.0,
        "FinishedTasksDistributionInMs" : [ 1567.0, 3531.0, 3726.0, 3840.0, 3909.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 5051,
        "TotalTasksDurationInMs" : 4797,
        "IOBytes" : {
          "Total" : 259340267,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 146304058,
            "SW" : 113036209
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1024800540,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207] "
          },
          "1" : {
            "sign" : 684637898,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 54733746249,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 54733746249,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "2" : {
            "sign" : -1263210928,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 56934097857,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 56934097857,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#20 = ss_customer_sk#40) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n+- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n   +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n      :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n      :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n      :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n      :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n      :     :     :  +- Project [d_date_sk#61, d_year#67]\n      :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n      :     +- Project [d_date_sk#61, d_year#67]\n      :        +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n      +- Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36]\n         +- Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_current_cdemo_sk#22,c_current_hdemo_sk#23,c_current_addr_sk#24,c_first_shipto_date_sk#25,c_first_sales_date_sk#26,c_salutation#27,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_day#31,c_birth_month#32,c_birth_year#33,c_birth_country#34,c_login#35,c_email_address#36,c_last_review_date#37] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1759369903,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2136521480,
            "rowCount" : 53413037,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] Arguments: 15 "
          },
          "5" : {
            "sign" : 1946905013,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 938673255,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] Arguments: 1 "
          },
          "1" : {
            "sign" : -1482372639,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [10]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] Input [12]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67, c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] "
          },
          "0" : {
            "sign" : 1118233873,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [10]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] Keys [8]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67] Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))] Aggregate Attributes [1]: [sum#2291L] Results [9]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L] "
          },
          "2" : {
            "sign" : 1423679327,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#40] Right keys [1]: [c_customer_sk#20] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -369166926,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] Arguments: [ss_customer_sk#40 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[partial_sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))], output=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L])\n+- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n   +- SortMergeJoin [ss_customer_sk#40], [c_customer_sk#20], Inner\n      :- Sort [ss_customer_sk#40 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 15\n      :     +- Exchange hashpartitioning(ss_customer_sk#40, 200), ENSURE_REQUIREMENTS, [plan_id=1483]\n      :        +- *(11) Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n      :           +- *(11) BroadcastHashJoin [ss_sold_date_sk#60], [d_date_sk#61], Inner, BuildRight, false\n      :              :- *(11) Filter isnotnull(ss_customer_sk#40)\n      :              :  +- *(11) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#40,ss_ext_discount_amt#51,ss_ext_list_price#54,ss_sold_date_sk#60] Batched: true, DataFilters: [isnotnull(ss_customer_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#2287)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n      :              :           +- SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n      :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#61, d_year#67], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1454]\n                                          +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :              +- BroadcastQueryStage 0\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      :                    +- *(1) Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n      :                       +- *(1) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      +- Sort [c_customer_sk#20 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 1\n            +- Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n               +- *(2) Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n                  +- *(2) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_country#34,c_login#35,c_email_address#36] Batched: true, DataFilters: [isnotnull(c_customer_sk#20), isnotnull(c_customer_id#21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2442590320,
        "inputRowCount" : 55413037
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 2988435, 2967931, 2914547, 2922472, 2941445, 2934517, 2919157, 2917956, 2946694, 2949926, 2978499, 2956303, 2966826, 2931186, 2931431, 2928849, 2955516, 2995208, 2935577, 2909369, 2924776, 2964522, 2949000, 2971163, 2987592, 2939553, 2930221, 2993630, 2949807, 2935120, 2871482, 2931619, 2984593, 2914479, 2953674, 2947622, 2916201, 2897235, 2908831, 2909737, 2901812, 2939139, 2831441, 2933497, 2939047, 2934710, 2998292, 2937749, 2953537, 2971223, 2962719, 2958576, 2921871, 2920744, 2919742, 2929763, 2885239, 2897560, 2895110, 2906561, 2901117, 2981421, 2893570, 2947181, 2882608, 3002367, 2963591, 2924407, 2916232, 2965900, 2923550, 2905366, 2929929, 2936404, 2956303, 2964342, 2995116, 2965714, 3018823, 2930458, 2909369, 2992935, 2979523, 2888471, 2936861, 2929530, 2895449, 2940573, 2970740, 2986379, 2930727, 2947181, 2976594, 2938446, 2949913, 2993433, 2873197, 2901455, 2923819, 2866195, 2862963, 2966396, 2934618, 2877722, 2896038, 2996458, 2955622, 3021411, 2917956, 2912274, 2913957, 2937424, 2945318, 2980108, 2950516, 2920599, 2881236, 2894509, 2928439, 2946623, 2901254, 2903515, 2978833, 2965125, 2949895, 2981686, 2930458, 2891522, 2921421, 2870980, 2986603, 2945327, 2953485, 2909795, 2883861, 2905727, 2941501, 2973709, 2939047, 2945674, 2911135, 2902330, 2960864, 2965468, 2908441, 2979646, 3034467, 2937657, 2921188, 2973700, 3001512, 2916936, 2977257, 2964345, 2964284, 2961377, 2897916, 3004099, 2977024, 2893920, 2866697, 2881680, 2963775, 2891257, 2914491, 2933677, 2910580, 2971938, 2962249, 2888061, 2929956, 2957589, 2931048, 2957231, 2972447, 2913779, 2964114, 2878092, 2967521, 2926693, 2937657, 2928933, 2921188, 2922564, 3011119, 2959768, 3021319, 3006784, 2909369, 2951580, 2959755, 2932762, 2945085, 2862111, 2948642, 3003797, 2941268, 2932679, 2963092, 2906964 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 6,
        "FinishedTasksTotalTimeInMs" : 4290.0,
        "FinishedTasksDistributionInMs" : [ 586.0, 648.0, 764.0, 766.0, 806.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 10961,
        "TotalTasksDurationInMs" : 57609,
        "IOBytes" : {
          "Total" : 858267602,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 712133607,
            "SW" : 146133995
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1661662770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 12101933844,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n+- Aggregate [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51))),18,2) AS year_total#1207]\n   +- Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n      +- Join Inner, (c_customer_sk#20 = ss_customer_sk#40)\n         :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n         :  +- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n         :     :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n         :     :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n         :     :     :  +- Project [d_date_sk#61, d_year#67]\n         :     :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n         :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n         :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n         :     +- Project [d_date_sk#61, d_year#67]\n         :        +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n         :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n         +- Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36]\n            +- Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n               +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_current_cdemo_sk#22,c_current_hdemo_sk#23,c_current_addr_sk#24,c_first_shipto_date_sk#25,c_first_sales_date_sk#26,c_salutation#27,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_day#31,c_birth_month#32,c_birth_year#33,c_birth_country#34,c_login#35,c_email_address#36,c_last_review_date#37] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1135022425,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [customer_id#1199, year_total#1207] Condition : (isnotnull(year_total#1207) AND (year_total#1207 > 0.00)) "
          },
          "1" : {
            "sign" : 1229859687,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 292546888,
            "rowCount" : 1816698,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L] Keys [8]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67] Functions [1]: [sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))] Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))#1265L] Results [2]: [c_customer_id#21 AS customer_id#1199, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))#1265L,18,2) AS year_total#1207] "
          },
          "2" : {
            "sign" : -1839674114,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 12101933844,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L] Arguments: 19 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(year_total#1207) AND (year_total#1207 > 0.00))\n+- HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))], output=[customer_id#1199, year_total#1207])\n   +- ShuffleQueryStage 19\n      +- Exchange hashpartitioning(c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, 200), ENSURE_REQUIREMENTS, [plan_id=2405]\n         +- *(21) HashAggregate(keys=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67], functions=[partial_sum(UnscaledValue((ss_ext_list_price#54 - ss_ext_discount_amt#51)))], output=[c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, d_year#67, sum#2292L])\n            +- *(21) Project [c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n               +- *(21) SortMergeJoin [ss_customer_sk#40], [c_customer_sk#20], Inner\n                  :- *(19) Sort [ss_customer_sk#40 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 15\n                  :        +- Exchange hashpartitioning(ss_customer_sk#40, 200), ENSURE_REQUIREMENTS, [plan_id=1483]\n                  :           +- *(11) Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n                  :              +- *(11) BroadcastHashJoin [ss_sold_date_sk#60], [d_date_sk#61], Inner, BuildRight, false\n                  :                 :- *(11) Filter isnotnull(ss_customer_sk#40)\n                  :                 :  +- *(11) ColumnarToRow\n                  :                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#40,ss_ext_discount_amt#51,ss_ext_list_price#54,ss_sold_date_sk#60] Batched: true, DataFilters: [isnotnull(ss_customer_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#2287)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n                  :                 :           +- SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n                  :                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#61, d_year#67], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1454]\n                                                         +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                  :                 +- BroadcastQueryStage 0\n                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                  :                       +- *(1) Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n                  :                          +- *(1) ColumnarToRow\n                  :                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                  +- *(20) Sort [c_customer_sk#20 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 1\n                           +- Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n                              +- *(2) Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n                                 +- *(2) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_country#34,c_login#35,c_email_address#36] Batched: true, DataFilters: [isnotnull(c_customer_sk#20), isnotnull(c_customer_id#21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 292546888,
        "inputRowCount" : 1816698
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 763101, 770009, 763101, 775765, 756769, 749438, 772016, 752444, 763101, 763101, 753020, 775765, 763677, 771440, 763101, 758776, 756769, 746112, 784104, 756769, 751013, 746688, 765108, 770009, 765108, 753654, 771440, 756769, 775765, 758776, 769433, 763101, 775765, 744105, 757345, 734024, 752444, 758776, 774824, 763101, 765108, 763101, 769433, 751013, 769433, 765108, 744105, 782097, 763101, 769433, 752444, 744105, 789063, 769433, 763101, 765108, 770067, 744681, 763101, 763101, 776399, 769433, 757345, 777772, 770067, 758776, 771440, 769433, 775765, 782097, 765108, 765108, 771440, 770067, 775765, 769433, 775765, 756769, 763101, 763101, 753020, 765108, 784738, 788429, 770009, 763101, 769433, 769433, 756769, 765108, 759352, 775765, 765108, 763677, 763101, 751013, 753020, 769433, 758776, 782097, 756769, 756769, 738349, 782097, 756769, 771440, 761526, 769433, 763101, 778406, 758776, 777772, 750437, 763101, 765108, 758776, 758776, 763101, 765108, 775765, 776341, 739780, 769433, 770009, 757345, 763101, 759352, 757345, 752444, 759928, 758776, 758776, 744681, 771440, 758776, 777772, 769433, 763101, 775765, 757403, 767508, 769433, 763101, 744681, 788429, 769433, 769433, 770009, 770067, 756769, 775765, 763101, 763101, 753020, 769433, 756769, 777772, 782097, 756769, 758776, 756769, 775765, 763101, 763101, 758776, 782097, 758776, 744681, 763101, 763101, 775765, 753020, 756769, 763677, 746688, 758776, 765108, 758776, 770009, 763677, 765108, 756769, 769433, 765108, 782097, 782097, 771440, 758776, 771440, 765108, 769433, 782097, 763101, 788429, 751013, 740356, 801093, 769433, 763101, 763101 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 17289.0,
        "FinishedTasksDistributionInMs" : [ 630.0, 1647.0, 2484.0, 3126.0, 3183.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 26 ],
      "Objectives" : {
        "DurationInMs" : 1091,
        "TotalTasksDurationInMs" : 2624,
        "IOBytes" : {
          "Total" : 170652645,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 146133995,
            "SW" : 24518650
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 68451015,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#38, ss_item_sk#39, ss_customer_sk#40, ss_cdemo_sk#41, ss_hdemo_sk#42, ss_addr_sk#43, ss_store_sk#44, ss_promo_sk#45, ss_ticket_number#46L, ss_quantity#47, ss_wholesale_cost#48, ss_list_price#49, ss_sales_price#50, ss_ext_discount_amt#51, ss_ext_sales_price#52, ss_ext_wholesale_cost#53, ss_ext_list_price#54, ss_ext_tax#55, ss_coupon_amt#56, ss_net_paid#57, ss_net_paid_inc_tax#58, ss_net_profit#59, ss_sold_date_sk#60], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -919553090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#60 = d_date_sk#61) "
          },
          "0" : {
            "sign" : -2132838351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] "
          },
          "2" : {
            "sign" : -1539497867,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8405409696,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 8405409696,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] "
          },
          "3" : {
            "sign" : -1527318306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n+- Join Inner, (ss_sold_date_sk#60 = d_date_sk#61)\n   :- Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60]\n   :  +- Filter ((isnotnull(ss_customer_sk#40) AND isnotnull(ss_sold_date_sk#60)) AND dynamicpruning#2287 [ss_sold_date_sk#60])\n   :     :  +- Project [d_date_sk#61, d_year#67]\n   :     :     +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#38,ss_item_sk#39,ss_customer_sk#40,ss_cdemo_sk#41,ss_hdemo_sk#42,ss_addr_sk#43,ss_store_sk#44,ss_promo_sk#45,ss_ticket_number#46L,ss_quantity#47,ss_wholesale_cost#48,ss_list_price#49,ss_sales_price#50,ss_ext_discount_amt#51,ss_ext_sales_price#52,ss_ext_wholesale_cost#53,ss_ext_list_price#54,ss_ext_tax#55,ss_coupon_amt#56,ss_net_paid#57,ss_net_paid_inc_tax#58,ss_net_profit#59,ss_sold_date_sk#60] parquet\n   +- Project [d_date_sk#61, d_year#67]\n      +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1154809398,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#61, d_year#67] Arguments: 0 "
          },
          "1" : {
            "sign" : -647019094,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#60] Right keys [1]: [d_date_sk#61] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1272646337,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67] Input [6]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60, d_date_sk#61, d_year#67] "
          },
          "2" : {
            "sign" : 1269155381,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] Condition : isnotnull(ss_customer_sk#40) "
          },
          "3" : {
            "sign" : 479617173,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, ss_sold_date_sk#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#2287)] PushedFilters: [IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#40, ss_ext_discount_amt#51, ss_ext_list_price#54, d_year#67]\n+- BroadcastHashJoin [ss_sold_date_sk#60], [d_date_sk#61], Inner, BuildRight, false\n   :- Filter isnotnull(ss_customer_sk#40)\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#40,ss_ext_discount_amt#51,ss_ext_list_price#54,ss_sold_date_sk#60] Batched: true, DataFilters: [isnotnull(ss_customer_sk#40)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#2287)], PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1454]\n   :                 +- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n         +- *(1) Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n            +- *(1) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8406461192,
        "inputRowCount" : 262669418
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 8776,
        "TotalTasksDurationInMs" : 29370,
        "IOBytes" : {
          "Total" : 907730691,
          "Details" : {
            "IR" : 347315518,
            "IW" : 0,
            "SR" : 0,
            "SW" : 560415173
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1474113035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217] "
          },
          "1" : {
            "sign" : -2100012221,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14396053224,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 14396053224,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "2" : {
            "sign" : -1580724442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14974789032,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 14974789032,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n+- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n   +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n      :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n      :  +- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n      :     :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n      :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n      :     :     :  +- Project [d_date_sk#2060, d_year#2066]\n      :     :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n      :     +- Project [d_date_sk#2060, d_year#2066]\n      :        +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n      +- Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024]\n         +- Filter (isnotnull(c_customer_sk#2008) AND isnotnull(c_customer_id#2009))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2008,c_customer_id#2009,c_current_cdemo_sk#2010,c_current_hdemo_sk#2011,c_current_addr_sk#2012,c_first_shipto_date_sk#2013,c_first_sales_date_sk#2014,c_salutation#2015,c_first_name#2016,c_last_name#2017,c_preferred_cust_flag#2018,c_birth_day#2019,c_birth_month#2020,c_birth_year#2021,c_birth_country#2022,c_login#2023,c_email_address#2024,c_last_review_date#2025] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 803821471,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 572622200,
            "rowCount" : 14315555,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] Arguments: 16 "
          },
          "5" : {
            "sign" : 87971007,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024] Arguments: [c_customer_sk#2008 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1249288401,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024] Arguments: 8 "
          },
          "1" : {
            "sign" : -2081508242,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14396053224,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [10]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] Input [12]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066, c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024] "
          },
          "0" : {
            "sign" : -1977854433,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [10]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] Keys [8]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066] Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))] Aggregate Attributes [1]: [sum#2295L] Results [9]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L] "
          },
          "2" : {
            "sign" : 134419657,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 14974789032,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ws_bill_customer_sk#2029] Right keys [1]: [c_customer_sk#2008] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1131513915,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] Arguments: [ws_bill_customer_sk#2029 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))], output=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L])\n+- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n   +- SortMergeJoin [ws_bill_customer_sk#2029], [c_customer_sk#2008], Inner\n      :- Sort [ws_bill_customer_sk#2029 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 16\n      :     +- Exchange hashpartitioning(ws_bill_customer_sk#2029, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n      :        +- *(12) Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n      :           +- *(12) BroadcastHashJoin [ws_sold_date_sk#2059], [d_date_sk#2060], Inner, BuildRight, false\n      :              :- *(12) Filter isnotnull(ws_bill_customer_sk#2029)\n      :              :  +- *(12) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2029,ws_ext_discount_amt#2047,ws_ext_list_price#2050,ws_sold_date_sk#2059] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2029)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2059), dynamicpruningexpression(ws_sold_date_sk#2059 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n      :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n      :              +- BroadcastQueryStage 6\n      :                 +- ReusedExchange [d_date_sk#2060, d_year#2066], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n      +- Sort [c_customer_sk#2008 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 8\n            +- ReusedExchange [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 878691040,
        "inputRowCount" : 16315555
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1055048, 1031459, 1025872, 1032733, 1020632, 1057519, 1034927, 1039731, 1018676, 1042343, 1056208, 1035680, 1044980, 1056377, 1005713, 1036270, 1047445, 1059893, 1055034, 1034878, 1026801, 1031304, 1040724, 1060240, 1018827, 1034617, 1029277, 1052008, 1035159, 1024901, 1020906, 1054350, 1040896, 1023564, 1043610, 1035033, 1018976, 1006280, 1038859, 1013490, 1002025, 1049285, 1003647, 1024439, 1056208, 1033742, 1042250, 1023724, 1027027, 1022439, 1048599, 1064890, 1029480, 1069871, 1034476, 1019792, 1024957, 999426, 1007455, 1029791, 1039210, 1034055, 1028054, 1046537, 1019463, 1046698, 1042498, 1020042, 1035585, 1032699, 1035391, 1034554, 1024181, 1044292, 1052236, 1051268, 1051172, 1063356, 1058965, 1030670, 1046037, 1064940, 1072612, 1018375, 1026009, 1019322, 1024742, 1045000, 1036131, 1066775, 1042265, 1036100, 1076746, 1040697, 1004576, 1041455, 1046410, 1027975, 1062868, 1035202, 1012137, 1062322, 1040528, 1035931, 1031252, 1034109, 1046860, 1030040, 994807, 1020208, 1034940, 1008982, 1049350, 1002733, 1030812, 1032881, 1016899, 1011218, 1021296, 1027238, 1016812, 1034469, 1058440, 1037973, 1062007, 1084060, 1043363, 1051537, 1022122, 1035933, 1025238, 1050542, 1026974, 1020437, 1046457, 1030413, 1023437, 1029277, 1042352, 1024043, 1016151, 1032536, 1043510, 1055679, 1013426, 1021905, 1077195, 1011598, 1052600, 1048048, 1071468, 1044213, 1082573, 1040422, 1053805, 1064038, 1033177, 1050994, 1050664, 1002191, 1034307, 1009045, 1038115, 1027421, 1029628, 1063016, 1033731, 1045439, 1064300, 1030670, 1013305, 1049511, 1051790, 1058515, 1040978, 1040836, 1020496, 1008849, 1038315, 1024353, 1064903, 1039058, 1052607, 1021222, 1059294, 1035285, 1045374, 1010739, 1037929, 1067783, 1053092, 1022790, 1066930, 1002443, 1047118, 1058822, 1042011, 1017224, 1064785, 1005101 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 10621,
        "TotalTasksDurationInMs" : 16458,
        "IOBytes" : {
          "Total" : 421548450,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 349392460,
            "SW" : 72155990
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1351773682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2026, ws_ship_date_sk#2027, ws_item_sk#2028, ws_bill_customer_sk#2029, ws_bill_cdemo_sk#2030, ws_bill_hdemo_sk#2031, ws_bill_addr_sk#2032, ws_ship_customer_sk#2033, ws_ship_cdemo_sk#2034, ws_ship_hdemo_sk#2035, ws_ship_addr_sk#2036, ws_web_page_sk#2037, ws_web_site_sk#2038, ws_ship_mode_sk#2039, ws_warehouse_sk#2040, ws_promo_sk#2041, ws_order_number#2042L, ws_quantity#2043, ws_wholesale_cost#2044, ws_list_price#2045, ws_sales_price#2046, ws_ext_discount_amt#2047, ws_ext_sales_price#2048, ws_ext_wholesale_cost#2049, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1269516023,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#2059 = d_date_sk#2060) "
          },
          "0" : {
            "sign" : 957686663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] "
          },
          "2" : {
            "sign" : 954893078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2302899232,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 2302899232,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059] "
          },
          "3" : {
            "sign" : 742461135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n+- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n   :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n   :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n   :     :  +- Project [d_date_sk#2060, d_year#2066]\n   :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n   +- Project [d_date_sk#2060, d_year#2066]\n      +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1966179465,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#2060, d_year#2066] Arguments: 6 "
          },
          "1" : {
            "sign" : 1505199574,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2779824200,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#2059] Right keys [1]: [d_date_sk#2060] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 2136649908,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066] Input [6]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059, d_date_sk#2060, d_year#2066] "
          },
          "2" : {
            "sign" : -295021027,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059] Condition : isnotnull(ws_bill_customer_sk#2029) "
          },
          "3" : {
            "sign" : -2022755394,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2302899232,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#2059), dynamicpruningexpression(ws_sold_date_sk#2059 IN dynamicpruning#2287)] PushedFilters: [IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n+- BroadcastHashJoin [ws_sold_date_sk#2059], [d_date_sk#2060], Inner, BuildRight, false\n   :- Filter isnotnull(ws_bill_customer_sk#2029)\n   :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2029,ws_ext_discount_amt#2047,ws_ext_list_price#2050,ws_sold_date_sk#2059] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2029)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2059), dynamicpruningexpression(ws_sold_date_sk#2059 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n   :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n   +- BroadcastQueryStage 6\n      +- ReusedExchange [d_date_sk#2060, d_year#2066], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2303950728,
        "inputRowCount" : 71965966
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 9429,
        "TotalTasksDurationInMs" : 12896,
        "IOBytes" : {
          "Total" : 326088867,
          "Details" : {
            "IR" : 128414841,
            "IW" : 0,
            "SR" : 0,
            "SW" : 197674026
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1763526010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#1821, d_year#1827] "
          },
          "1" : {
            "sign" : -1166146975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821)) "
          },
          "2" : {
            "sign" : -806267058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#1821, d_date_id#1822, d_date#1823, d_month_seq#1824, d_week_seq#1825, d_quarter_seq#1826, d_year#1827, d_dow#1828, d_moy#1829, d_dom#1830, d_qoy#1831, d_fy_year#1832, d_fy_quarter_seq#1833, d_fy_week_seq#1834, d_day_name#1835, d_quarter_name#1836, d_holiday#1837, d_weekend#1838, d_following_holiday#1839, d_first_dom#1840, d_last_dom#1841, d_same_day_ly#1842, d_same_day_lq#1843, d_current_day#1844, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#1821, d_year#1827]\n+- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1710834585,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#1821, d_year#1827] Condition : ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821)) "
          },
          "1" : {
            "sign" : 1344729030,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#1821, d_year#1827] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9216,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1852,
        "TotalTasksDurationInMs" : 539,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1358124991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              },
              "compileTime" : {
                "sizeInBytes" : 3183046944,
                "rowCount" : 72341976
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n+- Aggregate [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047))),18,2) AS year_total#1217]\n   +- Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n      +- Join Inner, (c_customer_sk#2008 = ws_bill_customer_sk#2029)\n         :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n         :  +- Join Inner, (ws_sold_date_sk#2059 = d_date_sk#2060)\n         :     :- Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, ws_sold_date_sk#2059]\n         :     :  +- Filter ((isnotnull(ws_bill_customer_sk#2029) AND isnotnull(ws_sold_date_sk#2059)) AND dynamicpruning#2289 [ws_sold_date_sk#2059])\n         :     :     :  +- Project [d_date_sk#2060, d_year#2066]\n         :     :     :     +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n         :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n         :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2026,ws_ship_date_sk#2027,ws_item_sk#2028,ws_bill_customer_sk#2029,ws_bill_cdemo_sk#2030,ws_bill_hdemo_sk#2031,ws_bill_addr_sk#2032,ws_ship_customer_sk#2033,ws_ship_cdemo_sk#2034,ws_ship_hdemo_sk#2035,ws_ship_addr_sk#2036,ws_web_page_sk#2037,ws_web_site_sk#2038,ws_ship_mode_sk#2039,ws_warehouse_sk#2040,ws_promo_sk#2041,ws_order_number#2042L,ws_quantity#2043,ws_wholesale_cost#2044,ws_list_price#2045,ws_sales_price#2046,ws_ext_discount_amt#2047,ws_ext_sales_price#2048,ws_ext_wholesale_cost#2049,... 10 more fields] parquet\n         :     +- Project [d_date_sk#2060, d_year#2066]\n         :        +- Filter ((isnotnull(d_year#2066) AND (d_year#2066 = 2001)) AND isnotnull(d_date_sk#2060))\n         :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#2060,d_date_id#2061,d_date#2062,d_month_seq#2063,d_week_seq#2064,d_quarter_seq#2065,d_year#2066,d_dow#2067,d_moy#2068,d_dom#2069,d_qoy#2070,d_fy_year#2071,d_fy_quarter_seq#2072,d_fy_week_seq#2073,d_day_name#2074,d_quarter_name#2075,d_holiday#2076,d_weekend#2077,d_following_holiday#2078,d_first_dom#2079,d_last_dom#2080,d_same_day_ly#2081,d_same_day_lq#2082,d_current_day#2083,... 4 more fields] parquet\n         +- Project [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024]\n            +- Filter (isnotnull(c_customer_sk#2008) AND isnotnull(c_customer_id#2009))\n               +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#2008,c_customer_id#2009,c_current_cdemo_sk#2010,c_current_hdemo_sk#2011,c_current_addr_sk#2012,c_first_shipto_date_sk#2013,c_first_sales_date_sk#2014,c_salutation#2015,c_first_name#2016,c_last_name#2017,c_preferred_cust_flag#2018,c_birth_day#2019,c_birth_month#2020,c_birth_year#2021,c_birth_country#2022,c_login#2023,c_email_address#2024,c_last_review_date#2025] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1188134421,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [customer_id#1209, year_total#1217] Condition : (isnotnull(year_total#1217) AND (year_total#1217 > 0.00)) "
          },
          "1" : {
            "sign" : -2005063523,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 144775976,
            "rowCount" : 899061,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L] Keys [8]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066] Functions [1]: [sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))] Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))#1266L] Results [2]: [c_customer_id#2009 AS customer_id#1209, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))#1266L,18,2) AS year_total#1217] "
          },
          "2" : {
            "sign" : 1715668126,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3183046944,
            "rowCount" : 72341976,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L] Arguments: 20 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(year_total#1217) AND (year_total#1217 > 0.00))\n+- HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))], output=[customer_id#1209, year_total#1217])\n   +- ShuffleQueryStage 20\n      +- Exchange hashpartitioning(c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, 200), ENSURE_REQUIREMENTS, [plan_id=2540]\n         +- *(24) HashAggregate(keys=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066], functions=[partial_sum(UnscaledValue((ws_ext_list_price#2050 - ws_ext_discount_amt#2047)))], output=[c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, d_year#2066, sum#2296L])\n            +- *(24) Project [c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n               +- *(24) SortMergeJoin [ws_bill_customer_sk#2029], [c_customer_sk#2008], Inner\n                  :- *(22) Sort [ws_bill_customer_sk#2029 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 16\n                  :        +- Exchange hashpartitioning(ws_bill_customer_sk#2029, 200), ENSURE_REQUIREMENTS, [plan_id=1555]\n                  :           +- *(12) Project [ws_bill_customer_sk#2029, ws_ext_discount_amt#2047, ws_ext_list_price#2050, d_year#2066]\n                  :              +- *(12) BroadcastHashJoin [ws_sold_date_sk#2059], [d_date_sk#2060], Inner, BuildRight, false\n                  :                 :- *(12) Filter isnotnull(ws_bill_customer_sk#2029)\n                  :                 :  +- *(12) ColumnarToRow\n                  :                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_bill_customer_sk#2029,ws_ext_discount_amt#2047,ws_ext_list_price#2050,ws_sold_date_sk#2059] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#2029)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#2059), dynamicpruningexpression(ws_sold_date_sk#2059 IN dynamicpruning..., PushedFilters: [IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>\n                  :                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#2287, 0, [d_date_sk#61], [id=#1457]\n                  :                 +- BroadcastQueryStage 6\n                  :                    +- ReusedExchange [d_date_sk#2060, d_year#2066], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=453]\n                  +- *(23) Sort [c_customer_sk#2008 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 8\n                           +- ReusedExchange [c_customer_sk#2008, c_customer_id#2009, c_first_name#2016, c_last_name#2017, c_preferred_cust_flag#2018, c_birth_country#2022, c_login#2023, c_email_address#2024], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 144775976,
        "inputRowCount" : 899061
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 368586, 371344, 365012, 381250, 368586, 368586, 374918, 377676, 377676, 368586, 371344, 390974, 374918, 384008, 387582, 384642, 381250, 381250, 405446, 377676, 381250, 377676, 377676, 387582, 384008, 381250, 381884, 372518, 387582, 381250, 374918, 381250, 387582, 377676, 384642, 374918, 381250, 371344, 378850, 371344, 387582, 374918, 375552, 388216, 384008, 384008, 368586, 387582, 387582, 381250, 384642, 368586, 381250, 371344, 374918, 377676, 387582, 374918, 378310, 387582, 381884, 387582, 374918, 377676, 388216, 374918, 368586, 371344, 381250, 381250, 377676, 378310, 365012, 384008, 381250, 387582, 387582, 374918, 377676, 374918, 368094, 384008, 384008, 381250, 387582, 381250, 381250, 388216, 371344, 371344, 368586, 384008, 384642, 374918, 374918, 368586, 377676, 381250, 371344, 381250, 365012, 368586, 374918, 388216, 381250, 384008, 372518, 377676, 374918, 387582, 371344, 390974, 374918, 377676, 377676, 387582, 374918, 371344, 381250, 387582, 387582, 374918, 385182, 377676, 377676, 387582, 374426, 374918, 358680, 371344, 377676, 371344, 365012, 371344, 368586, 384008, 388216, 374918, 387582, 384008, 377676, 381250, 368586, 378850, 387582, 394548, 377676, 374918, 391514, 381250, 374918, 374918, 381250, 371344, 374918, 385182, 387582, 384008, 374918, 358680, 377676, 387582, 394548, 381250, 374918, 387582, 371344, 387582, 365012, 378850, 387582, 384008, 374918, 368586, 368094, 384008, 387582, 362254, 374918, 368586, 384642, 388216, 368586, 371344, 381250, 374918, 378310, 374918, 381250, 387582, 385182, 378850, 371978, 378850, 374918, 365012, 401514, 371344, 374918, 374918 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 2277.0,
        "FinishedTasksDistributionInMs" : [ 630.0, 630.0, 1647.0, 1647.0, 1647.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 1103,
        "TotalTasksDurationInMs" : 1410,
        "IOBytes" : {
          "Total" : 84157348,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 72155990,
            "SW" : 12001358
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1590276080,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#61, d_year#67] "
          },
          "1" : {
            "sign" : -2019657161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61)) "
          },
          "2" : {
            "sign" : 311601156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#61, d_date_id#62, d_date#63, d_month_seq#64, d_week_seq#65, d_quarter_seq#66, d_year#67, d_dow#68, d_moy#69, d_dom#70, d_qoy#71, d_fy_year#72, d_fy_quarter_seq#73, d_fy_week_seq#74, d_day_name#75, d_quarter_name#76, d_holiday#77, d_weekend#78, d_following_holiday#79, d_first_dom#80, d_last_dom#81, d_same_day_ly#82, d_same_day_lq#83, d_current_day#84, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#61, d_year#67]\n+- Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_date_id#62,d_date#63,d_month_seq#64,d_week_seq#65,d_quarter_seq#66,d_year#67,d_dow#68,d_moy#69,d_dom#70,d_qoy#71,d_fy_year#72,d_fy_quarter_seq#73,d_fy_week_seq#74,d_day_name#75,d_quarter_name#76,d_holiday#77,d_weekend#78,d_following_holiday#79,d_first_dom#80,d_last_dom#81,d_same_day_ly#82,d_same_day_lq#83,d_current_day#84,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 250095214,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#61, d_year#67] Condition : ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61)) "
          },
          "1" : {
            "sign" : 1835938235,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#61, d_year#67] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(d_year#67) AND (d_year#67 = 2001)) AND isnotnull(d_date_sk#61))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#61,d_year#67] Batched: true, DataFilters: [isnotnull(d_year#67), (d_year#67 = 2001), isnotnull(d_date_sk#61)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9216,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1593,
        "TotalTasksDurationInMs" : 398,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1264223125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 366000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 366000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] "
          },
          "1" : {
            "sign" : -1232226526,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21)) "
          },
          "2" : {
            "sign" : 179417976,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#20, c_customer_id#21, c_current_cdemo_sk#22, c_current_hdemo_sk#23, c_current_addr_sk#24, c_first_shipto_date_sk#25, c_first_sales_date_sk#26, c_salutation#27, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_day#31, c_birth_month#32, c_birth_year#33, c_birth_country#34, c_login#35, c_email_address#36, c_last_review_date#37], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36]\n+- Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_current_cdemo_sk#22,c_current_hdemo_sk#23,c_current_addr_sk#24,c_first_shipto_date_sk#25,c_first_sales_date_sk#26,c_salutation#27,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_day#31,c_birth_month#32,c_birth_year#33,c_birth_country#34,c_login#35,c_email_address#36,c_last_review_date#37] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2026161361,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] Condition : (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21)) "
          },
          "1" : {
            "sign" : -831781499,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 366000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [8]: [c_customer_sk#20, c_customer_id#21, c_first_name#28, c_last_name#29, c_preferred_cust_flag#30, c_birth_country#34, c_login#35, c_email_address#36] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)] ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#20) AND isnotnull(c_customer_id#21))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#20,c_customer_id#21,c_first_name#28,c_last_name#29,c_preferred_cust_flag#30,c_birth_country#34,c_login#35,c_email_address#36] Batched: true, DataFilters: [isnotnull(c_customer_sk#20), isnotnull(c_customer_id#21)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 366000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 6667,
        "TotalTasksDurationInMs" : 39115,
        "IOBytes" : {
          "Total" : 225576626,
          "Details" : {
            "IR" : 73858192,
            "IW" : 0,
            "SR" : 0,
            "SW" : 151718434
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 206931652,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33280318071,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 33280318071,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277] "
          },
          "1" : {
            "sign" : 33690155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 54733746249,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 54733746249,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "2" : {
            "sign" : -326539720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 56934097857,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 56934097857,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#1780 = ss_customer_sk#1800) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], [c_customer_id#1781 AS customer_id#1269, c_first_name#1788 AS customer_first_name#1270, c_last_name#1789 AS customer_last_name#1271, c_email_address#1796 AS customer_email_address#1275, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811))),18,2) AS year_total#1277]\n+- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n   +- Join Inner, (c_customer_sk#1780 = ss_customer_sk#1800)\n      :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n      :  +- Join Inner, (ss_sold_date_sk#1820 = d_date_sk#1821)\n      :     :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820]\n      :     :  +- Filter ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820])\n      :     :     :  +- Project [d_date_sk#1821, d_year#1827]\n      :     :     :     +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1798,ss_item_sk#1799,ss_customer_sk#1800,ss_cdemo_sk#1801,ss_hdemo_sk#1802,ss_addr_sk#1803,ss_store_sk#1804,ss_promo_sk#1805,ss_ticket_number#1806L,ss_quantity#1807,ss_wholesale_cost#1808,ss_list_price#1809,ss_sales_price#1810,ss_ext_discount_amt#1811,ss_ext_sales_price#1812,ss_ext_wholesale_cost#1813,ss_ext_list_price#1814,ss_ext_tax#1815,ss_coupon_amt#1816,ss_net_paid#1817,ss_net_paid_inc_tax#1818,ss_net_profit#1819,ss_sold_date_sk#1820] parquet\n      :     +- Project [d_date_sk#1821, d_year#1827]\n      :        +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n      +- Project [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796]\n         +- Filter (isnotnull(c_customer_sk#1780) AND isnotnull(c_customer_id#1781))\n            +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#1780,c_customer_id#1781,c_current_cdemo_sk#1782,c_current_hdemo_sk#1783,c_current_addr_sk#1784,c_first_shipto_date_sk#1785,c_first_sales_date_sk#1786,c_salutation#1787,c_first_name#1788,c_last_name#1789,c_preferred_cust_flag#1790,c_birth_day#1791,c_birth_month#1792,c_birth_year#1793,c_birth_country#1794,c_login#1795,c_email_address#1796,c_last_review_date#1797] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1882831062,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2148282280,
            "rowCount" : 53707057,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] Arguments: 13 "
          },
          "5" : {
            "sign" : -985100662,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [8]: [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796] Arguments: [c_customer_sk#1780 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 2122095436,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 306068840,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796] Arguments: 4 "
          },
          "1" : {
            "sign" : 1558269952,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 54733746249,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [10]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] Input [12]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827, c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796] "
          },
          "0" : {
            "sign" : 2144542348,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 33280318071,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [10]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] Keys [8]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827] Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))] Aggregate Attributes [1]: [sum#2293L] Results [9]: [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L] "
          },
          "2" : {
            "sign" : 126392295,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 56934097857,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#1800] Right keys [1]: [c_customer_sk#1780] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1892655114,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] Arguments: [ss_customer_sk#1800 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827], functions=[partial_sum(UnscaledValue((ss_ext_list_price#1814 - ss_ext_discount_amt#1811)))], output=[c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, d_year#1827, sum#2294L])\n+- Project [c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n   +- SortMergeJoin [ss_customer_sk#1800], [c_customer_sk#1780], Inner\n      :- Sort [ss_customer_sk#1800 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 13\n      :     +- Exchange hashpartitioning(ss_customer_sk#1800, 200), ENSURE_REQUIREMENTS, [plan_id=1097]\n      :        +- *(9) Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n      :           +- *(9) BroadcastHashJoin [ss_sold_date_sk#1820], [d_date_sk#1821], Inner, BuildRight, false\n      :              :- *(9) Filter isnotnull(ss_customer_sk#1800)\n      :              :  +- *(9) ColumnarToRow\n      :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1800,ss_ext_discount_amt#1811,ss_ext_list_price#1814,ss_sold_date_sk#1820] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1800)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1820), dynamicpruningexpression(ss_sold_date_sk#1820 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n      :              :           +- SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n      :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#1821, d_year#1827], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1068]\n                                          +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :              +- BroadcastQueryStage 2\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n      :                    +- *(3) Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n      :                       +- *(3) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      +- Sort [c_customer_sk#1780 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- ReusedExchange [c_customer_sk#1780, c_customer_id#1781, c_first_name#1788, c_last_name#1789, c_preferred_cust_flag#1790, c_birth_country#1794, c_login#1795, c_email_address#1796], Exchange hashpartitioning(c_customer_sk#20, 200), ENSURE_REQUIREMENTS, [plan_id=472]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2454351120,
        "inputRowCount" : 55707057
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 2947947, 2956536, 2937341, 2944908, 2927744, 3010586, 2944121, 2919063, 2937610, 2946696, 2999809, 2962166, 2978225, 2966091, 2927977, 2917568, 3009427, 3012047, 2939728, 2963787, 2920155, 2952569, 3049468, 2930225, 2949855, 2951874, 2918312, 3017760, 2992901, 2897560, 2937341, 2970661, 2977024, 2923409, 2981542, 2999229, 2951874, 2909618, 2889899, 2921545, 2920298, 2972077, 2913527, 2940889, 2974812, 2904380, 2985705, 2907758, 2987367, 2990631, 3001994, 2953396, 2930014, 2982970, 2990873, 2919240, 2969395, 2900009, 2905633, 2973937, 2957701, 3005776, 2937332, 2958735, 2927049, 3032304, 2956451, 2948173, 2957556, 2979787, 2969215, 2940748, 2903329, 2953203, 2973467, 3003049, 2999135, 2957681, 2982737, 2972772, 2987045, 2931711, 3008407, 2884780, 2928479, 2950720, 2911315, 2959149, 3008208, 3020530, 2942086, 2991915, 2963858, 2927977, 3003828, 2975773, 2919565, 2897741, 2919799, 2947212, 2933867, 2984348, 2942962, 2946519, 2936803, 3014676, 2965900, 3041713, 2877444, 2923409, 2933947, 2978972, 3000240, 2906561, 2937657, 2934943, 2886535, 2916618, 2986897, 2910062, 2960555, 2977571, 2988506, 2948317, 2990539, 2967090, 2943980, 2956625, 2985938, 2889164, 3008824, 2982831, 2984673, 2962807, 2910154, 2894846, 2939553, 3016299, 2975865, 2976194, 2939636, 2901117, 2952199, 2971311, 2977614, 2989526, 3058098, 2977952, 2973290, 2969794, 2965629, 2982793, 3037715, 2980437, 2973700, 2981717, 2956769, 2953629, 3047913, 2912420, 2897331, 2907513, 2956536, 2937252, 2998810, 2983653, 2937657, 2969307, 2994008, 2915063, 3001334, 3057593, 3061150, 2999294, 2956451, 2933690, 2990454, 2895079, 2955608, 2956211, 2923725, 2956303, 2863377, 2943287, 3037461, 2981540, 3056573, 2996492, 2905044, 2978216, 3009173, 2952802, 2943287, 2909705, 3015279, 2991326, 2956986, 2955789, 2990956, 2940910 ],
        "0" : [ 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 830145, 754677, 830145, 830145, 754677, 830145, 830145, 754677, 754677, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 830145, 754677, 830145, 754677, 830145, 754677, 754677, 830145, 830145, 754677, 830145, 830145, 830145, 830145, 754677, 830145, 830145, 830145, 754677, 754677, 830145, 830145, 830145, 830145, 830145, 754677 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 12762.0,
        "FinishedTasksDistributionInMs" : [ 642.0, 705.0, 748.0, 782.0, 843.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 8275,
        "TotalTasksDurationInMs" : 64533,
        "IOBytes" : {
          "Total" : 862134912,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 715830854,
            "SW" : 146304058
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1489737944,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#1798, ss_item_sk#1799, ss_customer_sk#1800, ss_cdemo_sk#1801, ss_hdemo_sk#1802, ss_addr_sk#1803, ss_store_sk#1804, ss_promo_sk#1805, ss_ticket_number#1806L, ss_quantity#1807, ss_wholesale_cost#1808, ss_list_price#1809, ss_sales_price#1810, ss_ext_discount_amt#1811, ss_ext_sales_price#1812, ss_ext_wholesale_cost#1813, ss_ext_list_price#1814, ss_ext_tax#1815, ss_coupon_amt#1816, ss_net_paid#1817, ss_net_paid_inc_tax#1818, ss_net_profit#1819, ss_sold_date_sk#1820], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -721307829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#1820 = d_date_sk#1821) "
          },
          "0" : {
            "sign" : 1102175698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] "
          },
          "2" : {
            "sign" : 1034891638,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8405409696,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 8405409696,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820] "
          },
          "3" : {
            "sign" : -737103545,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n+- Join Inner, (ss_sold_date_sk#1820 = d_date_sk#1821)\n   :- Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820]\n   :  +- Filter ((isnotnull(ss_customer_sk#1800) AND isnotnull(ss_sold_date_sk#1820)) AND dynamicpruning#2288 [ss_sold_date_sk#1820])\n   :     :  +- Project [d_date_sk#1821, d_year#1827]\n   :     :     +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#1798,ss_item_sk#1799,ss_customer_sk#1800,ss_cdemo_sk#1801,ss_hdemo_sk#1802,ss_addr_sk#1803,ss_store_sk#1804,ss_promo_sk#1805,ss_ticket_number#1806L,ss_quantity#1807,ss_wholesale_cost#1808,ss_list_price#1809,ss_sales_price#1810,ss_ext_discount_amt#1811,ss_ext_sales_price#1812,ss_ext_wholesale_cost#1813,ss_ext_list_price#1814,ss_ext_tax#1815,ss_coupon_amt#1816,ss_net_paid#1817,ss_net_paid_inc_tax#1818,ss_net_profit#1819,ss_sold_date_sk#1820] parquet\n   +- Project [d_date_sk#1821, d_year#1827]\n      +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_date_id#1822,d_date#1823,d_month_seq#1824,d_week_seq#1825,d_quarter_seq#1826,d_year#1827,d_dow#1828,d_moy#1829,d_dom#1830,d_qoy#1831,d_fy_year#1832,d_fy_quarter_seq#1833,d_fy_week_seq#1834,d_day_name#1835,d_quarter_name#1836,d_holiday#1837,d_weekend#1838,d_following_holiday#1839,d_first_dom#1840,d_last_dom#1841,d_same_day_ly#1842,d_same_day_lq#1843,d_current_day#1844,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1465522490,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#1821, d_year#1827] Arguments: 2 "
          },
          "1" : {
            "sign" : 651424234,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#1820] Right keys [1]: [d_date_sk#1821] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1394889733,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827] Input [6]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820, d_date_sk#1821, d_year#1827] "
          },
          "2" : {
            "sign" : -2065930005,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820] Condition : isnotnull(ss_customer_sk#1800) "
          },
          "3" : {
            "sign" : -491816184,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 8405409696,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, ss_sold_date_sk#1820] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#1820), dynamicpruningexpression(ss_sold_date_sk#1820 IN dynamicpruning#2288)] PushedFilters: [IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#1800, ss_ext_discount_amt#1811, ss_ext_list_price#1814, d_year#1827]\n+- BroadcastHashJoin [ss_sold_date_sk#1820], [d_date_sk#1821], Inner, BuildRight, false\n   :- Filter isnotnull(ss_customer_sk#1800)\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#1800,ss_ext_discount_amt#1811,ss_ext_list_price#1814,ss_sold_date_sk#1820] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1800)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#1820), dynamicpruningexpression(ss_sold_date_sk#1820 IN dynamicpruning..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#2288, 0, [d_date_sk#1821], [id=#1071]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1068]\n   :                 +- Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=537]\n         +- *(3) Filter ((isnotnull(d_year#1827) AND (d_year#1827 = 2002)) AND isnotnull(d_date_sk#1821))\n            +- *(3) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#1821,d_year#1827] Batched: true, DataFilters: [isnotnull(d_year#1827), (d_year#1827 = 2002), isnotnull(d_date_sk#1821)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8406461192,
        "inputRowCount" : 262669418
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 12855.0,
        "FinishedTasksDistributionInMs" : [ 1206.0, 1339.0, 1431.0, 1533.0, 1617.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 6985,
        "TotalTasksDurationInMs" : 81277,
        "IOBytes" : {
          "Total" : 913002917,
          "Details" : {
            "IR" : 348890497,
            "IW" : 0,
            "SR" : 0,
            "SW" : 564112420
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226574647,
  "SQLEndTimeInMs" : 1702226603426,
  "Objectives" : {
    "DurationInMs" : 28779,
    "IOBytes" : {
      "Total" : 6026250616,
      "Details" : {
        "IR" : 1027699898,
        "IW" : 0,
        "SR" : 2726853010,
        "SW" : 2271697708
      }
    }
  }
}
