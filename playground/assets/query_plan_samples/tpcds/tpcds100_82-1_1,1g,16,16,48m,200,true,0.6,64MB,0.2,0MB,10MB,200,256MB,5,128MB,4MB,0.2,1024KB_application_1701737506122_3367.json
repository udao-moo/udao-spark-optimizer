{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1971318773,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(ss_item_sk#55) "
        },
        "8" : {
          "sign" : 1647182373,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4347,
          "rowCount" : 27,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
        },
        "19" : {
          "sign" : 1085467027,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 720,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
        },
        "4" : {
          "sign" : 1581868895,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 62623876772,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
        },
        "15" : {
          "sign" : -663330336,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7815624880,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#26 = inv_date_sk#25) "
        },
        "11" : {
          "sign" : -1909164890,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3456076656,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#55] "
        },
        "9" : {
          "sign" : -853266237,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 11502,
          "rowCount" : 27,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0)) "
        },
        "13" : {
          "sign" : -996268790,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#54, ss_item_sk#55, ss_customer_sk#56, ss_cdemo_sk#57, ss_hdemo_sk#58, ss_addr_sk#59, ss_store_sk#60, ss_promo_sk#61, ss_ticket_number#62L, ss_quantity#63, ss_wholesale_cost#64, ss_list_price#65, ss_sales_price#66, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#69, ss_ext_list_price#70, ss_ext_tax#71, ss_coupon_amt#72, ss_net_paid#73, ss_net_paid_inc_tax#74, ss_net_profit#75, ss_sold_date_sk#76], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 850596230,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2431565312,
          "rowCount" : 151972832,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#22, inv_date_sk#25] "
        },
        "5" : {
          "sign" : 673212374,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 65814902340,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
        },
        "10" : {
          "sign" : -1483908193,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#0, i_item_id#1, i_rec_start_date#2, i_rec_end_date#3, i_item_desc#4, i_current_price#5, i_wholesale_cost#6, i_brand_id#7, i_brand#8, i_class_id#9, i_class#10, i_category_id#11, i_category#12, i_manufact_id#13, i_manufact#14, i_size#15, i_formulation#16, i_color#17, i_units#18, i_container#19, i_manager_id#20, i_product_name#21], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : 440418152,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -1269266517,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 46248525281,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
        },
        "1" : {
          "sign" : -358212965,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 96712,
          "rowCount" : 616,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 1815786281,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3647347968,
          "rowCount" : 151972832,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#84 [inv_date_sk#25]) "
        },
        "14" : {
          "sign" : -1237858776,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4689374928,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#22] "
        },
        "0" : {
          "sign" : -309980464,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 5600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -601620931,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14760,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26)) "
        },
        "2" : {
          "sign" : -1489508742,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 96712,
          "rowCount" : 616,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -608457731,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 279485767,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 47397556965,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#55 = i_item_sk#0) "
        },
        "3" : {
          "sign" : -1787886572,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 96712,
          "rowCount" : 616,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
        }
      },
      "links" : [ {
        "fromId" : 10,
        "fromName" : "LogicalRelation",
        "toId" : 9,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "LogicalRelation",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Filter",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :  +- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n               :     :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :     :  +- Filter ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0))\n               :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_rec_start_date#2,i_rec_end_date#3,i_item_desc#4,i_current_price#5,i_wholesale_cost#6,i_brand_id#7,i_brand#8,i_class_id#9,i_class#10,i_category_id#11,i_category#12,i_manufact_id#13,i_manufact#14,i_size#15,i_formulation#16,i_color#17,i_units#18,i_container#19,i_manager_id#20,i_product_name#21] parquet\n               :     +- Project [ss_item_sk#55]\n               :        +- Filter isnotnull(ss_item_sk#55)\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n               +- Project [inv_item_sk#22]\n                  +- Join Inner, (d_date_sk#26 = inv_date_sk#25)\n                     :- Project [inv_item_sk#22, inv_date_sk#25]\n                     :  +- Filter (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#84 [inv_date_sk#25])\n                     :     :  +- Project [d_date_sk#26]\n                     :     :     +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_warehouse_sk#23,inv_quantity_on_hand#24,inv_date_sk#25] parquet\n                     +- Project [d_date_sk#26]\n                        +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 53465765030,
      "inputRowCount" : 687613437
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1811817327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7325130361248,
            "rowCount" : 130805899308,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "5" : {
            "sign" : 602729334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8371577555712,
            "rowCount" : 130805899308,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
          },
          "6" : {
            "sign" : 101151247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4268240,
            "rowCount" : 24969,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], ShuffleQueryStage 3 "
          },
          "1" : {
            "sign" : 1301936401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7325130361248,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1468706272,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1328869258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7325130361248,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1636691770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 83819712,
            "rowCount" : 5238732,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#22], ShuffleQueryStage 2 "
          },
          "3" : {
            "sign" : 749586424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7325130361248,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- LogicalQueryStage Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], ShuffleQueryStage 3\n               +- LogicalQueryStage Project [inv_item_sk#22], ShuffleQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 88087952,
        "inputRowCount" : 5263701
      },
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18744, 0, 0, 36147, 0, 0, 0, 0, 0, 0, 0, 45584, 0, 0, 0, 0, 0, 0, 24636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38930, 0, 0, 0, 0, 0, 0, 40365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47038, 0, 39292, 0, 0, 49034, 0, 0, 0, 0, 0, 33132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40365, 0, 0, 0, 0, 0, 0, 46524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20821, 0, 0, 0, 0, 40636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24436, 0, 0, 0, 0, 0, 0, 0, 0, 38905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15786 ],
        "0" : [ 115249, 116502, 105909, 112743, 112743, 112743, 112743, 103631, 105909, 115249, 116502, 108187, 112743, 112743, 113996, 104770, 107048, 109326, 121514, 120261, 115249, 117755, 107048, 116502, 116502, 108187, 107048, 112743, 103631, 105909, 124020, 113996, 122767, 110465, 110465, 116502, 107048, 102492, 112743, 113996, 115249, 111604, 104770, 119008, 113996, 112743, 111604, 104770, 110465, 117755, 121514, 112743, 113996, 111604, 112743, 115249, 115249, 124020, 105909, 112743, 104770, 116502, 104770, 111604, 105909, 107048, 115249, 113996, 115249, 121514, 113996, 103631, 104770, 119008, 115249, 112743, 104770, 110465, 115249, 112743, 113996, 115249, 111604, 115249, 120261, 111604, 103631, 121514, 115249, 102492, 115249, 99387, 115249, 103631, 115249, 113996, 104770, 113996, 115249, 112743, 107048, 117755, 107048, 117755, 113996, 109326, 109326, 119008, 103631, 111604, 117755, 119008, 108187, 122767, 104770, 108187, 107048, 113996, 109326, 116502, 112743, 115249, 124020, 116502, 115249, 115249, 119008, 107048, 115249, 110465, 108187, 117755, 110465, 121514, 104770, 115249, 115249, 113996, 119008, 104770, 109326, 104770, 115249, 112743, 104770, 115249, 115249, 104770, 115249, 113996, 110465, 112743, 112743, 112743, 110465, 122767, 107048, 121514, 104770, 105909, 103631, 116502, 115249, 110465, 119008, 105909, 113996, 109326, 113996, 104770, 111604, 119008, 113996, 109326, 117755, 104770, 101457, 108187, 111604, 111604, 104770, 109326, 111604, 116502, 119008, 115249, 104770, 119008, 115249, 103631, 111604, 104770, 113996, 111604, 111604, 103631, 108187, 104770, 124020, 115249 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227412219,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3499,
        "IOBytes" : {
          "Total" : 21991558,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 21989886,
            "SW" : 1672
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1449904635,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 448,
            "rowCount" : 8,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -173801822,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1392,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1488963493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1392,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1014007067,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1392,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5], HashAggregate(keys=[i_item_id#1, i_item_desc#4, i_current_price#5], functions=[]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5], HashAggregate(keys=[i_item_id#1, i_item_desc#4, i_current_price#5], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1392,
        "inputRowCount" : 8
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227415526,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 192,
        "IOBytes" : {
          "Total" : 1672,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1672,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1858187936,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 111244113024,
            "rowCount" : 9270342752,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#22] "
          },
          "8" : {
            "sign" : 848351018,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4347,
            "rowCount" : 27,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], BroadcastQueryStage 0 "
          },
          "19" : {
            "sign" : 440418152,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1895397948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 62623876772,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "15" : {
            "sign" : -385579219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3647347968,
            "rowCount" : 151972832,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25]) "
          },
          "11" : {
            "sign" : -996268790,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#54, ss_item_sk#55, ss_customer_sk#56, ss_cdemo_sk#57, ss_hdemo_sk#58, ss_addr_sk#59, ss_store_sk#60, ss_promo_sk#61, ss_ticket_number#62L, ss_quantity#63, ss_wholesale_cost#64, ss_list_price#65, ss_sales_price#66, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#69, ss_ext_list_price#70, ss_ext_tax#71, ss_coupon_amt#72, ss_net_paid#73, ss_net_paid_inc_tax#74, ss_net_profit#75, ss_sold_date_sk#76], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -1909164890,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3456076656,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#55] "
          },
          "13" : {
            "sign" : 1143938238,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 185406855040,
            "rowCount" : 9270342752,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#26 = inv_date_sk#25) "
          },
          "16" : {
            "sign" : -608457731,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 1933628465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 65814902340,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
          },
          "10" : {
            "sign" : -1971318773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ss_item_sk#55) "
          },
          "6" : {
            "sign" : -91885404,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46248525281,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "1" : {
            "sign" : 32479798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1085467027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
          },
          "14" : {
            "sign" : 90898314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2431565312,
            "rowCount" : 151972832,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#22, inv_date_sk#25] "
          },
          "0" : {
            "sign" : 708469237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1486923577,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#26], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -218598433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -601620931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14760,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26)) "
          },
          "7" : {
            "sign" : -1263070870,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 47397556965,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#55 = i_item_sk#0) "
          },
          "3" : {
            "sign" : 301764271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :  +- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n               :     :- LogicalQueryStage Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], BroadcastQueryStage 0\n               :     +- Project [ss_item_sk#55]\n               :        +- Filter isnotnull(ss_item_sk#55)\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n               +- Project [inv_item_sk#22]\n                  +- Join Inner, (d_date_sk#26 = inv_date_sk#25)\n                     :- Project [inv_item_sk#22, inv_date_sk#25]\n                     :  +- Filter (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25])\n                     :     :  +- Project [d_date_sk#26]\n                     :     :     +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_warehouse_sk#23,inv_quantity_on_hand#24,inv_date_sk#25] parquet\n                     +- LogicalQueryStage Project [d_date_sk#26], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 53361944387,
        "inputRowCount" : 687336476
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5095.0,
        "FinishedTasksDistributionInMs" : [ 1181.0, 1207.0, 1240.0, 1467.0, 1467.0 ]
      },
      "StartTimeInMs" : 1702227400907,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14811,
        "IOBytes" : {
          "Total" : 1301112404,
          "Details" : {
            "IR" : 1257132632,
            "IW" : 0,
            "SR" : 21989886,
            "SW" : 21989886
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1636691770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4689374928,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#22], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : 848351018,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049600,
            "rowCount" : 18,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : -800276898,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113447874539247365376,
            "rowCount" : 2025854902486560096,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "11" : {
            "sign" : -996268790,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#54, ss_item_sk#55, ss_customer_sk#56, ss_cdemo_sk#57, ss_hdemo_sk#58, ss_addr_sk#59, ss_store_sk#60, ss_promo_sk#61, ss_ticket_number#62L, ss_quantity#63, ss_wholesale_cost#64, ss_list_price#65, ss_sales_price#66, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#69, ss_ext_list_price#70, ss_ext_tax#71, ss_coupon_amt#72, ss_net_paid#73, ss_net_paid_inc_tax#74, ss_net_profit#75, ss_sold_date_sk#76], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -1909164890,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3456076656,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#55] "
          },
          "5" : {
            "sign" : -347759751,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 129654713759139846144,
            "rowCount" : 2025854902486560096,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
          },
          "10" : {
            "sign" : -1971318773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ss_item_sk#55) "
          },
          "6" : {
            "sign" : -91885404,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 311046899040,
            "rowCount" : 5184114984,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "1" : {
            "sign" : -846974722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 113447874539247365376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1229997071,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1106879175,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 113447874539247365376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1263070870,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 331783358976,
            "rowCount" : 5184114984,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#55 = i_item_sk#0) "
          },
          "3" : {
            "sign" : 1009867063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 113447874539247365376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :  +- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n               :     :- LogicalQueryStage Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], BroadcastQueryStage 0\n               :     +- Project [ss_item_sk#55]\n               :        +- Filter isnotnull(ss_item_sk#55)\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n               +- LogicalQueryStage Project [inv_item_sk#22], ShuffleQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 48467395504,
        "inputRowCount" : 678787650
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227401294,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14424,
        "IOBytes" : {
          "Total" : 1288067418,
          "Details" : {
            "IR" : 1244087646,
            "IW" : 0,
            "SR" : 21989886,
            "SW" : 21989886
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1811817327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 236264160290399004,
            "rowCount" : 1504867262996172,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "5" : {
            "sign" : 602729334,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 248303098394368380,
            "rowCount" : 1504867262996172,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
          },
          "6" : {
            "sign" : 101151247,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 46248525281,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], ShuffleQueryStage 3 "
          },
          "1" : {
            "sign" : 1301936401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1468706272,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1328869258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1636691770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 83819712,
            "rowCount" : 5238732,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#22], ShuffleQueryStage 2 "
          },
          "3" : {
            "sign" : 749586424,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- LogicalQueryStage Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5], ShuffleQueryStage 3\n               +- LogicalQueryStage Project [inv_item_sk#22], ShuffleQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 46332344993,
        "inputRowCount" : 292496653
      },
      "PD" : {
        "0" : [ 115249, 116502, 105909, 112743, 112743, 112743, 112743, 103631, 105909, 115249, 116502, 108187, 112743, 112743, 113996, 104770, 107048, 109326, 121514, 120261, 115249, 117755, 107048, 116502, 116502, 108187, 107048, 112743, 103631, 105909, 124020, 113996, 122767, 110465, 110465, 116502, 107048, 102492, 112743, 113996, 115249, 111604, 104770, 119008, 113996, 112743, 111604, 104770, 110465, 117755, 121514, 112743, 113996, 111604, 112743, 115249, 115249, 124020, 105909, 112743, 104770, 116502, 104770, 111604, 105909, 107048, 115249, 113996, 115249, 121514, 113996, 103631, 104770, 119008, 115249, 112743, 104770, 110465, 115249, 112743, 113996, 115249, 111604, 115249, 120261, 111604, 103631, 121514, 115249, 102492, 115249, 99387, 115249, 103631, 115249, 113996, 104770, 113996, 115249, 112743, 107048, 117755, 107048, 117755, 113996, 109326, 109326, 119008, 103631, 111604, 117755, 119008, 108187, 122767, 104770, 108187, 107048, 113996, 109326, 116502, 112743, 115249, 124020, 116502, 115249, 115249, 119008, 107048, 115249, 110465, 108187, 117755, 110465, 121514, 104770, 115249, 115249, 113996, 119008, 104770, 109326, 104770, 115249, 112743, 104770, 115249, 115249, 104770, 115249, 113996, 110465, 112743, 112743, 112743, 110465, 122767, 107048, 121514, 104770, 105909, 103631, 116502, 115249, 110465, 119008, 105909, 113996, 109326, 113996, 104770, 111604, 119008, 113996, 109326, 117755, 104770, 101457, 108187, 111604, 111604, 104770, 109326, 111604, 116502, 119008, 115249, 104770, 119008, 115249, 103631, 111604, 104770, 113996, 111604, 111604, 103631, 108187, 104770, 124020, 115249 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227405554,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10164,
        "IOBytes" : {
          "Total" : 1193747729,
          "Details" : {
            "IR" : 1171161816,
            "IW" : 0,
            "SR" : 21989886,
            "SW" : 596027
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 221492112,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              },
              "compileTime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "1" : {
            "sign" : 1508541027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 62623876772,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 62623876772,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "2" : {
            "sign" : 624947794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 65814902340,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 65814902340,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_item_sk#22 = i_item_sk#0) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n+- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n   +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n      :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n      :  +- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n      :     :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n      :     :  +- Filter ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0))\n      :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_rec_start_date#2,i_rec_end_date#3,i_item_desc#4,i_current_price#5,i_wholesale_cost#6,i_brand_id#7,i_brand#8,i_class_id#9,i_class#10,i_category_id#11,i_category#12,i_manufact_id#13,i_manufact#14,i_size#15,i_formulation#16,i_color#17,i_units#18,i_container#19,i_manager_id#20,i_product_name#21] parquet\n      :     +- Project [ss_item_sk#55]\n      :        +- Filter isnotnull(ss_item_sk#55)\n      :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n      +- Project [inv_item_sk#22]\n         +- Join Inner, (d_date_sk#26 = inv_date_sk#25)\n            :- Project [inv_item_sk#22, inv_date_sk#25]\n            :  +- Filter (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25])\n            :     :  +- Project [d_date_sk#26]\n            :     :     +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_warehouse_sk#23,inv_quantity_on_hand#24,inv_date_sk#25] parquet\n            +- Project [d_date_sk#26]\n               +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1579046684,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 4268240,
            "rowCount" : 24969,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] Arguments: 3 "
          },
          "5" : {
            "sign" : 688417145,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [inv_item_sk#22] Arguments: [inv_item_sk#22 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1470950218,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 83819712,
            "rowCount" : 5238732,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [inv_item_sk#22] Arguments: 2 "
          },
          "1" : {
            "sign" : -1206543780,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 62623876772,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Input [5]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5, inv_item_sk#22] "
          },
          "0" : {
            "sign" : -1859516773,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Keys [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Functions: [] Aggregate Attributes: [] Results [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "2" : {
            "sign" : -669580509,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 65814902340,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [i_item_sk#0] Right keys [1]: [inv_item_sk#22] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 2061359865,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] Arguments: [i_item_sk#0 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_id#1, i_item_desc#4, i_current_price#5], functions=[], output=[i_item_id#1, i_item_desc#4, i_current_price#5])\n+- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n   +- SortMergeJoin [i_item_sk#0], [inv_item_sk#22], Inner\n      :- Sort [i_item_sk#0 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 3\n      :     +- Exchange hashpartitioning(i_item_sk#0, 200), ENSURE_REQUIREMENTS, [plan_id=432]\n      :        +- *(4) Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n      :           +- *(4) BroadcastHashJoin [i_item_sk#0], [ss_item_sk#55], Inner, BuildLeft, false\n      :              :- BroadcastQueryStage 0\n      :              :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=165]\n      :              :     +- *(1) Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n      :              :        +- *(1) Filter ((((isnotnull(i_current_price#5) AND (i_current_price#5 >= 30.00)) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663)) AND isnotnull(i_item_sk#0))\n      :              :           +- *(1) ColumnarToRow\n      :              :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_item_desc#4,i_current_price#5,i_manufact_id#13] Batched: true, DataFilters: [isnotnull(i_current_price#5), (i_current_price#5 >= 30.00), (i_current_price#5 <= 60.00), i_manu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,30.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...\n      :              +- *(4) Project [ss_item_sk#55]\n      :                 +- *(4) Filter isnotnull(ss_item_sk#55)\n      :                    +- *(4) ColumnarToRow\n      :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#55,ss_sold_date_sk#76] Batched: true, DataFilters: [isnotnull(ss_item_sk#55)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int>\n      +- Sort [inv_item_sk#22 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 2\n            +- Exchange hashpartitioning(inv_item_sk#22, 200), ENSURE_REQUIREMENTS, [plan_id=326]\n               +- *(3) Project [inv_item_sk#22]\n                  +- *(3) BroadcastHashJoin [inv_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n                     :- *(3) Project [inv_item_sk#22, inv_date_sk#25]\n                     :  +- *(3) Filter (((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22))\n                     :     +- *(3) ColumnarToRow\n                     :        +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_quantity_on_hand#24,inv_date_sk#25] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#24), (inv_quantity_on_hand#24 >= 100), (inv_quantity_on_hand#24 <..., Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#25), dynamicpruningexpression(inv_date_sk#25 IN dynamicpruning#88)], PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(i..., ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>\n                     :              +- SubqueryBroadcast dynamicpruning#88, 0, [d_date_sk#26], [id=#295]\n                     :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=188]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n                                             +- Project [d_date_sk#26]\n                                                +- Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     +- BroadcastQueryStage 1\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=188]\n                           +- *(2) Project [d_date_sk#26]\n                              +- *(2) Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n                                 +- *(2) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 88087952,
        "inputRowCount" : 5263701
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18744, 0, 0, 36147, 0, 0, 0, 0, 0, 0, 0, 45584, 0, 0, 0, 0, 0, 0, 24636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38930, 0, 0, 0, 0, 0, 0, 40365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47038, 0, 39292, 0, 0, 49034, 0, 0, 0, 0, 0, 33132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40365, 0, 0, 0, 0, 0, 0, 46524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20821, 0, 0, 0, 0, 40636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24436, 0, 0, 0, 0, 0, 0, 0, 0, 38905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15786 ],
        "0" : [ 115249, 116502, 105909, 112743, 112743, 112743, 112743, 103631, 105909, 115249, 116502, 108187, 112743, 112743, 113996, 104770, 107048, 109326, 121514, 120261, 115249, 117755, 107048, 116502, 116502, 108187, 107048, 112743, 103631, 105909, 124020, 113996, 122767, 110465, 110465, 116502, 107048, 102492, 112743, 113996, 115249, 111604, 104770, 119008, 113996, 112743, 111604, 104770, 110465, 117755, 121514, 112743, 113996, 111604, 112743, 115249, 115249, 124020, 105909, 112743, 104770, 116502, 104770, 111604, 105909, 107048, 115249, 113996, 115249, 121514, 113996, 103631, 104770, 119008, 115249, 112743, 104770, 110465, 115249, 112743, 113996, 115249, 111604, 115249, 120261, 111604, 103631, 121514, 115249, 102492, 115249, 99387, 115249, 103631, 115249, 113996, 104770, 113996, 115249, 112743, 107048, 117755, 107048, 117755, 113996, 109326, 109326, 119008, 103631, 111604, 117755, 119008, 108187, 122767, 104770, 108187, 107048, 113996, 109326, 116502, 112743, 115249, 124020, 116502, 115249, 115249, 119008, 107048, 115249, 110465, 108187, 117755, 110465, 121514, 104770, 115249, 115249, 113996, 119008, 104770, 109326, 104770, 115249, 112743, 104770, 115249, 115249, 104770, 115249, 113996, 110465, 112743, 112743, 112743, 110465, 122767, 107048, 121514, 104770, 105909, 103631, 116502, 115249, 110465, 119008, 105909, 113996, 109326, 113996, 104770, 111604, 119008, 113996, 109326, 117755, 104770, 101457, 108187, 111604, 111604, 104770, 109326, 111604, 116502, 119008, 115249, 104770, 119008, 115249, 103631, 111604, 104770, 113996, 111604, 111604, 103631, 108187, 104770, 124020, 115249 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 3054,
        "TotalTasksDurationInMs" : 3044,
        "IOBytes" : {
          "Total" : 21989886,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 21988214,
            "SW" : 1672
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 367354836,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 5600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 869379863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              },
              "compileTime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 88931454,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              },
              "compileTime" : {
                "sizeInBytes" : 96712,
                "rowCount" : 616
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [i_item_id#1 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [i_item_id#1 ASC NULLS FIRST], true\n      +- Aggregate [i_item_id#1, i_item_desc#4, i_current_price#5], [i_item_id#1, i_item_desc#4, i_current_price#5]\n         +- Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n            +- Join Inner, (inv_item_sk#22 = i_item_sk#0)\n               :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :  +- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n               :     :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n               :     :  +- Filter ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0))\n               :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_rec_start_date#2,i_rec_end_date#3,i_item_desc#4,i_current_price#5,i_wholesale_cost#6,i_brand_id#7,i_brand#8,i_class_id#9,i_class#10,i_category_id#11,i_category#12,i_manufact_id#13,i_manufact#14,i_size#15,i_formulation#16,i_color#17,i_units#18,i_container#19,i_manager_id#20,i_product_name#21] parquet\n               :     +- Project [ss_item_sk#55]\n               :        +- Filter isnotnull(ss_item_sk#55)\n               :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n               +- Project [inv_item_sk#22]\n                  +- Join Inner, (d_date_sk#26 = inv_date_sk#25)\n                     :- Project [inv_item_sk#22, inv_date_sk#25]\n                     :  +- Filter (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25])\n                     :     :  +- Project [d_date_sk#26]\n                     :     :     +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n                     :     +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_warehouse_sk#23,inv_quantity_on_hand#24,inv_date_sk#25] parquet\n                     +- Project [d_date_sk#26]\n                        +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n                           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -641603534,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 5600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Arguments: 100, [i_item_id#1 ASC NULLS FIRST], [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "1" : {
            "sign" : -1152513254,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1392,
            "rowCount" : 8,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Keys [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Functions: [] Aggregate Attributes: [] Results [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "2" : {
            "sign" : 735908333,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 96712,
            "rowCount" : 616,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_item_id#1, i_item_desc#4, i_current_price#5] Arguments: 4 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[i_item_id#1 ASC NULLS FIRST], output=[i_item_id#1,i_item_desc#4,i_current_price#5])\n+- HashAggregate(keys=[i_item_id#1, i_item_desc#4, i_current_price#5], functions=[], output=[i_item_id#1, i_item_desc#4, i_current_price#5])\n   +- ShuffleQueryStage 4\n      +- Exchange hashpartitioning(i_item_id#1, i_item_desc#4, i_current_price#5, 200), ENSURE_REQUIREMENTS, [plan_id=537]\n         +- *(7) HashAggregate(keys=[i_item_id#1, i_item_desc#4, i_current_price#5], functions=[], output=[i_item_id#1, i_item_desc#4, i_current_price#5])\n            +- *(7) Project [i_item_id#1, i_item_desc#4, i_current_price#5]\n               +- *(7) SortMergeJoin [i_item_sk#0], [inv_item_sk#22], Inner\n                  :- *(5) Sort [i_item_sk#0 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 3\n                  :        +- Exchange hashpartitioning(i_item_sk#0, 200), ENSURE_REQUIREMENTS, [plan_id=432]\n                  :           +- *(4) Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n                  :              +- *(4) BroadcastHashJoin [i_item_sk#0], [ss_item_sk#55], Inner, BuildLeft, false\n                  :                 :- BroadcastQueryStage 0\n                  :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=165]\n                  :                 :     +- *(1) Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n                  :                 :        +- *(1) Filter ((((isnotnull(i_current_price#5) AND (i_current_price#5 >= 30.00)) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663)) AND isnotnull(i_item_sk#0))\n                  :                 :           +- *(1) ColumnarToRow\n                  :                 :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_item_desc#4,i_current_price#5,i_manufact_id#13] Batched: true, DataFilters: [isnotnull(i_current_price#5), (i_current_price#5 >= 30.00), (i_current_price#5 <= 60.00), i_manu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,30.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...\n                  :                 +- *(4) Project [ss_item_sk#55]\n                  :                    +- *(4) Filter isnotnull(ss_item_sk#55)\n                  :                       +- *(4) ColumnarToRow\n                  :                          +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#55,ss_sold_date_sk#76] Batched: true, DataFilters: [isnotnull(ss_item_sk#55)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int>\n                  +- *(6) Sort [inv_item_sk#22 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 2\n                           +- Exchange hashpartitioning(inv_item_sk#22, 200), ENSURE_REQUIREMENTS, [plan_id=326]\n                              +- *(3) Project [inv_item_sk#22]\n                                 +- *(3) BroadcastHashJoin [inv_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n                                    :- *(3) Project [inv_item_sk#22, inv_date_sk#25]\n                                    :  +- *(3) Filter (((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22))\n                                    :     +- *(3) ColumnarToRow\n                                    :        +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_quantity_on_hand#24,inv_date_sk#25] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#24), (inv_quantity_on_hand#24 >= 100), (inv_quantity_on_hand#24 <..., Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#25), dynamicpruningexpression(inv_date_sk#25 IN dynamicpruning#88)], PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(i..., ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>\n                                    :              +- SubqueryBroadcast dynamicpruning#88, 0, [d_date_sk#26], [id=#295]\n                                    :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            BroadcastQueryStage 1\n                                                            +- ReusedExchange [d_date_sk#26], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=188]\n                                                         +- == Initial Plan ==\n                                                            BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n                                                            +- Project [d_date_sk#26]\n                                                               +- Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                    +- BroadcastQueryStage 1\n                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=188]\n                                          +- *(2) Project [d_date_sk#26]\n                                             +- *(2) Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n                                                +- *(2) ColumnarToRow\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1392,
        "inputRowCount" : 8
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 74,
        "TotalTasksDurationInMs" : 66,
        "IOBytes" : {
          "Total" : 1672,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1672,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1085467027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 720,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#26] "
          },
          "1" : {
            "sign" : -601620931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26)) "
          },
          "2" : {
            "sign" : 440418152,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#26, d_date_id#27, d_date#28, d_month_seq#29, d_week_seq#30, d_quarter_seq#31, d_year#32, d_dow#33, d_moy#34, d_dom#35, d_qoy#36, d_fy_year#37, d_fy_quarter_seq#38, d_fy_week_seq#39, d_day_name#40, d_quarter_name#41, d_holiday#42, d_weekend#43, d_following_holiday#44, d_first_dom#45, d_last_dom#46, d_same_day_ly#47, d_same_day_lq#48, d_current_day#49, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#26]\n+- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 656631970,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#26] Input [2]: [d_date_sk#26, d_date#28] "
          },
          "1" : {
            "sign" : 916028052,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#26, d_date#28] Condition : (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26)) "
          },
          "2" : {
            "sign" : 1873139579,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 720,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#26, d_date#28] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#26]\n+- Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 720,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1717,
        "TotalTasksDurationInMs" : 1703,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1647182373,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4347,
                "rowCount" : 27
              },
              "compileTime" : {
                "sizeInBytes" : 4347,
                "rowCount" : 27
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "1" : {
            "sign" : -853266237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11502,
                "rowCount" : 27
              },
              "compileTime" : {
                "sizeInBytes" : 11502,
                "rowCount" : 27
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0)) "
          },
          "2" : {
            "sign" : -1483908193,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#0, i_item_id#1, i_rec_start_date#2, i_rec_end_date#3, i_item_desc#4, i_current_price#5, i_wholesale_cost#6, i_brand_id#7, i_brand#8, i_class_id#9, i_class#10, i_category_id#11, i_category#12, i_manufact_id#13, i_manufact#14, i_size#15, i_formulation#16, i_color#17, i_units#18, i_container#19, i_manager_id#20, i_product_name#21], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n+- Filter ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_rec_start_date#2,i_rec_end_date#3,i_item_desc#4,i_current_price#5,i_wholesale_cost#6,i_brand_id#7,i_brand#8,i_class_id#9,i_class#10,i_category_id#11,i_category#12,i_manufact_id#13,i_manufact#14,i_size#15,i_formulation#16,i_color#17,i_units#18,i_container#19,i_manager_id#20,i_product_name#21] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1926125092,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4347,
            "rowCount" : 27,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] Input [5]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5, i_manufact_id#13] "
          },
          "1" : {
            "sign" : 520254538,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4347,
            "rowCount" : 27,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5, i_manufact_id#13] Condition : ((((isnotnull(i_current_price#5) AND (i_current_price#5 >= 30.00)) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663)) AND isnotnull(i_item_sk#0)) "
          },
          "2" : {
            "sign" : -241384244,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4347,
            "rowCount" : 27,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [5]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5, i_manufact_id#13] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,30.00), LessThanOrEqual(i_current_price,60.00), In(i_manufact_id, [129,437,663,727]), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n+- Filter ((((isnotnull(i_current_price#5) AND (i_current_price#5 >= 30.00)) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663)) AND isnotnull(i_item_sk#0))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_item_desc#4,i_current_price#5,i_manufact_id#13] Batched: true, DataFilters: [isnotnull(i_current_price#5), (i_current_price#5 >= 30.00), (i_current_price#5 <= 60.00), i_manu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,30.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4347,
        "inputRowCount" : 27
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 2160,
        "TotalTasksDurationInMs" : 7248,
        "IOBytes" : {
          "Total" : 13044986,
          "Details" : {
            "IR" : 13044986,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -608457731,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1541572444,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7815624880,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 7815624880,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#26 = inv_date_sk#25) "
          },
          "0" : {
            "sign" : 1259021868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4689374928,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 4689374928,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#22] "
          },
          "2" : {
            "sign" : 90898314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2431565312,
                "rowCount" : 151972832
              },
              "compileTime" : {
                "sizeInBytes" : 2431565312,
                "rowCount" : 151972832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#22, inv_date_sk#25] "
          },
          "3" : {
            "sign" : -385579219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3647347968,
                "rowCount" : 151972832
              },
              "compileTime" : {
                "sizeInBytes" : 3647347968,
                "rowCount" : 151972832
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [inv_item_sk#22]\n+- Join Inner, (d_date_sk#26 = inv_date_sk#25)\n   :- Project [inv_item_sk#22, inv_date_sk#25]\n   :  +- Filter (((((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_date_sk#25)) AND dynamicpruning#88 [inv_date_sk#25])\n   :     :  +- Project [d_date_sk#26]\n   :     :     +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_warehouse_sk#23,inv_quantity_on_hand#24,inv_date_sk#25] parquet\n   +- Project [d_date_sk#26]\n      +- Filter ((isnotnull(d_date#28) AND ((d_date#28 >= 2002-05-30) AND (d_date#28 <= 2002-07-29))) AND isnotnull(d_date_sk#26))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date_id#27,d_date#28,d_month_seq#29,d_week_seq#30,d_quarter_seq#31,d_year#32,d_dow#33,d_moy#34,d_dom#35,d_qoy#36,d_fy_year#37,d_fy_quarter_seq#38,d_fy_week_seq#39,d_day_name#40,d_quarter_name#41,d_holiday#42,d_weekend#43,d_following_holiday#44,d_first_dom#45,d_last_dom#46,d_same_day_ly#47,d_same_day_lq#48,d_current_day#49,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 921961065,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2431565312,
            "rowCount" : 151972832,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.inventory Output [3]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/inventory/inv_date_sk=2450815, ... 260 entries] PartitionFilters: [isnotnull(inv_date_sk#25), dynamicpruningexpression(inv_date_sk#25 IN dynamicpruning#88)] PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)] ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int> "
          },
          "5" : {
            "sign" : 645306566,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#26] Arguments: 1 "
          },
          "1" : {
            "sign" : 654790220,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7815624880,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_date_sk#25] Right keys [1]: [d_date_sk#26] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1465080574,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4689374928,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [inv_item_sk#22] Input [3]: [inv_item_sk#22, inv_date_sk#25, d_date_sk#26] "
          },
          "2" : {
            "sign" : -1294553883,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2431565312,
            "rowCount" : 151972832,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [inv_item_sk#22, inv_date_sk#25] Input [3]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25] "
          },
          "3" : {
            "sign" : -988190950,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2431565312,
            "rowCount" : 151972832,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25] Condition : (((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.inventory",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [inv_item_sk#22]\n+- BroadcastHashJoin [inv_date_sk#25], [d_date_sk#26], Inner, BuildRight, false\n   :- Project [inv_item_sk#22, inv_date_sk#25]\n   :  +- Filter (((isnotnull(inv_quantity_on_hand#24) AND (inv_quantity_on_hand#24 >= 100)) AND (inv_quantity_on_hand#24 <= 500)) AND isnotnull(inv_item_sk#22))\n   :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#22,inv_quantity_on_hand#24,inv_date_sk#25] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#24), (inv_quantity_on_hand#24 >= 100), (inv_quantity_on_hand#24 <..., Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#25), dynamicpruningexpression(inv_date_sk#25 IN dynamicpruning#88)], PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(i..., ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>\n   :           +- SubqueryBroadcast dynamicpruning#88, 0, [d_date_sk#26], [id=#295]\n   :              +- AdaptiveSparkPlan isFinalPlan=false\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=292]\n   :                    +- Project [d_date_sk#26]\n   :                       +- Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n   :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n   +- BroadcastQueryStage 1\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=188]\n         +- *(2) Project [d_date_sk#26]\n            +- *(2) Filter (((isnotnull(d_date#28) AND (d_date#28 >= 2002-05-30)) AND (d_date#28 <= 2002-07-29)) AND isnotnull(d_date_sk#26))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#26,d_date#28] Batched: true, DataFilters: [isnotnull(d_date#28), (d_date#28 >= 2002-05-30), (d_date#28 <= 2002-07-29), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-05-30), LessThanOrEqual(d_date,2002-07-29), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2432614376,
        "inputRowCount" : 151972893
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5095.0,
        "FinishedTasksDistributionInMs" : [ 1181.0, 1207.0, 1240.0, 1467.0, 1467.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 4453,
        "TotalTasksDurationInMs" : 29829,
        "IOBytes" : {
          "Total" : 94319689,
          "Details" : {
            "IR" : 72925830,
            "IW" : 0,
            "SR" : 0,
            "SW" : 21393859
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -996268790,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#54, ss_item_sk#55, ss_customer_sk#56, ss_cdemo_sk#57, ss_hdemo_sk#58, ss_addr_sk#59, ss_store_sk#60, ss_promo_sk#61, ss_ticket_number#62L, ss_quantity#63, ss_wholesale_cost#64, ss_list_price#65, ss_sales_price#66, ss_ext_discount_amt#67, ss_ext_sales_price#68, ss_ext_wholesale_cost#69, ss_ext_list_price#70, ss_ext_tax#71, ss_coupon_amt#72, ss_net_paid#73, ss_net_paid_inc_tax#74, ss_net_profit#75, ss_sold_date_sk#76], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 279485767,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 47397556965,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 47397556965,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#55 = i_item_sk#0) "
          },
          "0" : {
            "sign" : -1269266517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 46248525281,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 46248525281,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] "
          },
          "2" : {
            "sign" : -1909164890,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3456076656,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 3456076656,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#55] "
          },
          "3" : {
            "sign" : -1971318773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ss_item_sk#55) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n+- Join Inner, (ss_item_sk#55 = i_item_sk#0)\n   :- Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n   :  +- Filter ((isnotnull(i_current_price#5) AND (((i_current_price#5 >= 30.00) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663))) AND isnotnull(i_item_sk#0))\n   :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_rec_start_date#2,i_rec_end_date#3,i_item_desc#4,i_current_price#5,i_wholesale_cost#6,i_brand_id#7,i_brand#8,i_class_id#9,i_class#10,i_category_id#11,i_category#12,i_manufact_id#13,i_manufact#14,i_size#15,i_formulation#16,i_color#17,i_units#18,i_container#19,i_manager_id#20,i_product_name#21] parquet\n   +- Project [ss_item_sk#55]\n      +- Filter isnotnull(ss_item_sk#55)\n         +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#54,ss_item_sk#55,ss_customer_sk#56,ss_cdemo_sk#57,ss_hdemo_sk#58,ss_addr_sk#59,ss_store_sk#60,ss_promo_sk#61,ss_ticket_number#62L,ss_quantity#63,ss_wholesale_cost#64,ss_list_price#65,ss_sales_price#66,ss_ext_discount_amt#67,ss_ext_sales_price#68,ss_ext_wholesale_cost#69,ss_ext_list_price#70,ss_ext_tax#71,ss_coupon_amt#72,ss_net_paid#73,ss_net_paid_inc_tax#74,ss_net_profit#75,ss_sold_date_sk#76] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -108690057,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3456076656,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ss_item_sk#55, ss_sold_date_sk#76] Condition : isnotnull(ss_item_sk#55) "
          },
          "5" : {
            "sign" : 807793880,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3456076656,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [2]: [ss_item_sk#55, ss_sold_date_sk#76] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_item_sk)] ReadSchema: struct<ss_item_sk:int> "
          },
          "1" : {
            "sign" : 33680486,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 47397556965,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [i_item_sk#0] Right keys [1]: [ss_item_sk#55] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 510694346,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 46248525281,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] Input [5]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5, ss_item_sk#55] "
          },
          "2" : {
            "sign" : 291760241,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049600,
            "rowCount" : 18,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5] Arguments: 0 "
          },
          "3" : {
            "sign" : 1170266812,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3456076656,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ss_item_sk#55] Input [2]: [ss_item_sk#55, ss_sold_date_sk#76] "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n+- BroadcastHashJoin [i_item_sk#0], [ss_item_sk#55], Inner, BuildLeft, false\n   :- BroadcastQueryStage 0\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=165]\n   :     +- *(1) Project [i_item_sk#0, i_item_id#1, i_item_desc#4, i_current_price#5]\n   :        +- *(1) Filter ((((isnotnull(i_current_price#5) AND (i_current_price#5 >= 30.00)) AND (i_current_price#5 <= 60.00)) AND i_manufact_id#13 IN (437,129,727,663)) AND isnotnull(i_item_sk#0))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#0,i_item_id#1,i_item_desc#4,i_current_price#5,i_manufact_id#13] Batched: true, DataFilters: [isnotnull(i_current_price#5), (i_current_price#5 >= 30.00), (i_current_price#5 <= 60.00), i_manu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,30.00), LessThanOrEqual(i_current..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_...\n   +- Project [ss_item_sk#55]\n      +- Filter isnotnull(ss_item_sk#55)\n         +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#55,ss_sold_date_sk#76] Batched: true, DataFilters: [isnotnull(ss_item_sk#55)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3457126256,
        "inputRowCount" : 288006406
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 6726,
        "TotalTasksDurationInMs" : 104880,
        "IOBytes" : {
          "Total" : 1171756171,
          "Details" : {
            "IR" : 1171161816,
            "IW" : 0,
            "SR" : 0,
            "SW" : 594355
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227398466,
  "SQLEndTimeInMs" : 1702227415718,
  "Objectives" : {
    "DurationInMs" : 17252,
    "IOBytes" : {
      "Total" : 1301284142,
      "Details" : {
        "IR" : 1257304370,
        "IW" : 0,
        "SR" : 21989886,
        "SW" : 21989886
      }
    }
  }
}
