{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -686051339,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6842707584,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
        },
        "34" : {
          "sign" : 952412459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85))) "
        },
        "12" : {
          "sign" : 1197978128,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13899164200,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] "
        },
        "51" : {
          "sign" : -1027756087,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 287956440,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_item_sk#142, cr_order_number#156L] "
        },
        "8" : {
          "sign" : 1218460610,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 21243246800,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#7 = ss_sold_year#17) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#8 = ss_customer_sk#170)) "
        },
        "19" : {
          "sign" : 763462812,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#245) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239)) "
        },
        "23" : {
          "sign" : -1683007754,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#191, sr_item_sk#192, sr_customer_sk#193, sr_cdemo_sk#194, sr_hdemo_sk#195, sr_addr_sk#196, sr_store_sk#197, sr_reason_sk#198, sr_ticket_number#199L, sr_return_quantity#200, sr_return_amt#201, sr_return_tax#202, sr_return_amt_inc_tax#203, sr_fee#204, sr_return_ship_cost#205, sr_refunded_cash#206, sr_reversed_charge#207, sr_store_credit#208, sr_net_loss#209, sr_returned_date_sk#210], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 1490164860,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 30802707860,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#18L as double) / cast((coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) as double)), 2) AS ratio#0, ss_qty#18L AS store_qty#1L, ss_wc#19 AS store_wholesale_cost#2, ss_sp#20 AS store_sales_price#3, (coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) AS other_chan_qty#4L, (coalesce(ws_wc#10, 0.00) + coalesce(cs_wc#15, 0.00)) AS other_chan_wholesale_cost#5, (coalesce(ws_sp#11, 0.00) + coalesce(cs_sp#16, 0.00)) AS other_chan_sales_price#6, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, cs_qty#14L] "
        },
        "40" : {
          "sign" : 1648562564,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5540650480,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#217] "
        },
        "15" : {
          "sign" : -1006740568,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13202176944,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] "
        },
        "11" : {
          "sign" : -821724870,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12745948080,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#190 = d_date_sk#239) "
        },
        "9" : {
          "sign" : -1835935205,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 11683785740,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [d_year#245, ss_item_sk#169, ss_customer_sk#170], [d_year#245 AS ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#18L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#20] "
        },
        "44" : {
          "sign" : 268845340,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8553384480,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142)) "
        },
        "33" : {
          "sign" : -199732991,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#79, d_year#85] "
        },
        "22" : {
          "sign" : 250536887,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192)) "
        },
        "26" : {
          "sign" : 1439713539,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3335789040,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#54 = d_date_sk#79) "
        },
        "50" : {
          "sign" : -1274886388,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#211, d_date_id#212, d_date#213, d_month_seq#214, d_week_seq#215, d_quarter_seq#216, d_year#217, d_dow#218, d_moy#219, d_dom#220, d_qoy#221, d_fy_year#222, d_fy_quarter_seq#223, d_fy_week_seq#224, d_day_name#225, d_quarter_name#226, d_holiday#227, d_weekend#228, d_following_holiday#229, d_first_dom#230, d_last_dom#231, d_same_day_ly#232, d_same_day_lq#233, d_current_day#234, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : -1019564740,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56)) "
        },
        "13" : {
          "sign" : 636401749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 20848746300,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnull(sr_ticket_number#199L) "
        },
        "46" : {
          "sign" : 1947394298,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651732864,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#297 [cs_sold_date_sk#140]) "
        },
        "24" : {
          "sign" : 1120643918,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3057806620,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#7, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#8, sum(ws_quantity#38) AS ws_qty#9L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#10, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#11] "
        },
        "35" : {
          "sign" : -1436288320,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#79, d_date_id#80, d_date#81, d_month_seq#82, d_week_seq#83, d_quarter_seq#84, d_year#85, d_dow#86, d_moy#87, d_dom#88, d_qoy#89, d_fy_year#90, d_fy_quarter_seq#91, d_fy_week_seq#92, d_day_name#93, d_quarter_name#94, d_holiday#95, d_weekend#96, d_following_holiday#97, d_first_dom#98, d_last_dom#99, d_same_day_ly#100, d_same_day_lq#101, d_current_day#102, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 1789384965,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#295 [ss_sold_date_sk#190]) "
        },
        "5" : {
          "sign" : 2075790565,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 27616220840,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#9L, 0) > 0) OR (coalesce(cs_qty#14L, 0) > 0)) "
        },
        "10" : {
          "sign" : -2142185391,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 10621623400,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#245] "
        },
        "48" : {
          "sign" : 424678726,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#211, d_year#217] "
        },
        "21" : {
          "sign" : -2132546413,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 576032220,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#192, sr_ticket_number#199L] "
        },
        "43" : {
          "sign" : 753258057,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 8553384480,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnull(cr_order_number#156L) "
        },
        "32" : {
          "sign" : 1709608392,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#21, ws_ship_date_sk#22, ws_item_sk#23, ws_bill_customer_sk#24, ws_bill_cdemo_sk#25, ws_bill_hdemo_sk#26, ws_bill_addr_sk#27, ws_ship_customer_sk#28, ws_ship_cdemo_sk#29, ws_ship_hdemo_sk#30, ws_ship_addr_sk#31, ws_web_page_sk#32, ws_web_site_sk#33, ws_ship_mode_sk#34, ws_warehouse_sk#35, ws_promo_sk#36, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_list_price#40, ws_sales_price#41, ws_ext_discount_amt#42, ws_ext_sales_price#43, ws_ext_wholesale_cost#44, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "49" : {
          "sign" : -2145378539,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(d_date_sk#211) AND ((d_year#217 = 2000) AND isnotnull(d_year#217))) "
        },
        "6" : {
          "sign" : 1949613203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 27616220840,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#12 = ss_sold_year#17) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#13 = ss_customer_sk#170)) "
        },
        "36" : {
          "sign" : -1980174139,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 143987780,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_item_sk#56, wr_order_number#67L] "
        },
        "1" : {
          "sign" : 1024215166,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 20181084460,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -1176275296,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 6094715528,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [d_year#217, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#217 AS cs_sold_year#12, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#13, sum(cs_quantity#124) AS cs_qty#14L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#15, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#16] "
        },
        "17" : {
          "sign" : 307511567,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#168, ss_item_sk#169, ss_customer_sk#170, ss_cdemo_sk#171, ss_hdemo_sk#172, ss_addr_sk#173, ss_store_sk#174, ss_promo_sk#175, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_list_price#179, ss_sales_price#180, ss_ext_discount_amt#181, ss_ext_sales_price#182, ss_ext_wholesale_cost#183, ss_ext_list_price#184, ss_ext_tax#185, ss_coupon_amt#186, ss_net_paid#187, ss_net_paid_inc_tax#188, ss_net_profit#189, ss_sold_date_sk#190], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : -222470393,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2779824200,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85] "
        },
        "14" : {
          "sign" : 1629223659,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 20848746300,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192)) "
        },
        "47" : {
          "sign" : 1536480445,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#107, cs_ship_date_sk#108, cs_bill_customer_sk#109, cs_bill_cdemo_sk#110, cs_bill_hdemo_sk#111, cs_bill_addr_sk#112, cs_ship_customer_sk#113, cs_ship_cdemo_sk#114, cs_ship_hdemo_sk#115, cs_ship_addr_sk#116, cs_call_center_sk#117, cs_catalog_page_sk#118, cs_ship_mode_sk#119, cs_warehouse_sk#120, cs_item_sk#121, cs_promo_sk#122, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_list_price#126, cs_sales_price#127, cs_ext_discount_amt#128, cs_ext_sales_price#129, cs_ext_wholesale_cost#130, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : 1224861638,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#296 [ws_sold_date_sk#54]) "
        },
        "53" : {
          "sign" : -142749672,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#141, cr_item_sk#142, cr_refunded_customer_sk#143, cr_refunded_cdemo_sk#144, cr_refunded_hdemo_sk#145, cr_refunded_addr_sk#146, cr_returning_customer_sk#147, cr_returning_cdemo_sk#148, cr_returning_hdemo_sk#149, cr_returning_addr_sk#150, cr_call_center_sk#151, cr_catalog_page_sk#152, cr_ship_mode_sk#153, cr_warehouse_sk#154, cr_reason_sk#155, cr_order_number#156L, cr_return_quantity#157, cr_return_amount#158, cr_return_tax#159, cr_return_amt_inc_tax#160, cr_fee#161, cr_return_ship_cost#162, cr_refunded_cash#163, cr_reversed_charge#164, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "42" : {
          "sign" : -1807508526,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5702256320,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
        },
        "0" : {
          "sign" : 130660681,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 7600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -694123955,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#239, d_date_id#240, d_date#241, d_month_seq#242, d_week_seq#243, d_quarter_seq#244, d_year#245, d_dow#246, d_moy#247, d_dom#248, d_qoy#249, d_fy_year#250, d_fy_quarter_seq#251, d_fy_week_seq#252, d_day_name#253, d_quarter_name#254, d_holiday#255, d_weekend#256, d_following_holiday#257, d_first_dom#258, d_last_dom#259, d_same_day_ly#260, d_same_day_lq#261, d_current_day#262, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : 1320416589,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3466025200,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] "
        },
        "2" : {
          "sign" : -1221756749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 20181084460,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, ratio#0, store_qty#1L, store_wholesale_cost#2, store_sales_price#3, other_chan_qty#4L, other_chan_wholesale_cost#5, other_chan_sales_price#6] "
        },
        "38" : {
          "sign" : 1321542634,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#55, wr_item_sk#56, wr_refunded_customer_sk#57, wr_refunded_cdemo_sk#58, wr_refunded_hdemo_sk#59, wr_refunded_addr_sk#60, wr_returning_customer_sk#61, wr_returning_cdemo_sk#62, wr_returning_hdemo_sk#63, wr_returning_addr_sk#64, wr_web_page_sk#65, wr_reason_sk#66, wr_order_number#67L, wr_return_quantity#68, wr_return_amt#69, wr_return_tax#70, wr_return_amt_inc_tax#71, wr_fee#72, wr_return_ship_cost#73, wr_refunded_cash#74, wr_reversed_charge#75, wr_account_credit#76, wr_net_loss#77, wr_returned_date_sk#78], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : -802666752,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9216,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#239, d_year#245] "
        },
        "30" : {
          "sign" : -181849765,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3454348848,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] "
        },
        "7" : {
          "sign" : 1448184541,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 18056759780,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, ws_wc#10, ws_sp#11] "
        },
        "29" : {
          "sign" : -565874408,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5199037800,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56)) "
        },
        "41" : {
          "sign" : 1293912981,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6648780576,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#140 = d_date_sk#211) "
        },
        "3" : {
          "sign" : -1464355990,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 30802707860,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [ss_sold_year#17 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#18L DESC NULLS LAST, ss_wc#19 DESC NULLS LAST, ss_sp#20 DESC NULLS LAST, other_chan_qty#4L ASC NULLS FIRST, other_chan_wholesale_cost#5 ASC NULLS FIRST, other_chan_sales_price#6 ASC NULLS FIRST, round((cast(ss_qty#18L as double) / cast(coalesce((ws_qty#9L + cs_qty#14L), 1) as double)), 2) ASC NULLS FIRST], true "
        },
        "52" : {
          "sign" : -1665768991,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142)) "
        },
        "28" : {
          "sign" : -843258120,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 5199037800,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnull(wr_order_number#67L) "
        }
      },
      "links" : [ {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Join",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "LogicalRelation",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "LogicalRelation",
        "toId" : 34,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Filter",
        "toId" : 33,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 31,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Join",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Join",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "LogicalRelation",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "LogicalRelation",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Filter",
        "toId" : 48,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 46,
        "fromName" : "Filter",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "LogicalRelation",
        "toId" : 52,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Filter",
        "toId" : 51,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Join",
        "toId" : 43,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Filter",
        "toId" : 42,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Join",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 39,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Aggregate",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Filter",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Sort",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, ratio#0, store_qty#1L, store_wholesale_cost#2, store_sales_price#3, other_chan_qty#4L, other_chan_wholesale_cost#5, other_chan_sales_price#6]\n      +- Sort [ss_sold_year#17 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#18L DESC NULLS LAST, ss_wc#19 DESC NULLS LAST, ss_sp#20 DESC NULLS LAST, other_chan_qty#4L ASC NULLS FIRST, other_chan_wholesale_cost#5 ASC NULLS FIRST, other_chan_sales_price#6 ASC NULLS FIRST, round((cast(ss_qty#18L as double) / cast(coalesce((ws_qty#9L + cs_qty#14L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#18L as double) / cast((coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) as double)), 2) AS ratio#0, ss_qty#18L AS store_qty#1L, ss_wc#19 AS store_wholesale_cost#2, ss_sp#20 AS store_sales_price#3, (coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) AS other_chan_qty#4L, (coalesce(ws_wc#10, 0.00) + coalesce(cs_wc#15, 0.00)) AS other_chan_wholesale_cost#5, (coalesce(ws_sp#11, 0.00) + coalesce(cs_sp#16, 0.00)) AS other_chan_sales_price#6, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, cs_qty#14L]\n            +- Filter ((coalesce(ws_qty#9L, 0) > 0) OR (coalesce(cs_qty#14L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#12 = ss_sold_year#17) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#13 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, ws_wc#10, ws_sp#11]\n                  :  +- Join LeftOuter, (((ws_sold_year#7 = ss_sold_year#17) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#8 = ss_customer_sk#170))\n                  :     :- Aggregate [d_year#245, ss_item_sk#169, ss_customer_sk#170], [d_year#245 AS ss_sold_year#17, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#18L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#20]\n                  :     :  +- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#245]\n                  :     :     +- Join Inner, (ss_sold_date_sk#190 = d_date_sk#239)\n                  :     :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n                  :     :        :  +- Filter isnull(sr_ticket_number#199L)\n                  :     :        :     +- Join LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192))\n                  :     :        :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n                  :     :        :        :  +- Filter (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#295 [ss_sold_date_sk#190])\n                  :     :        :        :     :  +- Project [d_date_sk#239, d_year#245]\n                  :     :        :        :     :     +- Filter ((isnotnull(d_year#245) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                  :     :        :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n                  :     :        :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#168,ss_item_sk#169,ss_customer_sk#170,ss_cdemo_sk#171,ss_hdemo_sk#172,ss_addr_sk#173,ss_store_sk#174,ss_promo_sk#175,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_list_price#179,ss_sales_price#180,ss_ext_discount_amt#181,ss_ext_sales_price#182,ss_ext_wholesale_cost#183,ss_ext_list_price#184,ss_ext_tax#185,ss_coupon_amt#186,ss_net_paid#187,ss_net_paid_inc_tax#188,ss_net_profit#189,ss_sold_date_sk#190] parquet\n                  :     :        :        +- Project [sr_item_sk#192, sr_ticket_number#199L]\n                  :     :        :           +- Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n                  :     :        :              +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#191,sr_item_sk#192,sr_customer_sk#193,sr_cdemo_sk#194,sr_hdemo_sk#195,sr_addr_sk#196,sr_store_sk#197,sr_reason_sk#198,sr_ticket_number#199L,sr_return_quantity#200,sr_return_amt#201,sr_return_tax#202,sr_return_amt_inc_tax#203,sr_fee#204,sr_return_ship_cost#205,sr_refunded_cash#206,sr_reversed_charge#207,sr_store_credit#208,sr_net_loss#209,sr_returned_date_sk#210] parquet\n                  :     :        +- Project [d_date_sk#239, d_year#245]\n                  :     :           +- Filter ((isnotnull(d_year#245) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))\n                  :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#239,d_date_id#240,d_date#241,d_month_seq#242,d_week_seq#243,d_quarter_seq#244,d_year#245,d_dow#246,d_moy#247,d_dom#248,d_qoy#249,d_fy_year#250,d_fy_quarter_seq#251,d_fy_week_seq#252,d_day_name#253,d_quarter_name#254,d_holiday#255,d_weekend#256,d_following_holiday#257,d_first_dom#258,d_last_dom#259,d_same_day_ly#260,d_same_day_lq#261,d_current_day#262,... 4 more fields] parquet\n                  :     +- Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#7, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#8, sum(ws_quantity#38) AS ws_qty#9L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#10, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#11]\n                  :        +- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n                  :           +- Join Inner, (ws_sold_date_sk#54 = d_date_sk#79)\n                  :              :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n                  :              :  +- Filter isnull(wr_order_number#67L)\n                  :              :     +- Join LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56))\n                  :              :        :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n                  :              :        :  +- Filter (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#296 [ws_sold_date_sk#54])\n                  :              :        :     :  +- Project [d_date_sk#79, d_year#85]\n                  :              :        :     :     +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n                  :              :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n                  :              :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#21,ws_ship_date_sk#22,ws_item_sk#23,ws_bill_customer_sk#24,ws_bill_cdemo_sk#25,ws_bill_hdemo_sk#26,ws_bill_addr_sk#27,ws_ship_customer_sk#28,ws_ship_cdemo_sk#29,ws_ship_hdemo_sk#30,ws_ship_addr_sk#31,ws_web_page_sk#32,ws_web_site_sk#33,ws_ship_mode_sk#34,ws_warehouse_sk#35,ws_promo_sk#36,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_list_price#40,ws_sales_price#41,ws_ext_discount_amt#42,ws_ext_sales_price#43,ws_ext_wholesale_cost#44,... 10 more fields] parquet\n                  :              :        +- Project [wr_item_sk#56, wr_order_number#67L]\n                  :              :           +- Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n                  :              :              +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#55,wr_item_sk#56,wr_refunded_customer_sk#57,wr_refunded_cdemo_sk#58,wr_refunded_hdemo_sk#59,wr_refunded_addr_sk#60,wr_returning_customer_sk#61,wr_returning_cdemo_sk#62,wr_returning_hdemo_sk#63,wr_returning_addr_sk#64,wr_web_page_sk#65,wr_reason_sk#66,wr_order_number#67L,wr_return_quantity#68,wr_return_amt#69,wr_return_tax#70,wr_return_amt_inc_tax#71,wr_fee#72,wr_return_ship_cost#73,wr_refunded_cash#74,wr_reversed_charge#75,wr_account_credit#76,wr_net_loss#77,wr_returned_date_sk#78] parquet\n                  :              +- Project [d_date_sk#79, d_year#85]\n                  :                 +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n                  :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n                  +- Aggregate [d_year#217, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#217 AS cs_sold_year#12, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#13, sum(cs_quantity#124) AS cs_qty#14L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#15, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#16]\n                     +- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#217]\n                        +- Join Inner, (cs_sold_date_sk#140 = d_date_sk#211)\n                           :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :  +- Filter isnull(cr_order_number#156L)\n                           :     +- Join LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142))\n                           :        :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :        :  +- Filter (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#297 [cs_sold_date_sk#140])\n                           :        :     :  +- Project [d_date_sk#211, d_year#217]\n                           :        :     :     +- Filter (isnotnull(d_date_sk#211) AND ((d_year#217 = 2000) AND isnotnull(d_year#217)))\n                           :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#211,d_date_id#212,d_date#213,d_month_seq#214,d_week_seq#215,d_quarter_seq#216,d_year#217,d_dow#218,d_moy#219,d_dom#220,d_qoy#221,d_fy_year#222,d_fy_quarter_seq#223,d_fy_week_seq#224,d_day_name#225,d_quarter_name#226,d_holiday#227,d_weekend#228,d_following_holiday#229,d_first_dom#230,d_last_dom#231,d_same_day_ly#232,d_same_day_lq#233,d_current_day#234,... 4 more fields] parquet\n                           :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#107,cs_ship_date_sk#108,cs_bill_customer_sk#109,cs_bill_cdemo_sk#110,cs_bill_hdemo_sk#111,cs_bill_addr_sk#112,cs_ship_customer_sk#113,cs_ship_cdemo_sk#114,cs_ship_hdemo_sk#115,cs_ship_addr_sk#116,cs_call_center_sk#117,cs_catalog_page_sk#118,cs_ship_mode_sk#119,cs_warehouse_sk#120,cs_item_sk#121,cs_promo_sk#122,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_list_price#126,cs_sales_price#127,cs_ext_discount_amt#128,cs_ext_sales_price#129,cs_ext_wholesale_cost#130,... 10 more fields] parquet\n                           :        +- Project [cr_item_sk#142, cr_order_number#156L]\n                           :           +- Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n                           :              +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#141,cr_item_sk#142,cr_refunded_customer_sk#143,cr_refunded_cdemo_sk#144,cr_refunded_hdemo_sk#145,cr_refunded_addr_sk#146,cr_returning_customer_sk#147,cr_returning_cdemo_sk#148,cr_returning_hdemo_sk#149,cr_returning_addr_sk#150,cr_call_center_sk#151,cr_catalog_page_sk#152,cr_ship_mode_sk#153,cr_warehouse_sk#154,cr_reason_sk#155,cr_order_number#156L,cr_return_quantity#157,cr_return_amount#158,cr_return_tax#159,cr_return_amt_inc_tax#160,cr_fee#161,cr_return_ship_cost#162,cr_refunded_cash#163,cr_reversed_charge#164,... 3 more fields] parquet\n                           +- Project [d_date_sk#211, d_year#217]\n                              +- Filter (isnotnull(d_date_sk#211) AND ((d_year#217 = 2000) AND isnotnull(d_year#217)))\n                                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#211,d_date_id#212,d_date#213,d_month_seq#214,d_week_seq#215,d_quarter_seq#216,d_year#217,d_dow#218,d_moy#219,d_dom#220,d_qoy#221,d_fy_year#222,d_fy_quarter_seq#223,d_fy_week_seq#224,d_day_name#225,d_quarter_name#226,d_holiday#227,d_weekend#228,d_following_holiday#229,d_first_dom#230,d_last_dom#231,d_same_day_ly#232,d_same_day_lq#233,d_current_day#234,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 93603563602,
      "inputRowCount" : 540919963
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 961725532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 275728204959736000,
            "rowCount" : 3446602561996700,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "4" : {
            "sign" : -993247305,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 55379618404539112278906400,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "11" : {
            "sign" : 1305316547,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6094715528,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))]) "
          },
          "9" : {
            "sign" : 757954977,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2777294240,
            "rowCount" : 49594540,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))]) "
          },
          "5" : {
            "sign" : 940150851,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 49650692362690238594881600,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "10" : {
            "sign" : -1169654739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3057806620,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))]) "
          },
          "6" : {
            "sign" : -1476465829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 49650692362690238594881600,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : -765561236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 36283198265042866665490400,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 394017389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1982433155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 36283198265042866665490400,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "7" : {
            "sign" : -241552679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 234368974215775600,
            "rowCount" : 3446602561996700,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "3" : {
            "sign" : 1492757730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 55379618404539112278906400,
            "rowCount" : 477410503487406140335400,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- LogicalQueryStage Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))])\n                  :     +- LogicalQueryStage Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))])\n                  +- LogicalQueryStage Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11929816388,
        "inputRowCount" : 257606407
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227412669,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23641,
        "IOBytes" : {
          "Total" : 4859960992,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3848289728,
            "SW" : 1011671264
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 961725532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51683350933030400,
            "rowCount" : 646041886662880,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "4" : {
            "sign" : -993247305,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10380527639372495843528960,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "11" : {
            "sign" : 1305316547,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6094715528,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))]) "
          },
          "9" : {
            "sign" : 757954977,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2777294240,
            "rowCount" : 49594540,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))]) "
          },
          "5" : {
            "sign" : 940150851,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9306679952540858342474240,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "10" : {
            "sign" : -1169654739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 729482432,
            "rowCount" : 13026472,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))]) "
          },
          "6" : {
            "sign" : -1476465829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9306679952540858342474240,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : -765561236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6801035349933704173346560,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 394017389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1982433155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6801035349933704173346560,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "7" : {
            "sign" : -241552679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43930848293075840,
            "rowCount" : 646041886662880,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "3" : {
            "sign" : 1492757730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10380527639372495843528960,
            "rowCount" : 89487307235969791754560,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- LogicalQueryStage Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))])\n                  :     +- LogicalQueryStage Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))])\n                  +- LogicalQueryStage Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9601492200,
        "inputRowCount" : 201137274
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 13,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 12707.0,
        "FinishedTasksDistributionInMs" : [ 2885.0, 3258.0, 3259.0, 3305.0, 3305.0 ]
      },
      "StartTimeInMs" : 1702227415333,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20977,
        "IOBytes" : {
          "Total" : 3988489145,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3316815788,
            "SW" : 671673357
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 961725532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 51683350933030400,
            "rowCount" : 646041886662880,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "4" : {
            "sign" : -993247305,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1927674260515465232466560,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "11" : {
            "sign" : 1305316547,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1440465992,
            "rowCount" : 25722607,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))]) "
          },
          "9" : {
            "sign" : 757954977,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2777294240,
            "rowCount" : 49594540,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))]) "
          },
          "5" : {
            "sign" : 940150851,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1728259681841451587728640,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "10" : {
            "sign" : -1169654739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 729482432,
            "rowCount" : 13026472,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))]) "
          },
          "6" : {
            "sign" : -1476465829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1728259681841451587728640,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : -765561236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1262958998268753083340160,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 394017389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1982433155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1262958998268753083340160,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "7" : {
            "sign" : -241552679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43930848293075840,
            "rowCount" : 646041886662880,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "3" : {
            "sign" : 1492757730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1927674260515465232466560,
            "rowCount" : 16617881556167803728160,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- LogicalQueryStage Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))])\n                  :     +- LogicalQueryStage Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))])\n                  +- LogicalQueryStage Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314], HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4947242664,
        "inputRowCount" : 88343619
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227418791,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17519,
        "IOBytes" : {
          "Total" : 2305568915,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2305568915,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -512717141,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#347, d_year#353], BroadcastQueryStage 1 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [d_date_sk#347, d_year#353], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1051504,
        "inputRowCount" : 366
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227360852,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 75458,
        "IOBytes" : {
          "Total" : 13439785808,
          "Details" : {
            "IR" : 1634240544,
            "IW" : 0,
            "SR" : 5902772632,
            "SW" : 5902772632
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 1317206618,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#142, cr_order_number#156L], ShuffleQueryStage 8 "
          },
          "12" : {
            "sign" : -2003406201,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 63713186541024480,
            "rowCount" : 1592829663525612,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] "
          },
          "8" : {
            "sign" : -438718456,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27329181874789599288,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "19" : {
            "sign" : -298942369,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1525684521248312400,
            "rowCount" : 38142113031207810,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85] "
          },
          "23" : {
            "sign" : -373544487,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6252805414952100,
            "rowCount" : 104213423582535,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56)) "
          },
          "4" : {
            "sign" : -1528516039,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33301323564006110087,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "15" : {
            "sign" : 177405939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3539423488,
            "rowCount" : 55303492,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190], ShuffleQueryStage 0 "
          },
          "11" : {
            "sign" : 113863411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27982831528817951616,
            "rowCount" : 582975656850373992,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#190 = d_date_sk#347) "
          },
          "9" : {
            "sign" : 1406420021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25650928901416455648,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318] "
          },
          "33" : {
            "sign" : -1485710154,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1829098880,
            "rowCount" : 28579670,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140], ShuffleQueryStage 7 "
          },
          "22" : {
            "sign" : -890437387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 6252805414952100,
            "rowCount" : 104213423582535,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(wr_order_number#67L) "
          },
          "26" : {
            "sign" : 804725284,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#79, d_year#85], BroadcastQueryStage 6 "
          },
          "13" : {
            "sign" : -1500551176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 95569779811536720,
            "rowCount" : 1592829663525612,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(sr_ticket_number#199L) "
          },
          "24" : {
            "sign" : -1306910802,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 926420160,
            "rowCount" : 14475315,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54], ShuffleQueryStage 3 "
          },
          "35" : {
            "sign" : 2037936803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#319, d_year#325], BroadcastQueryStage 10 "
          },
          "16" : {
            "sign" : -131653621,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#192, sr_ticket_number#199L], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : 1043445887,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29856359057384788354,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "10" : {
            "sign" : -660651402,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23319026274014959680,
            "rowCount" : 582975656850373992,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353] "
          },
          "21" : {
            "sign" : -345812028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4168536943301400,
            "rowCount" : 104213423582535,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] "
          },
          "32" : {
            "sign" : -183361484,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24689100088724400,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142)) "
          },
          "6" : {
            "sign" : 1773354909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29856359057384788354,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : -1605162968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 21818108541935037643,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -512717110,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#347, d_year#353], BroadcastQueryStage 2 "
          },
          "25" : {
            "sign" : -811855113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 172785336,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#56, wr_order_number#67L], ShuffleQueryStage 4 "
          },
          "14" : {
            "sign" : -1141461086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 95569779811536720,
            "rowCount" : 1592829663525612,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192)) "
          },
          "31" : {
            "sign" : 455678261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 24689100088724400,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(cr_order_number#156L) "
          },
          "0" : {
            "sign" : -385051793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 34009863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1830821425497974880,
            "rowCount" : 38142113031207810,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#54 = d_date_sk#79) "
          },
          "27" : {
            "sign" : 1056221085,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 6626554463813628960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314] "
          },
          "2" : {
            "sign" : -1675605947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21818108541935037643,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "18" : {
            "sign" : -1244951989,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1678252973373143640,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309] "
          },
          "30" : {
            "sign" : -905822914,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16459400059149600,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
          },
          "7" : {
            "sign" : 1305089605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23229804593571159394,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "29" : {
            "sign" : 144142873,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7228968505978504320,
            "rowCount" : 150603510541218840,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#140 = d_date_sk#319) "
          },
          "3" : {
            "sign" : -32683554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 33301323564006110087,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          },
          "28" : {
            "sign" : 950968970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6024140421648753600,
            "rowCount" : 150603510541218840,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325] "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Join",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 32,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Join",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Join",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Aggregate",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318]\n                  :     :  +- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353]\n                  :     :     +- Join Inner, (ss_sold_date_sk#190 = d_date_sk#347)\n                  :     :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n                  :     :        :  +- Filter isnull(sr_ticket_number#199L)\n                  :     :        :     +- Join LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192))\n                  :     :        :        :- LogicalQueryStage Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190], ShuffleQueryStage 0\n                  :     :        :        +- LogicalQueryStage Project [sr_item_sk#192, sr_ticket_number#199L], ShuffleQueryStage 1\n                  :     :        +- LogicalQueryStage Project [d_date_sk#347, d_year#353], BroadcastQueryStage 2\n                  :     +- Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309]\n                  :        +- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n                  :           +- Join Inner, (ws_sold_date_sk#54 = d_date_sk#79)\n                  :              :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n                  :              :  +- Filter isnull(wr_order_number#67L)\n                  :              :     +- Join LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56))\n                  :              :        :- LogicalQueryStage Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54], ShuffleQueryStage 3\n                  :              :        +- LogicalQueryStage Project [wr_item_sk#56, wr_order_number#67L], ShuffleQueryStage 4\n                  :              +- LogicalQueryStage Project [d_date_sk#79, d_year#85], BroadcastQueryStage 6\n                  +- Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314]\n                     +- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n                        +- Join Inner, (cs_sold_date_sk#140 = d_date_sk#319)\n                           :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :  +- Filter isnull(cr_order_number#156L)\n                           :     +- Join LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142))\n                           :        :- LogicalQueryStage Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140], ShuffleQueryStage 7\n                           :        +- LogicalQueryStage Project [cr_item_sk#142, cr_order_number#156L], ShuffleQueryStage 8\n                           +- LogicalQueryStage Project [d_date_sk#319, d_year#325], BroadcastQueryStage 10\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7450077480,
        "inputRowCount" : 148758397
      },
      "PD" : {
        "4" : [ 4441910, 4472317, 4436183, 4390995, 4458334, 4440267, 4443553, 4472317, 4483014, 4440267, 4446880, 4458334, 4423843, 4439469, 4459977, 4476401, 4443553, 4501081, 4476401, 4488741, 4488741, 4448024, 4423045, 4437826, 4454250, 4455893, 4441910, 4476401, 4454250, 4458334, 4488741, 4459977, 4452607, 4470674, 4486599, 4443553, 4459977, 4459977, 4501081, 4410705, 4488741, 4488741, 4501081, 4443553, 4459977, 4453751, 4454250, 4488741, 4476401, 4425486, 4450166, 4488741, 4498939, 4454250, 4459977, 4441910, 4472317, 4425486, 4425486, 4454250, 4478930, 4483014, 4488741, 4453751, 4455893, 4476401, 4458334, 4459977, 4501081, 4472317, 4418116, 4480872, 4435684, 4459977, 4480872, 4425486, 4458334, 4464448, 4459977, 4459977, 4458334, 4480872, 4437826, 4470674, 4488741, 4454250, 4443553, 4484657, 4459977, 4455893, 4472317, 4472317, 4472317, 4441910, 4441910, 4433742, 4436183, 4498939, 4476401, 4458334, 4425486, 4459977, 4455893, 4443553, 4439469, 4459977, 4501081, 4476401, 4476401, 4425486, 4470674, 4468233, 4472317, 4458334, 4434540, 4446381, 4484657, 4459977, 4483014, 4441910, 4423843, 4472317, 4486599, 4488741, 4448523, 4498939, 4458334, 4454250, 4472317, 4434540, 4401692, 4488741, 4455893, 4472317, 4425486, 4488741, 4476401, 4478044, 4476401, 4470674, 4488741, 4488741, 4459977, 4470674, 4458334, 4443553, 4483014, 4458334, 4488741, 4441910, 4488741, 4476401, 4419759, 4459977, 4468532, 4466590, 4403335, 4468233, 4484657, 4458334, 4427129, 4443553, 4488741, 4440267, 4455893, 4466590, 4472317, 4458334, 4476401, 4470674, 4472317, 4441910, 4454250, 4443553, 4441910, 4476401, 4458334, 4458334, 4470674, 4483014, 4472317, 4459977, 4454250, 4476401, 4488741, 4488741, 4470674, 4468233, 4459977, 4472317, 4484657, 4443553, 4425486, 4488741, 4455893, 4472317, 4484657, 4458334, 4425486, 4498939 ],
        "1" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "0" : [ 8933398, 8931830, 8921684, 8921684, 8931830, 9007556, 8889678, 8911538, 8943544, 8911538, 8997410, 8857672, 8889678, 8965404, 8975550, 8921684, 8975550, 8921684, 9007556, 8975550, 8921684, 8943544, 9051276, 8921684, 9007556, 8985696, 8985696, 8943544, 8997410, 8997410, 8943544, 8997410, 8879532, 8857672, 8997410, 8963836, 8943544, 8975550, 8921684, 8921684, 8911538, 9029416, 9009124, 8943544, 8953690, 8899824, 8847526, 8921684, 8857672, 8899824, 9007556, 8985696, 8955258, 8953690, 8943544, 8965404, 8985696, 8889678, 8921684, 8943544, 8953690, 8965404, 8953690, 8943544, 8911538, 8975550, 9019270, 8943544, 8921684, 8889678, 8975550, 8911538, 8911538, 9041130, 8921684, 8965404, 8911538, 8943544, 8987264, 8955258, 8953690, 8987264, 8847526, 8997410, 8889678, 8975550, 8933398, 8965404, 8975550, 8975550, 8899824, 8921684, 8965404, 8931830, 8963836, 8965404, 8899824, 8911538, 8835812, 8943492, 8931830, 8921684, 8953690, 8985696, 8975550, 9019270, 8867818, 8901392, 8931830, 8889678, 9041130, 8911538, 8953690, 8921684, 8943544, 8879532, 8985696, 9029416, 8953690, 8899824, 8879532, 8943544, 8975550, 8899824, 8901392, 8867818, 8953690, 8953690, 8921684, 8953690, 8931830, 8921684, 8943544, 8953690, 8921684, 8921684, 8965404, 8953690, 8975550, 8965404, 8931830, 9051276, 8889678, 8921684, 8889678, 8943544, 8985696, 8965404, 8987264, 8911538, 8931830, 8901392, 9029416, 8975550, 8975550, 8921684, 9019270, 8899824, 8965404, 8953690, 8975550, 8921684, 8911538, 8921684, 8987264, 8911538, 8943544, 8965404, 8965404, 8965404, 9007556, 8911538, 8943544, 8901392, 8943544, 8953690, 8911538, 8953690, 8931830, 8997410, 8953690, 8921684, 8921684, 8965404, 8911538, 8901392, 8931830, 8921684, 8867818, 8901392, 8975550, 8955258, 8923252, 8911538, 8943544, 8921684, 8931830, 8975550, 8889678, 8965404 ],
        "2" : [ 2357815, 2363289, 2377225, 2348028, 2368103, 2341650, 2369201, 2399995, 2368796, 2377225, 2376233, 2353140, 2346865, 2363289, 2387286, 2348098, 2329715, 2390798, 2385291, 2362959, 2382589, 2369564, 2369564, 2378458, 2354999, 2362959, 2359378, 2368103, 2356093, 2330874, 2342659, 2360442, 2368103, 2354860, 2343317, 2342190, 2348795, 2363289, 2372849, 2378458, 2347199, 2363652, 2340697, 2360108, 2398534, 2319463, 2358145, 2377225, 2328947, 2350079, 2341650, 2350484, 2393720, 2354530, 2376862, 2359741, 2356093, 2355223, 2371388, 2369201, 2363289, 2390798, 2342049, 2376862, 2355628, 2376532, 2363652, 2371718, 2340658, 2365653, 2323943, 2350079, 2328947, 2356861, 2346865, 2366713, 2376862, 2398534, 2342520, 2385291, 2355991, 2364057, 2372081, 2364522, 2368871, 2342190, 2356093, 2368796, 2362660, 2368871, 2368103, 2349716, 2385291, 2386887, 2377225, 2377624, 2352447, 2354860, 2334888, 2356093, 2360438, 2369201, 2376862, 2346570, 2364522, 2364885, 2368103, 2376862, 2358145, 2386524, 2377225, 2377225, 2336911, 2350949, 2363289, 2376862, 2368572, 2344050, 2341426, 2342055, 2372081, 2350359, 2373314, 2378458, 2355223, 2344711, 2354860, 2381026, 2361206, 2350484, 2363289, 2368146, 2354860, 2398534, 2369195, 2348102, 2373314, 2375107, 2370030, 2350079, 2351312, 2362959, 2360438, 2350949, 2398534, 2348028, 2332962, 2380147, 2359048, 2390435, 2350949, 2360438, 2350949, 2358145, 2342883, 2355628, 2348358, 2347199, 2318695, 2380147, 2349087, 2363652, 2368103, 2348358, 2354530, 2355223, 2355298, 2354530, 2363289, 2376862, 2356093, 2376862, 2372081, 2365259, 2369564, 2347562, 2381676, 2362959, 2364522, 2359777, 2367804, 2364522, 2334785, 2406664, 2359741, 2342055, 2382006, 2337046, 2358145, 2372081, 2350949, 2351312, 2363289, 2347562, 2384961, 2337807, 2369564, 2384662, 2355223, 2368433 ],
        "3" : [ 438182, 439381, 438645, 435850, 436018, 433627, 439470, 434654, 436384, 436438, 437563, 433044, 441265, 437560, 432503, 439204, 434738, 434968, 437375, 441742, 435944, 432099, 439245, 437935, 438335, 437688, 435541, 439501, 438177, 442288, 438286, 442104, 440877, 436426, 437433, 433400, 435179, 435350, 434741, 439597, 439899, 443970, 438363, 440498, 436960, 434515, 436386, 436792, 435639, 438808, 439876, 434813, 434995, 438225, 437200, 431471, 438409, 436219, 434583, 434175, 434776, 438028, 434210, 438803, 441101, 437679, 429720, 439014, 436574, 433112, 442502, 435264, 439262, 436700, 436989, 435856, 436393, 435683, 435366, 435635, 434835, 431978, 434320, 439897, 438872, 440355, 437192, 436471, 433685, 436287, 436868, 435794, 435245, 435508, 434892, 436205, 435534, 436561, 433090, 439772, 441529, 435801, 438760, 440747, 437124, 440002, 435800, 435543, 435338, 438406, 436176, 441106, 433278, 443572, 438167, 440063, 433800, 434159, 436092, 437055, 440215, 437174, 439907, 440460, 436632, 436772, 436441, 438399, 437571, 432392, 437571, 442188, 439234, 436993, 438649, 441484, 439101, 435200, 442139, 434573, 437237, 431232, 434804, 439818, 437041, 439685, 437510, 433388, 438421, 436651, 440160, 440395, 435357, 434888, 434530, 440202, 436869, 438823, 433968, 439093, 437821, 440881, 441190, 439737, 438582, 436133, 434557, 436516, 433671, 439527, 437961, 436460, 440486, 437457, 435001, 436255, 437555, 432680, 436513, 442833, 434719, 441605, 439882, 437240, 433503, 435463, 437830, 441638, 436253, 437688, 442852, 435509, 440916, 437548, 435789, 442311, 433956, 438655, 443387, 436254 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227397057,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 39253,
        "IOBytes" : {
          "Total" : 8523118682,
          "Details" : {
            "IR" : 148438594,
            "IW" : 0,
            "SR" : 5902772632,
            "SW" : 2471907456
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 950968970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6024140421648753600,
            "rowCount" : 150603510541218840,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325] "
          },
          "8" : {
            "sign" : 961725532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21243246800,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "19" : {
            "sign" : 2037936803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#319, d_year#325], BroadcastQueryStage 10 "
          },
          "4" : {
            "sign" : 913254521,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7391156922086202825,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "15" : {
            "sign" : 455678261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 24689100088724400,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(cr_order_number#156L) "
          },
          "11" : {
            "sign" : 1056221085,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 6626554463813628960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314] "
          },
          "9" : {
            "sign" : 757954977,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))]) "
          },
          "13" : {
            "sign" : 144142873,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7228968505978504320,
            "rowCount" : 150603510541218840,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#140 = d_date_sk#319) "
          },
          "16" : {
            "sign" : -183361484,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 24689100088724400,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142)) "
          },
          "5" : {
            "sign" : 188756509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 6626554481870388740,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "10" : {
            "sign" : -1169654739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3057806620,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))]) "
          },
          "6" : {
            "sign" : 103099733,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6626554481870388740,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : 1806266260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4842482121366822540,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1485710154,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1829098880,
            "rowCount" : 28579670,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140], ShuffleQueryStage 7 "
          },
          "14" : {
            "sign" : -905822914,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16459400059149600,
            "rowCount" : 411485001478740,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
          },
          "0" : {
            "sign" : 1584830851,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1531611603,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4842482121366822540,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "18" : {
            "sign" : 1317206618,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#142, cr_order_number#156L], ShuffleQueryStage 8 "
          },
          "7" : {
            "sign" : -241552679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18056759780,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "3" : {
            "sign" : 1736580830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7391156922086202825,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- LogicalQueryStage Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318], HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))])\n                  :     +- LogicalQueryStage Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309], HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))])\n                  +- Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314]\n                     +- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n                        +- Join Inner, (cs_sold_date_sk#140 = d_date_sk#319)\n                           :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :  +- Filter isnull(cr_order_number#156L)\n                           :     +- Join LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142))\n                           :        :- LogicalQueryStage Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140], ShuffleQueryStage 7\n                           :        +- LogicalQueryStage Project [cr_item_sk#142, cr_order_number#156L], ShuffleQueryStage 8\n                           +- LogicalQueryStage Project [d_date_sk#319, d_year#325], BroadcastQueryStage 10\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16917290472,
        "inputRowCount" : 378014048
      },
      "PD" : {
        "5" : [ 880445, 868631, 875514, 875120, 876848, 874482, 866292, 883361, 868427, 876726, 873517, 866858, 868125, 873115, 869946, 871866, 871895, 874060, 873487, 871552, 876290, 883418, 866639, 869726, 868914, 868937, 884175, 875835, 864851, 869240, 879264, 872600, 864877, 877426, 873363, 866266, 881284, 862850, 875584, 870335, 872298, 876127, 872860, 885993, 864051, 881751, 863144, 878802, 874846, 867220, 876149, 871062, 875696, 869826, 867505, 863710, 867587, 872280, 868237, 879889, 874312, 870021, 878811, 868179, 877378, 874903, 874368, 877603, 877998, 868300, 876560, 872523, 865542, 881784, 868507, 872354, 876106, 874398, 872746, 877435, 874574, 874027, 875390, 873075, 872477, 869852, 860871, 877640, 873585, 872800, 870977, 871899, 877004, 866280, 869402, 876340, 866007, 873188, 877915, 872079, 874729, 875174, 868618, 866733, 868820, 875369, 867040, 874919, 874642, 871852, 868254, 868033, 870111, 868237, 875035, 869217, 870870, 864159, 872979, 873245, 871264, 865133, 873433, 867686, 868294, 871994, 872563, 865658, 870195, 867885, 874694, 870736, 878179, 871379, 872853, 875889, 871686, 873477, 871132, 871336, 872388, 865728, 870914, 881579, 874880, 881015, 870312, 869751, 874375, 872634, 872989, 874456, 870350, 870065, 869076, 865089, 868400, 875381, 879102, 879328, 878191, 873863, 868405, 870798, 873918, 873032, 872038, 873661, 869133, 875144, 876061, 868157, 872881, 873675, 871343, 872020, 873094, 875095, 878960, 874700, 878100, 872364, 875970, 870857, 868092, 878273, 874306, 867224, 869653, 879925, 866211, 879829, 875772, 872716, 870577, 866745, 874097, 859825, 872112, 873858 ],
        "4" : [ 4441910, 4472317, 4436183, 4390995, 4458334, 4440267, 4443553, 4472317, 4483014, 4440267, 4446880, 4458334, 4423843, 4439469, 4459977, 4476401, 4443553, 4501081, 4476401, 4488741, 4488741, 4448024, 4423045, 4437826, 4454250, 4455893, 4441910, 4476401, 4454250, 4458334, 4488741, 4459977, 4452607, 4470674, 4486599, 4443553, 4459977, 4459977, 4501081, 4410705, 4488741, 4488741, 4501081, 4443553, 4459977, 4453751, 4454250, 4488741, 4476401, 4425486, 4450166, 4488741, 4498939, 4454250, 4459977, 4441910, 4472317, 4425486, 4425486, 4454250, 4478930, 4483014, 4488741, 4453751, 4455893, 4476401, 4458334, 4459977, 4501081, 4472317, 4418116, 4480872, 4435684, 4459977, 4480872, 4425486, 4458334, 4464448, 4459977, 4459977, 4458334, 4480872, 4437826, 4470674, 4488741, 4454250, 4443553, 4484657, 4459977, 4455893, 4472317, 4472317, 4472317, 4441910, 4441910, 4433742, 4436183, 4498939, 4476401, 4458334, 4425486, 4459977, 4455893, 4443553, 4439469, 4459977, 4501081, 4476401, 4476401, 4425486, 4470674, 4468233, 4472317, 4458334, 4434540, 4446381, 4484657, 4459977, 4483014, 4441910, 4423843, 4472317, 4486599, 4488741, 4448523, 4498939, 4458334, 4454250, 4472317, 4434540, 4401692, 4488741, 4455893, 4472317, 4425486, 4488741, 4476401, 4478044, 4476401, 4470674, 4488741, 4488741, 4459977, 4470674, 4458334, 4443553, 4483014, 4458334, 4488741, 4441910, 4488741, 4476401, 4419759, 4459977, 4468532, 4466590, 4403335, 4468233, 4484657, 4458334, 4427129, 4443553, 4488741, 4440267, 4455893, 4466590, 4472317, 4458334, 4476401, 4470674, 4472317, 4441910, 4454250, 4443553, 4441910, 4476401, 4458334, 4458334, 4470674, 4483014, 4472317, 4459977, 4454250, 4476401, 4488741, 4488741, 4470674, 4468233, 4459977, 4472317, 4484657, 4443553, 4425486, 4488741, 4455893, 4472317, 4484657, 4458334, 4425486, 4498939 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 9153.0,
        "FinishedTasksDistributionInMs" : [ 4568.0, 4568.0, 4585.0, 4585.0, 4585.0 ]
      },
      "StartTimeInMs" : 1702227404126,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 32184,
        "IOBytes" : {
          "Total" : 8208341547,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 5902772632,
            "SW" : 2305568915
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 887829238,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5199037800,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 5199037800,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(wr_order_number#67L) "
          },
          "5" : {
            "sign" : -2140020134,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5199037800,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 5199037800,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56)) "
          },
          "1" : {
            "sign" : -922788475,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2779824200,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85] "
          },
          "0" : {
            "sign" : -2013147579,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3057806620,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 3057806620,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309] "
          },
          "2" : {
            "sign" : -1976035327,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3335789040,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 3335789040,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#54 = d_date_sk#79) "
          },
          "3" : {
            "sign" : 1990308879,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3466025200,
                "rowCount" : 86650630
              },
              "compileTime" : {
                "sizeInBytes" : 3466025200,
                "rowCount" : 86650630
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309]\n+- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n   +- Join Inner, (ws_sold_date_sk#54 = d_date_sk#79)\n      :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n      :  +- Filter isnull(wr_order_number#67L)\n      :     +- Join LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56))\n      :        :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n      :        :  +- Filter (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#397 [ws_sold_date_sk#54])\n      :        :     :  +- Project [d_date_sk#79, d_year#85]\n      :        :     :     +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n      :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n      :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#21,ws_ship_date_sk#22,ws_item_sk#23,ws_bill_customer_sk#24,ws_bill_cdemo_sk#25,ws_bill_hdemo_sk#26,ws_bill_addr_sk#27,ws_ship_customer_sk#28,ws_ship_cdemo_sk#29,ws_ship_hdemo_sk#30,ws_ship_addr_sk#31,ws_web_page_sk#32,ws_web_site_sk#33,ws_ship_mode_sk#34,ws_warehouse_sk#35,ws_promo_sk#36,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_list_price#40,ws_sales_price#41,ws_ext_discount_amt#42,ws_ext_sales_price#43,ws_ext_wholesale_cost#44,... 10 more fields] parquet\n      :        +- Project [wr_item_sk#56, wr_order_number#67L]\n      :           +- Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n      :              +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#55,wr_item_sk#56,wr_refunded_customer_sk#57,wr_refunded_cdemo_sk#58,wr_refunded_hdemo_sk#59,wr_refunded_addr_sk#60,wr_returning_customer_sk#61,wr_returning_cdemo_sk#62,wr_returning_hdemo_sk#63,wr_returning_addr_sk#64,wr_web_page_sk#65,wr_reason_sk#66,wr_order_number#67L,wr_return_quantity#68,wr_return_amt#69,wr_return_tax#70,wr_return_amt_inc_tax#71,wr_fee#72,wr_return_ship_cost#73,wr_refunded_cash#74,wr_reversed_charge#75,wr_account_credit#76,wr_net_loss#77,wr_returned_date_sk#78] parquet\n      +- Project [d_date_sk#79, d_year#85]\n         +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 438923238,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [wr_item_sk#56, wr_order_number#67L] Arguments: [wr_order_number#67L ASC NULLS FIRST, wr_item_sk#56 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : -1356823918,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 5199037800,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54, wr_item_sk#56, wr_order_number#67L] Condition : isnull(wr_order_number#67L) "
          },
          "9" : {
            "sign" : -1390468111,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 172785336,
            "rowCount" : 7199389,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [wr_item_sk#56, wr_order_number#67L] Arguments: 4 "
          },
          "5" : {
            "sign" : -760109894,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 5199037800,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ws_order_number#37L, ws_item_sk#23] Right keys [2]: [wr_order_number#67L, wr_item_sk#56] Join type: LeftOuter Join condition: None "
          },
          "10" : {
            "sign" : -1355606480,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#79, d_year#85] Arguments: 6 "
          },
          "6" : {
            "sign" : 455857952,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] Arguments: [ws_order_number#37L ASC NULLS FIRST, ws_item_sk#23 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -1907390900,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2779824200,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85] Input [8]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54, d_date_sk#79, d_year#85] "
          },
          "0" : {
            "sign" : 1479427756,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3057806620,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85] Keys [3]: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24] Functions [3]: [partial_sum(ws_quantity#38), partial_sum(UnscaledValue(ws_wholesale_cost#39)), partial_sum(UnscaledValue(ws_sales_price#41))] Aggregate Attributes [3]: [sum#405L, sum#406L, sum#407L] Results [6]: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, sum#408L, sum#409L, sum#410L] "
          },
          "2" : {
            "sign" : 1167024284,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3335789040,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#54] Right keys [1]: [d_date_sk#79] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -2030030292,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 926420160,
            "rowCount" : 14475315,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] Arguments: 3 "
          },
          "3" : {
            "sign" : -169672209,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3466025200,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] Input [9]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54, wr_item_sk#56, wr_order_number#67L] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[partial_sum(ws_quantity#38), partial_sum(UnscaledValue(ws_wholesale_cost#39)), partial_sum(UnscaledValue(ws_sales_price#41))], output=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, sum#408L, sum#409L, sum#410L])\n+- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n   +- BroadcastHashJoin [ws_sold_date_sk#54], [d_date_sk#79], Inner, BuildRight, false\n      :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n      :  +- Filter isnull(wr_order_number#67L)\n      :     +- SortMergeJoin [ws_order_number#37L, ws_item_sk#23], [wr_order_number#67L, wr_item_sk#56], LeftOuter\n      :        :- Sort [ws_order_number#37L ASC NULLS FIRST, ws_item_sk#23 ASC NULLS FIRST], false, 0\n      :        :  +- ShuffleQueryStage 3\n      :        :     +- Exchange hashpartitioning(ws_order_number#37L, ws_item_sk#23, 200), ENSURE_REQUIREMENTS, [plan_id=477]\n      :        :        +- *(4) Filter (isnotnull(ws_item_sk#23) AND isnotnull(ws_bill_customer_sk#24))\n      :        :           +- *(4) ColumnarToRow\n      :        :              +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#23,ws_bill_customer_sk#24,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_sales_price#41,ws_sold_date_sk#54] Batched: true, DataFilters: [isnotnull(ws_item_sk#23), isnotnull(ws_bill_customer_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#54), dynamicpruningexpression(ws_sold_date_sk#54 IN dynamicpruning#396)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quantity:int,ws_wholesale...\n      :        :                    +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n      :        +- Sort [wr_order_number#67L ASC NULLS FIRST, wr_item_sk#56 ASC NULLS FIRST], false, 0\n      :           +- ShuffleQueryStage 4\n      :              +- Exchange hashpartitioning(wr_order_number#67L, wr_item_sk#56, 200), ENSURE_REQUIREMENTS, [plan_id=496]\n      :                 +- *(5) Project [wr_item_sk#56, wr_order_number#67L]\n      :                    +- *(5) Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n      :                       +- *(5) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#56,wr_order_number#67L,wr_returned_date_sk#78] Batched: true, DataFilters: [isnotnull(wr_order_number#67L), isnotnull(wr_item_sk#56)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>\n      +- BroadcastQueryStage 6\n         +- ReusedExchange [d_date_sk#79, d_year#85], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1100257000,
        "inputRowCount" : 21675070
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 2357815, 2363289, 2377225, 2348028, 2368103, 2341650, 2369201, 2399995, 2368796, 2377225, 2376233, 2353140, 2346865, 2363289, 2387286, 2348098, 2329715, 2390798, 2385291, 2362959, 2382589, 2369564, 2369564, 2378458, 2354999, 2362959, 2359378, 2368103, 2356093, 2330874, 2342659, 2360442, 2368103, 2354860, 2343317, 2342190, 2348795, 2363289, 2372849, 2378458, 2347199, 2363652, 2340697, 2360108, 2398534, 2319463, 2358145, 2377225, 2328947, 2350079, 2341650, 2350484, 2393720, 2354530, 2376862, 2359741, 2356093, 2355223, 2371388, 2369201, 2363289, 2390798, 2342049, 2376862, 2355628, 2376532, 2363652, 2371718, 2340658, 2365653, 2323943, 2350079, 2328947, 2356861, 2346865, 2366713, 2376862, 2398534, 2342520, 2385291, 2355991, 2364057, 2372081, 2364522, 2368871, 2342190, 2356093, 2368796, 2362660, 2368871, 2368103, 2349716, 2385291, 2386887, 2377225, 2377624, 2352447, 2354860, 2334888, 2356093, 2360438, 2369201, 2376862, 2346570, 2364522, 2364885, 2368103, 2376862, 2358145, 2386524, 2377225, 2377225, 2336911, 2350949, 2363289, 2376862, 2368572, 2344050, 2341426, 2342055, 2372081, 2350359, 2373314, 2378458, 2355223, 2344711, 2354860, 2381026, 2361206, 2350484, 2363289, 2368146, 2354860, 2398534, 2369195, 2348102, 2373314, 2375107, 2370030, 2350079, 2351312, 2362959, 2360438, 2350949, 2398534, 2348028, 2332962, 2380147, 2359048, 2390435, 2350949, 2360438, 2350949, 2358145, 2342883, 2355628, 2348358, 2347199, 2318695, 2380147, 2349087, 2363652, 2368103, 2348358, 2354530, 2355223, 2355298, 2354530, 2363289, 2376862, 2356093, 2376862, 2372081, 2365259, 2369564, 2347562, 2381676, 2362959, 2364522, 2359777, 2367804, 2364522, 2334785, 2406664, 2359741, 2342055, 2382006, 2337046, 2358145, 2372081, 2350949, 2351312, 2363289, 2347562, 2384961, 2337807, 2369564, 2384662, 2355223, 2368433 ],
        "3" : [ 438182, 439381, 438645, 435850, 436018, 433627, 439470, 434654, 436384, 436438, 437563, 433044, 441265, 437560, 432503, 439204, 434738, 434968, 437375, 441742, 435944, 432099, 439245, 437935, 438335, 437688, 435541, 439501, 438177, 442288, 438286, 442104, 440877, 436426, 437433, 433400, 435179, 435350, 434741, 439597, 439899, 443970, 438363, 440498, 436960, 434515, 436386, 436792, 435639, 438808, 439876, 434813, 434995, 438225, 437200, 431471, 438409, 436219, 434583, 434175, 434776, 438028, 434210, 438803, 441101, 437679, 429720, 439014, 436574, 433112, 442502, 435264, 439262, 436700, 436989, 435856, 436393, 435683, 435366, 435635, 434835, 431978, 434320, 439897, 438872, 440355, 437192, 436471, 433685, 436287, 436868, 435794, 435245, 435508, 434892, 436205, 435534, 436561, 433090, 439772, 441529, 435801, 438760, 440747, 437124, 440002, 435800, 435543, 435338, 438406, 436176, 441106, 433278, 443572, 438167, 440063, 433800, 434159, 436092, 437055, 440215, 437174, 439907, 440460, 436632, 436772, 436441, 438399, 437571, 432392, 437571, 442188, 439234, 436993, 438649, 441484, 439101, 435200, 442139, 434573, 437237, 431232, 434804, 439818, 437041, 439685, 437510, 433388, 438421, 436651, 440160, 440395, 435357, 434888, 434530, 440202, 436869, 438823, 433968, 439093, 437821, 440881, 441190, 439737, 438582, 436133, 434557, 436516, 433671, 439527, 437961, 436460, 440486, 437457, 435001, 436255, 437555, 432680, 436513, 442833, 434719, 441605, 439882, 437240, 433503, 435463, 437830, 441638, 436253, 437688, 442852, 435509, 440916, 437548, 435789, 442311, 433956, 438655, 443387, 436254 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 17809,
        "TotalTasksDurationInMs" : 34943,
        "IOBytes" : {
          "Total" : 871471847,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 531473940,
            "SW" : 339997907
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1980174139,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 143987780,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 143987780,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_item_sk#56, wr_order_number#67L] "
          },
          "1" : {
            "sign" : -1019564740,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56)) "
          },
          "2" : {
            "sign" : 1321542634,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#55, wr_item_sk#56, wr_refunded_customer_sk#57, wr_refunded_cdemo_sk#58, wr_refunded_hdemo_sk#59, wr_refunded_addr_sk#60, wr_returning_customer_sk#61, wr_returning_cdemo_sk#62, wr_returning_hdemo_sk#63, wr_returning_addr_sk#64, wr_web_page_sk#65, wr_reason_sk#66, wr_order_number#67L, wr_return_quantity#68, wr_return_amt#69, wr_return_tax#70, wr_return_amt_inc_tax#71, wr_fee#72, wr_return_ship_cost#73, wr_refunded_cash#74, wr_reversed_charge#75, wr_account_credit#76, wr_net_loss#77, wr_returned_date_sk#78], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#56, wr_order_number#67L]\n+- Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#55,wr_item_sk#56,wr_refunded_customer_sk#57,wr_refunded_cdemo_sk#58,wr_refunded_hdemo_sk#59,wr_refunded_addr_sk#60,wr_returning_customer_sk#61,wr_returning_cdemo_sk#62,wr_returning_hdemo_sk#63,wr_returning_addr_sk#64,wr_web_page_sk#65,wr_reason_sk#66,wr_order_number#67L,wr_return_quantity#68,wr_return_amt#69,wr_return_tax#70,wr_return_amt_inc_tax#71,wr_fee#72,wr_return_ship_cost#73,wr_refunded_cash#74,wr_reversed_charge#75,wr_account_credit#76,wr_net_loss#77,wr_returned_date_sk#78] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 318891384,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 143987780,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [wr_item_sk#56, wr_order_number#67L] Input [3]: [wr_item_sk#56, wr_order_number#67L, wr_returned_date_sk#78] "
          },
          "1" : {
            "sign" : -557632351,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 143987780,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [wr_item_sk#56, wr_order_number#67L, wr_returned_date_sk#78] Condition : (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56)) "
          },
          "2" : {
            "sign" : -2083144397,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 143987780,
            "rowCount" : 7199389,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [3]: [wr_item_sk#56, wr_order_number#67L, wr_returned_date_sk#78] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)] ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#56, wr_order_number#67L]\n+- Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n   +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#56,wr_order_number#67L,wr_returned_date_sk#78] Batched: true, DataFilters: [isnotnull(wr_order_number#67L), isnotnull(wr_item_sk#56)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 143987780,
        "inputRowCount" : 7199389
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 3127,
        "TotalTasksDurationInMs" : 37465,
        "IOBytes" : {
          "Total" : 170308401,
          "Details" : {
            "IR" : 86861984,
            "IW" : 0,
            "SR" : 0,
            "SW" : 83446417
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1917638644,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8553384480,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 8553384480,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(cr_order_number#156L) "
          },
          "5" : {
            "sign" : 1480739153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8553384480,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 8553384480,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142)) "
          },
          "1" : {
            "sign" : 2069040209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 5540650480,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325] "
          },
          "0" : {
            "sign" : 794740156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6094715528,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 6094715528,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314] "
          },
          "2" : {
            "sign" : 995858624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6648780576,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 6648780576,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#140 = d_date_sk#319) "
          },
          "3" : {
            "sign" : -1288755513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5702256320,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 5702256320,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314]\n+- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n   +- Join Inner, (cs_sold_date_sk#140 = d_date_sk#319)\n      :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n      :  +- Filter isnull(cr_order_number#156L)\n      :     +- Join LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142))\n      :        :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n      :        :  +- Filter (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#398 [cs_sold_date_sk#140])\n      :        :     :  +- Project [d_date_sk#319, d_year#325]\n      :        :     :     +- Filter (isnotnull(d_date_sk#319) AND ((d_year#325 = 2000) AND isnotnull(d_year#325)))\n      :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#319,d_date_id#320,d_date#321,d_month_seq#322,d_week_seq#323,d_quarter_seq#324,d_year#325,d_dow#326,d_moy#327,d_dom#328,d_qoy#329,d_fy_year#330,d_fy_quarter_seq#331,d_fy_week_seq#332,d_day_name#333,d_quarter_name#334,d_holiday#335,d_weekend#336,d_following_holiday#337,d_first_dom#338,d_last_dom#339,d_same_day_ly#340,d_same_day_lq#341,d_current_day#342,... 4 more fields] parquet\n      :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#107,cs_ship_date_sk#108,cs_bill_customer_sk#109,cs_bill_cdemo_sk#110,cs_bill_hdemo_sk#111,cs_bill_addr_sk#112,cs_ship_customer_sk#113,cs_ship_cdemo_sk#114,cs_ship_hdemo_sk#115,cs_ship_addr_sk#116,cs_call_center_sk#117,cs_catalog_page_sk#118,cs_ship_mode_sk#119,cs_warehouse_sk#120,cs_item_sk#121,cs_promo_sk#122,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_list_price#126,cs_sales_price#127,cs_ext_discount_amt#128,cs_ext_sales_price#129,cs_ext_wholesale_cost#130,... 10 more fields] parquet\n      :        +- Project [cr_item_sk#142, cr_order_number#156L]\n      :           +- Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n      :              +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#141,cr_item_sk#142,cr_refunded_customer_sk#143,cr_refunded_cdemo_sk#144,cr_refunded_hdemo_sk#145,cr_refunded_addr_sk#146,cr_returning_customer_sk#147,cr_returning_cdemo_sk#148,cr_returning_hdemo_sk#149,cr_returning_addr_sk#150,cr_call_center_sk#151,cr_catalog_page_sk#152,cr_ship_mode_sk#153,cr_warehouse_sk#154,cr_reason_sk#155,cr_order_number#156L,cr_return_quantity#157,cr_return_amount#158,cr_return_tax#159,cr_return_amt_inc_tax#160,cr_fee#161,cr_return_ship_cost#162,cr_refunded_cash#163,cr_reversed_charge#164,... 3 more fields] parquet\n      +- Project [d_date_sk#319, d_year#325]\n         +- Filter (isnotnull(d_date_sk#319) AND ((d_year#325 = 2000) AND isnotnull(d_year#325)))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#319,d_date_id#320,d_date#321,d_month_seq#322,d_week_seq#323,d_quarter_seq#324,d_year#325,d_dow#326,d_moy#327,d_dom#328,d_qoy#329,d_fy_year#330,d_fy_quarter_seq#331,d_fy_week_seq#332,d_day_name#333,d_quarter_name#334,d_holiday#335,d_weekend#336,d_following_holiday#337,d_first_dom#338,d_last_dom#339,d_same_day_ly#340,d_same_day_lq#341,d_current_day#342,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -973662635,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [cr_item_sk#142, cr_order_number#156L] Arguments: [cr_order_number#156L ASC NULLS FIRST, cr_item_sk#142 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : 1603313484,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8553384480,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140, cr_item_sk#142, cr_order_number#156L] Condition : isnull(cr_order_number#156L) "
          },
          "9" : {
            "sign" : -234206093,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [cr_item_sk#142, cr_order_number#156L] Arguments: 8 "
          },
          "5" : {
            "sign" : 1291574077,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 8553384480,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [cs_order_number#123L, cs_item_sk#121] Right keys [2]: [cr_order_number#156L, cr_item_sk#142] Join type: LeftOuter Join condition: None "
          },
          "10" : {
            "sign" : -477006627,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#319, d_year#325] Arguments: 10 "
          },
          "6" : {
            "sign" : -1423498032,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] Arguments: [cs_order_number#123L ASC NULLS FIRST, cs_item_sk#121 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -61471617,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5540650480,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325] Input [8]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140, d_date_sk#319, d_year#325] "
          },
          "0" : {
            "sign" : 1605499272,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 6094715528,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325] Keys [3]: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109] Functions [3]: [partial_sum(cs_quantity#124), partial_sum(UnscaledValue(cs_wholesale_cost#125)), partial_sum(UnscaledValue(cs_sales_price#127))] Aggregate Attributes [3]: [sum#411L, sum#412L, sum#413L] Results [6]: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, sum#414L, sum#415L, sum#416L] "
          },
          "2" : {
            "sign" : -1068910260,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6648780576,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#140] Right keys [1]: [d_date_sk#319] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1385462671,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1829098880,
            "rowCount" : 28579670,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] Arguments: 7 "
          },
          "3" : {
            "sign" : -1039533049,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5702256320,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] Input [9]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140, cr_item_sk#142, cr_order_number#156L] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[partial_sum(cs_quantity#124), partial_sum(UnscaledValue(cs_wholesale_cost#125)), partial_sum(UnscaledValue(cs_sales_price#127))], output=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, sum#414L, sum#415L, sum#416L])\n+- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n   +- BroadcastHashJoin [cs_sold_date_sk#140], [d_date_sk#319], Inner, BuildRight, false\n      :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n      :  +- Filter isnull(cr_order_number#156L)\n      :     +- SortMergeJoin [cs_order_number#123L, cs_item_sk#121], [cr_order_number#156L, cr_item_sk#142], LeftOuter\n      :        :- Sort [cs_order_number#123L ASC NULLS FIRST, cs_item_sk#121 ASC NULLS FIRST], false, 0\n      :        :  +- ShuffleQueryStage 7\n      :        :     +- Exchange hashpartitioning(cs_order_number#123L, cs_item_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=597]\n      :        :        +- *(7) Filter (isnotnull(cs_item_sk#121) AND isnotnull(cs_bill_customer_sk#109))\n      :        :           +- *(7) ColumnarToRow\n      :        :              +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#109,cs_item_sk#121,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_sales_price#127,cs_sold_date_sk#140] Batched: true, DataFilters: [isnotnull(cs_item_sk#121), isnotnull(cs_bill_customer_sk#109)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#140), dynamicpruningexpression(cs_sold_date_sk#140 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_wholesale...\n      :        :                    +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n      :        +- Sort [cr_order_number#156L ASC NULLS FIRST, cr_item_sk#142 ASC NULLS FIRST], false, 0\n      :           +- ShuffleQueryStage 8\n      :              +- Exchange hashpartitioning(cr_order_number#156L, cr_item_sk#142, 200), ENSURE_REQUIREMENTS, [plan_id=616]\n      :                 +- *(8) Project [cr_item_sk#142, cr_order_number#156L]\n      :                    +- *(8) Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n      :                       +- *(8) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#142,cr_order_number#156L,cr_returned_date_sk#167] Batched: true, DataFilters: [isnotnull(cr_order_number#156L), isnotnull(cr_item_sk#142)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n      +- BroadcastQueryStage 10\n         +- ReusedExchange [d_date_sk#319, d_year#325], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2175698112,
        "inputRowCount" : 42977858
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 880445, 868631, 875514, 875120, 876848, 874482, 866292, 883361, 868427, 876726, 873517, 866858, 868125, 873115, 869946, 871866, 871895, 874060, 873487, 871552, 876290, 883418, 866639, 869726, 868914, 868937, 884175, 875835, 864851, 869240, 879264, 872600, 864877, 877426, 873363, 866266, 881284, 862850, 875584, 870335, 872298, 876127, 872860, 885993, 864051, 881751, 863144, 878802, 874846, 867220, 876149, 871062, 875696, 869826, 867505, 863710, 867587, 872280, 868237, 879889, 874312, 870021, 878811, 868179, 877378, 874903, 874368, 877603, 877998, 868300, 876560, 872523, 865542, 881784, 868507, 872354, 876106, 874398, 872746, 877435, 874574, 874027, 875390, 873075, 872477, 869852, 860871, 877640, 873585, 872800, 870977, 871899, 877004, 866280, 869402, 876340, 866007, 873188, 877915, 872079, 874729, 875174, 868618, 866733, 868820, 875369, 867040, 874919, 874642, 871852, 868254, 868033, 870111, 868237, 875035, 869217, 870870, 864159, 872979, 873245, 871264, 865133, 873433, 867686, 868294, 871994, 872563, 865658, 870195, 867885, 874694, 870736, 878179, 871379, 872853, 875889, 871686, 873477, 871132, 871336, 872388, 865728, 870914, 881579, 874880, 881015, 870312, 869751, 874375, 872634, 872989, 874456, 870350, 870065, 869076, 865089, 868400, 875381, 879102, 879328, 878191, 873863, 868405, 870798, 873918, 873032, 872038, 873661, 869133, 875144, 876061, 868157, 872881, 873675, 871343, 872020, 873094, 875095, 878960, 874700, 878100, 872364, 875970, 870857, 868092, 878273, 874306, 867224, 869653, 879925, 866211, 879829, 875772, 872716, 870577, 866745, 874097, 859825, 872112, 873858 ],
        "4" : [ 4441910, 4472317, 4436183, 4390995, 4458334, 4440267, 4443553, 4472317, 4483014, 4440267, 4446880, 4458334, 4423843, 4439469, 4459977, 4476401, 4443553, 4501081, 4476401, 4488741, 4488741, 4448024, 4423045, 4437826, 4454250, 4455893, 4441910, 4476401, 4454250, 4458334, 4488741, 4459977, 4452607, 4470674, 4486599, 4443553, 4459977, 4459977, 4501081, 4410705, 4488741, 4488741, 4501081, 4443553, 4459977, 4453751, 4454250, 4488741, 4476401, 4425486, 4450166, 4488741, 4498939, 4454250, 4459977, 4441910, 4472317, 4425486, 4425486, 4454250, 4478930, 4483014, 4488741, 4453751, 4455893, 4476401, 4458334, 4459977, 4501081, 4472317, 4418116, 4480872, 4435684, 4459977, 4480872, 4425486, 4458334, 4464448, 4459977, 4459977, 4458334, 4480872, 4437826, 4470674, 4488741, 4454250, 4443553, 4484657, 4459977, 4455893, 4472317, 4472317, 4472317, 4441910, 4441910, 4433742, 4436183, 4498939, 4476401, 4458334, 4425486, 4459977, 4455893, 4443553, 4439469, 4459977, 4501081, 4476401, 4476401, 4425486, 4470674, 4468233, 4472317, 4458334, 4434540, 4446381, 4484657, 4459977, 4483014, 4441910, 4423843, 4472317, 4486599, 4488741, 4448523, 4498939, 4458334, 4454250, 4472317, 4434540, 4401692, 4488741, 4455893, 4472317, 4425486, 4488741, 4476401, 4478044, 4476401, 4470674, 4488741, 4488741, 4459977, 4470674, 4458334, 4443553, 4483014, 4458334, 4488741, 4441910, 4488741, 4476401, 4419759, 4459977, 4468532, 4466590, 4403335, 4468233, 4484657, 4458334, 4427129, 4443553, 4488741, 4440267, 4455893, 4466590, 4472317, 4458334, 4476401, 4470674, 4472317, 4441910, 4454250, 4443553, 4441910, 4476401, 4458334, 4458334, 4470674, 4483014, 4472317, 4459977, 4454250, 4476401, 4488741, 4488741, 4470674, 4468233, 4459977, 4472317, 4484657, 4443553, 4425486, 4488741, 4455893, 4472317, 4484657, 4458334, 4425486, 4498939 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 9153.0,
        "FinishedTasksDistributionInMs" : [ 4568.0, 4568.0, 4585.0, 4585.0, 4585.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 14524,
        "TotalTasksDurationInMs" : 53491,
        "IOBytes" : {
          "Total" : 1682920230,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1011246873,
            "SW" : 671673357
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1980403488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6842707584,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 6842707584,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] "
          },
          "1" : {
            "sign" : -2118672219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#398 [cs_sold_date_sk#140]) "
          },
          "2" : {
            "sign" : 1536480445,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#107, cs_ship_date_sk#108, cs_bill_customer_sk#109, cs_bill_cdemo_sk#110, cs_bill_hdemo_sk#111, cs_bill_addr_sk#112, cs_ship_customer_sk#113, cs_ship_cdemo_sk#114, cs_ship_hdemo_sk#115, cs_ship_addr_sk#116, cs_call_center_sk#117, cs_catalog_page_sk#118, cs_ship_mode_sk#119, cs_warehouse_sk#120, cs_item_sk#121, cs_promo_sk#122, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_list_price#126, cs_sales_price#127, cs_ext_discount_amt#128, cs_ext_sales_price#129, cs_ext_wholesale_cost#130, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n+- Filter (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#398 [cs_sold_date_sk#140])\n   :  +- Project [d_date_sk#319, d_year#325]\n   :     +- Filter (isnotnull(d_date_sk#319) AND ((d_year#325 = 2000) AND isnotnull(d_year#325)))\n   :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#319,d_date_id#320,d_date#321,d_month_seq#322,d_week_seq#323,d_quarter_seq#324,d_year#325,d_dow#326,d_moy#327,d_dom#328,d_qoy#329,d_fy_year#330,d_fy_quarter_seq#331,d_fy_week_seq#332,d_day_name#333,d_quarter_name#334,d_holiday#335,d_weekend#336,d_following_holiday#337,d_first_dom#338,d_last_dom#339,d_same_day_ly#340,d_same_day_lq#341,d_current_day#342,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#107,cs_ship_date_sk#108,cs_bill_customer_sk#109,cs_bill_cdemo_sk#110,cs_bill_hdemo_sk#111,cs_bill_addr_sk#112,cs_ship_customer_sk#113,cs_ship_cdemo_sk#114,cs_ship_hdemo_sk#115,cs_ship_addr_sk#116,cs_call_center_sk#117,cs_catalog_page_sk#118,cs_ship_mode_sk#119,cs_warehouse_sk#120,cs_item_sk#121,cs_promo_sk#122,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_list_price#126,cs_sales_price#127,cs_ext_discount_amt#128,cs_ext_sales_price#129,cs_ext_wholesale_cost#130,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -274281301,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6842707584,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] Condition : (isnotnull(cs_item_sk#121) AND isnotnull(cs_bill_customer_sk#109)) "
          },
          "1" : {
            "sign" : 1403596964,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6842707584,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [7]: [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#140), dynamicpruningexpression(cs_sold_date_sk#140 IN dynamicpruning#396)] PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)] ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(cs_item_sk#121) AND isnotnull(cs_bill_customer_sk#109))\n+- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#109,cs_item_sk#121,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_sales_price#127,cs_sold_date_sk#140] Batched: true, DataFilters: [isnotnull(cs_item_sk#121), isnotnull(cs_bill_customer_sk#109)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#140), dynamicpruningexpression(cs_sold_date_sk#140 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_wholesale...\n      +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6842707584,
        "inputRowCount" : 142556408
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 8531,
        "TotalTasksDurationInMs" : 58186,
        "IOBytes" : {
          "Total" : 1202453420,
          "Details" : {
            "IR" : 357545088,
            "IW" : 0,
            "SR" : 0,
            "SW" : 844908332
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 1805558135,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 21243246800,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 21243246800,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170)) "
          },
          "4" : {
            "sign" : 1537982969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30802707860,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 30802707860,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] "
          },
          "5" : {
            "sign" : 1228143223,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27616220840,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 27616220840,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "6" : {
            "sign" : 720283541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27616220840,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 27616220840,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170)) "
          },
          "1" : {
            "sign" : -333551648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20181084460,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 20181084460,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 966410243,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1432955667,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20181084460,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 20181084460,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "7" : {
            "sign" : -938712922,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18056759780,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 18056759780,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "3" : {
            "sign" : 1779832790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30802707860,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 30802707860,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304]\n      +- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], true\n         +- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n            +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n               +- Join LeftOuter, (((cs_sold_year#310 = ss_sold_year#315) AND (cs_item_sk#121 = ss_item_sk#169)) AND (cs_customer_sk#311 = ss_customer_sk#170))\n                  :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n                  :  +- Join LeftOuter, (((ws_sold_year#305 = ss_sold_year#315) AND (ws_item_sk#23 = ss_item_sk#169)) AND (ws_customer_sk#306 = ss_customer_sk#170))\n                  :     :- Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318]\n                  :     :  +- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353]\n                  :     :     +- Join Inner, (ss_sold_date_sk#190 = d_date_sk#347)\n                  :     :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n                  :     :        :  +- Filter isnull(sr_ticket_number#199L)\n                  :     :        :     +- Join LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192))\n                  :     :        :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n                  :     :        :        :  +- Filter (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#396 [ss_sold_date_sk#190])\n                  :     :        :        :     :  +- Project [d_date_sk#347, d_year#353]\n                  :     :        :        :     :     +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n                  :     :        :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n                  :     :        :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#168,ss_item_sk#169,ss_customer_sk#170,ss_cdemo_sk#171,ss_hdemo_sk#172,ss_addr_sk#173,ss_store_sk#174,ss_promo_sk#175,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_list_price#179,ss_sales_price#180,ss_ext_discount_amt#181,ss_ext_sales_price#182,ss_ext_wholesale_cost#183,ss_ext_list_price#184,ss_ext_tax#185,ss_coupon_amt#186,ss_net_paid#187,ss_net_paid_inc_tax#188,ss_net_profit#189,ss_sold_date_sk#190] parquet\n                  :     :        :        +- Project [sr_item_sk#192, sr_ticket_number#199L]\n                  :     :        :           +- Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n                  :     :        :              +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#191,sr_item_sk#192,sr_customer_sk#193,sr_cdemo_sk#194,sr_hdemo_sk#195,sr_addr_sk#196,sr_store_sk#197,sr_reason_sk#198,sr_ticket_number#199L,sr_return_quantity#200,sr_return_amt#201,sr_return_tax#202,sr_return_amt_inc_tax#203,sr_fee#204,sr_return_ship_cost#205,sr_refunded_cash#206,sr_reversed_charge#207,sr_store_credit#208,sr_net_loss#209,sr_returned_date_sk#210] parquet\n                  :     :        +- Project [d_date_sk#347, d_year#353]\n                  :     :           +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n                  :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n                  :     +- Aggregate [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38) AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39)),17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41)),17,2) AS ws_sp#309]\n                  :        +- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n                  :           +- Join Inner, (ws_sold_date_sk#54 = d_date_sk#79)\n                  :              :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n                  :              :  +- Filter isnull(wr_order_number#67L)\n                  :              :     +- Join LeftOuter, ((wr_order_number#67L = ws_order_number#37L) AND (ws_item_sk#23 = wr_item_sk#56))\n                  :              :        :- Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n                  :              :        :  +- Filter (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#397 [ws_sold_date_sk#54])\n                  :              :        :     :  +- Project [d_date_sk#79, d_year#85]\n                  :              :        :     :     +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n                  :              :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n                  :              :        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#21,ws_ship_date_sk#22,ws_item_sk#23,ws_bill_customer_sk#24,ws_bill_cdemo_sk#25,ws_bill_hdemo_sk#26,ws_bill_addr_sk#27,ws_ship_customer_sk#28,ws_ship_cdemo_sk#29,ws_ship_hdemo_sk#30,ws_ship_addr_sk#31,ws_web_page_sk#32,ws_web_site_sk#33,ws_ship_mode_sk#34,ws_warehouse_sk#35,ws_promo_sk#36,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_list_price#40,ws_sales_price#41,ws_ext_discount_amt#42,ws_ext_sales_price#43,ws_ext_wholesale_cost#44,... 10 more fields] parquet\n                  :              :        +- Project [wr_item_sk#56, wr_order_number#67L]\n                  :              :           +- Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n                  :              :              +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#55,wr_item_sk#56,wr_refunded_customer_sk#57,wr_refunded_cdemo_sk#58,wr_refunded_hdemo_sk#59,wr_refunded_addr_sk#60,wr_returning_customer_sk#61,wr_returning_cdemo_sk#62,wr_returning_hdemo_sk#63,wr_returning_addr_sk#64,wr_web_page_sk#65,wr_reason_sk#66,wr_order_number#67L,wr_return_quantity#68,wr_return_amt#69,wr_return_tax#70,wr_return_amt_inc_tax#71,wr_fee#72,wr_return_ship_cost#73,wr_refunded_cash#74,wr_reversed_charge#75,wr_account_credit#76,wr_net_loss#77,wr_returned_date_sk#78] parquet\n                  :              +- Project [d_date_sk#79, d_year#85]\n                  :                 +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n                  :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n                  +- Aggregate [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124) AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125)),17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127)),17,2) AS cs_sp#314]\n                     +- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n                        +- Join Inner, (cs_sold_date_sk#140 = d_date_sk#319)\n                           :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :  +- Filter isnull(cr_order_number#156L)\n                           :     +- Join LeftOuter, ((cr_order_number#156L = cs_order_number#123L) AND (cs_item_sk#121 = cr_item_sk#142))\n                           :        :- Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_order_number#123L, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                           :        :  +- Filter (((isnotnull(cs_sold_date_sk#140) AND isnotnull(cs_item_sk#121)) AND isnotnull(cs_bill_customer_sk#109)) AND dynamicpruning#398 [cs_sold_date_sk#140])\n                           :        :     :  +- Project [d_date_sk#319, d_year#325]\n                           :        :     :     +- Filter (isnotnull(d_date_sk#319) AND ((d_year#325 = 2000) AND isnotnull(d_year#325)))\n                           :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#319,d_date_id#320,d_date#321,d_month_seq#322,d_week_seq#323,d_quarter_seq#324,d_year#325,d_dow#326,d_moy#327,d_dom#328,d_qoy#329,d_fy_year#330,d_fy_quarter_seq#331,d_fy_week_seq#332,d_day_name#333,d_quarter_name#334,d_holiday#335,d_weekend#336,d_following_holiday#337,d_first_dom#338,d_last_dom#339,d_same_day_ly#340,d_same_day_lq#341,d_current_day#342,... 4 more fields] parquet\n                           :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#107,cs_ship_date_sk#108,cs_bill_customer_sk#109,cs_bill_cdemo_sk#110,cs_bill_hdemo_sk#111,cs_bill_addr_sk#112,cs_ship_customer_sk#113,cs_ship_cdemo_sk#114,cs_ship_hdemo_sk#115,cs_ship_addr_sk#116,cs_call_center_sk#117,cs_catalog_page_sk#118,cs_ship_mode_sk#119,cs_warehouse_sk#120,cs_item_sk#121,cs_promo_sk#122,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_list_price#126,cs_sales_price#127,cs_ext_discount_amt#128,cs_ext_sales_price#129,cs_ext_wholesale_cost#130,... 10 more fields] parquet\n                           :        +- Project [cr_item_sk#142, cr_order_number#156L]\n                           :           +- Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n                           :              +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#141,cr_item_sk#142,cr_refunded_customer_sk#143,cr_refunded_cdemo_sk#144,cr_refunded_hdemo_sk#145,cr_refunded_addr_sk#146,cr_returning_customer_sk#147,cr_returning_cdemo_sk#148,cr_returning_hdemo_sk#149,cr_returning_addr_sk#150,cr_call_center_sk#151,cr_catalog_page_sk#152,cr_ship_mode_sk#153,cr_warehouse_sk#154,cr_reason_sk#155,cr_order_number#156L,cr_return_quantity#157,cr_return_amount#158,cr_return_tax#159,cr_return_amt_inc_tax#160,cr_fee#161,cr_return_ship_cost#162,cr_refunded_cash#163,cr_reversed_charge#164,... 3 more fields] parquet\n                           +- Project [d_date_sk#319, d_year#325]\n                              +- Filter (isnotnull(d_date_sk#319) AND ((d_year#325 = 2000) AND isnotnull(d_year#325)))\n                                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#319,d_date_id#320,d_date#321,d_month_seq#322,d_week_seq#323,d_quarter_seq#324,d_year#325,d_dow#326,d_moy#327,d_dom#328,d_qoy#329,d_fy_year#330,d_fy_quarter_seq#331,d_fy_week_seq#332,d_day_name#333,d_quarter_name#334,d_holiday#335,d_weekend#336,d_following_holiday#337,d_first_dom#338,d_last_dom#339,d_same_day_ly#340,d_same_day_lq#341,d_current_day#342,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1570744362,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311, cs_qty#312L, cs_wc#313, cs_sp#314] Arguments: [cs_sold_year#310 ASC NULLS FIRST, cs_item_sk#121 ASC NULLS FIRST, cs_customer_sk#311 ASC NULLS FIRST], false, 0 "
          },
          "8" : {
            "sign" : -971845802,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [d_year#353, ss_item_sk#169, ss_customer_sk#170, sum#402L, sum#403L, sum#404L] Arguments: 11 "
          },
          "4" : {
            "sign" : 451928234,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 18056759780,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [9]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309] Input [12]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_sold_year#305, ws_item_sk#23, ws_customer_sk#306, ws_qty#307L, ws_wc#308, ws_sp#309] "
          },
          "11" : {
            "sign" : 206258020,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3057806620,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, sum#408L, sum#409L, sum#410L] Arguments: 12 "
          },
          "9" : {
            "sign" : -774223916,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [ws_sold_year#305, ws_item_sk#23, ws_customer_sk#306, ws_qty#307L, ws_wc#308, ws_sp#309] Arguments: [ws_sold_year#305 ASC NULLS FIRST, ws_item_sk#23 ASC NULLS FIRST, ws_customer_sk#306 ASC NULLS FIRST], false, 0 "
          },
          "13" : {
            "sign" : -614873496,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1440465992,
            "rowCount" : 25722607,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, sum#414L, sum#415L, sum#416L] Keys [3]: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109] Functions [3]: [sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))] Aggregate Attributes [3]: [sum(cs_quantity#124)#378L, sum(UnscaledValue(cs_wholesale_cost#125))#379L, sum(UnscaledValue(cs_sales_price#127))#380L] Results [6]: [d_year#325 AS cs_sold_year#310, cs_item_sk#121, cs_bill_customer_sk#109 AS cs_customer_sk#311, sum(cs_quantity#124)#378L AS cs_qty#312L, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#125))#379L,17,2) AS cs_wc#313, MakeDecimal(sum(UnscaledValue(cs_sales_price#127))#380L,17,2) AS cs_sp#314] "
          },
          "5" : {
            "sign" : -1867572941,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 21243246800,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [3]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170] Right keys [3]: [ws_sold_year#305, ws_item_sk#23, ws_customer_sk#306] Join type: LeftOuter Join condition: None "
          },
          "10" : {
            "sign" : -1219806393,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 729482432,
            "rowCount" : 13026472,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, sum#408L, sum#409L, sum#410L] Keys [3]: [d_year#85, ws_item_sk#23, ws_bill_customer_sk#24] Functions [3]: [sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))] Aggregate Attributes [3]: [sum(ws_quantity#38)#375L, sum(UnscaledValue(ws_wholesale_cost#39))#376L, sum(UnscaledValue(ws_sales_price#41))#377L] Results [6]: [d_year#85 AS ws_sold_year#305, ws_item_sk#23, ws_bill_customer_sk#24 AS ws_customer_sk#306, sum(ws_quantity#38)#375L AS ws_qty#307L, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#39))#376L,17,2) AS ws_wc#308, MakeDecimal(sum(UnscaledValue(ws_sales_price#41))#377L,17,2) AS ws_sp#309] "
          },
          "6" : {
            "sign" : -375304929,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318] Arguments: [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 1708064673,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 30802707860,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [15]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] Input [15]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309, cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311, cs_qty#312L, cs_wc#313, cs_sp#314] "
          },
          "14" : {
            "sign" : 185861393,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 6094715528,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, sum#414L, sum#415L, sum#416L] Arguments: 13 "
          },
          "0" : {
            "sign" : -1769888136,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [15]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L] Arguments: 100, [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST, ss_qty#316L DESC NULLS LAST, ss_wc#317 DESC NULLS LAST, ss_sp#318 DESC NULLS LAST, other_chan_qty#302L ASC NULLS FIRST, other_chan_wholesale_cost#303 ASC NULLS FIRST, other_chan_sales_price#304 ASC NULLS FIRST, round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ratio#298, store_qty#299L, store_wholesale_cost#300, store_sales_price#301, other_chan_qty#302L, other_chan_wholesale_cost#303, other_chan_sales_price#304] "
          },
          "2" : {
            "sign" : 224897253,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 27616220840,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [15]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309, cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311, cs_qty#312L, cs_wc#313, cs_sp#314] Condition : ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0)) "
          },
          "7" : {
            "sign" : 18690507,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 2777294240,
            "rowCount" : 49594540,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [d_year#353, ss_item_sk#169, ss_customer_sk#170, sum#402L, sum#403L, sum#404L] Keys [3]: [d_year#353, ss_item_sk#169, ss_customer_sk#170] Functions [3]: [sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))] Aggregate Attributes [3]: [sum(ss_quantity#177)#381L, sum(UnscaledValue(ss_wholesale_cost#178))#382L, sum(UnscaledValue(ss_sales_price#180))#383L] Results [6]: [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177)#381L AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178))#382L,17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180))#383L,17,2) AS ss_sp#318] "
          },
          "3" : {
            "sign" : 912610045,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 27616220840,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [3]: [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170] Right keys [3]: [cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311] Join type: LeftOuter Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "HashAggregate",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "HashAggregate",
          "toId" : 9,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "ShuffleQueryStage",
          "toId" : 13,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "HashAggregate",
          "toId" : 12,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[ss_sold_year#315 ASC NULLS FIRST,ss_item_sk#169 ASC NULLS FIRST,ss_customer_sk#170 ASC NULLS FIRST,ss_qty#316L DESC NULLS LAST,ss_wc#317 DESC NULLS LAST,ss_sp#318 DESC NULLS LAST,other_chan_qty#302L ASC NULLS FIRST,other_chan_wholesale_cost#303 ASC NULLS FIRST,other_chan_sales_price#304 ASC NULLS FIRST,round((cast(ss_qty#316L as double) / cast(coalesce((ws_qty#307L + cs_qty#312L), 1) as double)), 2) ASC NULLS FIRST], output=[ss_sold_year#315,ss_item_sk#169,ss_customer_sk#170,ratio#298,store_qty#299L,store_wholesale_cost#300,store_sales_price#301,other_chan_qty#302L,other_chan_wholesale_cost#303,other_chan_sales_price#304])\n+- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, round((cast(ss_qty#316L as double) / cast((coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) as double)), 2) AS ratio#298, ss_qty#316L AS store_qty#299L, ss_wc#317 AS store_wholesale_cost#300, ss_sp#318 AS store_sales_price#301, (coalesce(ws_qty#307L, 0) + coalesce(cs_qty#312L, 0)) AS other_chan_qty#302L, (coalesce(ws_wc#308, 0.00) + coalesce(cs_wc#313, 0.00)) AS other_chan_wholesale_cost#303, (coalesce(ws_sp#309, 0.00) + coalesce(cs_sp#314, 0.00)) AS other_chan_sales_price#304, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, cs_qty#312L]\n   +- Filter ((coalesce(ws_qty#307L, 0) > 0) OR (coalesce(cs_qty#312L, 0) > 0))\n      +- SortMergeJoin [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170], [cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311], LeftOuter\n         :- Project [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318, ws_qty#307L, ws_wc#308, ws_sp#309]\n         :  +- SortMergeJoin [ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170], [ws_sold_year#305, ws_item_sk#23, ws_customer_sk#306], LeftOuter\n         :     :- Sort [ss_sold_year#315 ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST, ss_customer_sk#170 ASC NULLS FIRST], false, 0\n         :     :  +- HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[sum(ss_quantity#177), sum(UnscaledValue(ss_wholesale_cost#178)), sum(UnscaledValue(ss_sales_price#180))], output=[ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, ss_qty#316L, ss_wc#317, ss_sp#318])\n         :     :     +- ShuffleQueryStage 11\n         :     :        +- Exchange hashpartitioning(d_year#353, ss_item_sk#169, ss_customer_sk#170, 200), ENSURE_REQUIREMENTS, [plan_id=864]\n         :     :           +- *(12) HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[partial_sum(ss_quantity#177), partial_sum(UnscaledValue(ss_wholesale_cost#178)), partial_sum(UnscaledValue(ss_sales_price#180))], output=[d_year#353, ss_item_sk#169, ss_customer_sk#170, sum#402L, sum#403L, sum#404L])\n         :     :              +- *(12) Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353]\n         :     :                 +- *(12) BroadcastHashJoin [ss_sold_date_sk#190], [d_date_sk#347], Inner, BuildRight, false\n         :     :                    :- *(12) Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n         :     :                    :  +- *(12) Filter isnull(sr_ticket_number#199L)\n         :     :                    :     +- *(12) SortMergeJoin [ss_ticket_number#176L, ss_item_sk#169], [sr_ticket_number#199L, sr_item_sk#192], LeftOuter\n         :     :                    :        :- *(10) Sort [ss_ticket_number#176L ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST], false, 0\n         :     :                    :        :  +- AQEShuffleRead coalesced\n         :     :                    :        :     +- ShuffleQueryStage 0\n         :     :                    :        :        +- Exchange hashpartitioning(ss_ticket_number#176L, ss_item_sk#169, 200), ENSURE_REQUIREMENTS, [plan_id=363]\n         :     :                    :        :           +- *(1) ColumnarToRow\n         :     :                    :        :              +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#169,ss_customer_sk#170,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_sales_price#180,ss_sold_date_sk#190] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#190), dynamicpruningexpression(ss_sold_date_sk#190 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_wholesale_cos...\n         :     :                    :        :                    +- SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n         :     :                    :        :                       +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#347, d_year#353], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=350]\n                                                                           +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n         :     :                    :        +- *(11) Sort [sr_ticket_number#199L ASC NULLS FIRST, sr_item_sk#192 ASC NULLS FIRST], false, 0\n         :     :                    :           +- AQEShuffleRead coalesced\n         :     :                    :              +- ShuffleQueryStage 1\n         :     :                    :                 +- Exchange hashpartitioning(sr_ticket_number#199L, sr_item_sk#192, 200), ENSURE_REQUIREMENTS, [plan_id=380]\n         :     :                    :                    +- *(2) Project [sr_item_sk#192, sr_ticket_number#199L]\n         :     :                    :                       +- *(2) Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n         :     :                    :                          +- *(2) ColumnarToRow\n         :     :                    :                             +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#192,sr_ticket_number#199L,sr_returned_date_sk#210] Batched: true, DataFilters: [isnotnull(sr_ticket_number#199L), isnotnull(sr_item_sk#192)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n         :     :                    +- BroadcastQueryStage 2\n         :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n         :     :                          +- *(3) Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n         :     :                             +- *(3) ColumnarToRow\n         :     :                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n         :     +- Sort [ws_sold_year#305 ASC NULLS FIRST, ws_item_sk#23 ASC NULLS FIRST, ws_customer_sk#306 ASC NULLS FIRST], false, 0\n         :        +- HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[sum(ws_quantity#38), sum(UnscaledValue(ws_wholesale_cost#39)), sum(UnscaledValue(ws_sales_price#41))], output=[ws_sold_year#305, ws_item_sk#23, ws_customer_sk#306, ws_qty#307L, ws_wc#308, ws_sp#309])\n         :           +- ShuffleQueryStage 12\n         :              +- Exchange hashpartitioning(d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, 200), ENSURE_REQUIREMENTS, [plan_id=941]\n         :                 +- *(15) HashAggregate(keys=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24], functions=[partial_sum(ws_quantity#38), partial_sum(UnscaledValue(ws_wholesale_cost#39)), partial_sum(UnscaledValue(ws_sales_price#41))], output=[d_year#85, ws_item_sk#23, ws_bill_customer_sk#24, sum#408L, sum#409L, sum#410L])\n         :                    +- *(15) Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, d_year#85]\n         :                       +- *(15) BroadcastHashJoin [ws_sold_date_sk#54], [d_date_sk#79], Inner, BuildRight, false\n         :                          :- *(15) Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n         :                          :  +- *(15) Filter isnull(wr_order_number#67L)\n         :                          :     +- *(15) SortMergeJoin [ws_order_number#37L, ws_item_sk#23], [wr_order_number#67L, wr_item_sk#56], LeftOuter\n         :                          :        :- *(13) Sort [ws_order_number#37L ASC NULLS FIRST, ws_item_sk#23 ASC NULLS FIRST], false, 0\n         :                          :        :  +- AQEShuffleRead coalesced\n         :                          :        :     +- ShuffleQueryStage 3\n         :                          :        :        +- Exchange hashpartitioning(ws_order_number#37L, ws_item_sk#23, 200), ENSURE_REQUIREMENTS, [plan_id=477]\n         :                          :        :           +- *(4) Filter (isnotnull(ws_item_sk#23) AND isnotnull(ws_bill_customer_sk#24))\n         :                          :        :              +- *(4) ColumnarToRow\n         :                          :        :                 +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#23,ws_bill_customer_sk#24,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_sales_price#41,ws_sold_date_sk#54] Batched: true, DataFilters: [isnotnull(ws_item_sk#23), isnotnull(ws_bill_customer_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#54), dynamicpruningexpression(ws_sold_date_sk#54 IN dynamicpruning#396)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quantity:int,ws_wholesale...\n         :                          :        :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n         :                          :        +- *(14) Sort [wr_order_number#67L ASC NULLS FIRST, wr_item_sk#56 ASC NULLS FIRST], false, 0\n         :                          :           +- AQEShuffleRead coalesced\n         :                          :              +- ShuffleQueryStage 4\n         :                          :                 +- Exchange hashpartitioning(wr_order_number#67L, wr_item_sk#56, 200), ENSURE_REQUIREMENTS, [plan_id=496]\n         :                          :                    +- *(5) Project [wr_item_sk#56, wr_order_number#67L]\n         :                          :                       +- *(5) Filter (isnotnull(wr_order_number#67L) AND isnotnull(wr_item_sk#56))\n         :                          :                          +- *(5) ColumnarToRow\n         :                          :                             +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#56,wr_order_number#67L,wr_returned_date_sk#78] Batched: true, DataFilters: [isnotnull(wr_order_number#67L), isnotnull(wr_item_sk#56)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>\n         :                          +- BroadcastQueryStage 6\n         :                             +- ReusedExchange [d_date_sk#79, d_year#85], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n         +- Sort [cs_sold_year#310 ASC NULLS FIRST, cs_item_sk#121 ASC NULLS FIRST, cs_customer_sk#311 ASC NULLS FIRST], false, 0\n            +- HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[sum(cs_quantity#124), sum(UnscaledValue(cs_wholesale_cost#125)), sum(UnscaledValue(cs_sales_price#127))], output=[cs_sold_year#310, cs_item_sk#121, cs_customer_sk#311, cs_qty#312L, cs_wc#313, cs_sp#314])\n               +- ShuffleQueryStage 13\n                  +- Exchange hashpartitioning(d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, 200), ENSURE_REQUIREMENTS, [plan_id=1094]\n                     +- *(18) HashAggregate(keys=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109], functions=[partial_sum(cs_quantity#124), partial_sum(UnscaledValue(cs_wholesale_cost#125)), partial_sum(UnscaledValue(cs_sales_price#127))], output=[d_year#325, cs_item_sk#121, cs_bill_customer_sk#109, sum#414L, sum#415L, sum#416L])\n                        +- *(18) Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, d_year#325]\n                           +- *(18) BroadcastHashJoin [cs_sold_date_sk#140], [d_date_sk#319], Inner, BuildRight, false\n                              :- *(18) Project [cs_bill_customer_sk#109, cs_item_sk#121, cs_quantity#124, cs_wholesale_cost#125, cs_sales_price#127, cs_sold_date_sk#140]\n                              :  +- *(18) Filter isnull(cr_order_number#156L)\n                              :     +- *(18) SortMergeJoin [cs_order_number#123L, cs_item_sk#121], [cr_order_number#156L, cr_item_sk#142], LeftOuter\n                              :        :- *(16) Sort [cs_order_number#123L ASC NULLS FIRST, cs_item_sk#121 ASC NULLS FIRST], false, 0\n                              :        :  +- AQEShuffleRead coalesced\n                              :        :     +- ShuffleQueryStage 7\n                              :        :        +- Exchange hashpartitioning(cs_order_number#123L, cs_item_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=597]\n                              :        :           +- *(7) Filter (isnotnull(cs_item_sk#121) AND isnotnull(cs_bill_customer_sk#109))\n                              :        :              +- *(7) ColumnarToRow\n                              :        :                 +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#109,cs_item_sk#121,cs_order_number#123L,cs_quantity#124,cs_wholesale_cost#125,cs_sales_price#127,cs_sold_date_sk#140] Batched: true, DataFilters: [isnotnull(cs_item_sk#121), isnotnull(cs_bill_customer_sk#109)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#140), dynamicpruningexpression(cs_sold_date_sk#140 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quantity:int,cs_wholesale...\n                              :        :                       +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n                              :        +- *(17) Sort [cr_order_number#156L ASC NULLS FIRST, cr_item_sk#142 ASC NULLS FIRST], false, 0\n                              :           +- AQEShuffleRead coalesced\n                              :              +- ShuffleQueryStage 8\n                              :                 +- Exchange hashpartitioning(cr_order_number#156L, cr_item_sk#142, 200), ENSURE_REQUIREMENTS, [plan_id=616]\n                              :                    +- *(8) Project [cr_item_sk#142, cr_order_number#156L]\n                              :                       +- *(8) Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n                              :                          +- *(8) ColumnarToRow\n                              :                             +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#142,cr_order_number#156L,cr_returned_date_sk#167] Batched: true, DataFilters: [isnotnull(cr_order_number#156L), isnotnull(cr_item_sk#142)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n                              +- BroadcastQueryStage 10\n                                 +- ReusedExchange [d_date_sk#319, d_year#325], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4947242664,
        "inputRowCount" : 88343619
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "8" : [ 3593637, 3553891, 3593637, 3573764, 3613510, 3633383, 3607210, 3607210, 3607210, 3613510, 3593637, 3627083, 3613510, 3627083, 3593637, 3573764, 3646956, 3593637, 3534018, 3646956, 3573764, 3593637, 3534018, 3633383, 3607210, 3646956, 3633383, 3633383, 3553891, 3593637, 3593637, 3593637, 3613510, 3613510, 3613510, 3613510, 3573764, 3593637, 3593637, 3627083, 3613510, 3613510, 3607210, 3646956, 3607210, 3613510, 3593637, 3613510, 3613510, 3567464, 3573764, 3587337, 3613510, 3587337, 3593637, 3593637, 3587337, 3593637, 3607210, 3627083, 3593637, 3534018, 3534018, 3573764, 3613510, 3567464, 3567464, 3593637, 3613510, 3593637, 3573764, 3633383, 3567464, 3633383, 3573764, 3613510, 3633383, 3613510, 3613510, 3514145, 3593637, 3567464, 3573764, 3593637, 3633383, 3633383, 3593637, 3593637, 3627083, 3573764, 3633383, 3587337, 3613510, 3547591, 3633383, 3607210, 3593637, 3607210, 3613510, 3607210, 3613510, 3573764, 3593637, 3613510, 3613510, 3567464, 3593637, 3613510, 3613510, 3534018, 3633383, 3567464, 3573764, 3534018, 3593637, 3553891, 3607210, 3613510, 3573764, 3613510, 3593637, 3627083, 3534018, 3646956, 3587337, 3613510, 3633383, 3627083, 3593637, 3593637, 3573764, 3633383, 3593637, 3534018, 3553891, 3633383, 3646956, 3587337, 3607210, 3593637, 3553891, 3627083, 3613510, 3593637, 3587337, 3534018, 3593637, 3553891, 3613510, 3573764, 3593637, 3613510, 3534018, 3534018, 3627083, 3593637, 3553891, 3573764, 3587337, 3534018, 3613510, 3553891, 3573764, 3573764, 3553891, 3613510, 3593637, 3573764, 3573764, 3613510, 3613510, 3627083, 3593637, 3613510, 3607210, 3573764, 3607210, 3593637, 3627083, 3567464, 3613510, 3567464, 3633383, 3593637, 3567464, 3587337, 3593637, 3587337, 3633383, 3573764, 3567464, 3573764, 3553891, 3593637, 3567464, 3593637, 3587337, 3633383, 3593637, 3627083 ],
        "7" : [ 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1752981, 1772854, 1752981, 1752981, 1772854, 1752981, 1752981, 1752981, 1772854, 1772854, 1792727, 1752981, 1772854, 1752981, 1772854, 1792727, 1752981, 1733108, 1772854, 1792727, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1733108, 1752981, 1752981, 1772854, 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1772854, 1772854, 1772854, 1752981, 1733108, 1785194, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1752981, 1752981, 1772854, 1772854, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1792727, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1792727, 1772854, 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1772854, 1752981, 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1772854, 1752981, 1772854, 1752981, 1752981, 1752981, 1752981, 1752981, 1752981, 1772854, 1772854, 1752981, 1772854, 1752981, 1772854, 1772854, 1752981, 1752981, 1792727, 1772854, 1752981, 1752981, 1772854, 1752981, 1752981, 1752981, 1772854, 1752981, 1772854, 1772854, 1752981, 1772854, 1752981, 1772854, 1752981, 1752981, 1752981, 1792727, 1752981, 1752981, 1752981, 1752981, 1772854, 1752981, 1752981, 1772854, 1772854, 1792727, 1752981, 1772854, 1752981, 1772854, 1772854, 1752981, 1772854, 1752981, 1772854, 1772854, 1752981, 1752981, 1772854, 1772854, 1752981, 1772854, 1752981, 1792727, 1752981 ],
        "6" : [ 6627743, 6621411, 6627743, 6627743, 6667489, 6627743, 6627743, 6627743, 6627743, 6641284, 6647616, 6627743, 6627743, 6627743, 6627743, 6667489, 6627743, 6667489, 6627743, 6627743, 6627743, 6627743, 6627743, 6687362, 6647616, 6627743, 6627743, 6627743, 6627743, 6627743, 6667489, 6647616, 6627743, 6647616, 6627743, 6627743, 6627743, 6647616, 6647616, 6647616, 6667489, 6627743, 6627743, 6627743, 6627743, 6647616, 6647616, 6647616, 6627743, 6627743, 6647616, 6627743, 6667489, 6627743, 6627743, 6627743, 6627743, 6627743, 6641284, 6647616, 6621411, 6621411, 6647616, 6627743, 6621411, 6647616, 6647616, 6647616, 6621411, 6647616, 6627743, 6647616, 6627743, 6627743, 6627743, 6627743, 6647616, 6627743, 6647616, 6647616, 6627743, 6647616, 6667489, 6627743, 6627743, 6627743, 6627743, 6667489, 6627743, 6627743, 6627743, 6647616, 6647616, 6627743, 6667489, 6627743, 6627743, 6687362, 6667489, 6647616, 6627743, 6647616, 6627743, 6627743, 6667489, 6627743, 6627743, 6647616, 6627743, 6627743, 6667489, 6627743, 6647616, 6627743, 6627743, 6667489, 6627743, 6667489, 6627743, 6627743, 6647616, 6647616, 6627743, 6647616, 6627743, 6627743, 6647616, 6667489, 6627743, 6627743, 6647616, 6627743, 6627743, 6667489, 6627743, 6627743, 6641284, 6687362, 6667489, 6621411, 6627743, 6627743, 6627743, 6647616, 6621411, 6627743, 6647616, 6647616, 6667489, 6647616, 6627743, 6627743, 6647616, 6627743, 6627743, 6627743, 6647616, 6647616, 6627743, 6647616, 6627743, 6621411, 6627743, 6627743, 6621411, 6627743, 6627743, 6627743, 6687362, 6647616, 6627743, 6647616, 6627743, 6647616, 6627743, 6627743, 6647616, 6627743, 6627743, 6627743, 6627743, 6647616, 6627743, 6707235, 6641284, 6621411, 6647616, 6627743, 6627743, 6647616, 6627743, 6627743, 6667489, 6647616, 6627743, 6647616, 6627743, 6647616, 6627743, 6647616 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 31 ],
      "Objectives" : {
        "DurationInMs" : 17158,
        "TotalTasksDurationInMs" : 225561,
        "IOBytes" : {
          "Total" : 2305568915,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2305568915,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1027756087,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 287956440,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 287956440,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_item_sk#142, cr_order_number#156L] "
          },
          "1" : {
            "sign" : -1665768991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142)) "
          },
          "2" : {
            "sign" : -142749672,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#141, cr_item_sk#142, cr_refunded_customer_sk#143, cr_refunded_cdemo_sk#144, cr_refunded_hdemo_sk#145, cr_refunded_addr_sk#146, cr_returning_customer_sk#147, cr_returning_cdemo_sk#148, cr_returning_hdemo_sk#149, cr_returning_addr_sk#150, cr_call_center_sk#151, cr_catalog_page_sk#152, cr_ship_mode_sk#153, cr_warehouse_sk#154, cr_reason_sk#155, cr_order_number#156L, cr_return_quantity#157, cr_return_amount#158, cr_return_tax#159, cr_return_amt_inc_tax#160, cr_fee#161, cr_return_ship_cost#162, cr_refunded_cash#163, cr_reversed_charge#164, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#142, cr_order_number#156L]\n+- Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n   +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#141,cr_item_sk#142,cr_refunded_customer_sk#143,cr_refunded_cdemo_sk#144,cr_refunded_hdemo_sk#145,cr_refunded_addr_sk#146,cr_returning_customer_sk#147,cr_returning_cdemo_sk#148,cr_returning_hdemo_sk#149,cr_returning_addr_sk#150,cr_call_center_sk#151,cr_catalog_page_sk#152,cr_ship_mode_sk#153,cr_warehouse_sk#154,cr_reason_sk#155,cr_order_number#156L,cr_return_quantity#157,cr_return_amount#158,cr_return_tax#159,cr_return_amt_inc_tax#160,cr_fee#161,cr_return_ship_cost#162,cr_refunded_cash#163,cr_reversed_charge#164,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 106093276,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cr_item_sk#142, cr_order_number#156L] Input [3]: [cr_item_sk#142, cr_order_number#156L, cr_returned_date_sk#167] "
          },
          "1" : {
            "sign" : 1535446260,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cr_item_sk#142, cr_order_number#156L, cr_returned_date_sk#167] Condition : (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142)) "
          },
          "2" : {
            "sign" : 1143401259,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [3]: [cr_item_sk#142, cr_order_number#156L, cr_returned_date_sk#167] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns] PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)] ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#142, cr_order_number#156L]\n+- Filter (isnotnull(cr_order_number#156L) AND isnotnull(cr_item_sk#142))\n   +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#142,cr_order_number#156L,cr_returned_date_sk#167] Batched: true, DataFilters: [isnotnull(cr_order_number#156L), isnotnull(cr_item_sk#142)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 287956440,
        "inputRowCount" : 14397822
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 7086,
        "TotalTasksDurationInMs" : 57197,
        "IOBytes" : {
          "Total" : 314777135,
          "Details" : {
            "IR" : 148438594,
            "IW" : 0,
            "SR" : 0,
            "SW" : 166338541
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 896103070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13202176944,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 13202176944,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] "
          },
          "1" : {
            "sign" : 1680848399,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#396 [ss_sold_date_sk#190]) "
          },
          "2" : {
            "sign" : 307511567,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#168, ss_item_sk#169, ss_customer_sk#170, ss_cdemo_sk#171, ss_hdemo_sk#172, ss_addr_sk#173, ss_store_sk#174, ss_promo_sk#175, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_list_price#179, ss_sales_price#180, ss_ext_discount_amt#181, ss_ext_sales_price#182, ss_ext_wholesale_cost#183, ss_ext_list_price#184, ss_ext_tax#185, ss_coupon_amt#186, ss_net_paid#187, ss_net_paid_inc_tax#188, ss_net_profit#189, ss_sold_date_sk#190], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n+- Filter (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#396 [ss_sold_date_sk#190])\n   :  +- Project [d_date_sk#347, d_year#353]\n   :     +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n   :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#168,ss_item_sk#169,ss_customer_sk#170,ss_cdemo_sk#171,ss_hdemo_sk#172,ss_addr_sk#173,ss_store_sk#174,ss_promo_sk#175,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_list_price#179,ss_sales_price#180,ss_ext_discount_amt#181,ss_ext_sales_price#182,ss_ext_wholesale_cost#183,ss_ext_list_price#184,ss_ext_tax#185,ss_coupon_amt#186,ss_net_paid#187,ss_net_paid_inc_tax#188,ss_net_profit#189,ss_sold_date_sk#190] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -264560720,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 13202176944,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [7]: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#190), dynamicpruningexpression(ss_sold_date_sk#190 IN dynamicpruning#396)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ ],
        "rawPlan" : "FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#169,ss_customer_sk#170,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_sales_price#180,ss_sold_date_sk#190] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#190), dynamicpruningexpression(ss_sold_date_sk#190 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_wholesale_cos...\n   +- SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n      +- AdaptiveSparkPlan isFinalPlan=false\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=350]\n            +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13202176944,
        "inputRowCount" : 275045353
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 29585,
        "TotalTasksDurationInMs" : 249755,
        "IOBytes" : {
          "Total" : 2293659851,
          "Details" : {
            "IR" : 589395052,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1704264799
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1913981512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 9216,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#347, d_year#353] "
          },
          "1" : {
            "sign" : -1331798388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347)) "
          },
          "2" : {
            "sign" : -1931830625,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#347, d_date_id#348, d_date#349, d_month_seq#350, d_week_seq#351, d_quarter_seq#352, d_year#353, d_dow#354, d_moy#355, d_dom#356, d_qoy#357, d_fy_year#358, d_fy_quarter_seq#359, d_fy_week_seq#360, d_day_name#361, d_quarter_name#362, d_holiday#363, d_weekend#364, d_following_holiday#365, d_first_dom#366, d_last_dom#367, d_same_day_ly#368, d_same_day_lq#369, d_current_day#370, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#347, d_year#353]\n+- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1090213700,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#347, d_year#353] Condition : ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347)) "
          },
          "1" : {
            "sign" : 706458889,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9216,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#347, d_year#353] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9216,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1535,
        "TotalTasksDurationInMs" : 1520,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2132546413,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#192, sr_ticket_number#199L] "
          },
          "1" : {
            "sign" : 250536887,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192)) "
          },
          "2" : {
            "sign" : -1683007754,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#191, sr_item_sk#192, sr_customer_sk#193, sr_cdemo_sk#194, sr_hdemo_sk#195, sr_addr_sk#196, sr_store_sk#197, sr_reason_sk#198, sr_ticket_number#199L, sr_return_quantity#200, sr_return_amt#201, sr_return_tax#202, sr_return_amt_inc_tax#203, sr_fee#204, sr_return_ship_cost#205, sr_refunded_cash#206, sr_reversed_charge#207, sr_store_credit#208, sr_net_loss#209, sr_returned_date_sk#210], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#192, sr_ticket_number#199L]\n+- Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n   +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#191,sr_item_sk#192,sr_customer_sk#193,sr_cdemo_sk#194,sr_hdemo_sk#195,sr_addr_sk#196,sr_store_sk#197,sr_reason_sk#198,sr_ticket_number#199L,sr_return_quantity#200,sr_return_amt#201,sr_return_tax#202,sr_return_amt_inc_tax#203,sr_fee#204,sr_return_ship_cost#205,sr_refunded_cash#206,sr_reversed_charge#207,sr_store_credit#208,sr_net_loss#209,sr_returned_date_sk#210] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1372933220,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [sr_item_sk#192, sr_ticket_number#199L] Input [3]: [sr_item_sk#192, sr_ticket_number#199L, sr_returned_date_sk#210] "
          },
          "1" : {
            "sign" : -1406234176,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [sr_item_sk#192, sr_ticket_number#199L, sr_returned_date_sk#210] Condition : (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192)) "
          },
          "2" : {
            "sign" : -439459743,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [3]: [sr_item_sk#192, sr_ticket_number#199L, sr_returned_date_sk#210] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns] PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)] ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#192, sr_ticket_number#199L]\n+- Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n   +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#192,sr_ticket_number#199L,sr_returned_date_sk#210] Batched: true, DataFilters: [isnotnull(sr_ticket_number#199L), isnotnull(sr_item_sk#192)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 576032220,
        "inputRowCount" : 28801611
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 18031,
        "TotalTasksDurationInMs" : 127869,
        "IOBytes" : {
          "Total" : 624373554,
          "Details" : {
            "IR" : 274155449,
            "IW" : 0,
            "SR" : 0,
            "SW" : 350218105
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1048598625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20848746300,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 20848746300,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnull(sr_ticket_number#199L) "
          },
          "5" : {
            "sign" : 1976255349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20848746300,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 20848746300,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192)) "
          },
          "1" : {
            "sign" : 917869055,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 10621623400,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353] "
          },
          "0" : {
            "sign" : 681020376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11683785740,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 11683785740,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318] "
          },
          "2" : {
            "sign" : 1078971290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 12745948080,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#190 = d_date_sk#347) "
          },
          "3" : {
            "sign" : 466364314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13899164200,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 13899164200,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [d_year#353, ss_item_sk#169, ss_customer_sk#170], [d_year#353 AS ss_sold_year#315, ss_item_sk#169, ss_customer_sk#170, sum(ss_quantity#177) AS ss_qty#316L, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#178)),17,2) AS ss_wc#317, MakeDecimal(sum(UnscaledValue(ss_sales_price#180)),17,2) AS ss_sp#318]\n+- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353]\n   +- Join Inner, (ss_sold_date_sk#190 = d_date_sk#347)\n      :- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n      :  +- Filter isnull(sr_ticket_number#199L)\n      :     +- Join LeftOuter, ((sr_ticket_number#199L = ss_ticket_number#176L) AND (ss_item_sk#169 = sr_item_sk#192))\n      :        :- Project [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n      :        :  +- Filter (isnotnull(ss_sold_date_sk#190) AND dynamicpruning#396 [ss_sold_date_sk#190])\n      :        :     :  +- Project [d_date_sk#347, d_year#353]\n      :        :     :     +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n      :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n      :        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#168,ss_item_sk#169,ss_customer_sk#170,ss_cdemo_sk#171,ss_hdemo_sk#172,ss_addr_sk#173,ss_store_sk#174,ss_promo_sk#175,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_list_price#179,ss_sales_price#180,ss_ext_discount_amt#181,ss_ext_sales_price#182,ss_ext_wholesale_cost#183,ss_ext_list_price#184,ss_ext_tax#185,ss_coupon_amt#186,ss_net_paid#187,ss_net_paid_inc_tax#188,ss_net_profit#189,ss_sold_date_sk#190] parquet\n      :        +- Project [sr_item_sk#192, sr_ticket_number#199L]\n      :           +- Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n      :              +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#191,sr_item_sk#192,sr_customer_sk#193,sr_cdemo_sk#194,sr_hdemo_sk#195,sr_addr_sk#196,sr_store_sk#197,sr_reason_sk#198,sr_ticket_number#199L,sr_return_quantity#200,sr_return_amt#201,sr_return_tax#202,sr_return_amt_inc_tax#203,sr_fee#204,sr_return_ship_cost#205,sr_refunded_cash#206,sr_reversed_charge#207,sr_store_credit#208,sr_net_loss#209,sr_returned_date_sk#210] parquet\n      +- Project [d_date_sk#347, d_year#353]\n         +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_date_id#348,d_date#349,d_month_seq#350,d_week_seq#351,d_quarter_seq#352,d_year#353,d_dow#354,d_moy#355,d_dom#356,d_qoy#357,d_fy_year#358,d_fy_quarter_seq#359,d_fy_week_seq#360,d_day_name#361,d_quarter_name#362,d_holiday#363,d_weekend#364,d_following_holiday#365,d_first_dom#366,d_last_dom#367,d_same_day_ly#368,d_same_day_lq#369,d_current_day#370,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1637446718,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [sr_item_sk#192, sr_ticket_number#199L] Arguments: [sr_ticket_number#199L ASC NULLS FIRST, sr_item_sk#192 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : 644035671,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 20848746300,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190, sr_item_sk#192, sr_ticket_number#199L] Condition : isnull(sr_ticket_number#199L) "
          },
          "9" : {
            "sign" : 493829854,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sr_item_sk#192, sr_ticket_number#199L] Arguments: 1 "
          },
          "5" : {
            "sign" : 1077174907,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 20848746300,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_ticket_number#176L, ss_item_sk#169] Right keys [2]: [sr_ticket_number#199L, sr_item_sk#192] Join type: LeftOuter Join condition: None "
          },
          "10" : {
            "sign" : -1397335678,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051504,
            "rowCount" : 366,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#347, d_year#353] Arguments: 2 "
          },
          "6" : {
            "sign" : 1652689971,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] Arguments: [ss_ticket_number#176L ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 234383423,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 10621623400,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353] Input [8]: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190, d_date_sk#347, d_year#353] "
          },
          "0" : {
            "sign" : 152348630,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 11683785740,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353] Keys [3]: [d_year#353, ss_item_sk#169, ss_customer_sk#170] Functions [3]: [partial_sum(ss_quantity#177), partial_sum(UnscaledValue(ss_wholesale_cost#178)), partial_sum(UnscaledValue(ss_sales_price#180))] Aggregate Attributes [3]: [sum#399L, sum#400L, sum#401L] Results [6]: [d_year#353, ss_item_sk#169, ss_customer_sk#170, sum#402L, sum#403L, sum#404L] "
          },
          "2" : {
            "sign" : 81718302,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12745948080,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#190] Right keys [1]: [d_date_sk#347] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 1781991848,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3539423488,
            "rowCount" : 55303492,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] Arguments: 0 "
          },
          "3" : {
            "sign" : -1484257802,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 13899164200,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190] Input [9]: [ss_item_sk#169, ss_customer_sk#170, ss_ticket_number#176L, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190, sr_item_sk#192, sr_ticket_number#199L] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_year#353, ss_item_sk#169, ss_customer_sk#170], functions=[partial_sum(ss_quantity#177), partial_sum(UnscaledValue(ss_wholesale_cost#178)), partial_sum(UnscaledValue(ss_sales_price#180))], output=[d_year#353, ss_item_sk#169, ss_customer_sk#170, sum#402L, sum#403L, sum#404L])\n+- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, d_year#353]\n   +- BroadcastHashJoin [ss_sold_date_sk#190], [d_date_sk#347], Inner, BuildRight, false\n      :- Project [ss_item_sk#169, ss_customer_sk#170, ss_quantity#177, ss_wholesale_cost#178, ss_sales_price#180, ss_sold_date_sk#190]\n      :  +- Filter isnull(sr_ticket_number#199L)\n      :     +- SortMergeJoin [ss_ticket_number#176L, ss_item_sk#169], [sr_ticket_number#199L, sr_item_sk#192], LeftOuter\n      :        :- Sort [ss_ticket_number#176L ASC NULLS FIRST, ss_item_sk#169 ASC NULLS FIRST], false, 0\n      :        :  +- ShuffleQueryStage 0\n      :        :     +- Exchange hashpartitioning(ss_ticket_number#176L, ss_item_sk#169, 200), ENSURE_REQUIREMENTS, [plan_id=363]\n      :        :        +- *(1) ColumnarToRow\n      :        :           +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#169,ss_customer_sk#170,ss_ticket_number#176L,ss_quantity#177,ss_wholesale_cost#178,ss_sales_price#180,ss_sold_date_sk#190] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#190), dynamicpruningexpression(ss_sold_date_sk#190 IN dynamicpruning#3..., PushedFilters: [], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:int,ss_wholesale_cos...\n      :        :                 +- SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n      :        :                    +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#347, d_year#353], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=350]\n                                          +- Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :        +- Sort [sr_ticket_number#199L ASC NULLS FIRST, sr_item_sk#192 ASC NULLS FIRST], false, 0\n      :           +- ShuffleQueryStage 1\n      :              +- Exchange hashpartitioning(sr_ticket_number#199L, sr_item_sk#192, 200), ENSURE_REQUIREMENTS, [plan_id=380]\n      :                 +- *(2) Project [sr_item_sk#192, sr_ticket_number#199L]\n      :                    +- *(2) Filter (isnotnull(sr_ticket_number#199L) AND isnotnull(sr_item_sk#192))\n      :                       +- *(2) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#192,sr_ticket_number#199L,sr_returned_date_sk#210] Batched: true, DataFilters: [isnotnull(sr_ticket_number#199L), isnotnull(sr_item_sk#192)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n      +- BroadcastQueryStage 2\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=402]\n            +- *(3) Filter ((isnotnull(d_year#353) AND (d_year#353 = 2000)) AND isnotnull(d_date_sk#347))\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#347,d_year#353] Batched: true, DataFilters: [isnotnull(d_year#353), (d_year#353 = 2000), isnotnull(d_date_sk#347)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4231713656,
        "inputRowCount" : 84105469
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "0" : [ 8933398, 8931830, 8921684, 8921684, 8931830, 9007556, 8889678, 8911538, 8943544, 8911538, 8997410, 8857672, 8889678, 8965404, 8975550, 8921684, 8975550, 8921684, 9007556, 8975550, 8921684, 8943544, 9051276, 8921684, 9007556, 8985696, 8985696, 8943544, 8997410, 8997410, 8943544, 8997410, 8879532, 8857672, 8997410, 8963836, 8943544, 8975550, 8921684, 8921684, 8911538, 9029416, 9009124, 8943544, 8953690, 8899824, 8847526, 8921684, 8857672, 8899824, 9007556, 8985696, 8955258, 8953690, 8943544, 8965404, 8985696, 8889678, 8921684, 8943544, 8953690, 8965404, 8953690, 8943544, 8911538, 8975550, 9019270, 8943544, 8921684, 8889678, 8975550, 8911538, 8911538, 9041130, 8921684, 8965404, 8911538, 8943544, 8987264, 8955258, 8953690, 8987264, 8847526, 8997410, 8889678, 8975550, 8933398, 8965404, 8975550, 8975550, 8899824, 8921684, 8965404, 8931830, 8963836, 8965404, 8899824, 8911538, 8835812, 8943492, 8931830, 8921684, 8953690, 8985696, 8975550, 9019270, 8867818, 8901392, 8931830, 8889678, 9041130, 8911538, 8953690, 8921684, 8943544, 8879532, 8985696, 9029416, 8953690, 8899824, 8879532, 8943544, 8975550, 8899824, 8901392, 8867818, 8953690, 8953690, 8921684, 8953690, 8931830, 8921684, 8943544, 8953690, 8921684, 8921684, 8965404, 8953690, 8975550, 8965404, 8931830, 9051276, 8889678, 8921684, 8889678, 8943544, 8985696, 8965404, 8987264, 8911538, 8931830, 8901392, 9029416, 8975550, 8975550, 8921684, 9019270, 8899824, 8965404, 8953690, 8975550, 8921684, 8911538, 8921684, 8987264, 8911538, 8943544, 8965404, 8965404, 8965404, 9007556, 8911538, 8943544, 8901392, 8943544, 8953690, 8911538, 8953690, 8931830, 8997410, 8953690, 8921684, 8921684, 8965404, 8911538, 8901392, 8931830, 8921684, 8867818, 8901392, 8975550, 8955258, 8923252, 8911538, 8943544, 8921684, 8931830, 8975550, 8889678, 8965404 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 15216,
        "TotalTasksDurationInMs" : 164773,
        "IOBytes" : {
          "Total" : 3348380555,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2054482904,
            "SW" : 1293897651
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1873760925,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3454348848,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 3454348848,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] "
          },
          "1" : {
            "sign" : 953048072,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#397 [ws_sold_date_sk#54]) "
          },
          "2" : {
            "sign" : 1709608392,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#21, ws_ship_date_sk#22, ws_item_sk#23, ws_bill_customer_sk#24, ws_bill_cdemo_sk#25, ws_bill_hdemo_sk#26, ws_bill_addr_sk#27, ws_ship_customer_sk#28, ws_ship_cdemo_sk#29, ws_ship_hdemo_sk#30, ws_ship_addr_sk#31, ws_web_page_sk#32, ws_web_site_sk#33, ws_ship_mode_sk#34, ws_warehouse_sk#35, ws_promo_sk#36, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_list_price#40, ws_sales_price#41, ws_ext_discount_amt#42, ws_ext_sales_price#43, ws_ext_wholesale_cost#44, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54]\n+- Filter (((isnotnull(ws_sold_date_sk#54) AND isnotnull(ws_item_sk#23)) AND isnotnull(ws_bill_customer_sk#24)) AND dynamicpruning#397 [ws_sold_date_sk#54])\n   :  +- Project [d_date_sk#79, d_year#85]\n   :     +- Filter (isnotnull(d_date_sk#79) AND ((d_year#85 = 2000) AND isnotnull(d_year#85)))\n   :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#79,d_date_id#80,d_date#81,d_month_seq#82,d_week_seq#83,d_quarter_seq#84,d_year#85,d_dow#86,d_moy#87,d_dom#88,d_qoy#89,d_fy_year#90,d_fy_quarter_seq#91,d_fy_week_seq#92,d_day_name#93,d_quarter_name#94,d_holiday#95,d_weekend#96,d_following_holiday#97,d_first_dom#98,d_last_dom#99,d_same_day_ly#100,d_same_day_lq#101,d_current_day#102,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#21,ws_ship_date_sk#22,ws_item_sk#23,ws_bill_customer_sk#24,ws_bill_cdemo_sk#25,ws_bill_hdemo_sk#26,ws_bill_addr_sk#27,ws_ship_customer_sk#28,ws_ship_cdemo_sk#29,ws_ship_hdemo_sk#30,ws_ship_addr_sk#31,ws_web_page_sk#32,ws_web_site_sk#33,ws_ship_mode_sk#34,ws_warehouse_sk#35,ws_promo_sk#36,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_list_price#40,ws_sales_price#41,ws_ext_discount_amt#42,ws_ext_sales_price#43,ws_ext_wholesale_cost#44,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1673761526,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3454348848,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_bill_customer_sk#24)) "
          },
          "1" : {
            "sign" : -1229409912,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3454348848,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [7]: [ws_item_sk#23, ws_bill_customer_sk#24, ws_order_number#37L, ws_quantity#38, ws_wholesale_cost#39, ws_sales_price#41, ws_sold_date_sk#54] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#54), dynamicpruningexpression(ws_sold_date_sk#54 IN dynamicpruning#396)] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ws_item_sk#23) AND isnotnull(ws_bill_customer_sk#24))\n+- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#23,ws_bill_customer_sk#24,ws_order_number#37L,ws_quantity#38,ws_wholesale_cost#39,ws_sales_price#41,ws_sold_date_sk#54] Batched: true, DataFilters: [isnotnull(ws_item_sk#23), isnotnull(ws_bill_customer_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#54), dynamicpruningexpression(ws_sold_date_sk#54 IN dynamicpruning#396)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quantity:int,ws_wholesale...\n      +- ReusedSubquery SubqueryBroadcast dynamicpruning#396, 0, [d_date_sk#347], [id=#353]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3454348848,
        "inputRowCount" : 71965601
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 13110,
        "TotalTasksDurationInMs" : 15103,
        "IOBytes" : {
          "Total" : 625871900,
          "Details" : {
            "IR" : 177844377,
            "IW" : 0,
            "SR" : 0,
            "SW" : 448027523
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227358551,
  "SQLEndTimeInMs" : 1702227436310,
  "Objectives" : {
    "DurationInMs" : 77759,
    "IOBytes" : {
      "Total" : 13439879370,
      "Details" : {
        "IR" : 1634334106,
        "IW" : 0,
        "SR" : 5902772632,
        "SW" : 5902772632
      }
    }
  }
}
