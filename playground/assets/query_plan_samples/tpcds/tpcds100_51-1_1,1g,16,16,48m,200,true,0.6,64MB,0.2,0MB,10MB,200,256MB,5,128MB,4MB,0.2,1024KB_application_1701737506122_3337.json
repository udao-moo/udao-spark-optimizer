{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -997618928,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727606976,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43] "
        },
        "8" : {
          "sign" : -1718693104,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 2687549040,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [sum(_w0#131) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#7], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
        },
        "19" : {
          "sign" : 6871104,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 2567261664,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [sum(_w0#132) windowspecdefinition(ss_item_sk#73, d_date#97 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#9], [ss_item_sk#73], [d_date#97 ASC NULLS FIRST] "
        },
        "23" : {
          "sign" : -2025838095,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6601088472,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94] "
        },
        "4" : {
          "sign" : -1624348674,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 5459543588,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [max(web_sales#2) windowspecdefinition(item_sk#0, d_date#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#4, max(store_sales#3) windowspecdefinition(item_sk#0, d_date#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#5], [item_sk#0], [d_date#1 ASC NULLS FIRST] "
        },
        "15" : {
          "sign" : 1260230494,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5376,
          "rowCount" : 336,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#44, d_date#46] "
        },
        "11" : {
          "sign" : -1477036209,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#43 = d_date_sk#44) "
        },
        "9" : {
          "sign" : 529446259,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1710258480,
          "rowCount" : 61080660,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#6, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#131, ws_item_sk#12] "
        },
        "22" : {
          "sign" : -639528141,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#94 = d_date_sk#95) "
        },
        "26" : {
          "sign" : -1245912197,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5376,
          "rowCount" : 336,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#95, d_date#97] "
        },
        "13" : {
          "sign" : 1223231258,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#141 [ws_sold_date_sk#43]) "
        },
        "24" : {
          "sign" : -632025195,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#142 [ss_sold_date_sk#94]) "
        },
        "16" : {
          "sign" : -464477344,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 82656,
          "rowCount" : 336,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44)) "
        },
        "5" : {
          "sign" : 632015399,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3275726153,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#6) THEN item_sk#6 ELSE item_sk#8 END AS item_sk#0, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#97 END AS d_date#1, cume_sales#7 AS web_sales#2, cume_sales#9 AS store_sales#3] "
        },
        "10" : {
          "sign" : -797735722,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1667894520,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, d_date#46] "
        },
        "21" : {
          "sign" : 2014641838,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, d_date#97] "
        },
        "6" : {
          "sign" : -828494429,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3821680512,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#6 = item_sk#8) AND (d_date#46 = d_date#97)) "
        },
        "1" : {
          "sign" : -405596188,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 5459543588,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 700042170,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : 1366518144,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#72, ss_item_sk#73, ss_customer_sk#74, ss_cdemo_sk#75, ss_hdemo_sk#76, ss_addr_sk#77, ss_store_sk#78, ss_promo_sk#79, ss_ticket_number#80L, ss_quantity#81, ss_wholesale_cost#82, ss_list_price#83, ss_sales_price#84, ss_ext_discount_amt#85, ss_ext_sales_price#86, ss_ext_wholesale_cost#87, ss_ext_list_price#88, ss_ext_tax#89, ss_coupon_amt#90, ss_net_paid#91, ss_net_paid_inc_tax#92, ss_net_profit#93, ss_sold_date_sk#94], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 1662135528,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#10, ws_ship_date_sk#11, ws_item_sk#12, ws_bill_customer_sk#13, ws_bill_cdemo_sk#14, ws_bill_hdemo_sk#15, ws_bill_addr_sk#16, ws_ship_customer_sk#17, ws_ship_cdemo_sk#18, ws_ship_hdemo_sk#19, ws_ship_addr_sk#20, ws_web_page_sk#21, ws_web_site_sk#22, ws_ship_mode_sk#23, ws_warehouse_sk#24, ws_promo_sk#25, ws_order_number#26L, ws_quantity#27, ws_wholesale_cost#28, ws_list_price#29, ws_sales_price#30, ws_ext_discount_amt#31, ws_ext_sales_price#32, ws_ext_wholesale_cost#33, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -666208583,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 8000,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 577472260,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1633711968,
          "rowCount" : 58346856,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#73, d_date#97], [ss_item_sk#73 AS item_sk#8, d_date#97, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#132, ss_item_sk#73] "
        },
        "27" : {
          "sign" : -1100644167,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 82656,
          "rowCount" : 336,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#98) AND ((d_month_seq#98 >= 1212) AND (d_month_seq#98 <= 1223))) AND isnotnull(d_date_sk#95)) "
        },
        "2" : {
          "sign" : 143032931,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 5459543588,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [item_sk#0 ASC NULLS FIRST, d_date#1 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : 144953049,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1867099392,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [item_sk#8, d_date#97, cume_sales#9] "
        },
        "7" : {
          "sign" : 1224549351,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1954581120,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [item_sk#6, d_date#46, cume_sales#7] "
        },
        "3" : {
          "sign" : 554334099,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 5459543588,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#4) AND isnotnull(store_cumulative#5)) AND (web_cumulative#4 > store_cumulative#5)) "
        },
        "28" : {
          "sign" : -513469665,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#95, d_date_id#96, d_date#97, d_month_seq#98, d_week_seq#99, d_quarter_seq#100, d_year#101, d_dow#102, d_moy#103, d_dom#104, d_qoy#105, d_fy_year#106, d_fy_quarter_seq#107, d_fy_week_seq#108, d_day_name#109, d_quarter_name#110, d_holiday#111, d_weekend#112, d_following_holiday#113, d_first_dom#114, d_last_dom#115, d_same_day_ly#116, d_same_day_lq#117, d_current_day#118, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Window",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Join",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Aggregate",
        "toId" : 19,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Window",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Window",
        "toId" : 3,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Filter",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#0 ASC NULLS FIRST, d_date#1 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#4) AND isnotnull(store_cumulative#5)) AND (web_cumulative#4 > store_cumulative#5))\n         +- Window [max(web_sales#2) windowspecdefinition(item_sk#0, d_date#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#4, max(store_sales#3) windowspecdefinition(item_sk#0, d_date#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#5], [item_sk#0], [d_date#1 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#6) THEN item_sk#6 ELSE item_sk#8 END AS item_sk#0, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#97 END AS d_date#1, cume_sales#7 AS web_sales#2, cume_sales#9 AS store_sales#3]\n               +- Join FullOuter, ((item_sk#6 = item_sk#8) AND (d_date#46 = d_date#97))\n                  :- Project [item_sk#6, d_date#46, cume_sales#7]\n                  :  +- Window [sum(_w0#131) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#7], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#6, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#131, ws_item_sk#12]\n                  :        +- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n                  :           +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n                  :              :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n                  :              :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#141 [ws_sold_date_sk#43])\n                  :              :     :  +- Project [d_date_sk#44, d_date#46]\n                  :              :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n                  :              :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n                  :              +- Project [d_date_sk#44, d_date#46]\n                  :                 +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n                  +- Project [item_sk#8, d_date#97, cume_sales#9]\n                     +- Window [sum(_w0#132) windowspecdefinition(ss_item_sk#73, d_date#97 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#9], [ss_item_sk#73], [d_date#97 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#73, d_date#97], [ss_item_sk#73 AS item_sk#8, d_date#97, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#132, ss_item_sk#73]\n                           +- Project [ss_item_sk#73, ss_sales_price#84, d_date#97]\n                              +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#95)\n                                 :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n                                 :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#142 [ss_sold_date_sk#94])\n                                 :     :  +- Project [d_date_sk#95, d_date#97]\n                                 :     :     +- Filter ((isnotnull(d_month_seq#98) AND ((d_month_seq#98 >= 1212) AND (d_month_seq#98 <= 1223))) AND isnotnull(d_date_sk#95))\n                                 :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#95,d_date_id#96,d_date#97,d_month_seq#98,d_week_seq#99,d_quarter_seq#100,d_year#101,d_dow#102,d_moy#103,d_dom#104,d_qoy#105,d_fy_year#106,d_fy_quarter_seq#107,d_fy_week_seq#108,d_day_name#109,d_quarter_name#110,d_holiday#111,d_weekend#112,d_following_holiday#113,d_first_dom#114,d_last_dom#115,d_same_day_ly#116,d_same_day_lq#117,d_current_day#118,... 4 more fields] parquet\n                                 :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n                                 +- Project [d_date_sk#95, d_date#97]\n                                    +- Filter ((isnotnull(d_month_seq#98) AND ((d_month_seq#98 >= 1212) AND (d_month_seq#98 <= 1223))) AND isnotnull(d_date_sk#95))\n                                       +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#95,d_date_id#96,d_date#97,d_month_seq#98,d_week_seq#99,d_quarter_seq#100,d_year#101,d_dow#102,d_moy#103,d_dom#104,d_qoy#105,d_fy_year#106,d_fy_quarter_seq#107,d_fy_week_seq#108,d_day_name#109,d_quarter_name#110,d_holiday#111,d_weekend#112,d_following_holiday#113,d_first_dom#114,d_last_dom#115,d_same_day_ly#116,d_same_day_lq#117,d_current_day#118,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 56815427556,
      "inputRowCount" : 347175075
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 209340488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 3455443320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "5" : {
            "sign" : 1836872993,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2073265992,
            "rowCount" : 28795361,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : -364840252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3455443320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1614935043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1756039507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3455443320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 428175029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3455443320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- LogicalQueryStage Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2073265992,
        "inputRowCount" : 28795361
      },
      "PD" : {
        "6" : [ 3061167, 3044743, 3015647, 3061167, 3061167, 2899263, 3349221, 2782879, 2811975, 3349221, 3061167, 2841071, 3317215, 2986551, 3061167, 3061167, 3125179, 3125179, 3367288, 3367288, 3125179, 3349221, 3061167, 3044743, 3061167, 3061167, 3061167, 3044743, 3093173, 3044743, 3367288, 3061167, 3125179, 2870167, 3061167, 3061167, 2957455, 2782879, 2782879, 3349221, 3061167, 3061167, 3015647, 3189191, 3061167, 3061167, 3285209, 3044743, 3044743, 3317215, 3349221, 3349221, 3044743, 3253203, 3061167, 3317215, 3349221, 3093173, 3044743, 3061167, 2986551, 3061167, 3061167, 3349221, 3061167, 3044743, 3349221, 3061167, 3061167, 3061167, 3093173, 3044743, 3285209, 3061167, 3061167, 3061167, 3044743, 3061167, 3061167, 3015647, 3044743, 2782879, 3349221, 3061167, 3061167, 3044743, 3015647, 3367288, 3349221, 3044743, 3349221, 3044743, 3061167, 3015647, 3061167, 3061167, 3044743, 3044743, 3349221, 3044743, 3061167, 3093173, 3061167, 3349221, 3044743, 3061167, 3061167, 3349221, 3044743, 3061167, 3061167, 3157185, 2928359, 3367288, 2782879, 3044743, 3061167, 3044743, 2986551, 3061167, 3061167, 3061167, 3367288, 3044743, 3044743, 3061167, 3061167, 2767948, 3061167, 3044743, 3044743, 3044743, 3221197, 3061167, 3061167, 3125179, 3061167, 3061167, 3061167, 3044743, 3061167, 3061167, 3349221, 3061167, 3061167, 3044743, 3044743, 3044743, 3349221, 3093173, 3061167, 2782879, 3061167, 3044743, 3125179, 3437700, 3125179, 3349221, 3044743, 3044743, 2928359, 3093173, 3044743, 3061167, 3349221, 3061167, 3061167, 3015647, 3061167, 3044743, 2767948, 3253203, 3253203, 3061167, 3253203, 3044743, 2782879, 2986551, 3044743, 3044743, 3044743, 3221197, 3044743, 3061167, 3367288, 3367288, 3044743, 3189191, 3061167, 3044743, 3044743, 3061167, 3349221, 3044743, 3044743, 3044743, 3061167, 3061167, 3349221, 3061167 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227143111,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2822,
        "IOBytes" : {
          "Total" : 591859343,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 591859343,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1786252875,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049808240,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], ShuffleQueryStage 6 "
          },
          "8" : {
            "sign" : 1582914088,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2687549040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : 215218612,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 3350098553963780570,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "11" : {
            "sign" : 233999828,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1649698662,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -943193350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1710258480,
            "rowCount" : 61080660,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1493215245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2010059132378268342,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "10" : {
            "sign" : -145281412,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1199780845,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#151, d_date#155, cume_sales#152] "
          },
          "6" : {
            "sign" : 1424459133,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2345068987774646400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : -300725546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3350098553963780570,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -834286823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -841542353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3350098553963780570,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 655768784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1954581120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "3" : {
            "sign" : -1757496185,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3350098553963780570,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- LogicalQueryStage Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5\n                  +- Project [item_sk#151, d_date#155, cume_sales#152]\n                     +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], ShuffleQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2760066720,
        "inputRowCount" : 87325866
      },
      "PD" : {
        "3" : [ 1512365, 1512365, 1485914, 1512365, 1512365, 1406561, 1663601, 1374876, 1380110, 1663601, 1512365, 1380110, 1605409, 1459463, 1512365, 1512365, 1518121, 1518121, 1663601, 1663601, 1512365, 1663601, 1518121, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1669933, 1512365, 1512365, 1401327, 1512365, 1512365, 1427778, 1374876, 1374876, 1663601, 1512365, 1512365, 1512365, 1518121, 1512365, 1512365, 1576313, 1512365, 1512365, 1605409, 1663601, 1663601, 1512365, 1547217, 1512365, 1628749, 1663601, 1512365, 1512365, 1512365, 1454229, 1512365, 1512365, 1663601, 1518121, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1512365, 1634505, 1512365, 1512365, 1518121, 1512365, 1512365, 1512365, 1512365, 1512365, 1380110, 1663601, 1512365, 1512365, 1512365, 1512365, 1663601, 1663601, 1512365, 1663601, 1512365, 1518121, 1459463, 1518121, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1663601, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1433012, 1663601, 1374876, 1512365, 1512365, 1512365, 1433012, 1512365, 1518121, 1512365, 1663601, 1512365, 1512365, 1518121, 1518121, 1374876, 1512365, 1512365, 1512365, 1512365, 1576313, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1518121, 1512365, 1663601, 1512365, 1512365, 1512365, 1512365, 1512365, 1663601, 1518121, 1512365, 1374876, 1518121, 1512365, 1512365, 1669933, 1512365, 1663601, 1512365, 1512365, 1433012, 1512365, 1512365, 1512365, 1663601, 1518121, 1512365, 1485914, 1518121, 1512365, 1374876, 1512365, 1547217, 1512365, 1576313, 1512365, 1374876, 1427778, 1512365, 1512365, 1512365, 1541461, 1512365, 1512365, 1663601, 1663601, 1512365, 1518121, 1512365, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1512365, 1512365, 1663601, 1518121 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 13703.0,
        "FinishedTasksDistributionInMs" : [ 1411.0, 1411.0, 12292.0, 12292.0, 12292.0 ]
      },
      "StartTimeInMs" : 1702227129035,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16898,
        "IOBytes" : {
          "Total" : 3043222307,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1738954276,
            "SW" : 1304268031
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 1582914088,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 713598034,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : 2025951711,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1384268524135320136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -943193350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 454107840,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1119547678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 830561114481192082,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "10" : {
            "sign" : 952188729,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1867099392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7 "
          },
          "6" : {
            "sign" : 795938102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 968987966894724096,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : 51474399,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1384268524135320136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1403308762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1181172284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1384268524135320136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 655768784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 518980388,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "3" : {
            "sign" : -1602513010,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1384268524135320136,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- LogicalQueryStage Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5\n                  +- LogicalQueryStage Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2321207232,
        "inputRowCount" : 11352696
      },
      "PD" : {
        "2" : [ 694097, 694097, 630997, 694097, 694097, 630997, 705315, 630997, 630997, 705315, 667646, 630997, 694097, 630997, 694097, 694097, 694097, 694097, 763507, 763507, 694097, 705315, 694097, 667646, 694097, 694097, 694097, 694097, 694097, 641195, 763507, 694097, 694097, 630997, 694097, 694097, 630997, 630997, 630997, 763507, 694097, 694097, 641195, 694097, 694097, 694097, 694097, 641195, 641195, 694097, 723193, 734411, 683899, 694097, 694097, 694097, 705315, 694097, 641195, 694097, 630997, 694097, 694097, 763507, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 694097, 641195, 694097, 630997, 705315, 694097, 694097, 694097, 641195, 705315, 694097, 694097, 694097, 641195, 694097, 630997, 694097, 694097, 694097, 694097, 705315, 641195, 694097, 694097, 694097, 705315, 694097, 694097, 694097, 734411, 641195, 694097, 694097, 694097, 630997, 734411, 630997, 694097, 694097, 641195, 630997, 694097, 694097, 694097, 763507, 694097, 694097, 694097, 694097, 606951, 694097, 641195, 694097, 667646, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 705315, 694097, 694097, 630997, 694097, 694097, 694097, 763507, 694097, 694097, 641195, 641195, 630997, 694097, 641195, 694097, 705315, 694097, 694097, 630997, 694097, 694097, 630997, 694097, 694097, 694097, 694097, 630997, 630997, 630997, 694097, 694097, 657448, 694097, 630997, 694097, 763507, 763507, 641195, 694097, 694097, 641195, 641195, 694097, 705315, 641195, 694097, 630997, 694097, 694097, 734411, 694097 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227129296,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16637,
        "IOBytes" : {
          "Total" : 2770229625,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1596082523,
            "SW" : 1174147102
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 952188729,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1259769888,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : -642607105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 3517603483756163656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "5" : {
            "sign" : -1844270860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2110562090253698194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "6" : {
            "sign" : -1371613880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2462322438629314560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : -2125020393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3517603483756163656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1248858716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 948052730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3517603483756163656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1217586620,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1954581120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#149, d_date#46, cume_sales#150], ShuffleQueryStage 8 "
          },
          "3" : {
            "sign" : 231487304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3517603483756163656,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- LogicalQueryStage Project [item_sk#149, d_date#46, cume_sales#150], ShuffleQueryStage 8\n                  +- LogicalQueryStage Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3214351008,
        "inputRowCount" : 26245206
      },
      "PD" : {
        "4" : [ 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2096289, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1013.0,
        "FinishedTasksDistributionInMs" : [ 1013.0, 1013.0, 1013.0, 1013.0, 1013.0 ]
      },
      "StartTimeInMs" : 1702227137247,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8686,
        "IOBytes" : {
          "Total" : 2075849010,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1304268031,
            "SW" : 771580979
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1703879056,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43] "
          },
          "8" : {
            "sign" : 287410839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1156057001440,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "19" : {
            "sign" : -268606778,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3212529723040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#151, d_date#155, cume_sales#152] "
          },
          "23" : {
            "sign" : -1374081772,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3212529723040,
            "rowCount" : 100391553845,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#94 = d_date_sk#153) "
          },
          "4" : {
            "sign" : 310122057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 5790426359085,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "15" : {
            "sign" : 1260230494,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5376,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#44, d_date#46] "
          },
          "11" : {
            "sign" : -673533905,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 840768728320,
            "rowCount" : 26274022760,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#43 = d_date_sk#44) "
          },
          "9" : {
            "sign" : -523316949,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 735672637280,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12] "
          },
          "22" : {
            "sign" : -1556450274,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2409397292280,
            "rowCount" : 100391553845,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, d_date#155] "
          },
          "26" : {
            "sign" : 1366518144,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#72, ss_item_sk#73, ss_customer_sk#74, ss_cdemo_sk#75, ss_hdemo_sk#76, ss_addr_sk#77, ss_store_sk#78, ss_promo_sk#79, ss_ticket_number#80L, ss_quantity#81, ss_wholesale_cost#82, ss_list_price#83, ss_sales_price#84, ss_ext_discount_amt#85, ss_ext_sales_price#86, ss_ext_wholesale_cost#87, ss_ext_list_price#88, ss_ext_tax#89, ss_coupon_amt#90, ss_net_paid#91, ss_net_paid_inc_tax#92, ss_net_profit#93, ss_sold_date_sk#94], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 464153210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43]) "
          },
          "24" : {
            "sign" : 1864132572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94] "
          },
          "16" : {
            "sign" : -464477344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 82656,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44)) "
          },
          "5" : {
            "sign" : -1510264988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3474255815451,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "10" : {
            "sign" : -404806468,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 630576546240,
            "rowCount" : 26274022760,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, d_date#46] "
          },
          "21" : {
            "sign" : -1780721345,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2810963507660,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73] "
          },
          "6" : {
            "sign" : -1071744814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4053298451360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : 496581063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5790426359085,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 700042170,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : -1758129210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94]) "
          },
          "14" : {
            "sign" : 1662135528,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#10, ws_ship_date_sk#11, ws_item_sk#12, ws_bill_customer_sk#13, ws_bill_cdemo_sk#14, ws_bill_hdemo_sk#15, ws_bill_addr_sk#16, ws_ship_customer_sk#17, ws_ship_cdemo_sk#18, ws_ship_hdemo_sk#19, ws_ship_addr_sk#20, ws_web_page_sk#21, ws_web_site_sk#22, ws_ship_mode_sk#23, ws_warehouse_sk#24, ws_promo_sk#25, ws_order_number#26L, ws_quantity#27, ws_wholesale_cost#28, ws_list_price#29, ws_sales_price#30, ws_ext_discount_amt#31, ws_ext_sales_price#32, ws_ext_wholesale_cost#33, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 1834506606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 425375948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 4417228369180,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          },
          "27" : {
            "sign" : 775018556,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5376,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#153, d_date#155] "
          },
          "2" : {
            "sign" : -56102140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5790426359085,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 980876820,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#44, d_date#46], BroadcastQueryStage 0 "
          },
          "30" : {
            "sign" : -1442151552,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#153, d_date#155], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1242012865,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 840768728320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "29" : {
            "sign" : -1007673562,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#153, d_date_id#154, d_date#155, d_month_seq#156, d_week_seq#157, d_quarter_seq#158, d_year#159, d_dow#160, d_moy#161, d_dom#162, d_qoy#163, d_fy_year#164, d_fy_quarter_seq#165, d_fy_week_seq#166, d_day_name#167, d_quarter_name#168, d_holiday#169, d_weekend#170, d_following_holiday#171, d_first_dom#172, d_last_dom#173, d_same_day_ly#174, d_same_day_lq#175, d_current_day#176, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -465525256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 5790426359085,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          },
          "28" : {
            "sign" : 793049260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 82656,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153)) "
          }
        },
        "links" : [ {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Window",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12]\n                  :        +- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n                  :           +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n                  :              :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n                  :              :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43])\n                  :              :     :  +- Project [d_date_sk#44, d_date#46]\n                  :              :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n                  :              :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n                  :              +- LogicalQueryStage Project [d_date_sk#44, d_date#46], BroadcastQueryStage 0\n                  +- Project [item_sk#151, d_date#155, cume_sales#152]\n                     +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73]\n                           +- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n                              +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#153)\n                                 :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n                                 :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94])\n                                 :     :  +- Project [d_date_sk#153, d_date#155]\n                                 :     :     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                                 :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n                                 :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n                                 +- LogicalQueryStage Project [d_date_sk#153, d_date#155], BroadcastQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56781590440,
        "inputRowCount" : 347029707
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227073512,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 72421,
        "IOBytes" : {
          "Total" : 4568389746,
          "Details" : {
            "IR" : 446751060,
            "IW" : 0,
            "SR" : 2060819343,
            "SW" : 2060819343
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -786313167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1633711968,
            "rowCount" : 58346856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))]) "
          },
          "8" : {
            "sign" : 539582768,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 570878427,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : -1333222822,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1107414818241342170,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "11" : {
            "sign" : -1174074830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2567261664,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -1256480126,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 363286272,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))]) "
          },
          "5" : {
            "sign" : 1379098091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 664448890944805302,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "10" : {
            "sign" : 1132938378,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1867099392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#151, d_date#155, cume_sales#152] "
          },
          "6" : {
            "sign" : 1643448625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 775190372768939520,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : 578653672,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1107414818241342170,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1175941909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1410512193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1107414818241342170,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -629719592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 415184310,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "3" : {
            "sign" : 527561687,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1107414818241342170,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- LogicalQueryStage Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))])\n                  +- Project [item_sk#151, d_date#155, cume_sales#152]\n                     +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1996998240,
        "inputRowCount" : 69699552
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 28,
        "FinishedTasksTotalTimeInMs" : 135796.0,
        "FinishedTasksDistributionInMs" : [ 877.0, 1032.0, 1125.0, 9608.0, 16629.0 ]
      },
      "StartTimeInMs" : 1702227115976,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 29957,
        "IOBytes" : {
          "Total" : 4319043050,
          "Details" : {
            "IR" : 340276117,
            "IW" : 0,
            "SR" : 2060819343,
            "SW" : 1917947590
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 952188729,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1259769888,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : -642607105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 23836307614030080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "5" : {
            "sign" : -1844270860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14301784568418048,
            "rowCount" : 297953845175376,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "6" : {
            "sign" : -1371613880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16685415329821056,
            "rowCount" : 297953845175376,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : -2125020393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 23836307614030080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1248858716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 948052730,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 23836307614030080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1217586620,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 544929408,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#149, d_date#46, cume_sales#150], ShuffleQueryStage 8 "
          },
          "3" : {
            "sign" : 231487304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23836307614030080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- LogicalQueryStage Project [item_sk#149, d_date#46, cume_sales#150], ShuffleQueryStage 8\n                  +- LogicalQueryStage Project [item_sk#151, d_date#155, cume_sales#152], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1804699296,
        "inputRowCount" : 37597902
      },
      "PD" : {
        "5" : [ 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 964044, 961603, 964044, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 964044, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 959383, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 964044, 964044, 961603, 964044, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603 ],
        "4" : [ 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2096289, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227137952,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7981,
        "IOBytes" : {
          "Total" : 1766006445,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1174147102,
            "SW" : 591859343
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -786313167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 839846592,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))]) "
          },
          "8" : {
            "sign" : 1582914088,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2687549040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "4" : {
            "sign" : 1972462162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 2680078843171024456,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "11" : {
            "sign" : -1174074830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 1319758930,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : -943193350,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1710258480,
            "rowCount" : 61080660,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5 "
          },
          "5" : {
            "sign" : -1235986893,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1608047305902614674,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "10" : {
            "sign" : 1132938378,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 959824676,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#151, d_date#155, cume_sales#152] "
          },
          "6" : {
            "sign" : 696873833,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1876055190219717120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          },
          "1" : {
            "sign" : 67205360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2680078843171024456,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -751656371,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 366926199,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2680078843171024456,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 655768784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1954581120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "3" : {
            "sign" : 1018648351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2680078843171024456,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Window",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- LogicalQueryStage Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], ShuffleQueryStage 5\n                  +- Project [item_sk#151, d_date#155, cume_sales#152]\n                     +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                        +- LogicalQueryStage Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2550105072,
        "inputRowCount" : 87325866
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227116566,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 29367,
        "IOBytes" : {
          "Total" : 3656901866,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2060819343,
            "SW" : 1596082523
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1209590839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "1" : {
            "sign" : 1288641353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1943613596,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8000,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 8000,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -714420942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1266910394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 5459543588,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Window",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], true\n      +- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n         +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n            +- Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n               +- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n                  :- Project [item_sk#149, d_date#46, cume_sales#150]\n                  :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                  :     +- Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12]\n                  :        +- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n                  :           +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n                  :              :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n                  :              :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43])\n                  :              :     :  +- Project [d_date_sk#44, d_date#46]\n                  :              :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n                  :              :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n                  :              +- Project [d_date_sk#44, d_date#46]\n                  :                 +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n                  +- Project [item_sk#151, d_date#155, cume_sales#152]\n                     +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                        +- Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73]\n                           +- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n                              +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#153)\n                                 :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n                                 :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94])\n                                 :     :  +- Project [d_date_sk#153, d_date#155]\n                                 :     :     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                                 :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n                                 :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n                                 +- Project [d_date_sk#153, d_date#155]\n                                    +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                                       +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1964930127,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2073265992,
            "rowCount" : 28795361,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [item_sk#143, d_date#144, web_sales#145, store_sales#146] Arguments: 9 "
          },
          "1" : {
            "sign" : -1483932420,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 5459543588,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [item_sk#143, d_date#144, web_sales#145, store_sales#146, web_cumulative#147, store_cumulative#148] Condition : ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148)) "
          },
          "0" : {
            "sign" : 2105064900,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [6]: [item_sk#143, d_date#144, web_sales#145, store_sales#146, web_cumulative#147, store_cumulative#148] Arguments: 100, [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], [item_sk#143, d_date#144, web_sales#145, store_sales#146, web_cumulative#147, store_cumulative#148] "
          },
          "2" : {
            "sign" : 1324350917,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 5459543588,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item_sk#143, d_date#144, web_sales#145, store_sales#146] Arguments: [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST] "
          },
          "3" : {
            "sign" : 37737320,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item_sk#143, d_date#144, web_sales#145, store_sales#146] Arguments: [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[item_sk#143 ASC NULLS FIRST,d_date#144 ASC NULLS FIRST], output=[item_sk#143,d_date#144,web_sales#145,store_sales#146,web_cumulative#147,store_cumulative#148])\n+- Filter ((isnotnull(web_cumulative#147) AND isnotnull(store_cumulative#148)) AND (web_cumulative#147 > store_cumulative#148))\n   +- Window [max(web_sales#145) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#147, max(store_sales#146) windowspecdefinition(item_sk#143, d_date#144 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#148], [item_sk#143], [d_date#144 ASC NULLS FIRST]\n      +- Sort [item_sk#143 ASC NULLS FIRST, d_date#144 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 9\n            +- Exchange hashpartitioning(item_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=1135]\n               +- *(13) Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n                  +- *(13) SortMergeJoin [item_sk#149, d_date#46], [item_sk#151, d_date#155], FullOuter\n                     :- *(11) Sort [item_sk#149 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0\n                     :  +- AQEShuffleRead coalesced\n                     :     +- ShuffleQueryStage 8\n                     :        +- Exchange hashpartitioning(item_sk#149, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=1030]\n                     :           +- *(10) Project [item_sk#149, d_date#46, cume_sales#150]\n                     :              +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n                     :                 +- *(9) Sort [ws_item_sk#12 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0\n                     :                    +- AQEShuffleRead coalesced\n                     :                       +- ShuffleQueryStage 5\n                     :                          +- Exchange hashpartitioning(ws_item_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=757]\n                     :                             +- *(5) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))], output=[item_sk#149, d_date#46, _w0#186, ws_item_sk#12])\n                     :                                +- AQEShuffleRead coalesced\n                     :                                   +- ShuffleQueryStage 3\n                     :                                      +- Exchange hashpartitioning(ws_item_sk#12, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=552]\n                     :                                         +- *(3) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[partial_sum(UnscaledValue(ws_sales_price#30))], output=[ws_item_sk#12, d_date#46, sum#199L])\n                     :                                            +- *(3) Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n                     :                                               +- *(3) BroadcastHashJoin [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight, false\n                     :                                                  :- *(3) Filter isnotnull(ws_item_sk#12)\n                     :                                                  :  +- *(3) ColumnarToRow\n                     :                                                  :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#12,ws_sales_price#30,ws_sold_date_sk#43] Batched: true, DataFilters: [isnotnull(ws_item_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>\n                     :                                                  :           +- SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n                     :                                                  :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                          +- == Final Plan ==\n                                                                                             BroadcastQueryStage 1\n                                                                                             +- ReusedExchange [d_date_sk#44, d_date#46], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                                                                                          +- == Initial Plan ==\n                                                                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=518]\n                                                                                             +- Project [d_date_sk#44, d_date#46]\n                                                                                                +- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                                                                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n                     :                                                  +- BroadcastQueryStage 0\n                     :                                                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                     :                                                        +- *(1) Project [d_date_sk#44, d_date#46]\n                     :                                                           +- *(1) Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                     :                                                              +- *(1) ColumnarToRow\n                     :                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n                     +- *(12) Sort [item_sk#151 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 7\n                              +- Exchange hashpartitioning(item_sk#151, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=948]\n                                 +- *(8) Project [item_sk#151, d_date#155, cume_sales#152]\n                                    +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                                       +- *(7) Sort [ss_item_sk#73 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0\n                                          +- AQEShuffleRead coalesced\n                                             +- ShuffleQueryStage 6\n                                                +- Exchange hashpartitioning(ss_item_sk#73, 200), ENSURE_REQUIREMENTS, [plan_id=850]\n                                                   +- *(6) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))], output=[item_sk#151, d_date#155, _w0#187, ss_item_sk#73])\n                                                      +- AQEShuffleRead coalesced\n                                                         +- ShuffleQueryStage 4\n                                                            +- Exchange hashpartitioning(ss_item_sk#73, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=615]\n                                                               +- *(4) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[partial_sum(UnscaledValue(ss_sales_price#84))], output=[ss_item_sk#73, d_date#155, sum#201L])\n                                                                  +- *(4) Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n                                                                     +- *(4) BroadcastHashJoin [ss_sold_date_sk#94], [d_date_sk#153], Inner, BuildRight, false\n                                                                        :- *(4) Filter isnotnull(ss_item_sk#73)\n                                                                        :  +- *(4) ColumnarToRow\n                                                                        :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#73,ss_sales_price#84,ss_sold_date_sk#94] Batched: true, DataFilters: [isnotnull(ss_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>\n                                                                        :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n                                                                        +- BroadcastQueryStage 2\n                                                                           +- ReusedExchange [d_date_sk#153, d_date#155], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2073265992,
        "inputRowCount" : 28795361
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 3061167, 3044743, 3015647, 3061167, 3061167, 2899263, 3349221, 2782879, 2811975, 3349221, 3061167, 2841071, 3317215, 2986551, 3061167, 3061167, 3125179, 3125179, 3367288, 3367288, 3125179, 3349221, 3061167, 3044743, 3061167, 3061167, 3061167, 3044743, 3093173, 3044743, 3367288, 3061167, 3125179, 2870167, 3061167, 3061167, 2957455, 2782879, 2782879, 3349221, 3061167, 3061167, 3015647, 3189191, 3061167, 3061167, 3285209, 3044743, 3044743, 3317215, 3349221, 3349221, 3044743, 3253203, 3061167, 3317215, 3349221, 3093173, 3044743, 3061167, 2986551, 3061167, 3061167, 3349221, 3061167, 3044743, 3349221, 3061167, 3061167, 3061167, 3093173, 3044743, 3285209, 3061167, 3061167, 3061167, 3044743, 3061167, 3061167, 3015647, 3044743, 2782879, 3349221, 3061167, 3061167, 3044743, 3015647, 3367288, 3349221, 3044743, 3349221, 3044743, 3061167, 3015647, 3061167, 3061167, 3044743, 3044743, 3349221, 3044743, 3061167, 3093173, 3061167, 3349221, 3044743, 3061167, 3061167, 3349221, 3044743, 3061167, 3061167, 3157185, 2928359, 3367288, 2782879, 3044743, 3061167, 3044743, 2986551, 3061167, 3061167, 3061167, 3367288, 3044743, 3044743, 3061167, 3061167, 2767948, 3061167, 3044743, 3044743, 3044743, 3221197, 3061167, 3061167, 3125179, 3061167, 3061167, 3061167, 3044743, 3061167, 3061167, 3349221, 3061167, 3061167, 3044743, 3044743, 3044743, 3349221, 3093173, 3061167, 2782879, 3061167, 3044743, 3125179, 3437700, 3125179, 3349221, 3044743, 3044743, 2928359, 3093173, 3044743, 3061167, 3349221, 3061167, 3061167, 3015647, 3061167, 3044743, 2767948, 3253203, 3253203, 3061167, 3253203, 3044743, 2782879, 2986551, 3044743, 3044743, 3044743, 3221197, 3044743, 3061167, 3367288, 3367288, 3044743, 3189191, 3061167, 3044743, 3044743, 3061167, 3349221, 3044743, 3044743, 3044743, 3061167, 3061167, 3349221, 3061167 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 2581,
        "TotalTasksDurationInMs" : 20231,
        "IOBytes" : {
          "Total" : 591859343,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 591859343,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -786313167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 839846592,
                "rowCount" : 26245206
              },
              "compileTime" : {
                "sizeInBytes" : 1633711968,
                "rowCount" : 58346856
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73], HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -851442787,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 839846592,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_item_sk#73, d_date#155, sum#201L] Keys [2]: [ss_item_sk#73, d_date#155] Functions [1]: [sum(UnscaledValue(ss_sales_price#84))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#84))#182L] Results [4]: [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84))#182L,17,2) AS _w0#187, ss_item_sk#73] "
          },
          "1" : {
            "sign" : 203940632,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1633711968,
            "rowCount" : 58346856,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_item_sk#73, d_date#155, sum#201L] Arguments: 4 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))], output=[item_sk#151, d_date#155, _w0#187, ss_item_sk#73])\n+- ShuffleQueryStage 4\n   +- Exchange hashpartitioning(ss_item_sk#73, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=615]\n      +- *(4) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[partial_sum(UnscaledValue(ss_sales_price#84))], output=[ss_item_sk#73, d_date#155, sum#201L])\n         +- *(4) Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n            +- *(4) BroadcastHashJoin [ss_sold_date_sk#94], [d_date_sk#153], Inner, BuildRight, false\n               :- *(4) Filter isnotnull(ss_item_sk#73)\n               :  +- *(4) ColumnarToRow\n               :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#73,ss_sales_price#84,ss_sold_date_sk#94] Batched: true, DataFilters: [isnotnull(ss_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>\n               :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n               +- BroadcastQueryStage 2\n                  +- ReusedExchange [d_date_sk#153, d_date#155], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 839846592,
        "inputRowCount" : 26245206
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 1715066, 1713764, 1714241, 1702774, 1690749, 1713764, 1699751, 1703161, 1702729, 1702639, 1712720, 1718998, 1702729, 1717441, 1720300, 1702252, 1704820, 1729988, 1718485, 1706964, 1702216, 1723710, 1690218, 1708788, 1720300, 1700695, 1721961, 1694747, 1713242, 1723719, 1696496, 1719265, 1708008, 1713764, 1708530, 1714286, 1713728, 1713242, 1686808, 1717441, 1718998, 1702774, 1731649, 1712720, 1719520, 1713719, 1713764, 1718998, 1735744, 1719997, 1695974, 1685506, 1724232, 1685983, 1713242, 1712720, 1708008, 1710971, 1698842, 1721136, 1720300, 1692648, 1710354, 1689705, 1719520, 1710309, 1703032, 1714022, 1720429, 1713719, 1724754, 1706928, 1713719, 1708625, 1708008, 1708485, 1712207, 1713242, 1720137, 1713764, 1702252, 1724232, 1713764, 1714151, 1724754, 1709310, 1696973, 1705075, 1713242, 1721299, 1691739, 1708008, 1719520, 1708008, 1712720, 1718476, 1691217, 1724754, 1702216, 1719520, 1701208, 1699319, 1712207, 1713764, 1708530, 1713242, 1699319, 1713719, 1702252, 1701730, 1696496, 1719475, 1720951, 1709310, 1713242, 1714241, 1735744, 1718998, 1708530, 1702207, 1697495, 1702216, 1713764, 1713242, 1699100, 1719520, 1704076, 1714241, 1723710, 1730510, 1703554, 1692564, 1716919, 1705929, 1708266, 1707486, 1713764, 1702729, 1680749, 1699841, 1702216, 1701217, 1708530, 1708485, 1714763, 1712729, 1718998, 1718998, 1707486, 1699229, 1714763, 1714241, 1708008, 1695461, 1725276, 1718476, 1724754, 1708485, 1720300, 1719997, 1696496, 1699319, 1718476, 1707486, 1709007, 1708530, 1706964, 1715066, 1706973, 1706964, 1708485, 1717963, 1735744, 1725231, 1720300, 1699936, 1697018, 1685506, 1719475, 1713242, 1718485, 1718998, 1713764, 1718476, 1710831, 1718998, 1703296, 1702729, 1708008, 1718476, 1719997, 1707486, 1708008, 1705929, 1702252, 1713242, 1712207, 1691217, 1718998, 1713764 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 12395,
        "TotalTasksDurationInMs" : 59799,
        "IOBytes" : {
          "Total" : 613679559,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 321865067,
            "SW" : 291814492
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 425643266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1867099392,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1867099392,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#151, d_date#155, cume_sales#152] "
          },
          "1" : {
            "sign" : -843163792,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2567261664,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2567261664,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#151, d_date#155, cume_sales#152]\n+- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n   +- Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73]\n      +- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n         +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#153)\n            :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n            :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94])\n            :     :  +- Project [d_date_sk#153, d_date#155]\n            :     :     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n            +- Project [d_date_sk#153, d_date#155]\n               +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2078272599,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1867099392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [item_sk#151, d_date#155, cume_sales#152] Input [5]: [item_sk#151, d_date#155, _w0#187, ss_item_sk#73, cume_sales#152] "
          },
          "1" : {
            "sign" : -856294475,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 2567261664,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item_sk#151, d_date#155, _w0#187, ss_item_sk#73] Arguments: [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST] "
          },
          "2" : {
            "sign" : 454625122,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item_sk#151, d_date#155, _w0#187, ss_item_sk#73] Arguments: [ss_item_sk#73 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1623748784,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1049808240,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [item_sk#151, d_date#155, _w0#187, ss_item_sk#73] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#151, d_date#155, cume_sales#152]\n+- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n   +- Sort [ss_item_sk#73 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 6\n         +- Exchange hashpartitioning(ss_item_sk#73, 200), ENSURE_REQUIREMENTS, [plan_id=850]\n            +- *(6) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))], output=[item_sk#151, d_date#155, _w0#187, ss_item_sk#73])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 4\n                     +- Exchange hashpartitioning(ss_item_sk#73, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=615]\n                        +- *(4) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[partial_sum(UnscaledValue(ss_sales_price#84))], output=[ss_item_sk#73, d_date#155, sum#201L])\n                           +- *(4) Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n                              +- *(4) BroadcastHashJoin [ss_sold_date_sk#94], [d_date_sk#153], Inner, BuildRight, false\n                                 :- *(4) Filter isnotnull(ss_item_sk#73)\n                                 :  +- *(4) ColumnarToRow\n                                 :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#73,ss_sales_price#84,ss_sold_date_sk#94] Batched: true, DataFilters: [isnotnull(ss_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>\n                                 :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n                                 +- BroadcastQueryStage 2\n                                    +- ReusedExchange [d_date_sk#153, d_date#155], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1049808240,
        "inputRowCount" : 26245206
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 1512365, 1512365, 1485914, 1512365, 1512365, 1406561, 1663601, 1374876, 1380110, 1663601, 1512365, 1380110, 1605409, 1459463, 1512365, 1512365, 1518121, 1518121, 1663601, 1663601, 1512365, 1663601, 1518121, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1669933, 1512365, 1512365, 1401327, 1512365, 1512365, 1427778, 1374876, 1374876, 1663601, 1512365, 1512365, 1512365, 1518121, 1512365, 1512365, 1576313, 1512365, 1512365, 1605409, 1663601, 1663601, 1512365, 1547217, 1512365, 1628749, 1663601, 1512365, 1512365, 1512365, 1454229, 1512365, 1512365, 1663601, 1518121, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1512365, 1634505, 1512365, 1512365, 1518121, 1512365, 1512365, 1512365, 1512365, 1512365, 1380110, 1663601, 1512365, 1512365, 1512365, 1512365, 1663601, 1663601, 1512365, 1663601, 1512365, 1518121, 1459463, 1518121, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1663601, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1518121, 1433012, 1663601, 1374876, 1512365, 1512365, 1512365, 1433012, 1512365, 1518121, 1512365, 1663601, 1512365, 1512365, 1518121, 1518121, 1374876, 1512365, 1512365, 1512365, 1512365, 1576313, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1512365, 1518121, 1512365, 1663601, 1512365, 1512365, 1512365, 1512365, 1512365, 1663601, 1518121, 1512365, 1374876, 1518121, 1512365, 1512365, 1669933, 1512365, 1663601, 1512365, 1512365, 1433012, 1512365, 1512365, 1512365, 1663601, 1518121, 1512365, 1485914, 1518121, 1512365, 1374876, 1512365, 1547217, 1512365, 1576313, 1512365, 1374876, 1427778, 1512365, 1512365, 1512365, 1541461, 1512365, 1512365, 1663601, 1663601, 1512365, 1518121, 1512365, 1512365, 1512365, 1512365, 1663601, 1512365, 1512365, 1512365, 1512365, 1512365, 1663601, 1518121 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 13703.0,
        "FinishedTasksDistributionInMs" : [ 1411.0, 1411.0, 12292.0, 12292.0, 12292.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 8136,
        "TotalTasksDurationInMs" : 35188,
        "IOBytes" : {
          "Total" : 694380615,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 291814492,
            "SW" : 402566123
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1924758045,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1954581120,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1954581120,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#149, d_date#46, cume_sales#150] "
          },
          "1" : {
            "sign" : -943338309,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2687549040,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2687549040,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#149, d_date#46, cume_sales#150]\n+- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n   +- Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12]\n      +- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n         +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n            :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n            :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43])\n            :     :  +- Project [d_date_sk#44, d_date#46]\n            :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n            :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n            :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n            +- Project [d_date_sk#44, d_date#46]\n               +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n                  +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -863715527,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1954581120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [item_sk#149, d_date#46, cume_sales#150] Input [5]: [item_sk#149, d_date#46, _w0#186, ws_item_sk#12, cume_sales#150] "
          },
          "1" : {
            "sign" : 161782449,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 2687549040,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [4]: [item_sk#149, d_date#46, _w0#186, ws_item_sk#12] Arguments: [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST] "
          },
          "2" : {
            "sign" : -1542265009,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [item_sk#149, d_date#46, _w0#186, ws_item_sk#12] Arguments: [ws_item_sk#12 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 2074264027,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 454107840,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [item_sk#149, d_date#46, _w0#186, ws_item_sk#12] Arguments: 5 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Window",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#149, d_date#46, cume_sales#150]\n+- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n   +- Sort [ws_item_sk#12 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 5\n         +- Exchange hashpartitioning(ws_item_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=757]\n            +- *(5) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))], output=[item_sk#149, d_date#46, _w0#186, ws_item_sk#12])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 3\n                     +- Exchange hashpartitioning(ws_item_sk#12, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=552]\n                        +- *(3) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[partial_sum(UnscaledValue(ws_sales_price#30))], output=[ws_item_sk#12, d_date#46, sum#199L])\n                           +- *(3) Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n                              +- *(3) BroadcastHashJoin [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight, false\n                                 :- *(3) Filter isnotnull(ws_item_sk#12)\n                                 :  +- *(3) ColumnarToRow\n                                 :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#12,ws_sales_price#30,ws_sold_date_sk#43] Batched: true, DataFilters: [isnotnull(ws_item_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>\n                                 :           +- SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n                                 :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#44, d_date#46], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=518]\n                                                      +- Project [d_date_sk#44, d_date#46]\n                                                         +- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n                                 +- BroadcastQueryStage 0\n                                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                                       +- *(1) Project [d_date_sk#44, d_date#46]\n                                          +- *(1) Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                                             +- *(1) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 454107840,
        "inputRowCount" : 11352696
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 694097, 694097, 630997, 694097, 694097, 630997, 705315, 630997, 630997, 705315, 667646, 630997, 694097, 630997, 694097, 694097, 694097, 694097, 763507, 763507, 694097, 705315, 694097, 667646, 694097, 694097, 694097, 694097, 694097, 641195, 763507, 694097, 694097, 630997, 694097, 694097, 630997, 630997, 630997, 763507, 694097, 694097, 641195, 694097, 694097, 694097, 694097, 641195, 641195, 694097, 723193, 734411, 683899, 694097, 694097, 694097, 705315, 694097, 641195, 694097, 630997, 694097, 694097, 763507, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 694097, 641195, 694097, 630997, 705315, 694097, 694097, 694097, 641195, 705315, 694097, 694097, 694097, 641195, 694097, 630997, 694097, 694097, 694097, 694097, 705315, 641195, 694097, 694097, 694097, 705315, 694097, 694097, 694097, 734411, 641195, 694097, 694097, 694097, 630997, 734411, 630997, 694097, 694097, 641195, 630997, 694097, 694097, 694097, 763507, 694097, 694097, 694097, 694097, 606951, 694097, 641195, 694097, 667646, 694097, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 694097, 694097, 694097, 694097, 694097, 641195, 694097, 705315, 694097, 694097, 630997, 694097, 694097, 694097, 763507, 694097, 694097, 641195, 641195, 630997, 694097, 641195, 694097, 705315, 694097, 694097, 630997, 694097, 694097, 630997, 694097, 694097, 694097, 694097, 630997, 630997, 630997, 694097, 694097, 657448, 694097, 630997, 694097, 763507, 763507, 641195, 694097, 694097, 641195, 641195, 694097, 705315, 641195, 694097, 630997, 694097, 694097, 734411, 694097 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 8590,
        "TotalTasksDurationInMs" : 17822,
        "IOBytes" : {
          "Total" : 309842565,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 130120929,
            "SW" : 179721636
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 464153210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43]) "
          },
          "5" : {
            "sign" : 1662135528,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#10, ws_ship_date_sk#11, ws_item_sk#12, ws_bill_customer_sk#13, ws_bill_cdemo_sk#14, ws_bill_hdemo_sk#15, ws_bill_addr_sk#16, ws_ship_customer_sk#17, ws_ship_cdemo_sk#18, ws_ship_hdemo_sk#19, ws_ship_addr_sk#20, ws_web_page_sk#21, ws_web_site_sk#22, ws_ship_mode_sk#23, ws_warehouse_sk#24, ws_promo_sk#25, ws_order_number#26L, ws_quantity#27, ws_wholesale_cost#28, ws_list_price#29, ws_sales_price#30, ws_ext_discount_amt#31, ws_ext_sales_price#32, ws_ext_wholesale_cost#33, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -2111201226,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, d_date#46] "
          },
          "0" : {
            "sign" : -1037259405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1710258480,
                "rowCount" : 61080660
              },
              "compileTime" : {
                "sizeInBytes" : 1710258480,
                "rowCount" : 61080660
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12] "
          },
          "2" : {
            "sign" : -1864777745,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#43 = d_date_sk#44) "
          },
          "3" : {
            "sign" : -1703879056,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727606976,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 1727606976,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12]\n+- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n   +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n      :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n      :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43])\n      :     :  +- Project [d_date_sk#44, d_date#46]\n      :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n      +- Project [d_date_sk#44, d_date#46]\n         +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -2037958919,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)] PushedFilters: [IsNotNull(ws_item_sk)] ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)> "
          },
          "5" : {
            "sign" : -756588999,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#44, d_date#46] Arguments: 0 "
          },
          "1" : {
            "sign" : 438562262,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_item_sk#12, ws_sales_price#30, d_date#46] Input [5]: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43, d_date_sk#44, d_date#46] "
          },
          "0" : {
            "sign" : 1444442190,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1710258480,
            "rowCount" : 61080660,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_item_sk#12, ws_sales_price#30, d_date#46] Keys [2]: [ws_item_sk#12, d_date#46] Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#30))] Aggregate Attributes [1]: [sum#198L] Results [3]: [ws_item_sk#12, d_date#46, sum#199L] "
          },
          "2" : {
            "sign" : 1543829243,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#43] Right keys [1]: [d_date_sk#44] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1641441787,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43] Condition : isnotnull(ws_item_sk#12) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[partial_sum(UnscaledValue(ws_sales_price#30))], output=[ws_item_sk#12, d_date#46, sum#199L])\n+- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n   +- BroadcastHashJoin [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight, false\n      :- Filter isnotnull(ws_item_sk#12)\n      :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#12,ws_sales_price#30,ws_sold_date_sk#43] Batched: true, DataFilters: [isnotnull(ws_item_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>\n      :        +- SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n      :           +- AdaptiveSparkPlan isFinalPlan=false\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=518]\n      :                 +- Project [d_date_sk#44, d_date#46]\n      :                    +- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n      +- BroadcastQueryStage 0\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n            +- *(1) Project [d_date_sk#44, d_date#46]\n               +- *(1) Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                  +- *(1) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1728658472,
        "inputRowCount" : 71983989
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 41959,
        "TotalTasksDurationInMs" : 510095,
        "IOBytes" : {
          "Total" : 249346696,
          "Details" : {
            "IR" : 106474943,
            "IW" : 0,
            "SR" : 0,
            "SW" : 142871753
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1260230494,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5376,
                "rowCount" : 336
              },
              "compileTime" : {
                "sizeInBytes" : 5376,
                "rowCount" : 336
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#44, d_date#46] "
          },
          "1" : {
            "sign" : -464477344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 82656,
                "rowCount" : 336
              },
              "compileTime" : {
                "sizeInBytes" : 82656,
                "rowCount" : 336
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44)) "
          },
          "2" : {
            "sign" : 700042170,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#44, d_date_id#45, d_date#46, d_month_seq#47, d_week_seq#48, d_quarter_seq#49, d_year#50, d_dow#51, d_moy#52, d_dom#53, d_qoy#54, d_fy_year#55, d_fy_quarter_seq#56, d_fy_week_seq#57, d_day_name#58, d_quarter_name#59, d_holiday#60, d_weekend#61, d_following_holiday#62, d_first_dom#63, d_last_dom#64, d_same_day_ly#65, d_same_day_lq#66, d_current_day#67, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#44, d_date#46]\n+- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1367827618,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5376,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [d_date_sk#44, d_date#46] Input [3]: [d_date_sk#44, d_date#46, d_month_seq#47] "
          },
          "1" : {
            "sign" : -693327228,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 5376,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#44, d_date#46, d_month_seq#47] Condition : (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44)) "
          },
          "2" : {
            "sign" : -1669097682,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 5376,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#44, d_date#46, d_month_seq#47] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#44, d_date#46]\n+- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5376,
        "inputRowCount" : 336
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1289,
        "TotalTasksDurationInMs" : 1276,
        "IOBytes" : {
          "Total" : 193066,
          "Details" : {
            "IR" : 193066,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1758129210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94]) "
          },
          "5" : {
            "sign" : 1366518144,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#72, ss_item_sk#73, ss_customer_sk#74, ss_cdemo_sk#75, ss_hdemo_sk#76, ss_addr_sk#77, ss_store_sk#78, ss_promo_sk#79, ss_ticket_number#80L, ss_quantity#81, ss_wholesale_cost#82, ss_list_price#83, ss_sales_price#84, ss_ext_discount_amt#85, ss_ext_sales_price#86, ss_ext_wholesale_cost#87, ss_ext_list_price#88, ss_ext_tax#89, ss_coupon_amt#90, ss_net_paid#91, ss_net_paid_inc_tax#92, ss_net_profit#93, ss_sold_date_sk#94], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 723676126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, d_date#155] "
          },
          "0" : {
            "sign" : -901000087,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1633711968,
                "rowCount" : 58346856
              },
              "compileTime" : {
                "sizeInBytes" : 1633711968,
                "rowCount" : 58346856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73] "
          },
          "2" : {
            "sign" : 1835916276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#94 = d_date_sk#153) "
          },
          "3" : {
            "sign" : 1864132572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6601088472,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 6601088472,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73]\n+- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n   +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#153)\n      :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n      :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94])\n      :     :  +- Project [d_date_sk#153, d_date#155]\n      :     :     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n      +- Project [d_date_sk#153, d_date#155]\n         +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1693710189,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)] PushedFilters: [IsNotNull(ss_item_sk)] ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)> "
          },
          "5" : {
            "sign" : -1762623645,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#153, d_date#155] Arguments: 2 "
          },
          "1" : {
            "sign" : 107374165,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_item_sk#73, ss_sales_price#84, d_date#155] Input [5]: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94, d_date_sk#153, d_date#155] "
          },
          "0" : {
            "sign" : -1679965370,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1633711968,
            "rowCount" : 58346856,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_item_sk#73, ss_sales_price#84, d_date#155] Keys [2]: [ss_item_sk#73, d_date#155] Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#84))] Aggregate Attributes [1]: [sum#200L] Results [3]: [ss_item_sk#73, d_date#155, sum#201L] "
          },
          "2" : {
            "sign" : -926956293,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#94] Right keys [1]: [d_date_sk#153] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -877513266,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6601088472,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94] Condition : isnotnull(ss_item_sk#73) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[partial_sum(UnscaledValue(ss_sales_price#84))], output=[ss_item_sk#73, d_date#155, sum#201L])\n+- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n   +- BroadcastHashJoin [ss_sold_date_sk#94], [d_date_sk#153], Inner, BuildRight, false\n      :- Filter isnotnull(ss_item_sk#73)\n      :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#73,ss_sales_price#84,ss_sold_date_sk#94] Batched: true, DataFilters: [isnotnull(ss_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>\n      :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n      +- BroadcastQueryStage 2\n         +- ReusedExchange [d_date_sk#153, d_date#155], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6602139968,
        "inputRowCount" : 275045718
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 42461,
        "TotalTasksDurationInMs" : 148267,
        "IOBytes" : {
          "Total" : 662141184,
          "Details" : {
            "IR" : 340276117,
            "IW" : 0,
            "SR" : 0,
            "SW" : 321865067
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 152860070,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275726153,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3275726153,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] "
          },
          "1" : {
            "sign" : -547458688,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3821680512,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3821680512,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n+- Join FullOuter, ((item_sk#149 = item_sk#151) AND (d_date#46 = d_date#155))\n   :- Project [item_sk#149, d_date#46, cume_sales#150]\n   :  +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n   :     +- Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12]\n   :        +- Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n   :           +- Join Inner, (ws_sold_date_sk#43 = d_date_sk#44)\n   :              :- Project [ws_item_sk#12, ws_sales_price#30, ws_sold_date_sk#43]\n   :              :  +- Filter ((isnotnull(ws_item_sk#12) AND isnotnull(ws_sold_date_sk#43)) AND dynamicpruning#196 [ws_sold_date_sk#43])\n   :              :     :  +- Project [d_date_sk#44, d_date#46]\n   :              :     :     +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n   :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n   :              :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#10,ws_ship_date_sk#11,ws_item_sk#12,ws_bill_customer_sk#13,ws_bill_cdemo_sk#14,ws_bill_hdemo_sk#15,ws_bill_addr_sk#16,ws_ship_customer_sk#17,ws_ship_cdemo_sk#18,ws_ship_hdemo_sk#19,ws_ship_addr_sk#20,ws_web_page_sk#21,ws_web_site_sk#22,ws_ship_mode_sk#23,ws_warehouse_sk#24,ws_promo_sk#25,ws_order_number#26L,ws_quantity#27,ws_wholesale_cost#28,ws_list_price#29,ws_sales_price#30,ws_ext_discount_amt#31,ws_ext_sales_price#32,ws_ext_wholesale_cost#33,... 10 more fields] parquet\n   :              +- Project [d_date_sk#44, d_date#46]\n   :                 +- Filter ((isnotnull(d_month_seq#47) AND ((d_month_seq#47 >= 1212) AND (d_month_seq#47 <= 1223))) AND isnotnull(d_date_sk#44))\n   :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date_id#45,d_date#46,d_month_seq#47,d_week_seq#48,d_quarter_seq#49,d_year#50,d_dow#51,d_moy#52,d_dom#53,d_qoy#54,d_fy_year#55,d_fy_quarter_seq#56,d_fy_week_seq#57,d_day_name#58,d_quarter_name#59,d_holiday#60,d_weekend#61,d_following_holiday#62,d_first_dom#63,d_last_dom#64,d_same_day_ly#65,d_same_day_lq#66,d_current_day#67,... 4 more fields] parquet\n   +- Project [item_sk#151, d_date#155, cume_sales#152]\n      +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n         +- Aggregate [ss_item_sk#73, d_date#155], [ss_item_sk#73 AS item_sk#151, d_date#155, MakeDecimal(sum(UnscaledValue(ss_sales_price#84)),17,2) AS _w0#187, ss_item_sk#73]\n            +- Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n               +- Join Inner, (ss_sold_date_sk#94 = d_date_sk#153)\n                  :- Project [ss_item_sk#73, ss_sales_price#84, ss_sold_date_sk#94]\n                  :  +- Filter ((isnotnull(ss_item_sk#73) AND isnotnull(ss_sold_date_sk#94)) AND dynamicpruning#197 [ss_sold_date_sk#94])\n                  :     :  +- Project [d_date_sk#153, d_date#155]\n                  :     :     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n                  :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#72,ss_item_sk#73,ss_customer_sk#74,ss_cdemo_sk#75,ss_hdemo_sk#76,ss_addr_sk#77,ss_store_sk#78,ss_promo_sk#79,ss_ticket_number#80L,ss_quantity#81,ss_wholesale_cost#82,ss_list_price#83,ss_sales_price#84,ss_ext_discount_amt#85,ss_ext_sales_price#86,ss_ext_wholesale_cost#87,ss_ext_list_price#88,ss_ext_tax#89,ss_coupon_amt#90,ss_net_paid#91,ss_net_paid_inc_tax#92,ss_net_profit#93,ss_sold_date_sk#94] parquet\n                  +- Project [d_date_sk#153, d_date#155]\n                     +- Filter ((isnotnull(d_month_seq#156) AND ((d_month_seq#156 >= 1212) AND (d_month_seq#156 <= 1223))) AND isnotnull(d_date_sk#153))\n                        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#153,d_date_id#154,d_date#155,d_month_seq#156,d_week_seq#157,d_quarter_seq#158,d_year#159,d_dow#160,d_moy#161,d_dom#162,d_qoy#163,d_fy_year#164,d_fy_quarter_seq#165,d_fy_week_seq#166,d_day_name#167,d_quarter_name#168,d_holiday#169,d_weekend#170,d_following_holiday#171,d_first_dom#172,d_last_dom#173,d_same_day_ly#174,d_same_day_lq#175,d_current_day#176,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1772932996,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [item_sk#151, d_date#155, cume_sales#152] Arguments: [item_sk#151 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1742562684,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1259769888,
            "rowCount" : 26245206,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [item_sk#151, d_date#155, cume_sales#152] Arguments: 7 "
          },
          "1" : {
            "sign" : 115924184,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 3821680512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [item_sk#149, d_date#46] Right keys [2]: [item_sk#151, d_date#155] Join type: FullOuter Join condition: None "
          },
          "0" : {
            "sign" : 467244716,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3275726153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146] Input [6]: [item_sk#149, d_date#46, cume_sales#150, item_sk#151, d_date#155, cume_sales#152] "
          },
          "2" : {
            "sign" : 935983027,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [item_sk#149, d_date#46, cume_sales#150] Arguments: [item_sk#149 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 593067489,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 544929408,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [item_sk#149, d_date#46, cume_sales#150] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [CASE WHEN isnotnull(item_sk#149) THEN item_sk#149 ELSE item_sk#151 END AS item_sk#143, CASE WHEN isnotnull(d_date#46) THEN d_date#46 ELSE d_date#155 END AS d_date#144, cume_sales#150 AS web_sales#145, cume_sales#152 AS store_sales#146]\n+- SortMergeJoin [item_sk#149, d_date#46], [item_sk#151, d_date#155], FullOuter\n   :- Sort [item_sk#149 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 8\n   :     +- Exchange hashpartitioning(item_sk#149, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=1030]\n   :        +- *(10) Project [item_sk#149, d_date#46, cume_sales#150]\n   :           +- Window [sum(_w0#186) windowspecdefinition(ws_item_sk#12, d_date#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#150], [ws_item_sk#12], [d_date#46 ASC NULLS FIRST]\n   :              +- *(9) Sort [ws_item_sk#12 ASC NULLS FIRST, d_date#46 ASC NULLS FIRST], false, 0\n   :                 +- AQEShuffleRead coalesced\n   :                    +- ShuffleQueryStage 5\n   :                       +- Exchange hashpartitioning(ws_item_sk#12, 200), ENSURE_REQUIREMENTS, [plan_id=757]\n   :                          +- *(5) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))], output=[item_sk#149, d_date#46, _w0#186, ws_item_sk#12])\n   :                             +- AQEShuffleRead coalesced\n   :                                +- ShuffleQueryStage 3\n   :                                   +- Exchange hashpartitioning(ws_item_sk#12, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=552]\n   :                                      +- *(3) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[partial_sum(UnscaledValue(ws_sales_price#30))], output=[ws_item_sk#12, d_date#46, sum#199L])\n   :                                         +- *(3) Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n   :                                            +- *(3) BroadcastHashJoin [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight, false\n   :                                               :- *(3) Filter isnotnull(ws_item_sk#12)\n   :                                               :  +- *(3) ColumnarToRow\n   :                                               :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#12,ws_sales_price#30,ws_sold_date_sk#43] Batched: true, DataFilters: [isnotnull(ws_item_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>\n   :                                               :           +- SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n   :                                               :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        BroadcastQueryStage 1\n                                                                        +- ReusedExchange [d_date_sk#44, d_date#46], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                                                                     +- == Initial Plan ==\n                                                                        BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=518]\n                                                                        +- Project [d_date_sk#44, d_date#46]\n                                                                           +- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n   :                                               +- BroadcastQueryStage 0\n   :                                                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n   :                                                     +- *(1) Project [d_date_sk#44, d_date#46]\n   :                                                        +- *(1) Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n   :                                                           +- *(1) ColumnarToRow\n   :                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n   +- Sort [item_sk#151 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 7\n         +- Exchange hashpartitioning(item_sk#151, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=948]\n            +- *(8) Project [item_sk#151, d_date#155, cume_sales#152]\n               +- Window [sum(_w0#187) windowspecdefinition(ss_item_sk#73, d_date#155 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#152], [ss_item_sk#73], [d_date#155 ASC NULLS FIRST]\n                  +- *(7) Sort [ss_item_sk#73 ASC NULLS FIRST, d_date#155 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 6\n                           +- Exchange hashpartitioning(ss_item_sk#73, 200), ENSURE_REQUIREMENTS, [plan_id=850]\n                              +- *(6) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[sum(UnscaledValue(ss_sales_price#84))], output=[item_sk#151, d_date#155, _w0#187, ss_item_sk#73])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 4\n                                       +- Exchange hashpartitioning(ss_item_sk#73, d_date#155, 200), ENSURE_REQUIREMENTS, [plan_id=615]\n                                          +- *(4) HashAggregate(keys=[ss_item_sk#73, d_date#155], functions=[partial_sum(UnscaledValue(ss_sales_price#84))], output=[ss_item_sk#73, d_date#155, sum#201L])\n                                             +- *(4) Project [ss_item_sk#73, ss_sales_price#84, d_date#155]\n                                                +- *(4) BroadcastHashJoin [ss_sold_date_sk#94], [d_date_sk#153], Inner, BuildRight, false\n                                                   :- *(4) Filter isnotnull(ss_item_sk#73)\n                                                   :  +- *(4) ColumnarToRow\n                                                   :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#73,ss_sales_price#84,ss_sold_date_sk#94] Batched: true, DataFilters: [isnotnull(ss_item_sk#73)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>\n                                                   :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n                                                   +- BroadcastQueryStage 2\n                                                      +- ReusedExchange [d_date_sk#153, d_date#155], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1804699296,
        "inputRowCount" : 37597902
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 964044, 961603, 964044, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 964044, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 959383, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 964044, 964044, 961603, 964044, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 961603, 964044, 961603, 961603, 961603, 961603, 961603 ],
        "4" : [ 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2165340, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889, 2096289, 2138889, 2138889, 2138889, 2138889, 2138889, 2138889 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 5056,
        "TotalTasksDurationInMs" : 44713,
        "IOBytes" : {
          "Total" : 1174147102,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 582287759,
            "SW" : 591859343
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1256480126,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 363286272,
                "rowCount" : 11352696
              },
              "compileTime" : {
                "sizeInBytes" : 1710258480,
                "rowCount" : 61080660
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ws_item_sk#12, d_date#46], [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30)),17,2) AS _w0#186, ws_item_sk#12], HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2094939835,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 363286272,
            "rowCount" : 11352696,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_item_sk#12, d_date#46, sum#199L] Keys [2]: [ws_item_sk#12, d_date#46] Functions [1]: [sum(UnscaledValue(ws_sales_price#30))] Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#30))#181L] Results [4]: [ws_item_sk#12 AS item_sk#149, d_date#46, MakeDecimal(sum(UnscaledValue(ws_sales_price#30))#181L,17,2) AS _w0#186, ws_item_sk#12] "
          },
          "1" : {
            "sign" : 1350267691,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1710258480,
            "rowCount" : 61080660,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ws_item_sk#12, d_date#46, sum#199L] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[sum(UnscaledValue(ws_sales_price#30))], output=[item_sk#149, d_date#46, _w0#186, ws_item_sk#12])\n+- ShuffleQueryStage 3\n   +- Exchange hashpartitioning(ws_item_sk#12, d_date#46, 200), ENSURE_REQUIREMENTS, [plan_id=552]\n      +- *(3) HashAggregate(keys=[ws_item_sk#12, d_date#46], functions=[partial_sum(UnscaledValue(ws_sales_price#30))], output=[ws_item_sk#12, d_date#46, sum#199L])\n         +- *(3) Project [ws_item_sk#12, ws_sales_price#30, d_date#46]\n            +- *(3) BroadcastHashJoin [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight, false\n               :- *(3) Filter isnotnull(ws_item_sk#12)\n               :  +- *(3) ColumnarToRow\n               :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#12,ws_sales_price#30,ws_sold_date_sk#43] Batched: true, DataFilters: [isnotnull(ws_item_sk#12)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#196)], PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>\n               :           +- SubqueryBroadcast dynamicpruning#196, 0, [d_date_sk#44], [id=#521]\n               :              +- AdaptiveSparkPlan isFinalPlan=true\n                                 +- == Final Plan ==\n                                    BroadcastQueryStage 1\n                                    +- ReusedExchange [d_date_sk#44, d_date#46], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                                 +- == Initial Plan ==\n                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=518]\n                                    +- Project [d_date_sk#44, d_date#46]\n                                       +- Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n               +- BroadcastQueryStage 0\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=279]\n                     +- *(1) Project [d_date_sk#44, d_date#46]\n                        +- *(1) Filter (((isnotnull(d_month_seq#47) AND (d_month_seq#47 >= 1212)) AND (d_month_seq#47 <= 1223)) AND isnotnull(d_date_sk#44))\n                           +- *(1) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#44,d_date#46,d_month_seq#47] Batched: true, DataFilters: [isnotnull(d_month_seq#47), (d_month_seq#47 >= 1212), (d_month_seq#47 <= 1223), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223),..., ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 363286272,
        "inputRowCount" : 11352696
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 746283, 753601, 754972, 744087, 743109, 761982, 741133, 758358, 762414, 754972, 751586, 760611, 748968, 753725, 752737, 749400, 769962, 751922, 752018, 753169, 760122, 760179, 732444, 761004, 748632, 753994, 763785, 751798, 758319, 745890, 749276, 760880, 757887, 745485, 741565, 749995, 743655, 753169, 744087, 753601, 741526, 755404, 767008, 748844, 769693, 745621, 744912, 753725, 752900, 752018, 758751, 764390, 763785, 749237, 754972, 760611, 746283, 748805, 745026, 749669, 755854, 744643, 747041, 758358, 759729, 753601, 748632, 759297, 759509, 751040, 756516, 745890, 738784, 758751, 753169, 744912, 762251, 756775, 757437, 750608, 753332, 751040, 759633, 754540, 750867, 746283, 747261, 746283, 753169, 750608, 752018, 751040, 759633, 743368, 757926, 765205, 748844, 751097, 749237, 758089, 750215, 751040, 751586, 748844, 756123, 743329, 745458, 748844, 744480, 754972, 762414, 752623, 753601, 740587, 762251, 748575, 750215, 754972, 751798, 754972, 759297, 749400, 759633, 741565, 750647, 765637, 745890, 759297, 751979, 769261, 737633, 757926, 750608, 742936, 745890, 749946, 760065, 755308, 748844, 751529, 758376, 751040, 759633, 762683, 754972, 753169, 755365, 741565, 759729, 750215, 755404, 758050, 757380, 747424, 746446, 754972, 763958, 748363, 755854, 755308, 757225, 749669, 748632, 757926, 741958, 745458, 757494, 750647, 757926, 766739, 757926, 757926, 757926, 746283, 768379, 749237, 741257, 752843, 756555, 749237, 751529, 769962, 736482, 762683, 734247, 750934, 756987, 764178, 758808, 760179, 763795, 768283, 760880, 753994, 752623, 753169, 747654, 751154, 753073, 756343 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 28,
        "FinishedTasksTotalTimeInMs" : 135796.0,
        "FinishedTasksDistributionInMs" : [ 877.0, 1032.0, 1125.0, 9608.0, 16629.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 13208,
        "TotalTasksDurationInMs" : 26903,
        "IOBytes" : {
          "Total" : 272992682,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 142871753,
            "SW" : 130120929
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227071579,
  "SQLEndTimeInMs" : 1702227145933,
  "Objectives" : {
    "DurationInMs" : 74354,
    "IOBytes" : {
      "Total" : 4568582812,
      "Details" : {
        "IR" : 446944126,
        "IW" : 0,
        "SR" : 2060819343,
        "SW" : 2060819343
      }
    }
  }
}
